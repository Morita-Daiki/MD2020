
MD2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003744  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003804  08003804  00013804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800384c  0800384c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800384c  0800384c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800384c  0800384c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800384c  0800384c  0001384c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003850  08003850  00013850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  2000000c  08003860  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08003860  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d054  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002354  00000000  00000000  0002d088  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e68  00000000  00000000  0002f3e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d20  00000000  00000000  00030248  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000162c8  00000000  00000000  00030f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c5aa  00000000  00000000  00047230  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00079fd1  00000000  00000000  000537da  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cd7ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003298  00000000  00000000  000cd828  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080037ec 	.word	0x080037ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080037ec 	.word	0x080037ec

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	0018      	movs	r0, r3
 800022a:	230c      	movs	r3, #12
 800022c:	001a      	movs	r2, r3
 800022e:	2100      	movs	r1, #0
 8000230:	f003 fad4 	bl	80037dc <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000234:	4b33      	ldr	r3, [pc, #204]	; (8000304 <MX_ADC_Init+0xe4>)
 8000236:	4a34      	ldr	r2, [pc, #208]	; (8000308 <MX_ADC_Init+0xe8>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800023a:	4b32      	ldr	r3, [pc, #200]	; (8000304 <MX_ADC_Init+0xe4>)
 800023c:	2200      	movs	r2, #0
 800023e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000240:	4b30      	ldr	r3, [pc, #192]	; (8000304 <MX_ADC_Init+0xe4>)
 8000242:	2200      	movs	r2, #0
 8000244:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000246:	4b2f      	ldr	r3, [pc, #188]	; (8000304 <MX_ADC_Init+0xe4>)
 8000248:	2200      	movs	r2, #0
 800024a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800024c:	4b2d      	ldr	r3, [pc, #180]	; (8000304 <MX_ADC_Init+0xe4>)
 800024e:	2201      	movs	r2, #1
 8000250:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000252:	4b2c      	ldr	r3, [pc, #176]	; (8000304 <MX_ADC_Init+0xe4>)
 8000254:	2204      	movs	r2, #4
 8000256:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000258:	4b2a      	ldr	r3, [pc, #168]	; (8000304 <MX_ADC_Init+0xe4>)
 800025a:	2200      	movs	r2, #0
 800025c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800025e:	4b29      	ldr	r3, [pc, #164]	; (8000304 <MX_ADC_Init+0xe4>)
 8000260:	2200      	movs	r2, #0
 8000262:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000264:	4b27      	ldr	r3, [pc, #156]	; (8000304 <MX_ADC_Init+0xe4>)
 8000266:	2201      	movs	r2, #1
 8000268:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800026a:	4b26      	ldr	r3, [pc, #152]	; (8000304 <MX_ADC_Init+0xe4>)
 800026c:	2200      	movs	r2, #0
 800026e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000270:	4b24      	ldr	r3, [pc, #144]	; (8000304 <MX_ADC_Init+0xe4>)
 8000272:	22c2      	movs	r2, #194	; 0xc2
 8000274:	32ff      	adds	r2, #255	; 0xff
 8000276:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000278:	4b22      	ldr	r3, [pc, #136]	; (8000304 <MX_ADC_Init+0xe4>)
 800027a:	2200      	movs	r2, #0
 800027c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800027e:	4b21      	ldr	r3, [pc, #132]	; (8000304 <MX_ADC_Init+0xe4>)
 8000280:	2224      	movs	r2, #36	; 0x24
 8000282:	2101      	movs	r1, #1
 8000284:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000286:	4b1f      	ldr	r3, [pc, #124]	; (8000304 <MX_ADC_Init+0xe4>)
 8000288:	2201      	movs	r2, #1
 800028a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800028c:	4b1d      	ldr	r3, [pc, #116]	; (8000304 <MX_ADC_Init+0xe4>)
 800028e:	0018      	movs	r0, r3
 8000290:	f000 fece 	bl	8001030 <HAL_ADC_Init>
 8000294:	1e03      	subs	r3, r0, #0
 8000296:	d001      	beq.n	800029c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000298:	f000 faf1 	bl	800087e <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2203      	movs	r2, #3
 80002a0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2280      	movs	r2, #128	; 0x80
 80002a6:	0152      	lsls	r2, r2, #5
 80002a8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2280      	movs	r2, #128	; 0x80
 80002ae:	0552      	lsls	r2, r2, #21
 80002b0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002b2:	1d3a      	adds	r2, r7, #4
 80002b4:	4b13      	ldr	r3, [pc, #76]	; (8000304 <MX_ADC_Init+0xe4>)
 80002b6:	0011      	movs	r1, r2
 80002b8:	0018      	movs	r0, r3
 80002ba:	f000 fff9 	bl	80012b0 <HAL_ADC_ConfigChannel>
 80002be:	1e03      	subs	r3, r0, #0
 80002c0:	d001      	beq.n	80002c6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80002c2:	f000 fadc 	bl	800087e <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2204      	movs	r2, #4
 80002ca:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002cc:	1d3a      	adds	r2, r7, #4
 80002ce:	4b0d      	ldr	r3, [pc, #52]	; (8000304 <MX_ADC_Init+0xe4>)
 80002d0:	0011      	movs	r1, r2
 80002d2:	0018      	movs	r0, r3
 80002d4:	f000 ffec 	bl	80012b0 <HAL_ADC_ConfigChannel>
 80002d8:	1e03      	subs	r3, r0, #0
 80002da:	d001      	beq.n	80002e0 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80002dc:	f000 facf 	bl	800087e <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2205      	movs	r2, #5
 80002e4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002e6:	1d3a      	adds	r2, r7, #4
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <MX_ADC_Init+0xe4>)
 80002ea:	0011      	movs	r1, r2
 80002ec:	0018      	movs	r0, r3
 80002ee:	f000 ffdf 	bl	80012b0 <HAL_ADC_ConfigChannel>
 80002f2:	1e03      	subs	r3, r0, #0
 80002f4:	d001      	beq.n	80002fa <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80002f6:	f000 fac2 	bl	800087e <Error_Handler>
  }

}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	46bd      	mov	sp, r7
 80002fe:	b004      	add	sp, #16
 8000300:	bd80      	pop	{r7, pc}
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	20000090 	.word	0x20000090
 8000308:	40012400 	.word	0x40012400

0800030c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b08a      	sub	sp, #40	; 0x28
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000314:	2314      	movs	r3, #20
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	0018      	movs	r0, r3
 800031a:	2314      	movs	r3, #20
 800031c:	001a      	movs	r2, r3
 800031e:	2100      	movs	r1, #0
 8000320:	f003 fa5c 	bl	80037dc <memset>
  if(adcHandle->Instance==ADC1)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a2d      	ldr	r2, [pc, #180]	; (80003e0 <HAL_ADC_MspInit+0xd4>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d154      	bne.n	80003d8 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800032e:	4b2d      	ldr	r3, [pc, #180]	; (80003e4 <HAL_ADC_MspInit+0xd8>)
 8000330:	699a      	ldr	r2, [r3, #24]
 8000332:	4b2c      	ldr	r3, [pc, #176]	; (80003e4 <HAL_ADC_MspInit+0xd8>)
 8000334:	2180      	movs	r1, #128	; 0x80
 8000336:	0089      	lsls	r1, r1, #2
 8000338:	430a      	orrs	r2, r1
 800033a:	619a      	str	r2, [r3, #24]
 800033c:	4b29      	ldr	r3, [pc, #164]	; (80003e4 <HAL_ADC_MspInit+0xd8>)
 800033e:	699a      	ldr	r2, [r3, #24]
 8000340:	2380      	movs	r3, #128	; 0x80
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	4013      	ands	r3, r2
 8000346:	613b      	str	r3, [r7, #16]
 8000348:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800034a:	4b26      	ldr	r3, [pc, #152]	; (80003e4 <HAL_ADC_MspInit+0xd8>)
 800034c:	695a      	ldr	r2, [r3, #20]
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <HAL_ADC_MspInit+0xd8>)
 8000350:	2180      	movs	r1, #128	; 0x80
 8000352:	0289      	lsls	r1, r1, #10
 8000354:	430a      	orrs	r2, r1
 8000356:	615a      	str	r2, [r3, #20]
 8000358:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <HAL_ADC_MspInit+0xd8>)
 800035a:	695a      	ldr	r2, [r3, #20]
 800035c:	2380      	movs	r3, #128	; 0x80
 800035e:	029b      	lsls	r3, r3, #10
 8000360:	4013      	ands	r3, r2
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5 
    */
    GPIO_InitStruct.Pin = INA199_REF_Pin|INA199_OUT_Pin|BATT_VOLT_Pin;
 8000366:	2114      	movs	r1, #20
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2238      	movs	r2, #56	; 0x38
 800036c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800036e:	187b      	adds	r3, r7, r1
 8000370:	2203      	movs	r2, #3
 8000372:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800037a:	187a      	adds	r2, r7, r1
 800037c:	2390      	movs	r3, #144	; 0x90
 800037e:	05db      	lsls	r3, r3, #23
 8000380:	0011      	movs	r1, r2
 8000382:	0018      	movs	r0, r3
 8000384:	f001 fb84 	bl	8001a90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000388:	4b17      	ldr	r3, [pc, #92]	; (80003e8 <HAL_ADC_MspInit+0xdc>)
 800038a:	4a18      	ldr	r2, [pc, #96]	; (80003ec <HAL_ADC_MspInit+0xe0>)
 800038c:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800038e:	4b16      	ldr	r3, [pc, #88]	; (80003e8 <HAL_ADC_MspInit+0xdc>)
 8000390:	2200      	movs	r2, #0
 8000392:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000394:	4b14      	ldr	r3, [pc, #80]	; (80003e8 <HAL_ADC_MspInit+0xdc>)
 8000396:	2200      	movs	r2, #0
 8000398:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800039a:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <HAL_ADC_MspInit+0xdc>)
 800039c:	2280      	movs	r2, #128	; 0x80
 800039e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <HAL_ADC_MspInit+0xdc>)
 80003a2:	2280      	movs	r2, #128	; 0x80
 80003a4:	0052      	lsls	r2, r2, #1
 80003a6:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <HAL_ADC_MspInit+0xdc>)
 80003aa:	2280      	movs	r2, #128	; 0x80
 80003ac:	00d2      	lsls	r2, r2, #3
 80003ae:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80003b0:	4b0d      	ldr	r3, [pc, #52]	; (80003e8 <HAL_ADC_MspInit+0xdc>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80003b6:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <HAL_ADC_MspInit+0xdc>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80003bc:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <HAL_ADC_MspInit+0xdc>)
 80003be:	0018      	movs	r0, r3
 80003c0:	f001 fa60 	bl	8001884 <HAL_DMA_Init>
 80003c4:	1e03      	subs	r3, r0, #0
 80003c6:	d001      	beq.n	80003cc <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80003c8:	f000 fa59 	bl	800087e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4a06      	ldr	r2, [pc, #24]	; (80003e8 <HAL_ADC_MspInit+0xdc>)
 80003d0:	631a      	str	r2, [r3, #48]	; 0x30
 80003d2:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <HAL_ADC_MspInit+0xdc>)
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003d8:	46c0      	nop			; (mov r8, r8)
 80003da:	46bd      	mov	sp, r7
 80003dc:	b00a      	add	sp, #40	; 0x28
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	40012400 	.word	0x40012400
 80003e4:	40021000 	.word	0x40021000
 80003e8:	2000004c 	.word	0x2000004c
 80003ec:	40020008 	.word	0x40020008

080003f0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0

  hcan.Instance = CAN;
 80003f4:	4b18      	ldr	r3, [pc, #96]	; (8000458 <MX_CAN_Init+0x68>)
 80003f6:	4a19      	ldr	r2, [pc, #100]	; (800045c <MX_CAN_Init+0x6c>)
 80003f8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 80003fa:	4b17      	ldr	r3, [pc, #92]	; (8000458 <MX_CAN_Init+0x68>)
 80003fc:	2203      	movs	r2, #3
 80003fe:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000400:	4b15      	ldr	r3, [pc, #84]	; (8000458 <MX_CAN_Init+0x68>)
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000406:	4b14      	ldr	r3, [pc, #80]	; (8000458 <MX_CAN_Init+0x68>)
 8000408:	2200      	movs	r2, #0
 800040a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800040c:	4b12      	ldr	r3, [pc, #72]	; (8000458 <MX_CAN_Init+0x68>)
 800040e:	22c0      	movs	r2, #192	; 0xc0
 8000410:	0312      	lsls	r2, r2, #12
 8000412:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000414:	4b10      	ldr	r3, [pc, #64]	; (8000458 <MX_CAN_Init+0x68>)
 8000416:	2280      	movs	r2, #128	; 0x80
 8000418:	0352      	lsls	r2, r2, #13
 800041a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800041c:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <MX_CAN_Init+0x68>)
 800041e:	2200      	movs	r2, #0
 8000420:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000422:	4b0d      	ldr	r3, [pc, #52]	; (8000458 <MX_CAN_Init+0x68>)
 8000424:	2200      	movs	r2, #0
 8000426:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000428:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <MX_CAN_Init+0x68>)
 800042a:	2200      	movs	r2, #0
 800042c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800042e:	4b0a      	ldr	r3, [pc, #40]	; (8000458 <MX_CAN_Init+0x68>)
 8000430:	2200      	movs	r2, #0
 8000432:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000434:	4b08      	ldr	r3, [pc, #32]	; (8000458 <MX_CAN_Init+0x68>)
 8000436:	2200      	movs	r2, #0
 8000438:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800043a:	4b07      	ldr	r3, [pc, #28]	; (8000458 <MX_CAN_Init+0x68>)
 800043c:	2200      	movs	r2, #0
 800043e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000440:	4b05      	ldr	r3, [pc, #20]	; (8000458 <MX_CAN_Init+0x68>)
 8000442:	0018      	movs	r0, r3
 8000444:	f001 f842 	bl	80014cc <HAL_CAN_Init>
 8000448:	1e03      	subs	r3, r0, #0
 800044a:	d001      	beq.n	8000450 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800044c:	f000 fa17 	bl	800087e <Error_Handler>
  }

}
 8000450:	46c0      	nop			; (mov r8, r8)
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	200000d0 	.word	0x200000d0
 800045c:	40006400 	.word	0x40006400

08000460 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b08a      	sub	sp, #40	; 0x28
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000468:	2314      	movs	r3, #20
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	0018      	movs	r0, r3
 800046e:	2314      	movs	r3, #20
 8000470:	001a      	movs	r2, r3
 8000472:	2100      	movs	r1, #0
 8000474:	f003 f9b2 	bl	80037dc <memset>
  if(canHandle->Instance==CAN)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a1d      	ldr	r2, [pc, #116]	; (80004f4 <HAL_CAN_MspInit+0x94>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d133      	bne.n	80004ea <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000482:	4b1d      	ldr	r3, [pc, #116]	; (80004f8 <HAL_CAN_MspInit+0x98>)
 8000484:	69da      	ldr	r2, [r3, #28]
 8000486:	4b1c      	ldr	r3, [pc, #112]	; (80004f8 <HAL_CAN_MspInit+0x98>)
 8000488:	2180      	movs	r1, #128	; 0x80
 800048a:	0489      	lsls	r1, r1, #18
 800048c:	430a      	orrs	r2, r1
 800048e:	61da      	str	r2, [r3, #28]
 8000490:	4b19      	ldr	r3, [pc, #100]	; (80004f8 <HAL_CAN_MspInit+0x98>)
 8000492:	69da      	ldr	r2, [r3, #28]
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	049b      	lsls	r3, r3, #18
 8000498:	4013      	ands	r3, r2
 800049a:	613b      	str	r3, [r7, #16]
 800049c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800049e:	4b16      	ldr	r3, [pc, #88]	; (80004f8 <HAL_CAN_MspInit+0x98>)
 80004a0:	695a      	ldr	r2, [r3, #20]
 80004a2:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <HAL_CAN_MspInit+0x98>)
 80004a4:	2180      	movs	r1, #128	; 0x80
 80004a6:	0289      	lsls	r1, r1, #10
 80004a8:	430a      	orrs	r2, r1
 80004aa:	615a      	str	r2, [r3, #20]
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <HAL_CAN_MspInit+0x98>)
 80004ae:	695a      	ldr	r2, [r3, #20]
 80004b0:	2380      	movs	r3, #128	; 0x80
 80004b2:	029b      	lsls	r3, r3, #10
 80004b4:	4013      	ands	r3, r2
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80004ba:	2114      	movs	r1, #20
 80004bc:	187b      	adds	r3, r7, r1
 80004be:	22c0      	movs	r2, #192	; 0xc0
 80004c0:	0152      	lsls	r2, r2, #5
 80004c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2202      	movs	r2, #2
 80004c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2200      	movs	r2, #0
 80004ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2203      	movs	r2, #3
 80004d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2204      	movs	r2, #4
 80004da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004dc:	187a      	adds	r2, r7, r1
 80004de:	2390      	movs	r3, #144	; 0x90
 80004e0:	05db      	lsls	r3, r3, #23
 80004e2:	0011      	movs	r1, r2
 80004e4:	0018      	movs	r0, r3
 80004e6:	f001 fad3 	bl	8001a90 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b00a      	add	sp, #40	; 0x28
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	40006400 	.word	0x40006400
 80004f8:	40021000 	.word	0x40021000

080004fc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000502:	4b10      	ldr	r3, [pc, #64]	; (8000544 <MX_DMA_Init+0x48>)
 8000504:	695a      	ldr	r2, [r3, #20]
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <MX_DMA_Init+0x48>)
 8000508:	2101      	movs	r1, #1
 800050a:	430a      	orrs	r2, r1
 800050c:	615a      	str	r2, [r3, #20]
 800050e:	4b0d      	ldr	r3, [pc, #52]	; (8000544 <MX_DMA_Init+0x48>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	2201      	movs	r2, #1
 8000514:	4013      	ands	r3, r2
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800051a:	2200      	movs	r2, #0
 800051c:	2100      	movs	r1, #0
 800051e:	2009      	movs	r0, #9
 8000520:	f001 f97e 	bl	8001820 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000524:	2009      	movs	r0, #9
 8000526:	f001 f990 	bl	800184a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800052a:	2200      	movs	r2, #0
 800052c:	2100      	movs	r1, #0
 800052e:	200b      	movs	r0, #11
 8000530:	f001 f976 	bl	8001820 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000534:	200b      	movs	r0, #11
 8000536:	f001 f988 	bl	800184a <HAL_NVIC_EnableIRQ>

}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	b002      	add	sp, #8
 8000540:	bd80      	pop	{r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	40021000 	.word	0x40021000

08000548 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000548:	b590      	push	{r4, r7, lr}
 800054a:	b089      	sub	sp, #36	; 0x24
 800054c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054e:	240c      	movs	r4, #12
 8000550:	193b      	adds	r3, r7, r4
 8000552:	0018      	movs	r0, r3
 8000554:	2314      	movs	r3, #20
 8000556:	001a      	movs	r2, r3
 8000558:	2100      	movs	r1, #0
 800055a:	f003 f93f 	bl	80037dc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055e:	4b26      	ldr	r3, [pc, #152]	; (80005f8 <MX_GPIO_Init+0xb0>)
 8000560:	695a      	ldr	r2, [r3, #20]
 8000562:	4b25      	ldr	r3, [pc, #148]	; (80005f8 <MX_GPIO_Init+0xb0>)
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	0289      	lsls	r1, r1, #10
 8000568:	430a      	orrs	r2, r1
 800056a:	615a      	str	r2, [r3, #20]
 800056c:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <MX_GPIO_Init+0xb0>)
 800056e:	695a      	ldr	r2, [r3, #20]
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	029b      	lsls	r3, r3, #10
 8000574:	4013      	ands	r3, r2
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057a:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <MX_GPIO_Init+0xb0>)
 800057c:	695a      	ldr	r2, [r3, #20]
 800057e:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <MX_GPIO_Init+0xb0>)
 8000580:	2180      	movs	r1, #128	; 0x80
 8000582:	02c9      	lsls	r1, r1, #11
 8000584:	430a      	orrs	r2, r1
 8000586:	615a      	str	r2, [r3, #20]
 8000588:	4b1b      	ldr	r3, [pc, #108]	; (80005f8 <MX_GPIO_Init+0xb0>)
 800058a:	695a      	ldr	r2, [r3, #20]
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	02db      	lsls	r3, r3, #11
 8000590:	4013      	ands	r3, r2
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RA_BK_Pin|LD5_11_Pin|LD4_10_Pin|LD3_9_Pin 
 8000596:	23fc      	movs	r3, #252	; 0xfc
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	4818      	ldr	r0, [pc, #96]	; (80005fc <MX_GPIO_Init+0xb4>)
 800059c:	2200      	movs	r2, #0
 800059e:	0019      	movs	r1, r3
 80005a0:	f001 fbfb 	bl	8001d9a <HAL_GPIO_WritePin>
                          |LD2_8_Pin|LD1_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW4_Pin|SW3_Pin|SW2_Pin;
 80005a4:	193b      	adds	r3, r7, r4
 80005a6:	22e0      	movs	r2, #224	; 0xe0
 80005a8:	00d2      	lsls	r2, r2, #3
 80005aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	2200      	movs	r2, #0
 80005b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	2201      	movs	r2, #1
 80005b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b8:	193a      	adds	r2, r7, r4
 80005ba:	2390      	movs	r3, #144	; 0x90
 80005bc:	05db      	lsls	r3, r3, #23
 80005be:	0011      	movs	r1, r2
 80005c0:	0018      	movs	r0, r3
 80005c2:	f001 fa65 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin */
  GPIO_InitStruct.Pin = RA_BK_Pin|LD5_11_Pin|LD4_10_Pin|LD3_9_Pin 
 80005c6:	0021      	movs	r1, r4
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	22fc      	movs	r2, #252	; 0xfc
 80005cc:	0052      	lsls	r2, r2, #1
 80005ce:	601a      	str	r2, [r3, #0]
                          |LD2_8_Pin|LD1_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2201      	movs	r2, #1
 80005d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	4a05      	ldr	r2, [pc, #20]	; (80005fc <MX_GPIO_Init+0xb4>)
 80005e6:	0019      	movs	r1, r3
 80005e8:	0010      	movs	r0, r2
 80005ea:	f001 fa51 	bl	8001a90 <HAL_GPIO_Init>

}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b009      	add	sp, #36	; 0x24
 80005f4:	bd90      	pop	{r4, r7, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	40021000 	.word	0x40021000
 80005fc:	48000400 	.word	0x48000400

08000600 <LED_Go2Go>:
	HAL_GPIO_WritePin(LD3_9_GPIO_Port, LD3_9_Pin, 1 & ((bits >> 2) ^ (sign)));
	HAL_GPIO_WritePin(LD4_10_GPIO_Port, LD4_10_Pin, 1 & ((bits >> 3) ^ (sign)));
	HAL_GPIO_WritePin(LD5_11_GPIO_Port, LD5_11_Pin, 1 & ((bits >> 4) ^ (sign)));
	HAL_GPIO_WritePin(RA_BK_GPIO_Port, RA_BK_Pin, sign);
}
void LED_Go2Go(int x) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RA_BK_GPIO_Port, RA_BK_Pin, x > 0);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	17da      	asrs	r2, r3, #31
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	0fdb      	lsrs	r3, r3, #31
 8000610:	b2db      	uxtb	r3, r3
 8000612:	001a      	movs	r2, r3
 8000614:	4b49      	ldr	r3, [pc, #292]	; (800073c <LED_Go2Go+0x13c>)
 8000616:	2108      	movs	r1, #8
 8000618:	0018      	movs	r0, r3
 800061a:	f001 fbbe 	bl	8001d9a <HAL_GPIO_WritePin>
	if (x > 0) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b00      	cmp	r3, #0
 8000622:	dd44      	ble.n	80006ae <LED_Go2Go+0xae>
		HAL_GPIO_WritePin(LD1_7_GPIO_Port, LD1_7_Pin, x < 5);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2204      	movs	r2, #4
 8000628:	0fd8      	lsrs	r0, r3, #31
 800062a:	17d1      	asrs	r1, r2, #31
 800062c:	429a      	cmp	r2, r3
 800062e:	4148      	adcs	r0, r1
 8000630:	0003      	movs	r3, r0
 8000632:	b2db      	uxtb	r3, r3
 8000634:	001a      	movs	r2, r3
 8000636:	2380      	movs	r3, #128	; 0x80
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	4840      	ldr	r0, [pc, #256]	; (800073c <LED_Go2Go+0x13c>)
 800063c:	0019      	movs	r1, r3
 800063e:	f001 fbac 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_8_GPIO_Port, LD2_8_Pin, x < 4);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2203      	movs	r2, #3
 8000646:	0fd8      	lsrs	r0, r3, #31
 8000648:	17d1      	asrs	r1, r2, #31
 800064a:	429a      	cmp	r2, r3
 800064c:	4148      	adcs	r0, r1
 800064e:	0003      	movs	r3, r0
 8000650:	b2db      	uxtb	r3, r3
 8000652:	001a      	movs	r2, r3
 8000654:	4b39      	ldr	r3, [pc, #228]	; (800073c <LED_Go2Go+0x13c>)
 8000656:	2180      	movs	r1, #128	; 0x80
 8000658:	0018      	movs	r0, r3
 800065a:	f001 fb9e 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_9_GPIO_Port, LD3_9_Pin, x < 3);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2202      	movs	r2, #2
 8000662:	0fd8      	lsrs	r0, r3, #31
 8000664:	17d1      	asrs	r1, r2, #31
 8000666:	429a      	cmp	r2, r3
 8000668:	4148      	adcs	r0, r1
 800066a:	0003      	movs	r3, r0
 800066c:	b2db      	uxtb	r3, r3
 800066e:	001a      	movs	r2, r3
 8000670:	4b32      	ldr	r3, [pc, #200]	; (800073c <LED_Go2Go+0x13c>)
 8000672:	2140      	movs	r1, #64	; 0x40
 8000674:	0018      	movs	r0, r3
 8000676:	f001 fb90 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_10_GPIO_Port, LD4_10_Pin, x < 2);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2201      	movs	r2, #1
 800067e:	0fd8      	lsrs	r0, r3, #31
 8000680:	17d1      	asrs	r1, r2, #31
 8000682:	429a      	cmp	r2, r3
 8000684:	4148      	adcs	r0, r1
 8000686:	0003      	movs	r3, r0
 8000688:	b2db      	uxtb	r3, r3
 800068a:	001a      	movs	r2, r3
 800068c:	4b2b      	ldr	r3, [pc, #172]	; (800073c <LED_Go2Go+0x13c>)
 800068e:	2120      	movs	r1, #32
 8000690:	0018      	movs	r0, r3
 8000692:	f001 fb82 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_11_GPIO_Port, LD5_11_Pin, x < 1);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	1e5a      	subs	r2, r3, #1
 800069a:	4313      	orrs	r3, r2
 800069c:	0fdb      	lsrs	r3, r3, #31
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	001a      	movs	r2, r3
 80006a2:	4b26      	ldr	r3, [pc, #152]	; (800073c <LED_Go2Go+0x13c>)
 80006a4:	2110      	movs	r1, #16
 80006a6:	0018      	movs	r0, r3
 80006a8:	f001 fb77 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_8_GPIO_Port, LD2_8_Pin, x < -1);
		HAL_GPIO_WritePin(LD3_9_GPIO_Port, LD3_9_Pin, x < -2);
		HAL_GPIO_WritePin(LD4_10_GPIO_Port, LD4_10_Pin, x < -3);
		HAL_GPIO_WritePin(LD5_11_GPIO_Port, LD5_11_Pin, x < -4);
	}
}
 80006ac:	e041      	b.n	8000732 <LED_Go2Go+0x132>
		HAL_GPIO_WritePin(LD1_7_GPIO_Port, LD1_7_Pin, x < 0);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	0fdb      	lsrs	r3, r3, #31
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	001a      	movs	r2, r3
 80006b6:	2380      	movs	r3, #128	; 0x80
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	4820      	ldr	r0, [pc, #128]	; (800073c <LED_Go2Go+0x13c>)
 80006bc:	0019      	movs	r1, r3
 80006be:	f001 fb6c 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_8_GPIO_Port, LD2_8_Pin, x < -1);
 80006c2:	2301      	movs	r3, #1
 80006c4:	1c1a      	adds	r2, r3, #0
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	3301      	adds	r3, #1
 80006ca:	db01      	blt.n	80006d0 <LED_Go2Go+0xd0>
 80006cc:	2300      	movs	r3, #0
 80006ce:	1c1a      	adds	r2, r3, #0
 80006d0:	b2d3      	uxtb	r3, r2
 80006d2:	001a      	movs	r2, r3
 80006d4:	4b19      	ldr	r3, [pc, #100]	; (800073c <LED_Go2Go+0x13c>)
 80006d6:	2180      	movs	r1, #128	; 0x80
 80006d8:	0018      	movs	r0, r3
 80006da:	f001 fb5e 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_9_GPIO_Port, LD3_9_Pin, x < -2);
 80006de:	2301      	movs	r3, #1
 80006e0:	1c1a      	adds	r2, r3, #0
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3302      	adds	r3, #2
 80006e6:	db01      	blt.n	80006ec <LED_Go2Go+0xec>
 80006e8:	2300      	movs	r3, #0
 80006ea:	1c1a      	adds	r2, r3, #0
 80006ec:	b2d3      	uxtb	r3, r2
 80006ee:	001a      	movs	r2, r3
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <LED_Go2Go+0x13c>)
 80006f2:	2140      	movs	r1, #64	; 0x40
 80006f4:	0018      	movs	r0, r3
 80006f6:	f001 fb50 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_10_GPIO_Port, LD4_10_Pin, x < -3);
 80006fa:	2301      	movs	r3, #1
 80006fc:	1c1a      	adds	r2, r3, #0
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3303      	adds	r3, #3
 8000702:	db01      	blt.n	8000708 <LED_Go2Go+0x108>
 8000704:	2300      	movs	r3, #0
 8000706:	1c1a      	adds	r2, r3, #0
 8000708:	b2d3      	uxtb	r3, r2
 800070a:	001a      	movs	r2, r3
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <LED_Go2Go+0x13c>)
 800070e:	2120      	movs	r1, #32
 8000710:	0018      	movs	r0, r3
 8000712:	f001 fb42 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_11_GPIO_Port, LD5_11_Pin, x < -4);
 8000716:	2301      	movs	r3, #1
 8000718:	1c1a      	adds	r2, r3, #0
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	3304      	adds	r3, #4
 800071e:	db01      	blt.n	8000724 <LED_Go2Go+0x124>
 8000720:	2300      	movs	r3, #0
 8000722:	1c1a      	adds	r2, r3, #0
 8000724:	b2d3      	uxtb	r3, r2
 8000726:	001a      	movs	r2, r3
 8000728:	4b04      	ldr	r3, [pc, #16]	; (800073c <LED_Go2Go+0x13c>)
 800072a:	2110      	movs	r1, #16
 800072c:	0018      	movs	r0, r3
 800072e:	f001 fb34 	bl	8001d9a <HAL_GPIO_WritePin>
}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b002      	add	sp, #8
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	48000400 	.word	0x48000400

08000740 <SW_Get_ID>:
int SW_Get_ID() {
 8000740:	b5b0      	push	{r4, r5, r7, lr}
 8000742:	af00      	add	r7, sp, #0
	return !HAL_GPIO_ReadPin(SW4_GPIO_Port, SW4_Pin) << 0 | //p1
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	005a      	lsls	r2, r3, #1
 8000748:	2390      	movs	r3, #144	; 0x90
 800074a:	05db      	lsls	r3, r3, #23
 800074c:	0011      	movs	r1, r2
 800074e:	0018      	movs	r0, r3
 8000750:	f001 fb06 	bl	8001d60 <HAL_GPIO_ReadPin>
 8000754:	0003      	movs	r3, r0
 8000756:	425a      	negs	r2, r3
 8000758:	4153      	adcs	r3, r2
 800075a:	b2db      	uxtb	r3, r3
 800075c:	001c      	movs	r4, r3
			!HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin) << 1 | //p2
 800075e:	2380      	movs	r3, #128	; 0x80
 8000760:	009a      	lsls	r2, r3, #2
 8000762:	2390      	movs	r3, #144	; 0x90
 8000764:	05db      	lsls	r3, r3, #23
 8000766:	0011      	movs	r1, r2
 8000768:	0018      	movs	r0, r3
 800076a:	f001 faf9 	bl	8001d60 <HAL_GPIO_ReadPin>
 800076e:	1e03      	subs	r3, r0, #0
 8000770:	d101      	bne.n	8000776 <SW_Get_ID+0x36>
 8000772:	2302      	movs	r3, #2
 8000774:	e000      	b.n	8000778 <SW_Get_ID+0x38>
 8000776:	2300      	movs	r3, #0
	return !HAL_GPIO_ReadPin(SW4_GPIO_Port, SW4_Pin) << 0 | //p1
 8000778:	431c      	orrs	r4, r3
			!HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) << 2; //p3
 800077a:	2380      	movs	r3, #128	; 0x80
 800077c:	00da      	lsls	r2, r3, #3
 800077e:	2390      	movs	r3, #144	; 0x90
 8000780:	05db      	lsls	r3, r3, #23
 8000782:	0011      	movs	r1, r2
 8000784:	0018      	movs	r0, r3
 8000786:	f001 faeb 	bl	8001d60 <HAL_GPIO_ReadPin>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d101      	bne.n	8000792 <SW_Get_ID+0x52>
 800078e:	2304      	movs	r3, #4
 8000790:	e000      	b.n	8000794 <SW_Get_ID+0x54>
 8000792:	2300      	movs	r3, #0
			!HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin) << 1 | //p2
 8000794:	4323      	orrs	r3, r4
}
 8000796:	0018      	movs	r0, r3
 8000798:	46bd      	mov	sp, r7
 800079a:	bdb0      	pop	{r4, r5, r7, pc}

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a2:	f000 fbbf 	bl	8000f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a6:	f000 f827 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007aa:	f7ff fecd 	bl	8000548 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ae:	f7ff fea5 	bl	80004fc <MX_DMA_Init>
  MX_ADC_Init();
 80007b2:	f7ff fd35 	bl	8000220 <MX_ADC_Init>
  MX_CAN_Init();
 80007b6:	f7ff fe1b 	bl	80003f0 <MX_CAN_Init>
  MX_TIM2_Init();
 80007ba:	f000 f8c7 	bl	800094c <MX_TIM2_Init>
  MX_TIM3_Init();
 80007be:	f000 f927 	bl	8000a10 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80007c2:	f000 fa99 	bl	8000cf8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
	while (1) {
//		double time = HAL_GetTick() / 1000.0;
//		A = SW_Get_ID() * sin(time*2*3.14);
//		LED_Go2Go(A);
		LED_Go2Go(5-SW_Get_ID());
 80007c6:	f7ff ffbb 	bl	8000740 <SW_Get_ID>
 80007ca:	0002      	movs	r2, r0
 80007cc:	2305      	movs	r3, #5
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	0018      	movs	r0, r3
 80007d2:	f7ff ff15 	bl	8000600 <LED_Go2Go>
		int duty[4]={10,250,500,990};
 80007d6:	003b      	movs	r3, r7
 80007d8:	4a06      	ldr	r2, [pc, #24]	; (80007f4 <main+0x58>)
 80007da:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007dc:	c313      	stmia	r3!, {r0, r1, r4}
 80007de:	6812      	ldr	r2, [r2, #0]
 80007e0:	601a      	str	r2, [r3, #0]
		PWM_4_Out(duty);
 80007e2:	003b      	movs	r3, r7
 80007e4:	0018      	movs	r0, r3
 80007e6:	f000 fa51 	bl	8000c8c <PWM_4_Out>
		HAL_Delay(10);
 80007ea:	200a      	movs	r0, #10
 80007ec:	f000 fbfe 	bl	8000fec <HAL_Delay>
	while (1) {
 80007f0:	e7e9      	b.n	80007c6 <main+0x2a>
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	08003804 	.word	0x08003804

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b093      	sub	sp, #76	; 0x4c
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	2414      	movs	r4, #20
 8000800:	193b      	adds	r3, r7, r4
 8000802:	0018      	movs	r0, r3
 8000804:	2334      	movs	r3, #52	; 0x34
 8000806:	001a      	movs	r2, r3
 8000808:	2100      	movs	r1, #0
 800080a:	f002 ffe7 	bl	80037dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	0018      	movs	r0, r3
 8000812:	2310      	movs	r3, #16
 8000814:	001a      	movs	r2, r3
 8000816:	2100      	movs	r1, #0
 8000818:	f002 ffe0 	bl	80037dc <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 800081c:	0021      	movs	r1, r4
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2230      	movs	r2, #48	; 0x30
 8000822:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2201      	movs	r2, #1
 8000828:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2201      	movs	r2, #1
 800082e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2210      	movs	r2, #16
 8000834:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2200      	movs	r2, #0
 800083a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083c:	187b      	adds	r3, r7, r1
 800083e:	0018      	movs	r0, r3
 8000840:	f001 fac8 	bl	8001dd4 <HAL_RCC_OscConfig>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000848:	f000 f819 	bl	800087e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2207      	movs	r2, #7
 8000850:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2203      	movs	r2, #3
 8000856:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2101      	movs	r1, #1
 8000868:	0018      	movs	r0, r3
 800086a:	f001 fe39 	bl	80024e0 <HAL_RCC_ClockConfig>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000872:	f000 f804 	bl	800087e <Error_Handler>
  }
}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	b013      	add	sp, #76	; 0x4c
 800087c:	bd90      	pop	{r4, r7, pc}

0800087e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <HAL_MspInit+0x44>)
 8000890:	699a      	ldr	r2, [r3, #24]
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <HAL_MspInit+0x44>)
 8000894:	2101      	movs	r1, #1
 8000896:	430a      	orrs	r2, r1
 8000898:	619a      	str	r2, [r3, #24]
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <HAL_MspInit+0x44>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	2201      	movs	r2, #1
 80008a0:	4013      	ands	r3, r2
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <HAL_MspInit+0x44>)
 80008a8:	69da      	ldr	r2, [r3, #28]
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <HAL_MspInit+0x44>)
 80008ac:	2180      	movs	r1, #128	; 0x80
 80008ae:	0549      	lsls	r1, r1, #21
 80008b0:	430a      	orrs	r2, r1
 80008b2:	61da      	str	r2, [r3, #28]
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <HAL_MspInit+0x44>)
 80008b6:	69da      	ldr	r2, [r3, #28]
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	055b      	lsls	r3, r3, #21
 80008bc:	4013      	ands	r3, r2
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b002      	add	sp, #8
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	40021000 	.word	0x40021000

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <HardFault_Handler+0x4>

080008e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008e4:	46c0      	nop			; (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f8:	f000 fb5c 	bl	8000fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000908:	4b03      	ldr	r3, [pc, #12]	; (8000918 <DMA1_Channel1_IRQHandler+0x14>)
 800090a:	0018      	movs	r0, r3
 800090c:	f001 f802 	bl	8001914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000910:	46c0      	nop			; (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	2000004c 	.word	0x2000004c

0800091c <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <DMA1_Channel4_5_IRQHandler+0x1c>)
 8000922:	0018      	movs	r0, r3
 8000924:	f000 fff6 	bl	8001914 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000928:	4b04      	ldr	r3, [pc, #16]	; (800093c <DMA1_Channel4_5_IRQHandler+0x20>)
 800092a:	0018      	movs	r0, r3
 800092c:	f000 fff2 	bl	8001914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	200001bc 	.word	0x200001bc
 800093c:	20000178 	.word	0x20000178

08000940 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void) {
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b08d      	sub	sp, #52	; 0x34
 8000950:	af00      	add	r7, sp, #0
	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8000952:	240c      	movs	r4, #12
 8000954:	193b      	adds	r3, r7, r4
 8000956:	0018      	movs	r0, r3
 8000958:	2324      	movs	r3, #36	; 0x24
 800095a:	001a      	movs	r2, r3
 800095c:	2100      	movs	r1, #0
 800095e:	f002 ff3d 	bl	80037dc <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	0018      	movs	r0, r3
 8000966:	2308      	movs	r3, #8
 8000968:	001a      	movs	r2, r3
 800096a:	2100      	movs	r1, #0
 800096c:	f002 ff36 	bl	80037dc <memset>

	htim2.Instance = TIM2;
 8000970:	4b26      	ldr	r3, [pc, #152]	; (8000a0c <MX_TIM2_Init+0xc0>)
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	05d2      	lsls	r2, r2, #23
 8000976:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000978:	4b24      	ldr	r3, [pc, #144]	; (8000a0c <MX_TIM2_Init+0xc0>)
 800097a:	2200      	movs	r2, #0
 800097c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097e:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <MX_TIM2_Init+0xc0>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0;
 8000984:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <MX_TIM2_Init+0xc0>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098a:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <MX_TIM2_Init+0xc0>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000990:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <MX_TIM2_Init+0xc0>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000996:	0021      	movs	r1, r4
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2201      	movs	r2, #1
 800099c:	601a      	str	r2, [r3, #0]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2200      	movs	r2, #0
 80009a2:	605a      	str	r2, [r3, #4]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2201      	movs	r2, #1
 80009a8:	609a      	str	r2, [r3, #8]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
	sConfig.IC1Filter = 0;
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2200      	movs	r2, #0
 80009ba:	615a      	str	r2, [r3, #20]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2201      	movs	r2, #1
 80009c0:	619a      	str	r2, [r3, #24]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	61da      	str	r2, [r3, #28]
	sConfig.IC2Filter = 0;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 80009ce:	187a      	adds	r2, r7, r1
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <MX_TIM2_Init+0xc0>)
 80009d2:	0011      	movs	r1, r2
 80009d4:	0018      	movs	r0, r3
 80009d6:	f001 ff6d 	bl	80028b4 <HAL_TIM_Encoder_Init>
 80009da:	1e03      	subs	r3, r0, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM2_Init+0x96>
		Error_Handler();
 80009de:	f7ff ff4e 	bl	800087e <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	2200      	movs	r2, #0
 80009ec:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80009ee:	1d3a      	adds	r2, r7, #4
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_TIM2_Init+0xc0>)
 80009f2:	0011      	movs	r1, r2
 80009f4:	0018      	movs	r0, r3
 80009f6:	f002 fb23 	bl	8003040 <HAL_TIMEx_MasterConfigSynchronization>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM2_Init+0xb6>
			!= HAL_OK) {
		Error_Handler();
 80009fe:	f7ff ff3e 	bl	800087e <Error_Handler>
	}

}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b00d      	add	sp, #52	; 0x34
 8000a08:	bd90      	pop	{r4, r7, pc}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	20000138 	.word	0x20000138

08000a10 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
//  TIM_MasterConfigTypeDef sMasterConfig = {0};
//  TIM_OC_InitTypeDef sConfigOC = {0};

	htim3.Instance = TIM3;
 8000a14:	4b32      	ldr	r3, [pc, #200]	; (8000ae0 <MX_TIM3_Init+0xd0>)
 8000a16:	4a33      	ldr	r2, [pc, #204]	; (8000ae4 <MX_TIM3_Init+0xd4>)
 8000a18:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 4;
 8000a1a:	4b31      	ldr	r3, [pc, #196]	; (8000ae0 <MX_TIM3_Init+0xd0>)
 8000a1c:	2204      	movs	r2, #4
 8000a1e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000a20:	4b2f      	ldr	r3, [pc, #188]	; (8000ae0 <MX_TIM3_Init+0xd0>)
 8000a22:	2220      	movs	r2, #32
 8000a24:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 999;
 8000a26:	4b2e      	ldr	r3, [pc, #184]	; (8000ae0 <MX_TIM3_Init+0xd0>)
 8000a28:	4a2f      	ldr	r2, [pc, #188]	; (8000ae8 <MX_TIM3_Init+0xd8>)
 8000a2a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ae0 <MX_TIM3_Init+0xd0>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a32:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <MX_TIM3_Init+0xd0>)
 8000a34:	2280      	movs	r2, #128	; 0x80
 8000a36:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000a38:	4b29      	ldr	r3, [pc, #164]	; (8000ae0 <MX_TIM3_Init+0xd0>)
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f001 fec8 	bl	80027d0 <HAL_TIM_PWM_Init>
 8000a40:	1e03      	subs	r3, r0, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM3_Init+0x38>
		Error_Handler();
 8000a44:	f7ff ff1b 	bl	800087e <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a48:	4b28      	ldr	r3, [pc, #160]	; (8000aec <MX_TIM3_Init+0xdc>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4e:	4b27      	ldr	r3, [pc, #156]	; (8000aec <MX_TIM3_Init+0xdc>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000a54:	4a25      	ldr	r2, [pc, #148]	; (8000aec <MX_TIM3_Init+0xdc>)
 8000a56:	4b22      	ldr	r3, [pc, #136]	; (8000ae0 <MX_TIM3_Init+0xd0>)
 8000a58:	0011      	movs	r1, r2
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f002 faf0 	bl	8003040 <HAL_TIMEx_MasterConfigSynchronization>
 8000a60:	1e03      	subs	r3, r0, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM3_Init+0x58>
			!= HAL_OK) {
		Error_Handler();
 8000a64:	f7ff ff0b 	bl	800087e <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a68:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <MX_TIM3_Init+0xe0>)
 8000a6a:	2260      	movs	r2, #96	; 0x60
 8000a6c:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8000a6e:	4b20      	ldr	r3, [pc, #128]	; (8000af0 <MX_TIM3_Init+0xe0>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a74:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <MX_TIM3_Init+0xe0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a7a:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <MX_TIM3_Init+0xe0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8000a80:	491b      	ldr	r1, [pc, #108]	; (8000af0 <MX_TIM3_Init+0xe0>)
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <MX_TIM3_Init+0xd0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	0018      	movs	r0, r3
 8000a88:	f001 ffa8 	bl	80029dc <HAL_TIM_PWM_ConfigChannel>
 8000a8c:	1e03      	subs	r3, r0, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM3_Init+0x84>
			!= HAL_OK) {
		Error_Handler();
 8000a90:	f7ff fef5 	bl	800087e <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8000a94:	4916      	ldr	r1, [pc, #88]	; (8000af0 <MX_TIM3_Init+0xe0>)
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <MX_TIM3_Init+0xd0>)
 8000a98:	2204      	movs	r2, #4
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f001 ff9e 	bl	80029dc <HAL_TIM_PWM_ConfigChannel>
 8000aa0:	1e03      	subs	r3, r0, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8000aa4:	f7ff feeb 	bl	800087e <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8000aa8:	4911      	ldr	r1, [pc, #68]	; (8000af0 <MX_TIM3_Init+0xe0>)
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <MX_TIM3_Init+0xd0>)
 8000aac:	2208      	movs	r2, #8
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f001 ff94 	bl	80029dc <HAL_TIM_PWM_ConfigChannel>
 8000ab4:	1e03      	subs	r3, r0, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM3_Init+0xac>
			!= HAL_OK) {
		Error_Handler();
 8000ab8:	f7ff fee1 	bl	800087e <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 8000abc:	490c      	ldr	r1, [pc, #48]	; (8000af0 <MX_TIM3_Init+0xe0>)
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_TIM3_Init+0xd0>)
 8000ac0:	220c      	movs	r2, #12
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f001 ff8a 	bl	80029dc <HAL_TIM_PWM_ConfigChannel>
 8000ac8:	1e03      	subs	r3, r0, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM3_Init+0xc0>
			!= HAL_OK) {
		Error_Handler();
 8000acc:	f7ff fed7 	bl	800087e <Error_Handler>
	}
	HAL_TIM_MspPostInit(&htim3);
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <MX_TIM3_Init+0xd0>)
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 f876 	bl	8000bc4 <HAL_TIM_MspPostInit>

}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	200000f8 	.word	0x200000f8
 8000ae4:	40000400 	.word	0x40000400
 8000ae8:	000003e7 	.word	0x000003e7
 8000aec:	20000028 	.word	0x20000028
 8000af0:	20000030 	.word	0x20000030

08000af4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *tim_encoderHandle) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000afc:	2314      	movs	r3, #20
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	0018      	movs	r0, r3
 8000b02:	2314      	movs	r3, #20
 8000b04:	001a      	movs	r2, r3
 8000b06:	2100      	movs	r1, #0
 8000b08:	f002 fe68 	bl	80037dc <memset>
	if (tim_encoderHandle->Instance == TIM2) {
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	05db      	lsls	r3, r3, #23
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d130      	bne.n	8000b7a <HAL_TIM_Encoder_MspInit+0x86>
		/* USER CODE BEGIN TIM2_MspInit 0 */

		/* USER CODE END TIM2_MspInit 0 */
		/* TIM2 clock enable */
		__HAL_RCC_TIM2_CLK_ENABLE();
 8000b18:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <HAL_TIM_Encoder_MspInit+0x90>)
 8000b1a:	69da      	ldr	r2, [r3, #28]
 8000b1c:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <HAL_TIM_Encoder_MspInit+0x90>)
 8000b1e:	2101      	movs	r1, #1
 8000b20:	430a      	orrs	r2, r1
 8000b22:	61da      	str	r2, [r3, #28]
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <HAL_TIM_Encoder_MspInit+0x90>)
 8000b26:	69db      	ldr	r3, [r3, #28]
 8000b28:	2201      	movs	r2, #1
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_TIM_Encoder_MspInit+0x90>)
 8000b32:	695a      	ldr	r2, [r3, #20]
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <HAL_TIM_Encoder_MspInit+0x90>)
 8000b36:	2180      	movs	r1, #128	; 0x80
 8000b38:	0289      	lsls	r1, r1, #10
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	615a      	str	r2, [r3, #20]
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <HAL_TIM_Encoder_MspInit+0x90>)
 8000b40:	695a      	ldr	r2, [r3, #20]
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	029b      	lsls	r3, r3, #10
 8000b46:	4013      	ands	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
		/**TIM2 GPIO Configuration
		 PA0     ------> TIM2_CH1
		 PA1     ------> TIM2_CH2
		 */
		GPIO_InitStruct.Pin = ENC_A_Pin | ENC_B_Pin;
 8000b4c:	2114      	movs	r1, #20
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	2203      	movs	r2, #3
 8000b52:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	2202      	movs	r2, #2
 8000b58:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	2202      	movs	r2, #2
 8000b6a:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	187a      	adds	r2, r7, r1
 8000b6e:	2390      	movs	r3, #144	; 0x90
 8000b70:	05db      	lsls	r3, r3, #23
 8000b72:	0011      	movs	r1, r2
 8000b74:	0018      	movs	r0, r3
 8000b76:	f000 ff8b 	bl	8001a90 <HAL_GPIO_Init>

		/* USER CODE BEGIN TIM2_MspInit 1 */

		/* USER CODE END TIM2_MspInit 1 */
	}
}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b00a      	add	sp, #40	; 0x28
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	40021000 	.word	0x40021000

08000b88 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *tim_pwmHandle) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]

	if (tim_pwmHandle->Instance == TIM3) {
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a09      	ldr	r2, [pc, #36]	; (8000bbc <HAL_TIM_PWM_MspInit+0x34>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d10b      	bne.n	8000bb2 <HAL_TIM_PWM_MspInit+0x2a>
		/* USER CODE BEGIN TIM3_MspInit 0 */

		/* USER CODE END TIM3_MspInit 0 */
		/* TIM3 clock enable */
		__HAL_RCC_TIM3_CLK_ENABLE();
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_TIM_PWM_MspInit+0x38>)
 8000b9c:	69da      	ldr	r2, [r3, #28]
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_TIM_PWM_MspInit+0x38>)
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	61da      	str	r2, [r3, #28]
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_TIM_PWM_MspInit+0x38>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	2202      	movs	r2, #2
 8000bac:	4013      	ands	r3, r2
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN TIM3_MspInit 1 */

		/* USER CODE END TIM3_MspInit 1 */
	}
}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b004      	add	sp, #16
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	40000400 	.word	0x40000400
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *timHandle) {
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b08b      	sub	sp, #44	; 0x2c
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000bcc:	2314      	movs	r3, #20
 8000bce:	18fb      	adds	r3, r7, r3
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	2314      	movs	r3, #20
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	f002 fe00 	bl	80037dc <memset>
	if (timHandle->Instance == TIM3) {
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a27      	ldr	r2, [pc, #156]	; (8000c80 <HAL_TIM_MspPostInit+0xbc>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d148      	bne.n	8000c78 <HAL_TIM_MspPostInit+0xb4>
		/* USER CODE BEGIN TIM3_MspPostInit 0 */

		/* USER CODE END TIM3_MspPostInit 0 */

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <HAL_TIM_MspPostInit+0xc0>)
 8000be8:	695a      	ldr	r2, [r3, #20]
 8000bea:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <HAL_TIM_MspPostInit+0xc0>)
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	0289      	lsls	r1, r1, #10
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	615a      	str	r2, [r3, #20]
 8000bf4:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <HAL_TIM_MspPostInit+0xc0>)
 8000bf6:	695a      	ldr	r2, [r3, #20]
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	029b      	lsls	r3, r3, #10
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <HAL_TIM_MspPostInit+0xc0>)
 8000c04:	695a      	ldr	r2, [r3, #20]
 8000c06:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <HAL_TIM_MspPostInit+0xc0>)
 8000c08:	2180      	movs	r1, #128	; 0x80
 8000c0a:	02c9      	lsls	r1, r1, #11
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	615a      	str	r2, [r3, #20]
 8000c10:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <HAL_TIM_MspPostInit+0xc0>)
 8000c12:	695a      	ldr	r2, [r3, #20]
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	02db      	lsls	r3, r3, #11
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
		 PA6     ------> TIM3_CH1
		 PA7     ------> TIM3_CH2
		 PB0     ------> TIM3_CH3
		 PB1     ------> TIM3_CH4
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000c1e:	2414      	movs	r4, #20
 8000c20:	193b      	adds	r3, r7, r4
 8000c22:	22c0      	movs	r2, #192	; 0xc0
 8000c24:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	193b      	adds	r3, r7, r4
 8000c28:	2202      	movs	r2, #2
 8000c2a:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	193b      	adds	r3, r7, r4
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	193b      	adds	r3, r7, r4
 8000c34:	2200      	movs	r2, #0
 8000c36:	60da      	str	r2, [r3, #12]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000c38:	193b      	adds	r3, r7, r4
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	193a      	adds	r2, r7, r4
 8000c40:	2390      	movs	r3, #144	; 0x90
 8000c42:	05db      	lsls	r3, r3, #23
 8000c44:	0011      	movs	r1, r2
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 ff22 	bl	8001a90 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000c4c:	0021      	movs	r1, r4
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	2203      	movs	r2, #3
 8000c52:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	2202      	movs	r2, #2
 8000c58:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2201      	movs	r2, #1
 8000c6a:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <HAL_TIM_MspPostInit+0xc4>)
 8000c70:	0019      	movs	r1, r3
 8000c72:	0010      	movs	r0, r2
 8000c74:	f000 ff0c 	bl	8001a90 <HAL_GPIO_Init>
		/* USER CODE BEGIN TIM3_MspPostInit 1 */

		/* USER CODE END TIM3_MspPostInit 1 */
	}

}
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b00b      	add	sp, #44	; 0x2c
 8000c7e:	bd90      	pop	{r4, r7, pc}
 8000c80:	40000400 	.word	0x40000400
 8000c84:	40021000 	.word	0x40021000
 8000c88:	48000400 	.word	0x48000400

08000c8c <PWM_4_Out>:
		/* USER CODE END TIM3_MspDeInit 1 */
	}
}

/* USER CODE BEGIN 1 */
void PWM_4_Out(int *duty) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; ++i) {
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	e022      	b.n	8000ce0 <PWM_4_Out+0x54>
		sConfigOC.Pulse=duty[i];
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	18d3      	adds	r3, r2, r3
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	001a      	movs	r2, r3
 8000ca6:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <PWM_4_Out+0x64>)
 8000ca8:	605a      	str	r2, [r3, #4]
		if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1+i*4) != HAL_OK)
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	001a      	movs	r2, r3
 8000cb0:	490f      	ldr	r1, [pc, #60]	; (8000cf0 <PWM_4_Out+0x64>)
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <PWM_4_Out+0x68>)
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f001 fe91 	bl	80029dc <HAL_TIM_PWM_ConfigChannel>
 8000cba:	1e03      	subs	r3, r0, #0
 8000cbc:	d001      	beq.n	8000cc2 <PWM_4_Out+0x36>
			Error_Handler();
 8000cbe:	f7ff fdde 	bl	800087e <Error_Handler>
		if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1+i*4) != HAL_OK)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	001a      	movs	r2, r3
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <PWM_4_Out+0x68>)
 8000cca:	0011      	movs	r1, r2
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f001 fdab 	bl	8002828 <HAL_TIM_PWM_Start>
 8000cd2:	1e03      	subs	r3, r0, #0
 8000cd4:	d001      	beq.n	8000cda <PWM_4_Out+0x4e>
			Error_Handler();
 8000cd6:	f7ff fdd2 	bl	800087e <Error_Handler>
	for (int i = 0; i < 4; ++i) {
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	ddd9      	ble.n	8000c9a <PWM_4_Out+0xe>
	}
}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b004      	add	sp, #16
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	20000030 	.word	0x20000030
 8000cf4:	200000f8 	.word	0x200000f8

08000cf8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000cfc:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <MX_USART2_UART_Init+0x58>)
 8000cfe:	4a15      	ldr	r2, [pc, #84]	; (8000d54 <MX_USART2_UART_Init+0x5c>)
 8000d00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d02:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <MX_USART2_UART_Init+0x58>)
 8000d04:	22e1      	movs	r2, #225	; 0xe1
 8000d06:	0252      	lsls	r2, r2, #9
 8000d08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <MX_USART2_UART_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <MX_USART2_UART_Init+0x58>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <MX_USART2_UART_Init+0x58>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <MX_USART2_UART_Init+0x58>)
 8000d1e:	220c      	movs	r2, #12
 8000d20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <MX_USART2_UART_Init+0x58>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <MX_USART2_UART_Init+0x58>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <MX_USART2_UART_Init+0x58>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <MX_USART2_UART_Init+0x58>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d3a:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <MX_USART2_UART_Init+0x58>)
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f002 f9d7 	bl	80030f0 <HAL_UART_Init>
 8000d42:	1e03      	subs	r3, r0, #0
 8000d44:	d001      	beq.n	8000d4a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d46:	f7ff fd9a 	bl	800087e <Error_Handler>
  }

}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000200 	.word	0x20000200
 8000d54:	40004400 	.word	0x40004400

08000d58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	2314      	movs	r3, #20
 8000d62:	18fb      	adds	r3, r7, r3
 8000d64:	0018      	movs	r0, r3
 8000d66:	2314      	movs	r3, #20
 8000d68:	001a      	movs	r2, r3
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	f002 fd36 	bl	80037dc <memset>
  if(uartHandle->Instance==USART2)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a43      	ldr	r2, [pc, #268]	; (8000e84 <HAL_UART_MspInit+0x12c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d000      	beq.n	8000d7c <HAL_UART_MspInit+0x24>
 8000d7a:	e07e      	b.n	8000e7a <HAL_UART_MspInit+0x122>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d7c:	4b42      	ldr	r3, [pc, #264]	; (8000e88 <HAL_UART_MspInit+0x130>)
 8000d7e:	69da      	ldr	r2, [r3, #28]
 8000d80:	4b41      	ldr	r3, [pc, #260]	; (8000e88 <HAL_UART_MspInit+0x130>)
 8000d82:	2180      	movs	r1, #128	; 0x80
 8000d84:	0289      	lsls	r1, r1, #10
 8000d86:	430a      	orrs	r2, r1
 8000d88:	61da      	str	r2, [r3, #28]
 8000d8a:	4b3f      	ldr	r3, [pc, #252]	; (8000e88 <HAL_UART_MspInit+0x130>)
 8000d8c:	69da      	ldr	r2, [r3, #28]
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	029b      	lsls	r3, r3, #10
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d98:	4b3b      	ldr	r3, [pc, #236]	; (8000e88 <HAL_UART_MspInit+0x130>)
 8000d9a:	695a      	ldr	r2, [r3, #20]
 8000d9c:	4b3a      	ldr	r3, [pc, #232]	; (8000e88 <HAL_UART_MspInit+0x130>)
 8000d9e:	2180      	movs	r1, #128	; 0x80
 8000da0:	0289      	lsls	r1, r1, #10
 8000da2:	430a      	orrs	r2, r1
 8000da4:	615a      	str	r2, [r3, #20]
 8000da6:	4b38      	ldr	r3, [pc, #224]	; (8000e88 <HAL_UART_MspInit+0x130>)
 8000da8:	695a      	ldr	r2, [r3, #20]
 8000daa:	2380      	movs	r3, #128	; 0x80
 8000dac:	029b      	lsls	r3, r3, #10
 8000dae:	4013      	ands	r3, r2
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000db4:	2114      	movs	r1, #20
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	4a34      	ldr	r2, [pc, #208]	; (8000e8c <HAL_UART_MspInit+0x134>)
 8000dba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2203      	movs	r2, #3
 8000dcc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	187a      	adds	r2, r7, r1
 8000dd6:	2390      	movs	r3, #144	; 0x90
 8000dd8:	05db      	lsls	r3, r3, #23
 8000dda:	0011      	movs	r1, r2
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f000 fe57 	bl	8001a90 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8000de2:	4b2b      	ldr	r3, [pc, #172]	; (8000e90 <HAL_UART_MspInit+0x138>)
 8000de4:	4a2b      	ldr	r2, [pc, #172]	; (8000e94 <HAL_UART_MspInit+0x13c>)
 8000de6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000de8:	4b29      	ldr	r3, [pc, #164]	; (8000e90 <HAL_UART_MspInit+0x138>)
 8000dea:	2210      	movs	r2, #16
 8000dec:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dee:	4b28      	ldr	r3, [pc, #160]	; (8000e90 <HAL_UART_MspInit+0x138>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000df4:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <HAL_UART_MspInit+0x138>)
 8000df6:	2280      	movs	r2, #128	; 0x80
 8000df8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dfa:	4b25      	ldr	r3, [pc, #148]	; (8000e90 <HAL_UART_MspInit+0x138>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e00:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <HAL_UART_MspInit+0x138>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000e06:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <HAL_UART_MspInit+0x138>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e0c:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <HAL_UART_MspInit+0x138>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000e12:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <HAL_UART_MspInit+0x138>)
 8000e14:	0018      	movs	r0, r3
 8000e16:	f000 fd35 	bl	8001884 <HAL_DMA_Init>
 8000e1a:	1e03      	subs	r3, r0, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000e1e:	f7ff fd2e 	bl	800087e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a1a      	ldr	r2, [pc, #104]	; (8000e90 <HAL_UART_MspInit+0x138>)
 8000e26:	669a      	str	r2, [r3, #104]	; 0x68
 8000e28:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <HAL_UART_MspInit+0x138>)
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000e2e:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <HAL_UART_MspInit+0x140>)
 8000e30:	4a1a      	ldr	r2, [pc, #104]	; (8000e9c <HAL_UART_MspInit+0x144>)
 8000e32:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e34:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <HAL_UART_MspInit+0x140>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e3a:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <HAL_UART_MspInit+0x140>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_UART_MspInit+0x140>)
 8000e42:	2280      	movs	r2, #128	; 0x80
 8000e44:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e46:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <HAL_UART_MspInit+0x140>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_UART_MspInit+0x140>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <HAL_UART_MspInit+0x140>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <HAL_UART_MspInit+0x140>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_UART_MspInit+0x140>)
 8000e60:	0018      	movs	r0, r3
 8000e62:	f000 fd0f 	bl	8001884 <HAL_DMA_Init>
 8000e66:	1e03      	subs	r3, r0, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8000e6a:	f7ff fd08 	bl	800087e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <HAL_UART_MspInit+0x140>)
 8000e72:	66da      	str	r2, [r3, #108]	; 0x6c
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_UART_MspInit+0x140>)
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b00a      	add	sp, #40	; 0x28
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	40004400 	.word	0x40004400
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	00008004 	.word	0x00008004
 8000e90:	200001bc 	.word	0x200001bc
 8000e94:	40020044 	.word	0x40020044
 8000e98:	20000178 	.word	0x20000178
 8000e9c:	40020058 	.word	0x40020058

08000ea0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ea0:	4813      	ldr	r0, [pc, #76]	; (8000ef0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ea2:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000ea4:	4813      	ldr	r0, [pc, #76]	; (8000ef4 <LoopForever+0x6>)
    LDR R1, [R0]
 8000ea6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000ea8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000eaa:	4a13      	ldr	r2, [pc, #76]	; (8000ef8 <LoopForever+0xa>)
    CMP R1, R2
 8000eac:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000eae:	d105      	bne.n	8000ebc <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000eb0:	4812      	ldr	r0, [pc, #72]	; (8000efc <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000eb2:	4913      	ldr	r1, [pc, #76]	; (8000f00 <LoopForever+0x12>)
    STR R1, [R0]
 8000eb4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000eb6:	4813      	ldr	r0, [pc, #76]	; (8000f04 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000eb8:	4913      	ldr	r1, [pc, #76]	; (8000f08 <LoopForever+0x1a>)
    STR R1, [R0]
 8000eba:	6001      	str	r1, [r0, #0]

08000ebc <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ebc:	4813      	ldr	r0, [pc, #76]	; (8000f0c <LoopForever+0x1e>)
  ldr r1, =_edata
 8000ebe:	4914      	ldr	r1, [pc, #80]	; (8000f10 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000ec0:	4a14      	ldr	r2, [pc, #80]	; (8000f14 <LoopForever+0x26>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a11      	ldr	r2, [pc, #68]	; (8000f18 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000ed4:	4c11      	ldr	r4, [pc, #68]	; (8000f1c <LoopForever+0x2e>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ee2:	f7ff fd2d 	bl	8000940 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000ee6:	f002 fc55 	bl	8003794 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eea:	f7ff fc57 	bl	800079c <main>

08000eee <LoopForever>:

LoopForever:
    b LoopForever
 8000eee:	e7fe      	b.n	8000eee <LoopForever>
  ldr   r0, =_estack
 8000ef0:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000ef4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000ef8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000efc:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000f00:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000f04:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000f08:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f14:	08003854 	.word	0x08003854
  ldr r2, =_sbss
 8000f18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f1c:	20000284 	.word	0x20000284

08000f20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f20:	e7fe      	b.n	8000f20 <ADC1_IRQHandler>
	...

08000f24 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <HAL_Init+0x24>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_Init+0x24>)
 8000f2e:	2110      	movs	r1, #16
 8000f30:	430a      	orrs	r2, r1
 8000f32:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000f34:	2000      	movs	r0, #0
 8000f36:	f000 f809 	bl	8000f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f3a:	f7ff fca5 	bl	8000888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	0018      	movs	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	40022000 	.word	0x40022000

08000f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f4c:	b590      	push	{r4, r7, lr}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <HAL_InitTick+0x5c>)
 8000f56:	681c      	ldr	r4, [r3, #0]
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <HAL_InitTick+0x60>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	0019      	movs	r1, r3
 8000f5e:	23fa      	movs	r3, #250	; 0xfa
 8000f60:	0098      	lsls	r0, r3, #2
 8000f62:	f7ff f8d1 	bl	8000108 <__udivsi3>
 8000f66:	0003      	movs	r3, r0
 8000f68:	0019      	movs	r1, r3
 8000f6a:	0020      	movs	r0, r4
 8000f6c:	f7ff f8cc 	bl	8000108 <__udivsi3>
 8000f70:	0003      	movs	r3, r0
 8000f72:	0018      	movs	r0, r3
 8000f74:	f000 fc79 	bl	800186a <HAL_SYSTICK_Config>
 8000f78:	1e03      	subs	r3, r0, #0
 8000f7a:	d001      	beq.n	8000f80 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e00f      	b.n	8000fa0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	d80b      	bhi.n	8000f9e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	425b      	negs	r3, r3
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f000 fc46 	bl	8001820 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_InitTick+0x64>)
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e000      	b.n	8000fa0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b003      	add	sp, #12
 8000fa6:	bd90      	pop	{r4, r7, pc}
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	20000004 	.word	0x20000004

08000fb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <HAL_IncTick+0x1c>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	001a      	movs	r2, r3
 8000fbe:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_IncTick+0x20>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	18d2      	adds	r2, r2, r3
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <HAL_IncTick+0x20>)
 8000fc6:	601a      	str	r2, [r3, #0]
}
 8000fc8:	46c0      	nop			; (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	20000280 	.word	0x20000280

08000fd8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  return uwTick;
 8000fdc:	4b02      	ldr	r3, [pc, #8]	; (8000fe8 <HAL_GetTick+0x10>)
 8000fde:	681b      	ldr	r3, [r3, #0]
}
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	20000280 	.word	0x20000280

08000fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff4:	f7ff fff0 	bl	8000fd8 <HAL_GetTick>
 8000ff8:	0003      	movs	r3, r0
 8000ffa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	3301      	adds	r3, #1
 8001004:	d005      	beq.n	8001012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <HAL_Delay+0x40>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	001a      	movs	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	189b      	adds	r3, r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	f7ff ffe0 	bl	8000fd8 <HAL_GetTick>
 8001018:	0002      	movs	r2, r0
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	429a      	cmp	r2, r3
 8001022:	d8f7      	bhi.n	8001014 <HAL_Delay+0x28>
  {
  }
}
 8001024:	46c0      	nop			; (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	b004      	add	sp, #16
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000008 	.word	0x20000008

08001030 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001038:	230f      	movs	r3, #15
 800103a:	18fb      	adds	r3, r7, r3
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e125      	b.n	800129a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10a      	bne.n	800106c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2234      	movs	r2, #52	; 0x34
 8001060:	2100      	movs	r1, #0
 8001062:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	0018      	movs	r0, r3
 8001068:	f7ff f950 	bl	800030c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001070:	2210      	movs	r2, #16
 8001072:	4013      	ands	r3, r2
 8001074:	d000      	beq.n	8001078 <HAL_ADC_Init+0x48>
 8001076:	e103      	b.n	8001280 <HAL_ADC_Init+0x250>
 8001078:	230f      	movs	r3, #15
 800107a:	18fb      	adds	r3, r7, r3
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d000      	beq.n	8001084 <HAL_ADC_Init+0x54>
 8001082:	e0fd      	b.n	8001280 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	2204      	movs	r2, #4
 800108c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800108e:	d000      	beq.n	8001092 <HAL_ADC_Init+0x62>
 8001090:	e0f6      	b.n	8001280 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001096:	4a83      	ldr	r2, [pc, #524]	; (80012a4 <HAL_ADC_Init+0x274>)
 8001098:	4013      	ands	r3, r2
 800109a:	2202      	movs	r2, #2
 800109c:	431a      	orrs	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	2203      	movs	r2, #3
 80010aa:	4013      	ands	r3, r2
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d112      	bne.n	80010d6 <HAL_ADC_Init+0xa6>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2201      	movs	r2, #1
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d009      	beq.n	80010d2 <HAL_ADC_Init+0xa2>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	2380      	movs	r3, #128	; 0x80
 80010c6:	021b      	lsls	r3, r3, #8
 80010c8:	401a      	ands	r2, r3
 80010ca:	2380      	movs	r3, #128	; 0x80
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d101      	bne.n	80010d6 <HAL_ADC_Init+0xa6>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <HAL_ADC_Init+0xa8>
 80010d6:	2300      	movs	r3, #0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d116      	bne.n	800110a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	2218      	movs	r2, #24
 80010e4:	4393      	bics	r3, r2
 80010e6:	0019      	movs	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	430a      	orrs	r2, r1
 80010f2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	0899      	lsrs	r1, r3, #2
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	430a      	orrs	r2, r1
 8001108:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	68da      	ldr	r2, [r3, #12]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4964      	ldr	r1, [pc, #400]	; (80012a8 <HAL_ADC_Init+0x278>)
 8001116:	400a      	ands	r2, r1
 8001118:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	7e1b      	ldrb	r3, [r3, #24]
 800111e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	7e5b      	ldrb	r3, [r3, #25]
 8001124:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001126:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	7e9b      	ldrb	r3, [r3, #26]
 800112c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800112e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001134:	2b01      	cmp	r3, #1
 8001136:	d002      	beq.n	800113e <HAL_ADC_Init+0x10e>
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	015b      	lsls	r3, r3, #5
 800113c:	e000      	b.n	8001140 <HAL_ADC_Init+0x110>
 800113e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001140:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001146:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d101      	bne.n	8001154 <HAL_ADC_Init+0x124>
 8001150:	2304      	movs	r3, #4
 8001152:	e000      	b.n	8001156 <HAL_ADC_Init+0x126>
 8001154:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001156:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2124      	movs	r1, #36	; 0x24
 800115c:	5c5b      	ldrb	r3, [r3, r1]
 800115e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001160:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	4313      	orrs	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	7edb      	ldrb	r3, [r3, #27]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d115      	bne.n	800119c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	7e9b      	ldrb	r3, [r3, #26]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d105      	bne.n	8001184 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	2280      	movs	r2, #128	; 0x80
 800117c:	0252      	lsls	r2, r2, #9
 800117e:	4313      	orrs	r3, r2
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	e00b      	b.n	800119c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001188:	2220      	movs	r2, #32
 800118a:	431a      	orrs	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001194:	2201      	movs	r2, #1
 8001196:	431a      	orrs	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69da      	ldr	r2, [r3, #28]
 80011a0:	23c2      	movs	r3, #194	; 0xc2
 80011a2:	33ff      	adds	r3, #255	; 0xff
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d007      	beq.n	80011b8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80011b0:	4313      	orrs	r3, r2
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68d9      	ldr	r1, [r3, #12]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	430a      	orrs	r2, r1
 80011c6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	055b      	lsls	r3, r3, #21
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d01b      	beq.n	800120c <HAL_ADC_Init+0x1dc>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d017      	beq.n	800120c <HAL_ADC_Init+0x1dc>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d013      	beq.n	800120c <HAL_ADC_Init+0x1dc>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d00f      	beq.n	800120c <HAL_ADC_Init+0x1dc>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f0:	2b04      	cmp	r3, #4
 80011f2:	d00b      	beq.n	800120c <HAL_ADC_Init+0x1dc>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f8:	2b05      	cmp	r3, #5
 80011fa:	d007      	beq.n	800120c <HAL_ADC_Init+0x1dc>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001200:	2b06      	cmp	r3, #6
 8001202:	d003      	beq.n	800120c <HAL_ADC_Init+0x1dc>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001208:	2b07      	cmp	r3, #7
 800120a:	d112      	bne.n	8001232 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	695a      	ldr	r2, [r3, #20]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2107      	movs	r1, #7
 8001218:	438a      	bics	r2, r1
 800121a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6959      	ldr	r1, [r3, #20]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001226:	2207      	movs	r2, #7
 8001228:	401a      	ands	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	430a      	orrs	r2, r1
 8001230:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	4a1c      	ldr	r2, [pc, #112]	; (80012ac <HAL_ADC_Init+0x27c>)
 800123a:	4013      	ands	r3, r2
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	429a      	cmp	r2, r3
 8001240:	d10b      	bne.n	800125a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800124c:	2203      	movs	r2, #3
 800124e:	4393      	bics	r3, r2
 8001250:	2201      	movs	r2, #1
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001258:	e01c      	b.n	8001294 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800125e:	2212      	movs	r2, #18
 8001260:	4393      	bics	r3, r2
 8001262:	2210      	movs	r2, #16
 8001264:	431a      	orrs	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800126e:	2201      	movs	r2, #1
 8001270:	431a      	orrs	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001276:	230f      	movs	r3, #15
 8001278:	18fb      	adds	r3, r7, r3
 800127a:	2201      	movs	r2, #1
 800127c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800127e:	e009      	b.n	8001294 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001284:	2210      	movs	r2, #16
 8001286:	431a      	orrs	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800128c:	230f      	movs	r3, #15
 800128e:	18fb      	adds	r3, r7, r3
 8001290:	2201      	movs	r2, #1
 8001292:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001294:	230f      	movs	r3, #15
 8001296:	18fb      	adds	r3, r7, r3
 8001298:	781b      	ldrb	r3, [r3, #0]
}
 800129a:	0018      	movs	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	b004      	add	sp, #16
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	fffffefd 	.word	0xfffffefd
 80012a8:	fffe0219 	.word	0xfffe0219
 80012ac:	833fffe7 	.word	0x833fffe7

080012b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ba:	230f      	movs	r3, #15
 80012bc:	18fb      	adds	r3, r7, r3
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ca:	2380      	movs	r3, #128	; 0x80
 80012cc:	055b      	lsls	r3, r3, #21
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d011      	beq.n	80012f6 <HAL_ADC_ConfigChannel+0x46>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d00d      	beq.n	80012f6 <HAL_ADC_ConfigChannel+0x46>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d009      	beq.n	80012f6 <HAL_ADC_ConfigChannel+0x46>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	d005      	beq.n	80012f6 <HAL_ADC_ConfigChannel+0x46>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	d001      	beq.n	80012f6 <HAL_ADC_ConfigChannel+0x46>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2234      	movs	r2, #52	; 0x34
 80012fa:	5c9b      	ldrb	r3, [r3, r2]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d101      	bne.n	8001304 <HAL_ADC_ConfigChannel+0x54>
 8001300:	2302      	movs	r3, #2
 8001302:	e0d0      	b.n	80014a6 <HAL_ADC_ConfigChannel+0x1f6>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2234      	movs	r2, #52	; 0x34
 8001308:	2101      	movs	r1, #1
 800130a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	2204      	movs	r2, #4
 8001314:	4013      	ands	r3, r2
 8001316:	d000      	beq.n	800131a <HAL_ADC_ConfigChannel+0x6a>
 8001318:	e0b4      	b.n	8001484 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	4a64      	ldr	r2, [pc, #400]	; (80014b0 <HAL_ADC_ConfigChannel+0x200>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d100      	bne.n	8001326 <HAL_ADC_ConfigChannel+0x76>
 8001324:	e082      	b.n	800142c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2201      	movs	r2, #1
 8001332:	409a      	lsls	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	430a      	orrs	r2, r1
 800133a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	055b      	lsls	r3, r3, #21
 8001344:	429a      	cmp	r2, r3
 8001346:	d037      	beq.n	80013b8 <HAL_ADC_ConfigChannel+0x108>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134c:	2b01      	cmp	r3, #1
 800134e:	d033      	beq.n	80013b8 <HAL_ADC_ConfigChannel+0x108>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001354:	2b02      	cmp	r3, #2
 8001356:	d02f      	beq.n	80013b8 <HAL_ADC_ConfigChannel+0x108>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135c:	2b03      	cmp	r3, #3
 800135e:	d02b      	beq.n	80013b8 <HAL_ADC_ConfigChannel+0x108>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001364:	2b04      	cmp	r3, #4
 8001366:	d027      	beq.n	80013b8 <HAL_ADC_ConfigChannel+0x108>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136c:	2b05      	cmp	r3, #5
 800136e:	d023      	beq.n	80013b8 <HAL_ADC_ConfigChannel+0x108>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001374:	2b06      	cmp	r3, #6
 8001376:	d01f      	beq.n	80013b8 <HAL_ADC_ConfigChannel+0x108>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137c:	2b07      	cmp	r3, #7
 800137e:	d01b      	beq.n	80013b8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	2107      	movs	r1, #7
 800138c:	400b      	ands	r3, r1
 800138e:	429a      	cmp	r2, r3
 8001390:	d012      	beq.n	80013b8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	695a      	ldr	r2, [r3, #20]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2107      	movs	r1, #7
 800139e:	438a      	bics	r2, r1
 80013a0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6959      	ldr	r1, [r3, #20]
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	2207      	movs	r2, #7
 80013ae:	401a      	ands	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b10      	cmp	r3, #16
 80013be:	d007      	beq.n	80013d0 <HAL_ADC_ConfigChannel+0x120>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b11      	cmp	r3, #17
 80013c6:	d003      	beq.n	80013d0 <HAL_ADC_ConfigChannel+0x120>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b12      	cmp	r3, #18
 80013ce:	d163      	bne.n	8001498 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80013d0:	4b38      	ldr	r3, [pc, #224]	; (80014b4 <HAL_ADC_ConfigChannel+0x204>)
 80013d2:	6819      	ldr	r1, [r3, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b10      	cmp	r3, #16
 80013da:	d009      	beq.n	80013f0 <HAL_ADC_ConfigChannel+0x140>
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b11      	cmp	r3, #17
 80013e2:	d102      	bne.n	80013ea <HAL_ADC_ConfigChannel+0x13a>
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	03db      	lsls	r3, r3, #15
 80013e8:	e004      	b.n	80013f4 <HAL_ADC_ConfigChannel+0x144>
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	045b      	lsls	r3, r3, #17
 80013ee:	e001      	b.n	80013f4 <HAL_ADC_ConfigChannel+0x144>
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	041b      	lsls	r3, r3, #16
 80013f4:	4a2f      	ldr	r2, [pc, #188]	; (80014b4 <HAL_ADC_ConfigChannel+0x204>)
 80013f6:	430b      	orrs	r3, r1
 80013f8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b10      	cmp	r3, #16
 8001400:	d14a      	bne.n	8001498 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001402:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <HAL_ADC_ConfigChannel+0x208>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	492d      	ldr	r1, [pc, #180]	; (80014bc <HAL_ADC_ConfigChannel+0x20c>)
 8001408:	0018      	movs	r0, r3
 800140a:	f7fe fe7d 	bl	8000108 <__udivsi3>
 800140e:	0003      	movs	r3, r0
 8001410:	001a      	movs	r2, r3
 8001412:	0013      	movs	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	189b      	adds	r3, r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800141c:	e002      	b.n	8001424 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	3b01      	subs	r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f9      	bne.n	800141e <HAL_ADC_ConfigChannel+0x16e>
 800142a:	e035      	b.n	8001498 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2101      	movs	r1, #1
 8001438:	4099      	lsls	r1, r3
 800143a:	000b      	movs	r3, r1
 800143c:	43d9      	mvns	r1, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	400a      	ands	r2, r1
 8001444:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b10      	cmp	r3, #16
 800144c:	d007      	beq.n	800145e <HAL_ADC_ConfigChannel+0x1ae>
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b11      	cmp	r3, #17
 8001454:	d003      	beq.n	800145e <HAL_ADC_ConfigChannel+0x1ae>
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b12      	cmp	r3, #18
 800145c:	d11c      	bne.n	8001498 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_ADC_ConfigChannel+0x204>)
 8001460:	6819      	ldr	r1, [r3, #0]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b10      	cmp	r3, #16
 8001468:	d007      	beq.n	800147a <HAL_ADC_ConfigChannel+0x1ca>
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b11      	cmp	r3, #17
 8001470:	d101      	bne.n	8001476 <HAL_ADC_ConfigChannel+0x1c6>
 8001472:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <HAL_ADC_ConfigChannel+0x210>)
 8001474:	e002      	b.n	800147c <HAL_ADC_ConfigChannel+0x1cc>
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <HAL_ADC_ConfigChannel+0x214>)
 8001478:	e000      	b.n	800147c <HAL_ADC_ConfigChannel+0x1cc>
 800147a:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <HAL_ADC_ConfigChannel+0x218>)
 800147c:	4a0d      	ldr	r2, [pc, #52]	; (80014b4 <HAL_ADC_ConfigChannel+0x204>)
 800147e:	400b      	ands	r3, r1
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	e009      	b.n	8001498 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001488:	2220      	movs	r2, #32
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001490:	230f      	movs	r3, #15
 8001492:	18fb      	adds	r3, r7, r3
 8001494:	2201      	movs	r2, #1
 8001496:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2234      	movs	r2, #52	; 0x34
 800149c:	2100      	movs	r1, #0
 800149e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80014a0:	230f      	movs	r3, #15
 80014a2:	18fb      	adds	r3, r7, r3
 80014a4:	781b      	ldrb	r3, [r3, #0]
}
 80014a6:	0018      	movs	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	b004      	add	sp, #16
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	00001001 	.word	0x00001001
 80014b4:	40012708 	.word	0x40012708
 80014b8:	20000000 	.word	0x20000000
 80014bc:	000f4240 	.word	0x000f4240
 80014c0:	ffbfffff 	.word	0xffbfffff
 80014c4:	feffffff 	.word	0xfeffffff
 80014c8:	ff7fffff 	.word	0xff7fffff

080014cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e0f0      	b.n	80016c0 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2220      	movs	r2, #32
 80014e2:	5c9b      	ldrb	r3, [r3, r2]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d103      	bne.n	80014f2 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	0018      	movs	r0, r3
 80014ee:	f7fe ffb7 	bl	8000460 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2102      	movs	r1, #2
 80014fe:	438a      	bics	r2, r1
 8001500:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001502:	f7ff fd69 	bl	8000fd8 <HAL_GetTick>
 8001506:	0003      	movs	r3, r0
 8001508:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800150a:	e013      	b.n	8001534 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800150c:	f7ff fd64 	bl	8000fd8 <HAL_GetTick>
 8001510:	0002      	movs	r2, r0
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b0a      	cmp	r3, #10
 8001518:	d90c      	bls.n	8001534 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	2280      	movs	r2, #128	; 0x80
 8001520:	0292      	lsls	r2, r2, #10
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2220      	movs	r2, #32
 800152c:	2105      	movs	r1, #5
 800152e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e0c5      	b.n	80016c0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2202      	movs	r2, #2
 800153c:	4013      	ands	r3, r2
 800153e:	d1e5      	bne.n	800150c <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2101      	movs	r1, #1
 800154c:	430a      	orrs	r2, r1
 800154e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001550:	f7ff fd42 	bl	8000fd8 <HAL_GetTick>
 8001554:	0003      	movs	r3, r0
 8001556:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001558:	e013      	b.n	8001582 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800155a:	f7ff fd3d 	bl	8000fd8 <HAL_GetTick>
 800155e:	0002      	movs	r2, r0
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b0a      	cmp	r3, #10
 8001566:	d90c      	bls.n	8001582 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156c:	2280      	movs	r2, #128	; 0x80
 800156e:	0292      	lsls	r2, r2, #10
 8001570:	431a      	orrs	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2220      	movs	r2, #32
 800157a:	2105      	movs	r1, #5
 800157c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e09e      	b.n	80016c0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	4013      	ands	r3, r2
 800158c:	d0e5      	beq.n	800155a <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	7e1b      	ldrb	r3, [r3, #24]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d108      	bne.n	80015a8 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2180      	movs	r1, #128	; 0x80
 80015a2:	430a      	orrs	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	e007      	b.n	80015b8 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2180      	movs	r1, #128	; 0x80
 80015b4:	438a      	bics	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	7e5b      	ldrb	r3, [r3, #25]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d108      	bne.n	80015d2 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2140      	movs	r1, #64	; 0x40
 80015cc:	430a      	orrs	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	e007      	b.n	80015e2 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2140      	movs	r1, #64	; 0x40
 80015de:	438a      	bics	r2, r1
 80015e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	7e9b      	ldrb	r3, [r3, #26]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d108      	bne.n	80015fc <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2120      	movs	r1, #32
 80015f6:	430a      	orrs	r2, r1
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	e007      	b.n	800160c <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2120      	movs	r1, #32
 8001608:	438a      	bics	r2, r1
 800160a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	7edb      	ldrb	r3, [r3, #27]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d108      	bne.n	8001626 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2110      	movs	r1, #16
 8001620:	438a      	bics	r2, r1
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	e007      	b.n	8001636 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2110      	movs	r1, #16
 8001632:	430a      	orrs	r2, r1
 8001634:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	7f1b      	ldrb	r3, [r3, #28]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d108      	bne.n	8001650 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2108      	movs	r1, #8
 800164a:	430a      	orrs	r2, r1
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	e007      	b.n	8001660 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2108      	movs	r1, #8
 800165c:	438a      	bics	r2, r1
 800165e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	7f5b      	ldrb	r3, [r3, #29]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d108      	bne.n	800167a <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2104      	movs	r1, #4
 8001674:	430a      	orrs	r2, r1
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	e007      	b.n	800168a <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2104      	movs	r1, #4
 8001686:	438a      	bics	r2, r1
 8001688:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	431a      	orrs	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	431a      	orrs	r2, r3
 80016a0:	0011      	movs	r1, r2
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	1e5a      	subs	r2, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2220      	movs	r2, #32
 80016ba:	2101      	movs	r1, #1
 80016bc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	0018      	movs	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b004      	add	sp, #16
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	0002      	movs	r2, r0
 80016d0:	1dfb      	adds	r3, r7, #7
 80016d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016d4:	1dfb      	adds	r3, r7, #7
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b7f      	cmp	r3, #127	; 0x7f
 80016da:	d809      	bhi.n	80016f0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016dc:	1dfb      	adds	r3, r7, #7
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	001a      	movs	r2, r3
 80016e2:	231f      	movs	r3, #31
 80016e4:	401a      	ands	r2, r3
 80016e6:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <__NVIC_EnableIRQ+0x30>)
 80016e8:	2101      	movs	r1, #1
 80016ea:	4091      	lsls	r1, r2
 80016ec:	000a      	movs	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]
  }
}
 80016f0:	46c0      	nop			; (mov r8, r8)
 80016f2:	46bd      	mov	sp, r7
 80016f4:	b002      	add	sp, #8
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	e000e100 	.word	0xe000e100

080016fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	0002      	movs	r2, r0
 8001704:	6039      	str	r1, [r7, #0]
 8001706:	1dfb      	adds	r3, r7, #7
 8001708:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800170a:	1dfb      	adds	r3, r7, #7
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b7f      	cmp	r3, #127	; 0x7f
 8001710:	d828      	bhi.n	8001764 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001712:	4a2f      	ldr	r2, [pc, #188]	; (80017d0 <__NVIC_SetPriority+0xd4>)
 8001714:	1dfb      	adds	r3, r7, #7
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	b25b      	sxtb	r3, r3
 800171a:	089b      	lsrs	r3, r3, #2
 800171c:	33c0      	adds	r3, #192	; 0xc0
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	589b      	ldr	r3, [r3, r2]
 8001722:	1dfa      	adds	r2, r7, #7
 8001724:	7812      	ldrb	r2, [r2, #0]
 8001726:	0011      	movs	r1, r2
 8001728:	2203      	movs	r2, #3
 800172a:	400a      	ands	r2, r1
 800172c:	00d2      	lsls	r2, r2, #3
 800172e:	21ff      	movs	r1, #255	; 0xff
 8001730:	4091      	lsls	r1, r2
 8001732:	000a      	movs	r2, r1
 8001734:	43d2      	mvns	r2, r2
 8001736:	401a      	ands	r2, r3
 8001738:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	019b      	lsls	r3, r3, #6
 800173e:	22ff      	movs	r2, #255	; 0xff
 8001740:	401a      	ands	r2, r3
 8001742:	1dfb      	adds	r3, r7, #7
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	0018      	movs	r0, r3
 8001748:	2303      	movs	r3, #3
 800174a:	4003      	ands	r3, r0
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001750:	481f      	ldr	r0, [pc, #124]	; (80017d0 <__NVIC_SetPriority+0xd4>)
 8001752:	1dfb      	adds	r3, r7, #7
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	b25b      	sxtb	r3, r3
 8001758:	089b      	lsrs	r3, r3, #2
 800175a:	430a      	orrs	r2, r1
 800175c:	33c0      	adds	r3, #192	; 0xc0
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001762:	e031      	b.n	80017c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001764:	4a1b      	ldr	r2, [pc, #108]	; (80017d4 <__NVIC_SetPriority+0xd8>)
 8001766:	1dfb      	adds	r3, r7, #7
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	0019      	movs	r1, r3
 800176c:	230f      	movs	r3, #15
 800176e:	400b      	ands	r3, r1
 8001770:	3b08      	subs	r3, #8
 8001772:	089b      	lsrs	r3, r3, #2
 8001774:	3306      	adds	r3, #6
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	18d3      	adds	r3, r2, r3
 800177a:	3304      	adds	r3, #4
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	1dfa      	adds	r2, r7, #7
 8001780:	7812      	ldrb	r2, [r2, #0]
 8001782:	0011      	movs	r1, r2
 8001784:	2203      	movs	r2, #3
 8001786:	400a      	ands	r2, r1
 8001788:	00d2      	lsls	r2, r2, #3
 800178a:	21ff      	movs	r1, #255	; 0xff
 800178c:	4091      	lsls	r1, r2
 800178e:	000a      	movs	r2, r1
 8001790:	43d2      	mvns	r2, r2
 8001792:	401a      	ands	r2, r3
 8001794:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	019b      	lsls	r3, r3, #6
 800179a:	22ff      	movs	r2, #255	; 0xff
 800179c:	401a      	ands	r2, r3
 800179e:	1dfb      	adds	r3, r7, #7
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	0018      	movs	r0, r3
 80017a4:	2303      	movs	r3, #3
 80017a6:	4003      	ands	r3, r0
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017ac:	4809      	ldr	r0, [pc, #36]	; (80017d4 <__NVIC_SetPriority+0xd8>)
 80017ae:	1dfb      	adds	r3, r7, #7
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	001c      	movs	r4, r3
 80017b4:	230f      	movs	r3, #15
 80017b6:	4023      	ands	r3, r4
 80017b8:	3b08      	subs	r3, #8
 80017ba:	089b      	lsrs	r3, r3, #2
 80017bc:	430a      	orrs	r2, r1
 80017be:	3306      	adds	r3, #6
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	18c3      	adds	r3, r0, r3
 80017c4:	3304      	adds	r3, #4
 80017c6:	601a      	str	r2, [r3, #0]
}
 80017c8:	46c0      	nop			; (mov r8, r8)
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b003      	add	sp, #12
 80017ce:	bd90      	pop	{r4, r7, pc}
 80017d0:	e000e100 	.word	0xe000e100
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	4a0c      	ldr	r2, [pc, #48]	; (8001818 <SysTick_Config+0x40>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ea:	2301      	movs	r3, #1
 80017ec:	e010      	b.n	8001810 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <SysTick_Config+0x44>)
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	3a01      	subs	r2, #1
 80017f4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f6:	2301      	movs	r3, #1
 80017f8:	425b      	negs	r3, r3
 80017fa:	2103      	movs	r1, #3
 80017fc:	0018      	movs	r0, r3
 80017fe:	f7ff ff7d 	bl	80016fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <SysTick_Config+0x44>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <SysTick_Config+0x44>)
 800180a:	2207      	movs	r2, #7
 800180c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800180e:	2300      	movs	r3, #0
}
 8001810:	0018      	movs	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	b002      	add	sp, #8
 8001816:	bd80      	pop	{r7, pc}
 8001818:	00ffffff 	.word	0x00ffffff
 800181c:	e000e010 	.word	0xe000e010

08001820 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	210f      	movs	r1, #15
 800182c:	187b      	adds	r3, r7, r1
 800182e:	1c02      	adds	r2, r0, #0
 8001830:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	187b      	adds	r3, r7, r1
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	b25b      	sxtb	r3, r3
 800183a:	0011      	movs	r1, r2
 800183c:	0018      	movs	r0, r3
 800183e:	f7ff ff5d 	bl	80016fc <__NVIC_SetPriority>
}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	46bd      	mov	sp, r7
 8001846:	b004      	add	sp, #16
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	0002      	movs	r2, r0
 8001852:	1dfb      	adds	r3, r7, #7
 8001854:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001856:	1dfb      	adds	r3, r7, #7
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	b25b      	sxtb	r3, r3
 800185c:	0018      	movs	r0, r3
 800185e:	f7ff ff33 	bl	80016c8 <__NVIC_EnableIRQ>
}
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	46bd      	mov	sp, r7
 8001866:	b002      	add	sp, #8
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	0018      	movs	r0, r3
 8001876:	f7ff ffaf 	bl	80017d8 <SysTick_Config>
 800187a:	0003      	movs	r3, r0
}
 800187c:	0018      	movs	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	b002      	add	sp, #8
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e036      	b.n	8001908 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2221      	movs	r2, #33	; 0x21
 800189e:	2102      	movs	r1, #2
 80018a0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4a18      	ldr	r2, [pc, #96]	; (8001910 <HAL_DMA_Init+0x8c>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80018ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	4313      	orrs	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	0018      	movs	r0, r3
 80018ec:	f000 f8b4 	bl	8001a58 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2221      	movs	r2, #33	; 0x21
 80018fa:	2101      	movs	r1, #1
 80018fc:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2220      	movs	r2, #32
 8001902:	2100      	movs	r1, #0
 8001904:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}  
 8001908:	0018      	movs	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	b004      	add	sp, #16
 800190e:	bd80      	pop	{r7, pc}
 8001910:	ffffc00f 	.word	0xffffc00f

08001914 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	2204      	movs	r2, #4
 8001932:	409a      	lsls	r2, r3
 8001934:	0013      	movs	r3, r2
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	4013      	ands	r3, r2
 800193a:	d024      	beq.n	8001986 <HAL_DMA_IRQHandler+0x72>
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2204      	movs	r2, #4
 8001940:	4013      	ands	r3, r2
 8001942:	d020      	beq.n	8001986 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2220      	movs	r2, #32
 800194c:	4013      	ands	r3, r2
 800194e:	d107      	bne.n	8001960 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2104      	movs	r1, #4
 800195c:	438a      	bics	r2, r1
 800195e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001968:	2104      	movs	r1, #4
 800196a:	4091      	lsls	r1, r2
 800196c:	000a      	movs	r2, r1
 800196e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001974:	2b00      	cmp	r3, #0
 8001976:	d100      	bne.n	800197a <HAL_DMA_IRQHandler+0x66>
 8001978:	e06a      	b.n	8001a50 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	0010      	movs	r0, r2
 8001982:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001984:	e064      	b.n	8001a50 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	2202      	movs	r2, #2
 800198c:	409a      	lsls	r2, r3
 800198e:	0013      	movs	r3, r2
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	4013      	ands	r3, r2
 8001994:	d02b      	beq.n	80019ee <HAL_DMA_IRQHandler+0xda>
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	2202      	movs	r2, #2
 800199a:	4013      	ands	r3, r2
 800199c:	d027      	beq.n	80019ee <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2220      	movs	r2, #32
 80019a6:	4013      	ands	r3, r2
 80019a8:	d10b      	bne.n	80019c2 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	210a      	movs	r1, #10
 80019b6:	438a      	bics	r2, r1
 80019b8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2221      	movs	r2, #33	; 0x21
 80019be:	2101      	movs	r1, #1
 80019c0:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ca:	2102      	movs	r1, #2
 80019cc:	4091      	lsls	r1, r2
 80019ce:	000a      	movs	r2, r1
 80019d0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2220      	movs	r2, #32
 80019d6:	2100      	movs	r1, #0
 80019d8:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d036      	beq.n	8001a50 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	0010      	movs	r0, r2
 80019ea:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80019ec:	e030      	b.n	8001a50 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	2208      	movs	r2, #8
 80019f4:	409a      	lsls	r2, r3
 80019f6:	0013      	movs	r3, r2
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	4013      	ands	r3, r2
 80019fc:	d028      	beq.n	8001a50 <HAL_DMA_IRQHandler+0x13c>
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2208      	movs	r2, #8
 8001a02:	4013      	ands	r3, r2
 8001a04:	d024      	beq.n	8001a50 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	210e      	movs	r1, #14
 8001a12:	438a      	bics	r2, r1
 8001a14:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1e:	2101      	movs	r1, #1
 8001a20:	4091      	lsls	r1, r2
 8001a22:	000a      	movs	r2, r1
 8001a24:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2221      	movs	r2, #33	; 0x21
 8001a30:	2101      	movs	r1, #1
 8001a32:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2220      	movs	r2, #32
 8001a38:	2100      	movs	r1, #0
 8001a3a:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	0010      	movs	r0, r2
 8001a4c:	4798      	blx	r3
    }
   }
}  
 8001a4e:	e7ff      	b.n	8001a50 <HAL_DMA_IRQHandler+0x13c>
 8001a50:	46c0      	nop			; (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b004      	add	sp, #16
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a08      	ldr	r2, [pc, #32]	; (8001a88 <DMA_CalcBaseAndBitshift+0x30>)
 8001a66:	4694      	mov	ip, r2
 8001a68:	4463      	add	r3, ip
 8001a6a:	2114      	movs	r1, #20
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f7fe fb4b 	bl	8000108 <__udivsi3>
 8001a72:	0003      	movs	r3, r0
 8001a74:	009a      	lsls	r2, r3, #2
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a03      	ldr	r2, [pc, #12]	; (8001a8c <DMA_CalcBaseAndBitshift+0x34>)
 8001a7e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001a80:	46c0      	nop			; (mov r8, r8)
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b002      	add	sp, #8
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	bffdfff8 	.word	0xbffdfff8
 8001a8c:	40020000 	.word	0x40020000

08001a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a9e:	e149      	b.n	8001d34 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	4091      	lsls	r1, r2
 8001aaa:	000a      	movs	r2, r1
 8001aac:	4013      	ands	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d100      	bne.n	8001ab8 <HAL_GPIO_Init+0x28>
 8001ab6:	e13a      	b.n	8001d2e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d003      	beq.n	8001ac8 <HAL_GPIO_Init+0x38>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b12      	cmp	r3, #18
 8001ac6:	d123      	bne.n	8001b10 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	08da      	lsrs	r2, r3, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3208      	adds	r2, #8
 8001ad0:	0092      	lsls	r2, r2, #2
 8001ad2:	58d3      	ldr	r3, [r2, r3]
 8001ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	2207      	movs	r2, #7
 8001ada:	4013      	ands	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	220f      	movs	r2, #15
 8001ae0:	409a      	lsls	r2, r3
 8001ae2:	0013      	movs	r3, r2
 8001ae4:	43da      	mvns	r2, r3
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2107      	movs	r1, #7
 8001af4:	400b      	ands	r3, r1
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	409a      	lsls	r2, r3
 8001afa:	0013      	movs	r3, r2
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	08da      	lsrs	r2, r3, #3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3208      	adds	r2, #8
 8001b0a:	0092      	lsls	r2, r2, #2
 8001b0c:	6939      	ldr	r1, [r7, #16]
 8001b0e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	409a      	lsls	r2, r3
 8001b1e:	0013      	movs	r3, r2
 8001b20:	43da      	mvns	r2, r3
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	401a      	ands	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	409a      	lsls	r2, r3
 8001b36:	0013      	movs	r3, r2
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d00b      	beq.n	8001b64 <HAL_GPIO_Init+0xd4>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d007      	beq.n	8001b64 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b58:	2b11      	cmp	r3, #17
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b12      	cmp	r3, #18
 8001b62:	d130      	bne.n	8001bc6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	2203      	movs	r2, #3
 8001b70:	409a      	lsls	r2, r3
 8001b72:	0013      	movs	r3, r2
 8001b74:	43da      	mvns	r2, r3
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	68da      	ldr	r2, [r3, #12]
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	409a      	lsls	r2, r3
 8001b86:	0013      	movs	r3, r2
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	0013      	movs	r3, r2
 8001ba2:	43da      	mvns	r2, r3
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	091b      	lsrs	r3, r3, #4
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	0013      	movs	r3, r2
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	0013      	movs	r3, r2
 8001bd6:	43da      	mvns	r2, r3
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	409a      	lsls	r2, r3
 8001be8:	0013      	movs	r3, r2
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	055b      	lsls	r3, r3, #21
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d100      	bne.n	8001c04 <HAL_GPIO_Init+0x174>
 8001c02:	e094      	b.n	8001d2e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c04:	4b51      	ldr	r3, [pc, #324]	; (8001d4c <HAL_GPIO_Init+0x2bc>)
 8001c06:	699a      	ldr	r2, [r3, #24]
 8001c08:	4b50      	ldr	r3, [pc, #320]	; (8001d4c <HAL_GPIO_Init+0x2bc>)
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	619a      	str	r2, [r3, #24]
 8001c10:	4b4e      	ldr	r3, [pc, #312]	; (8001d4c <HAL_GPIO_Init+0x2bc>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	2201      	movs	r2, #1
 8001c16:	4013      	ands	r3, r2
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c1c:	4a4c      	ldr	r2, [pc, #304]	; (8001d50 <HAL_GPIO_Init+0x2c0>)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	3302      	adds	r3, #2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	589b      	ldr	r3, [r3, r2]
 8001c28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	4013      	ands	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	220f      	movs	r2, #15
 8001c34:	409a      	lsls	r2, r3
 8001c36:	0013      	movs	r3, r2
 8001c38:	43da      	mvns	r2, r3
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	2390      	movs	r3, #144	; 0x90
 8001c44:	05db      	lsls	r3, r3, #23
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d00d      	beq.n	8001c66 <HAL_GPIO_Init+0x1d6>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a41      	ldr	r2, [pc, #260]	; (8001d54 <HAL_GPIO_Init+0x2c4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d007      	beq.n	8001c62 <HAL_GPIO_Init+0x1d2>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a40      	ldr	r2, [pc, #256]	; (8001d58 <HAL_GPIO_Init+0x2c8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d101      	bne.n	8001c5e <HAL_GPIO_Init+0x1ce>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e004      	b.n	8001c68 <HAL_GPIO_Init+0x1d8>
 8001c5e:	2305      	movs	r3, #5
 8001c60:	e002      	b.n	8001c68 <HAL_GPIO_Init+0x1d8>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <HAL_GPIO_Init+0x1d8>
 8001c66:	2300      	movs	r3, #0
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	2103      	movs	r1, #3
 8001c6c:	400a      	ands	r2, r1
 8001c6e:	0092      	lsls	r2, r2, #2
 8001c70:	4093      	lsls	r3, r2
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c78:	4935      	ldr	r1, [pc, #212]	; (8001d50 <HAL_GPIO_Init+0x2c0>)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	089b      	lsrs	r3, r3, #2
 8001c7e:	3302      	adds	r3, #2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c86:	4b35      	ldr	r3, [pc, #212]	; (8001d5c <HAL_GPIO_Init+0x2cc>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	43da      	mvns	r2, r3
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	2380      	movs	r3, #128	; 0x80
 8001c9c:	025b      	lsls	r3, r3, #9
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001caa:	4b2c      	ldr	r3, [pc, #176]	; (8001d5c <HAL_GPIO_Init+0x2cc>)
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001cb0:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <HAL_GPIO_Init+0x2cc>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	43da      	mvns	r2, r3
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	029b      	lsls	r3, r3, #10
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cd4:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <HAL_GPIO_Init+0x2cc>)
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <HAL_GPIO_Init+0x2cc>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	035b      	lsls	r3, r3, #13
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cfe:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <HAL_GPIO_Init+0x2cc>)
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001d04:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <HAL_GPIO_Init+0x2cc>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	43da      	mvns	r2, r3
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	039b      	lsls	r3, r3, #14
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <HAL_GPIO_Init+0x2cc>)
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	3301      	adds	r3, #1
 8001d32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	40da      	lsrs	r2, r3
 8001d3c:	1e13      	subs	r3, r2, #0
 8001d3e:	d000      	beq.n	8001d42 <HAL_GPIO_Init+0x2b2>
 8001d40:	e6ae      	b.n	8001aa0 <HAL_GPIO_Init+0x10>
  } 
}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	46bd      	mov	sp, r7
 8001d46:	b006      	add	sp, #24
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40010000 	.word	0x40010000
 8001d54:	48000400 	.word	0x48000400
 8001d58:	48000800 	.word	0x48000800
 8001d5c:	40010400 	.word	0x40010400

08001d60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	000a      	movs	r2, r1
 8001d6a:	1cbb      	adds	r3, r7, #2
 8001d6c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	1cba      	adds	r2, r7, #2
 8001d74:	8812      	ldrh	r2, [r2, #0]
 8001d76:	4013      	ands	r3, r2
 8001d78:	d004      	beq.n	8001d84 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001d7a:	230f      	movs	r3, #15
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	2201      	movs	r2, #1
 8001d80:	701a      	strb	r2, [r3, #0]
 8001d82:	e003      	b.n	8001d8c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d84:	230f      	movs	r3, #15
 8001d86:	18fb      	adds	r3, r7, r3
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001d8c:	230f      	movs	r3, #15
 8001d8e:	18fb      	adds	r3, r7, r3
 8001d90:	781b      	ldrb	r3, [r3, #0]
  }
 8001d92:	0018      	movs	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	b004      	add	sp, #16
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	0008      	movs	r0, r1
 8001da4:	0011      	movs	r1, r2
 8001da6:	1cbb      	adds	r3, r7, #2
 8001da8:	1c02      	adds	r2, r0, #0
 8001daa:	801a      	strh	r2, [r3, #0]
 8001dac:	1c7b      	adds	r3, r7, #1
 8001dae:	1c0a      	adds	r2, r1, #0
 8001db0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001db2:	1c7b      	adds	r3, r7, #1
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d004      	beq.n	8001dc4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dba:	1cbb      	adds	r3, r7, #2
 8001dbc:	881a      	ldrh	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dc2:	e003      	b.n	8001dcc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dc4:	1cbb      	adds	r3, r7, #2
 8001dc6:	881a      	ldrh	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dcc:	46c0      	nop			; (mov r8, r8)
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b002      	add	sp, #8
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d102      	bne.n	8001de8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	f000 fb76 	bl	80024d4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2201      	movs	r2, #1
 8001dee:	4013      	ands	r3, r2
 8001df0:	d100      	bne.n	8001df4 <HAL_RCC_OscConfig+0x20>
 8001df2:	e08e      	b.n	8001f12 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001df4:	4bc5      	ldr	r3, [pc, #788]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	220c      	movs	r2, #12
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d00e      	beq.n	8001e1e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e00:	4bc2      	ldr	r3, [pc, #776]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	220c      	movs	r2, #12
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d117      	bne.n	8001e3c <HAL_RCC_OscConfig+0x68>
 8001e0c:	4bbf      	ldr	r3, [pc, #764]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	23c0      	movs	r3, #192	; 0xc0
 8001e12:	025b      	lsls	r3, r3, #9
 8001e14:	401a      	ands	r2, r3
 8001e16:	2380      	movs	r3, #128	; 0x80
 8001e18:	025b      	lsls	r3, r3, #9
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d10e      	bne.n	8001e3c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1e:	4bbb      	ldr	r3, [pc, #748]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	029b      	lsls	r3, r3, #10
 8001e26:	4013      	ands	r3, r2
 8001e28:	d100      	bne.n	8001e2c <HAL_RCC_OscConfig+0x58>
 8001e2a:	e071      	b.n	8001f10 <HAL_RCC_OscConfig+0x13c>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d000      	beq.n	8001e36 <HAL_RCC_OscConfig+0x62>
 8001e34:	e06c      	b.n	8001f10 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	f000 fb4c 	bl	80024d4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d107      	bne.n	8001e54 <HAL_RCC_OscConfig+0x80>
 8001e44:	4bb1      	ldr	r3, [pc, #708]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4bb0      	ldr	r3, [pc, #704]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001e4a:	2180      	movs	r1, #128	; 0x80
 8001e4c:	0249      	lsls	r1, r1, #9
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	e02f      	b.n	8001eb4 <HAL_RCC_OscConfig+0xe0>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10c      	bne.n	8001e76 <HAL_RCC_OscConfig+0xa2>
 8001e5c:	4bab      	ldr	r3, [pc, #684]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4baa      	ldr	r3, [pc, #680]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001e62:	49ab      	ldr	r1, [pc, #684]	; (8002110 <HAL_RCC_OscConfig+0x33c>)
 8001e64:	400a      	ands	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	4ba8      	ldr	r3, [pc, #672]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4ba7      	ldr	r3, [pc, #668]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001e6e:	49a9      	ldr	r1, [pc, #676]	; (8002114 <HAL_RCC_OscConfig+0x340>)
 8001e70:	400a      	ands	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	e01e      	b.n	8001eb4 <HAL_RCC_OscConfig+0xe0>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b05      	cmp	r3, #5
 8001e7c:	d10e      	bne.n	8001e9c <HAL_RCC_OscConfig+0xc8>
 8001e7e:	4ba3      	ldr	r3, [pc, #652]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	4ba2      	ldr	r3, [pc, #648]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001e84:	2180      	movs	r1, #128	; 0x80
 8001e86:	02c9      	lsls	r1, r1, #11
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	4b9f      	ldr	r3, [pc, #636]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b9e      	ldr	r3, [pc, #632]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001e92:	2180      	movs	r1, #128	; 0x80
 8001e94:	0249      	lsls	r1, r1, #9
 8001e96:	430a      	orrs	r2, r1
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	e00b      	b.n	8001eb4 <HAL_RCC_OscConfig+0xe0>
 8001e9c:	4b9b      	ldr	r3, [pc, #620]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b9a      	ldr	r3, [pc, #616]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001ea2:	499b      	ldr	r1, [pc, #620]	; (8002110 <HAL_RCC_OscConfig+0x33c>)
 8001ea4:	400a      	ands	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	4b98      	ldr	r3, [pc, #608]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b97      	ldr	r3, [pc, #604]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001eae:	4999      	ldr	r1, [pc, #612]	; (8002114 <HAL_RCC_OscConfig+0x340>)
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d014      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f88c 	bl	8000fd8 <HAL_GetTick>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec6:	f7ff f887 	bl	8000fd8 <HAL_GetTick>
 8001eca:	0002      	movs	r2, r0
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b64      	cmp	r3, #100	; 0x64
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e2fd      	b.n	80024d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed8:	4b8c      	ldr	r3, [pc, #560]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	029b      	lsls	r3, r3, #10
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0xf2>
 8001ee4:	e015      	b.n	8001f12 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee6:	f7ff f877 	bl	8000fd8 <HAL_GetTick>
 8001eea:	0003      	movs	r3, r0
 8001eec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef0:	f7ff f872 	bl	8000fd8 <HAL_GetTick>
 8001ef4:	0002      	movs	r2, r0
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b64      	cmp	r3, #100	; 0x64
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e2e8      	b.n	80024d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f02:	4b82      	ldr	r3, [pc, #520]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	029b      	lsls	r3, r3, #10
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d1f0      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x11c>
 8001f0e:	e000      	b.n	8001f12 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f10:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2202      	movs	r2, #2
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d100      	bne.n	8001f1e <HAL_RCC_OscConfig+0x14a>
 8001f1c:	e06c      	b.n	8001ff8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f1e:	4b7b      	ldr	r3, [pc, #492]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	220c      	movs	r2, #12
 8001f24:	4013      	ands	r3, r2
 8001f26:	d00e      	beq.n	8001f46 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f28:	4b78      	ldr	r3, [pc, #480]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	220c      	movs	r2, #12
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d11f      	bne.n	8001f74 <HAL_RCC_OscConfig+0x1a0>
 8001f34:	4b75      	ldr	r3, [pc, #468]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	23c0      	movs	r3, #192	; 0xc0
 8001f3a:	025b      	lsls	r3, r3, #9
 8001f3c:	401a      	ands	r2, r3
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d116      	bne.n	8001f74 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f46:	4b71      	ldr	r3, [pc, #452]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_OscConfig+0x188>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e2bb      	b.n	80024d4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5c:	4b6b      	ldr	r3, [pc, #428]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	22f8      	movs	r2, #248	; 0xf8
 8001f62:	4393      	bics	r3, r2
 8001f64:	0019      	movs	r1, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	00da      	lsls	r2, r3, #3
 8001f6c:	4b67      	ldr	r3, [pc, #412]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f72:	e041      	b.n	8001ff8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d024      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f7c:	4b63      	ldr	r3, [pc, #396]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b62      	ldr	r3, [pc, #392]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001f82:	2101      	movs	r1, #1
 8001f84:	430a      	orrs	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7ff f826 	bl	8000fd8 <HAL_GetTick>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f92:	f7ff f821 	bl	8000fd8 <HAL_GetTick>
 8001f96:	0002      	movs	r2, r0
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e297      	b.n	80024d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa4:	4b59      	ldr	r3, [pc, #356]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2202      	movs	r2, #2
 8001faa:	4013      	ands	r3, r2
 8001fac:	d0f1      	beq.n	8001f92 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fae:	4b57      	ldr	r3, [pc, #348]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	22f8      	movs	r2, #248	; 0xf8
 8001fb4:	4393      	bics	r3, r2
 8001fb6:	0019      	movs	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	00da      	lsls	r2, r3, #3
 8001fbe:	4b53      	ldr	r3, [pc, #332]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	e018      	b.n	8001ff8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc6:	4b51      	ldr	r3, [pc, #324]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	4b50      	ldr	r3, [pc, #320]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001fcc:	2101      	movs	r1, #1
 8001fce:	438a      	bics	r2, r1
 8001fd0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd2:	f7ff f801 	bl	8000fd8 <HAL_GetTick>
 8001fd6:	0003      	movs	r3, r0
 8001fd8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fdc:	f7fe fffc 	bl	8000fd8 <HAL_GetTick>
 8001fe0:	0002      	movs	r2, r0
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e272      	b.n	80024d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fee:	4b47      	ldr	r3, [pc, #284]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d1f1      	bne.n	8001fdc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2208      	movs	r2, #8
 8001ffe:	4013      	ands	r3, r2
 8002000:	d036      	beq.n	8002070 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d019      	beq.n	800203e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800200a:	4b40      	ldr	r3, [pc, #256]	; (800210c <HAL_RCC_OscConfig+0x338>)
 800200c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800200e:	4b3f      	ldr	r3, [pc, #252]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8002010:	2101      	movs	r1, #1
 8002012:	430a      	orrs	r2, r1
 8002014:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002016:	f7fe ffdf 	bl	8000fd8 <HAL_GetTick>
 800201a:	0003      	movs	r3, r0
 800201c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002020:	f7fe ffda 	bl	8000fd8 <HAL_GetTick>
 8002024:	0002      	movs	r2, r0
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e250      	b.n	80024d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002032:	4b36      	ldr	r3, [pc, #216]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	2202      	movs	r2, #2
 8002038:	4013      	ands	r3, r2
 800203a:	d0f1      	beq.n	8002020 <HAL_RCC_OscConfig+0x24c>
 800203c:	e018      	b.n	8002070 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800203e:	4b33      	ldr	r3, [pc, #204]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8002040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002042:	4b32      	ldr	r3, [pc, #200]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8002044:	2101      	movs	r1, #1
 8002046:	438a      	bics	r2, r1
 8002048:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204a:	f7fe ffc5 	bl	8000fd8 <HAL_GetTick>
 800204e:	0003      	movs	r3, r0
 8002050:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002054:	f7fe ffc0 	bl	8000fd8 <HAL_GetTick>
 8002058:	0002      	movs	r2, r0
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e236      	b.n	80024d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002066:	4b29      	ldr	r3, [pc, #164]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	2202      	movs	r2, #2
 800206c:	4013      	ands	r3, r2
 800206e:	d1f1      	bne.n	8002054 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2204      	movs	r2, #4
 8002076:	4013      	ands	r3, r2
 8002078:	d100      	bne.n	800207c <HAL_RCC_OscConfig+0x2a8>
 800207a:	e0b5      	b.n	80021e8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800207c:	231f      	movs	r3, #31
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002084:	4b21      	ldr	r3, [pc, #132]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8002086:	69da      	ldr	r2, [r3, #28]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	055b      	lsls	r3, r3, #21
 800208c:	4013      	ands	r3, r2
 800208e:	d111      	bne.n	80020b4 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002090:	4b1e      	ldr	r3, [pc, #120]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8002092:	69da      	ldr	r2, [r3, #28]
 8002094:	4b1d      	ldr	r3, [pc, #116]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8002096:	2180      	movs	r1, #128	; 0x80
 8002098:	0549      	lsls	r1, r1, #21
 800209a:	430a      	orrs	r2, r1
 800209c:	61da      	str	r2, [r3, #28]
 800209e:	4b1b      	ldr	r3, [pc, #108]	; (800210c <HAL_RCC_OscConfig+0x338>)
 80020a0:	69da      	ldr	r2, [r3, #28]
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	055b      	lsls	r3, r3, #21
 80020a6:	4013      	ands	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80020ac:	231f      	movs	r3, #31
 80020ae:	18fb      	adds	r3, r7, r3
 80020b0:	2201      	movs	r2, #1
 80020b2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b4:	4b18      	ldr	r3, [pc, #96]	; (8002118 <HAL_RCC_OscConfig+0x344>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	2380      	movs	r3, #128	; 0x80
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4013      	ands	r3, r2
 80020be:	d11a      	bne.n	80020f6 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c0:	4b15      	ldr	r3, [pc, #84]	; (8002118 <HAL_RCC_OscConfig+0x344>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b14      	ldr	r3, [pc, #80]	; (8002118 <HAL_RCC_OscConfig+0x344>)
 80020c6:	2180      	movs	r1, #128	; 0x80
 80020c8:	0049      	lsls	r1, r1, #1
 80020ca:	430a      	orrs	r2, r1
 80020cc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ce:	f7fe ff83 	bl	8000fd8 <HAL_GetTick>
 80020d2:	0003      	movs	r3, r0
 80020d4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d8:	f7fe ff7e 	bl	8000fd8 <HAL_GetTick>
 80020dc:	0002      	movs	r2, r0
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b64      	cmp	r3, #100	; 0x64
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e1f4      	b.n	80024d4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ea:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_RCC_OscConfig+0x344>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	2380      	movs	r3, #128	; 0x80
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4013      	ands	r3, r2
 80020f4:	d0f0      	beq.n	80020d8 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d10e      	bne.n	800211c <HAL_RCC_OscConfig+0x348>
 80020fe:	4b03      	ldr	r3, [pc, #12]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8002100:	6a1a      	ldr	r2, [r3, #32]
 8002102:	4b02      	ldr	r3, [pc, #8]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8002104:	2101      	movs	r1, #1
 8002106:	430a      	orrs	r2, r1
 8002108:	621a      	str	r2, [r3, #32]
 800210a:	e035      	b.n	8002178 <HAL_RCC_OscConfig+0x3a4>
 800210c:	40021000 	.word	0x40021000
 8002110:	fffeffff 	.word	0xfffeffff
 8002114:	fffbffff 	.word	0xfffbffff
 8002118:	40007000 	.word	0x40007000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10c      	bne.n	800213e <HAL_RCC_OscConfig+0x36a>
 8002124:	4bca      	ldr	r3, [pc, #808]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 8002126:	6a1a      	ldr	r2, [r3, #32]
 8002128:	4bc9      	ldr	r3, [pc, #804]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 800212a:	2101      	movs	r1, #1
 800212c:	438a      	bics	r2, r1
 800212e:	621a      	str	r2, [r3, #32]
 8002130:	4bc7      	ldr	r3, [pc, #796]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 8002132:	6a1a      	ldr	r2, [r3, #32]
 8002134:	4bc6      	ldr	r3, [pc, #792]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 8002136:	2104      	movs	r1, #4
 8002138:	438a      	bics	r2, r1
 800213a:	621a      	str	r2, [r3, #32]
 800213c:	e01c      	b.n	8002178 <HAL_RCC_OscConfig+0x3a4>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b05      	cmp	r3, #5
 8002144:	d10c      	bne.n	8002160 <HAL_RCC_OscConfig+0x38c>
 8002146:	4bc2      	ldr	r3, [pc, #776]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 8002148:	6a1a      	ldr	r2, [r3, #32]
 800214a:	4bc1      	ldr	r3, [pc, #772]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 800214c:	2104      	movs	r1, #4
 800214e:	430a      	orrs	r2, r1
 8002150:	621a      	str	r2, [r3, #32]
 8002152:	4bbf      	ldr	r3, [pc, #764]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 8002154:	6a1a      	ldr	r2, [r3, #32]
 8002156:	4bbe      	ldr	r3, [pc, #760]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 8002158:	2101      	movs	r1, #1
 800215a:	430a      	orrs	r2, r1
 800215c:	621a      	str	r2, [r3, #32]
 800215e:	e00b      	b.n	8002178 <HAL_RCC_OscConfig+0x3a4>
 8002160:	4bbb      	ldr	r3, [pc, #748]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 8002162:	6a1a      	ldr	r2, [r3, #32]
 8002164:	4bba      	ldr	r3, [pc, #744]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 8002166:	2101      	movs	r1, #1
 8002168:	438a      	bics	r2, r1
 800216a:	621a      	str	r2, [r3, #32]
 800216c:	4bb8      	ldr	r3, [pc, #736]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 800216e:	6a1a      	ldr	r2, [r3, #32]
 8002170:	4bb7      	ldr	r3, [pc, #732]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 8002172:	2104      	movs	r1, #4
 8002174:	438a      	bics	r2, r1
 8002176:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d014      	beq.n	80021aa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002180:	f7fe ff2a 	bl	8000fd8 <HAL_GetTick>
 8002184:	0003      	movs	r3, r0
 8002186:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002188:	e009      	b.n	800219e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800218a:	f7fe ff25 	bl	8000fd8 <HAL_GetTick>
 800218e:	0002      	movs	r2, r0
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	4aaf      	ldr	r2, [pc, #700]	; (8002454 <HAL_RCC_OscConfig+0x680>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e19a      	b.n	80024d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219e:	4bac      	ldr	r3, [pc, #688]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	2202      	movs	r2, #2
 80021a4:	4013      	ands	r3, r2
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x3b6>
 80021a8:	e013      	b.n	80021d2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021aa:	f7fe ff15 	bl	8000fd8 <HAL_GetTick>
 80021ae:	0003      	movs	r3, r0
 80021b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b2:	e009      	b.n	80021c8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b4:	f7fe ff10 	bl	8000fd8 <HAL_GetTick>
 80021b8:	0002      	movs	r2, r0
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	4aa5      	ldr	r2, [pc, #660]	; (8002454 <HAL_RCC_OscConfig+0x680>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e185      	b.n	80024d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c8:	4ba1      	ldr	r3, [pc, #644]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	2202      	movs	r2, #2
 80021ce:	4013      	ands	r3, r2
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021d2:	231f      	movs	r3, #31
 80021d4:	18fb      	adds	r3, r7, r3
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d105      	bne.n	80021e8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021dc:	4b9c      	ldr	r3, [pc, #624]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 80021de:	69da      	ldr	r2, [r3, #28]
 80021e0:	4b9b      	ldr	r3, [pc, #620]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 80021e2:	499d      	ldr	r1, [pc, #628]	; (8002458 <HAL_RCC_OscConfig+0x684>)
 80021e4:	400a      	ands	r2, r1
 80021e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2210      	movs	r2, #16
 80021ee:	4013      	ands	r3, r2
 80021f0:	d063      	beq.n	80022ba <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d12a      	bne.n	8002250 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80021fa:	4b95      	ldr	r3, [pc, #596]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 80021fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021fe:	4b94      	ldr	r3, [pc, #592]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 8002200:	2104      	movs	r1, #4
 8002202:	430a      	orrs	r2, r1
 8002204:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002206:	4b92      	ldr	r3, [pc, #584]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 8002208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800220a:	4b91      	ldr	r3, [pc, #580]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 800220c:	2101      	movs	r1, #1
 800220e:	430a      	orrs	r2, r1
 8002210:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002212:	f7fe fee1 	bl	8000fd8 <HAL_GetTick>
 8002216:	0003      	movs	r3, r0
 8002218:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800221c:	f7fe fedc 	bl	8000fd8 <HAL_GetTick>
 8002220:	0002      	movs	r2, r0
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e152      	b.n	80024d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800222e:	4b88      	ldr	r3, [pc, #544]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 8002230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002232:	2202      	movs	r2, #2
 8002234:	4013      	ands	r3, r2
 8002236:	d0f1      	beq.n	800221c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002238:	4b85      	ldr	r3, [pc, #532]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 800223a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223c:	22f8      	movs	r2, #248	; 0xf8
 800223e:	4393      	bics	r3, r2
 8002240:	0019      	movs	r1, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	00da      	lsls	r2, r3, #3
 8002248:	4b81      	ldr	r3, [pc, #516]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 800224a:	430a      	orrs	r2, r1
 800224c:	635a      	str	r2, [r3, #52]	; 0x34
 800224e:	e034      	b.n	80022ba <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	3305      	adds	r3, #5
 8002256:	d111      	bne.n	800227c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002258:	4b7d      	ldr	r3, [pc, #500]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 800225a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800225c:	4b7c      	ldr	r3, [pc, #496]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 800225e:	2104      	movs	r1, #4
 8002260:	438a      	bics	r2, r1
 8002262:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002264:	4b7a      	ldr	r3, [pc, #488]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 8002266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002268:	22f8      	movs	r2, #248	; 0xf8
 800226a:	4393      	bics	r3, r2
 800226c:	0019      	movs	r1, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	00da      	lsls	r2, r3, #3
 8002274:	4b76      	ldr	r3, [pc, #472]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 8002276:	430a      	orrs	r2, r1
 8002278:	635a      	str	r2, [r3, #52]	; 0x34
 800227a:	e01e      	b.n	80022ba <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800227c:	4b74      	ldr	r3, [pc, #464]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 800227e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002280:	4b73      	ldr	r3, [pc, #460]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 8002282:	2104      	movs	r1, #4
 8002284:	430a      	orrs	r2, r1
 8002286:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002288:	4b71      	ldr	r3, [pc, #452]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 800228a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800228c:	4b70      	ldr	r3, [pc, #448]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 800228e:	2101      	movs	r1, #1
 8002290:	438a      	bics	r2, r1
 8002292:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002294:	f7fe fea0 	bl	8000fd8 <HAL_GetTick>
 8002298:	0003      	movs	r3, r0
 800229a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800229e:	f7fe fe9b 	bl	8000fd8 <HAL_GetTick>
 80022a2:	0002      	movs	r2, r0
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e111      	b.n	80024d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80022b0:	4b67      	ldr	r3, [pc, #412]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 80022b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b4:	2202      	movs	r2, #2
 80022b6:	4013      	ands	r3, r2
 80022b8:	d1f1      	bne.n	800229e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2220      	movs	r2, #32
 80022c0:	4013      	ands	r3, r2
 80022c2:	d05c      	beq.n	800237e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80022c4:	4b62      	ldr	r3, [pc, #392]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	220c      	movs	r2, #12
 80022ca:	4013      	ands	r3, r2
 80022cc:	2b0c      	cmp	r3, #12
 80022ce:	d00e      	beq.n	80022ee <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80022d0:	4b5f      	ldr	r3, [pc, #380]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	220c      	movs	r2, #12
 80022d6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d114      	bne.n	8002306 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80022dc:	4b5c      	ldr	r3, [pc, #368]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	23c0      	movs	r3, #192	; 0xc0
 80022e2:	025b      	lsls	r3, r3, #9
 80022e4:	401a      	ands	r2, r3
 80022e6:	23c0      	movs	r3, #192	; 0xc0
 80022e8:	025b      	lsls	r3, r3, #9
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d10b      	bne.n	8002306 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80022ee:	4b58      	ldr	r3, [pc, #352]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 80022f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	025b      	lsls	r3, r3, #9
 80022f6:	4013      	ands	r3, r2
 80022f8:	d040      	beq.n	800237c <HAL_RCC_OscConfig+0x5a8>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d03c      	beq.n	800237c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e0e6      	b.n	80024d4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d01b      	beq.n	8002346 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800230e:	4b50      	ldr	r3, [pc, #320]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 8002310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002312:	4b4f      	ldr	r3, [pc, #316]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 8002314:	2180      	movs	r1, #128	; 0x80
 8002316:	0249      	lsls	r1, r1, #9
 8002318:	430a      	orrs	r2, r1
 800231a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231c:	f7fe fe5c 	bl	8000fd8 <HAL_GetTick>
 8002320:	0003      	movs	r3, r0
 8002322:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002326:	f7fe fe57 	bl	8000fd8 <HAL_GetTick>
 800232a:	0002      	movs	r2, r0
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e0cd      	b.n	80024d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002338:	4b45      	ldr	r3, [pc, #276]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 800233a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	025b      	lsls	r3, r3, #9
 8002340:	4013      	ands	r3, r2
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x552>
 8002344:	e01b      	b.n	800237e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002346:	4b42      	ldr	r3, [pc, #264]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 8002348:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800234a:	4b41      	ldr	r3, [pc, #260]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 800234c:	4943      	ldr	r1, [pc, #268]	; (800245c <HAL_RCC_OscConfig+0x688>)
 800234e:	400a      	ands	r2, r1
 8002350:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002352:	f7fe fe41 	bl	8000fd8 <HAL_GetTick>
 8002356:	0003      	movs	r3, r0
 8002358:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800235c:	f7fe fe3c 	bl	8000fd8 <HAL_GetTick>
 8002360:	0002      	movs	r2, r0
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e0b2      	b.n	80024d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800236e:	4b38      	ldr	r3, [pc, #224]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 8002370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	025b      	lsls	r3, r3, #9
 8002376:	4013      	ands	r3, r2
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x588>
 800237a:	e000      	b.n	800237e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800237c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	2b00      	cmp	r3, #0
 8002384:	d100      	bne.n	8002388 <HAL_RCC_OscConfig+0x5b4>
 8002386:	e0a4      	b.n	80024d2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002388:	4b31      	ldr	r3, [pc, #196]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	220c      	movs	r2, #12
 800238e:	4013      	ands	r3, r2
 8002390:	2b08      	cmp	r3, #8
 8002392:	d100      	bne.n	8002396 <HAL_RCC_OscConfig+0x5c2>
 8002394:	e078      	b.n	8002488 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	2b02      	cmp	r3, #2
 800239c:	d14c      	bne.n	8002438 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239e:	4b2c      	ldr	r3, [pc, #176]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	4b2b      	ldr	r3, [pc, #172]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 80023a4:	492e      	ldr	r1, [pc, #184]	; (8002460 <HAL_RCC_OscConfig+0x68c>)
 80023a6:	400a      	ands	r2, r1
 80023a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7fe fe15 	bl	8000fd8 <HAL_GetTick>
 80023ae:	0003      	movs	r3, r0
 80023b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b4:	f7fe fe10 	bl	8000fd8 <HAL_GetTick>
 80023b8:	0002      	movs	r2, r0
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e086      	b.n	80024d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c6:	4b22      	ldr	r3, [pc, #136]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	049b      	lsls	r3, r3, #18
 80023ce:	4013      	ands	r3, r2
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023d2:	4b1f      	ldr	r3, [pc, #124]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d6:	220f      	movs	r2, #15
 80023d8:	4393      	bics	r3, r2
 80023da:	0019      	movs	r1, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023e0:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 80023e2:	430a      	orrs	r2, r1
 80023e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80023e6:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4a1e      	ldr	r2, [pc, #120]	; (8002464 <HAL_RCC_OscConfig+0x690>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	0019      	movs	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f8:	431a      	orrs	r2, r3
 80023fa:	4b15      	ldr	r3, [pc, #84]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 80023fc:	430a      	orrs	r2, r1
 80023fe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002400:	4b13      	ldr	r3, [pc, #76]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b12      	ldr	r3, [pc, #72]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 8002406:	2180      	movs	r1, #128	; 0x80
 8002408:	0449      	lsls	r1, r1, #17
 800240a:	430a      	orrs	r2, r1
 800240c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240e:	f7fe fde3 	bl	8000fd8 <HAL_GetTick>
 8002412:	0003      	movs	r3, r0
 8002414:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002418:	f7fe fdde 	bl	8000fd8 <HAL_GetTick>
 800241c:	0002      	movs	r2, r0
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e054      	b.n	80024d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800242a:	4b09      	ldr	r3, [pc, #36]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	049b      	lsls	r3, r3, #18
 8002432:	4013      	ands	r3, r2
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0x644>
 8002436:	e04c      	b.n	80024d2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4b04      	ldr	r3, [pc, #16]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 800243e:	4908      	ldr	r1, [pc, #32]	; (8002460 <HAL_RCC_OscConfig+0x68c>)
 8002440:	400a      	ands	r2, r1
 8002442:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7fe fdc8 	bl	8000fd8 <HAL_GetTick>
 8002448:	0003      	movs	r3, r0
 800244a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800244c:	e015      	b.n	800247a <HAL_RCC_OscConfig+0x6a6>
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	40021000 	.word	0x40021000
 8002454:	00001388 	.word	0x00001388
 8002458:	efffffff 	.word	0xefffffff
 800245c:	fffeffff 	.word	0xfffeffff
 8002460:	feffffff 	.word	0xfeffffff
 8002464:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002468:	f7fe fdb6 	bl	8000fd8 <HAL_GetTick>
 800246c:	0002      	movs	r2, r0
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e02c      	b.n	80024d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800247a:	4b18      	ldr	r3, [pc, #96]	; (80024dc <HAL_RCC_OscConfig+0x708>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	2380      	movs	r3, #128	; 0x80
 8002480:	049b      	lsls	r3, r3, #18
 8002482:	4013      	ands	r3, r2
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x694>
 8002486:	e024      	b.n	80024d2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e01f      	b.n	80024d4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002494:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HAL_RCC_OscConfig+0x708>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800249a:	4b10      	ldr	r3, [pc, #64]	; (80024dc <HAL_RCC_OscConfig+0x708>)
 800249c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	23c0      	movs	r3, #192	; 0xc0
 80024a4:	025b      	lsls	r3, r3, #9
 80024a6:	401a      	ands	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d10e      	bne.n	80024ce <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	220f      	movs	r2, #15
 80024b4:	401a      	ands	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d107      	bne.n	80024ce <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	23f0      	movs	r3, #240	; 0xf0
 80024c2:	039b      	lsls	r3, r3, #14
 80024c4:	401a      	ands	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d001      	beq.n	80024d2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	0018      	movs	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b008      	add	sp, #32
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40021000 	.word	0x40021000

080024e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0bf      	b.n	8002674 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024f4:	4b61      	ldr	r3, [pc, #388]	; (800267c <HAL_RCC_ClockConfig+0x19c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2201      	movs	r2, #1
 80024fa:	4013      	ands	r3, r2
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d911      	bls.n	8002526 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002502:	4b5e      	ldr	r3, [pc, #376]	; (800267c <HAL_RCC_ClockConfig+0x19c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2201      	movs	r2, #1
 8002508:	4393      	bics	r3, r2
 800250a:	0019      	movs	r1, r3
 800250c:	4b5b      	ldr	r3, [pc, #364]	; (800267c <HAL_RCC_ClockConfig+0x19c>)
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002514:	4b59      	ldr	r3, [pc, #356]	; (800267c <HAL_RCC_ClockConfig+0x19c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2201      	movs	r2, #1
 800251a:	4013      	ands	r3, r2
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	429a      	cmp	r2, r3
 8002520:	d001      	beq.n	8002526 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e0a6      	b.n	8002674 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2202      	movs	r2, #2
 800252c:	4013      	ands	r3, r2
 800252e:	d015      	beq.n	800255c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2204      	movs	r2, #4
 8002536:	4013      	ands	r3, r2
 8002538:	d006      	beq.n	8002548 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800253a:	4b51      	ldr	r3, [pc, #324]	; (8002680 <HAL_RCC_ClockConfig+0x1a0>)
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	4b50      	ldr	r3, [pc, #320]	; (8002680 <HAL_RCC_ClockConfig+0x1a0>)
 8002540:	21e0      	movs	r1, #224	; 0xe0
 8002542:	00c9      	lsls	r1, r1, #3
 8002544:	430a      	orrs	r2, r1
 8002546:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002548:	4b4d      	ldr	r3, [pc, #308]	; (8002680 <HAL_RCC_ClockConfig+0x1a0>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	22f0      	movs	r2, #240	; 0xf0
 800254e:	4393      	bics	r3, r2
 8002550:	0019      	movs	r1, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	4b4a      	ldr	r3, [pc, #296]	; (8002680 <HAL_RCC_ClockConfig+0x1a0>)
 8002558:	430a      	orrs	r2, r1
 800255a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2201      	movs	r2, #1
 8002562:	4013      	ands	r3, r2
 8002564:	d04c      	beq.n	8002600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d107      	bne.n	800257e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	4b44      	ldr	r3, [pc, #272]	; (8002680 <HAL_RCC_ClockConfig+0x1a0>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	2380      	movs	r3, #128	; 0x80
 8002574:	029b      	lsls	r3, r3, #10
 8002576:	4013      	ands	r3, r2
 8002578:	d120      	bne.n	80025bc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e07a      	b.n	8002674 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d107      	bne.n	8002596 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002586:	4b3e      	ldr	r3, [pc, #248]	; (8002680 <HAL_RCC_ClockConfig+0x1a0>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	049b      	lsls	r3, r3, #18
 800258e:	4013      	ands	r3, r2
 8002590:	d114      	bne.n	80025bc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e06e      	b.n	8002674 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b03      	cmp	r3, #3
 800259c:	d107      	bne.n	80025ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800259e:	4b38      	ldr	r3, [pc, #224]	; (8002680 <HAL_RCC_ClockConfig+0x1a0>)
 80025a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	025b      	lsls	r3, r3, #9
 80025a6:	4013      	ands	r3, r2
 80025a8:	d108      	bne.n	80025bc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e062      	b.n	8002674 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ae:	4b34      	ldr	r3, [pc, #208]	; (8002680 <HAL_RCC_ClockConfig+0x1a0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2202      	movs	r2, #2
 80025b4:	4013      	ands	r3, r2
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e05b      	b.n	8002674 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025bc:	4b30      	ldr	r3, [pc, #192]	; (8002680 <HAL_RCC_ClockConfig+0x1a0>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2203      	movs	r2, #3
 80025c2:	4393      	bics	r3, r2
 80025c4:	0019      	movs	r1, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	4b2d      	ldr	r3, [pc, #180]	; (8002680 <HAL_RCC_ClockConfig+0x1a0>)
 80025cc:	430a      	orrs	r2, r1
 80025ce:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025d0:	f7fe fd02 	bl	8000fd8 <HAL_GetTick>
 80025d4:	0003      	movs	r3, r0
 80025d6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d8:	e009      	b.n	80025ee <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025da:	f7fe fcfd 	bl	8000fd8 <HAL_GetTick>
 80025de:	0002      	movs	r2, r0
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	4a27      	ldr	r2, [pc, #156]	; (8002684 <HAL_RCC_ClockConfig+0x1a4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e042      	b.n	8002674 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ee:	4b24      	ldr	r3, [pc, #144]	; (8002680 <HAL_RCC_ClockConfig+0x1a0>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	220c      	movs	r2, #12
 80025f4:	401a      	ands	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d1ec      	bne.n	80025da <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002600:	4b1e      	ldr	r3, [pc, #120]	; (800267c <HAL_RCC_ClockConfig+0x19c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2201      	movs	r2, #1
 8002606:	4013      	ands	r3, r2
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d211      	bcs.n	8002632 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260e:	4b1b      	ldr	r3, [pc, #108]	; (800267c <HAL_RCC_ClockConfig+0x19c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2201      	movs	r2, #1
 8002614:	4393      	bics	r3, r2
 8002616:	0019      	movs	r1, r3
 8002618:	4b18      	ldr	r3, [pc, #96]	; (800267c <HAL_RCC_ClockConfig+0x19c>)
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002620:	4b16      	ldr	r3, [pc, #88]	; (800267c <HAL_RCC_ClockConfig+0x19c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2201      	movs	r2, #1
 8002626:	4013      	ands	r3, r2
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d001      	beq.n	8002632 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e020      	b.n	8002674 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2204      	movs	r2, #4
 8002638:	4013      	ands	r3, r2
 800263a:	d009      	beq.n	8002650 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800263c:	4b10      	ldr	r3, [pc, #64]	; (8002680 <HAL_RCC_ClockConfig+0x1a0>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	4a11      	ldr	r2, [pc, #68]	; (8002688 <HAL_RCC_ClockConfig+0x1a8>)
 8002642:	4013      	ands	r3, r2
 8002644:	0019      	movs	r1, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <HAL_RCC_ClockConfig+0x1a0>)
 800264c:	430a      	orrs	r2, r1
 800264e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002650:	f000 f820 	bl	8002694 <HAL_RCC_GetSysClockFreq>
 8002654:	0001      	movs	r1, r0
 8002656:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <HAL_RCC_ClockConfig+0x1a0>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	220f      	movs	r2, #15
 800265e:	4013      	ands	r3, r2
 8002660:	4a0a      	ldr	r2, [pc, #40]	; (800268c <HAL_RCC_ClockConfig+0x1ac>)
 8002662:	5cd3      	ldrb	r3, [r2, r3]
 8002664:	000a      	movs	r2, r1
 8002666:	40da      	lsrs	r2, r3
 8002668:	4b09      	ldr	r3, [pc, #36]	; (8002690 <HAL_RCC_ClockConfig+0x1b0>)
 800266a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800266c:	2000      	movs	r0, #0
 800266e:	f7fe fc6d 	bl	8000f4c <HAL_InitTick>
  
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	0018      	movs	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	b004      	add	sp, #16
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40022000 	.word	0x40022000
 8002680:	40021000 	.word	0x40021000
 8002684:	00001388 	.word	0x00001388
 8002688:	fffff8ff 	.word	0xfffff8ff
 800268c:	08003834 	.word	0x08003834
 8002690:	20000000 	.word	0x20000000

08002694 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002694:	b590      	push	{r4, r7, lr}
 8002696:	b08f      	sub	sp, #60	; 0x3c
 8002698:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800269a:	2314      	movs	r3, #20
 800269c:	18fb      	adds	r3, r7, r3
 800269e:	4a37      	ldr	r2, [pc, #220]	; (800277c <HAL_RCC_GetSysClockFreq+0xe8>)
 80026a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026a2:	c313      	stmia	r3!, {r0, r1, r4}
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80026a8:	1d3b      	adds	r3, r7, #4
 80026aa:	4a35      	ldr	r2, [pc, #212]	; (8002780 <HAL_RCC_GetSysClockFreq+0xec>)
 80026ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026ae:	c313      	stmia	r3!, {r0, r1, r4}
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026b8:	2300      	movs	r3, #0
 80026ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80026bc:	2300      	movs	r3, #0
 80026be:	637b      	str	r3, [r7, #52]	; 0x34
 80026c0:	2300      	movs	r3, #0
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80026c8:	4b2e      	ldr	r3, [pc, #184]	; (8002784 <HAL_RCC_GetSysClockFreq+0xf0>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d0:	220c      	movs	r2, #12
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d006      	beq.n	80026e6 <HAL_RCC_GetSysClockFreq+0x52>
 80026d8:	2b0c      	cmp	r3, #12
 80026da:	d043      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0xd0>
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d144      	bne.n	800276a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026e0:	4b29      	ldr	r3, [pc, #164]	; (8002788 <HAL_RCC_GetSysClockFreq+0xf4>)
 80026e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026e4:	e044      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80026e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e8:	0c9b      	lsrs	r3, r3, #18
 80026ea:	220f      	movs	r2, #15
 80026ec:	4013      	ands	r3, r2
 80026ee:	2214      	movs	r2, #20
 80026f0:	18ba      	adds	r2, r7, r2
 80026f2:	5cd3      	ldrb	r3, [r2, r3]
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80026f6:	4b23      	ldr	r3, [pc, #140]	; (8002784 <HAL_RCC_GetSysClockFreq+0xf0>)
 80026f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fa:	220f      	movs	r2, #15
 80026fc:	4013      	ands	r3, r2
 80026fe:	1d3a      	adds	r2, r7, #4
 8002700:	5cd3      	ldrb	r3, [r2, r3]
 8002702:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002706:	23c0      	movs	r3, #192	; 0xc0
 8002708:	025b      	lsls	r3, r3, #9
 800270a:	401a      	ands	r2, r3
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	025b      	lsls	r3, r3, #9
 8002710:	429a      	cmp	r2, r3
 8002712:	d109      	bne.n	8002728 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002714:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002716:	481c      	ldr	r0, [pc, #112]	; (8002788 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002718:	f7fd fcf6 	bl	8000108 <__udivsi3>
 800271c:	0003      	movs	r3, r0
 800271e:	001a      	movs	r2, r3
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	4353      	muls	r3, r2
 8002724:	637b      	str	r3, [r7, #52]	; 0x34
 8002726:	e01a      	b.n	800275e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800272a:	23c0      	movs	r3, #192	; 0xc0
 800272c:	025b      	lsls	r3, r3, #9
 800272e:	401a      	ands	r2, r3
 8002730:	23c0      	movs	r3, #192	; 0xc0
 8002732:	025b      	lsls	r3, r3, #9
 8002734:	429a      	cmp	r2, r3
 8002736:	d109      	bne.n	800274c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002738:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800273a:	4814      	ldr	r0, [pc, #80]	; (800278c <HAL_RCC_GetSysClockFreq+0xf8>)
 800273c:	f7fd fce4 	bl	8000108 <__udivsi3>
 8002740:	0003      	movs	r3, r0
 8002742:	001a      	movs	r2, r3
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	4353      	muls	r3, r2
 8002748:	637b      	str	r3, [r7, #52]	; 0x34
 800274a:	e008      	b.n	800275e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800274c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800274e:	480e      	ldr	r0, [pc, #56]	; (8002788 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002750:	f7fd fcda 	bl	8000108 <__udivsi3>
 8002754:	0003      	movs	r3, r0
 8002756:	001a      	movs	r2, r3
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	4353      	muls	r3, r2
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800275e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002760:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002762:	e005      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002764:	4b09      	ldr	r3, [pc, #36]	; (800278c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002766:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002768:	e002      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800276a:	4b07      	ldr	r3, [pc, #28]	; (8002788 <HAL_RCC_GetSysClockFreq+0xf4>)
 800276c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800276e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002772:	0018      	movs	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	b00f      	add	sp, #60	; 0x3c
 8002778:	bd90      	pop	{r4, r7, pc}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	08003814 	.word	0x08003814
 8002780:	08003824 	.word	0x08003824
 8002784:	40021000 	.word	0x40021000
 8002788:	007a1200 	.word	0x007a1200
 800278c:	02dc6c00 	.word	0x02dc6c00

08002790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002794:	4b02      	ldr	r3, [pc, #8]	; (80027a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002796:	681b      	ldr	r3, [r3, #0]
}
 8002798:	0018      	movs	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	20000000 	.word	0x20000000

080027a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80027a8:	f7ff fff2 	bl	8002790 <HAL_RCC_GetHCLKFreq>
 80027ac:	0001      	movs	r1, r0
 80027ae:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	0a1b      	lsrs	r3, r3, #8
 80027b4:	2207      	movs	r2, #7
 80027b6:	4013      	ands	r3, r2
 80027b8:	4a04      	ldr	r2, [pc, #16]	; (80027cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80027ba:	5cd3      	ldrb	r3, [r2, r3]
 80027bc:	40d9      	lsrs	r1, r3
 80027be:	000b      	movs	r3, r1
}    
 80027c0:	0018      	movs	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	40021000 	.word	0x40021000
 80027cc:	08003844 	.word	0x08003844

080027d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e01e      	b.n	8002820 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	223d      	movs	r2, #61	; 0x3d
 80027e6:	5c9b      	ldrb	r3, [r3, r2]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d107      	bne.n	80027fe <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	223c      	movs	r2, #60	; 0x3c
 80027f2:	2100      	movs	r1, #0
 80027f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	0018      	movs	r0, r3
 80027fa:	f7fe f9c5 	bl	8000b88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	223d      	movs	r2, #61	; 0x3d
 8002802:	2102      	movs	r1, #2
 8002804:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3304      	adds	r3, #4
 800280e:	0019      	movs	r1, r3
 8002810:	0010      	movs	r0, r2
 8002812:	f000 f99b 	bl	8002b4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	223d      	movs	r2, #61	; 0x3d
 800281a:	2101      	movs	r1, #1
 800281c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	0018      	movs	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	b002      	add	sp, #8
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6839      	ldr	r1, [r7, #0]
 8002838:	2201      	movs	r2, #1
 800283a:	0018      	movs	r0, r3
 800283c:	f000 fbdc 	bl	8002ff8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a18      	ldr	r2, [pc, #96]	; (80028a8 <HAL_TIM_PWM_Start+0x80>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d009      	beq.n	800285e <HAL_TIM_PWM_Start+0x36>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a17      	ldr	r2, [pc, #92]	; (80028ac <HAL_TIM_PWM_Start+0x84>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d004      	beq.n	800285e <HAL_TIM_PWM_Start+0x36>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a15      	ldr	r2, [pc, #84]	; (80028b0 <HAL_TIM_PWM_Start+0x88>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d101      	bne.n	8002862 <HAL_TIM_PWM_Start+0x3a>
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <HAL_TIM_PWM_Start+0x3c>
 8002862:	2300      	movs	r3, #0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <HAL_TIM_PWM_Start+0x52>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2180      	movs	r1, #128	; 0x80
 8002874:	0209      	lsls	r1, r1, #8
 8002876:	430a      	orrs	r2, r1
 8002878:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2207      	movs	r2, #7
 8002882:	4013      	ands	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2b06      	cmp	r3, #6
 800288a:	d007      	beq.n	800289c <HAL_TIM_PWM_Start+0x74>
  {
    __HAL_TIM_ENABLE(htim);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2101      	movs	r1, #1
 8002898:	430a      	orrs	r2, r1
 800289a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	0018      	movs	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b004      	add	sp, #16
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	40012c00 	.word	0x40012c00
 80028ac:	40014400 	.word	0x40014400
 80028b0:	40014800 	.word	0x40014800

080028b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e07c      	b.n	80029c2 <HAL_TIM_Encoder_Init+0x10e>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	223d      	movs	r2, #61	; 0x3d
 80028cc:	5c9b      	ldrb	r3, [r3, r2]
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d107      	bne.n	80028e4 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	223c      	movs	r2, #60	; 0x3c
 80028d8:	2100      	movs	r1, #0
 80028da:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	0018      	movs	r0, r3
 80028e0:	f7fe f908 	bl	8000af4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	223d      	movs	r2, #61	; 0x3d
 80028e8:	2102      	movs	r1, #2
 80028ea:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4935      	ldr	r1, [pc, #212]	; (80029cc <HAL_TIM_Encoder_Init+0x118>)
 80028f8:	400a      	ands	r2, r1
 80028fa:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3304      	adds	r3, #4
 8002904:	0019      	movs	r1, r3
 8002906:	0010      	movs	r0, r2
 8002908:	f000 f920 	bl	8002b4c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	4313      	orrs	r3, r2
 800292c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4a27      	ldr	r2, [pc, #156]	; (80029d0 <HAL_TIM_Encoder_Init+0x11c>)
 8002932:	4013      	ands	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	021b      	lsls	r3, r3, #8
 8002940:	4313      	orrs	r3, r2
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4a22      	ldr	r2, [pc, #136]	; (80029d4 <HAL_TIM_Encoder_Init+0x120>)
 800294c:	4013      	ands	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4a21      	ldr	r2, [pc, #132]	; (80029d8 <HAL_TIM_Encoder_Init+0x124>)
 8002954:	4013      	ands	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	021b      	lsls	r3, r3, #8
 8002962:	4313      	orrs	r3, r2
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	011a      	lsls	r2, r3, #4
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	031b      	lsls	r3, r3, #12
 8002976:	4313      	orrs	r3, r2
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2222      	movs	r2, #34	; 0x22
 8002982:	4393      	bics	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2288      	movs	r2, #136	; 0x88
 800298a:	4393      	bics	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	4313      	orrs	r3, r2
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4313      	orrs	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	223d      	movs	r2, #61	; 0x3d
 80029bc:	2101      	movs	r1, #1
 80029be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	0018      	movs	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	b006      	add	sp, #24
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	ffffbff8 	.word	0xffffbff8
 80029d0:	fffffcfc 	.word	0xfffffcfc
 80029d4:	fffff3f3 	.word	0xfffff3f3
 80029d8:	ffff0f0f 	.word	0xffff0f0f

080029dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	223c      	movs	r2, #60	; 0x3c
 80029ec:	5c9b      	ldrb	r3, [r3, r2]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e0a4      	b.n	8002b40 <HAL_TIM_PWM_ConfigChannel+0x164>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	223c      	movs	r2, #60	; 0x3c
 80029fa:	2101      	movs	r1, #1
 80029fc:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	223d      	movs	r2, #61	; 0x3d
 8002a02:	2102      	movs	r1, #2
 8002a04:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d029      	beq.n	8002a60 <HAL_TIM_PWM_ConfigChannel+0x84>
 8002a0c:	d802      	bhi.n	8002a14 <HAL_TIM_PWM_ConfigChannel+0x38>
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d005      	beq.n	8002a1e <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8002a12:	e08c      	b.n	8002b2e <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d046      	beq.n	8002aa6 <HAL_TIM_PWM_ConfigChannel+0xca>
 8002a18:	2b0c      	cmp	r3, #12
 8002a1a:	d065      	beq.n	8002ae8 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8002a1c:	e087      	b.n	8002b2e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	0011      	movs	r1, r2
 8002a26:	0018      	movs	r0, r3
 8002a28:	f000 f906 	bl	8002c38 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2108      	movs	r1, #8
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699a      	ldr	r2, [r3, #24]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2104      	movs	r1, #4
 8002a48:	438a      	bics	r2, r1
 8002a4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6999      	ldr	r1, [r3, #24]
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	691a      	ldr	r2, [r3, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	619a      	str	r2, [r3, #24]
      break;
 8002a5e:	e066      	b.n	8002b2e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	0011      	movs	r1, r2
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f000 f963 	bl	8002d34 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	699a      	ldr	r2, [r3, #24]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2180      	movs	r1, #128	; 0x80
 8002a7a:	0109      	lsls	r1, r1, #4
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699a      	ldr	r2, [r3, #24]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	492f      	ldr	r1, [pc, #188]	; (8002b48 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002a8c:	400a      	ands	r2, r1
 8002a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6999      	ldr	r1, [r3, #24]
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	021a      	lsls	r2, r3, #8
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	619a      	str	r2, [r3, #24]
      break;
 8002aa4:	e043      	b.n	8002b2e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	0011      	movs	r1, r2
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f000 f9be 	bl	8002e30 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	69da      	ldr	r2, [r3, #28]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2108      	movs	r1, #8
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	69da      	ldr	r2, [r3, #28]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2104      	movs	r1, #4
 8002ad0:	438a      	bics	r2, r1
 8002ad2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	69d9      	ldr	r1, [r3, #28]
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	61da      	str	r2, [r3, #28]
      break;
 8002ae6:	e022      	b.n	8002b2e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	0011      	movs	r1, r2
 8002af0:	0018      	movs	r0, r3
 8002af2:	f000 fa1d 	bl	8002f30 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	69da      	ldr	r2, [r3, #28]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2180      	movs	r1, #128	; 0x80
 8002b02:	0109      	lsls	r1, r1, #4
 8002b04:	430a      	orrs	r2, r1
 8002b06:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	69da      	ldr	r2, [r3, #28]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	490d      	ldr	r1, [pc, #52]	; (8002b48 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002b14:	400a      	ands	r2, r1
 8002b16:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	69d9      	ldr	r1, [r3, #28]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	021a      	lsls	r2, r3, #8
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	61da      	str	r2, [r3, #28]
      break;
 8002b2c:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	223d      	movs	r2, #61	; 0x3d
 8002b32:	2101      	movs	r1, #1
 8002b34:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	223c      	movs	r2, #60	; 0x3c
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	0018      	movs	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	b004      	add	sp, #16
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	fffffbff 	.word	0xfffffbff

08002b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a30      	ldr	r2, [pc, #192]	; (8002c20 <TIM_Base_SetConfig+0xd4>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d008      	beq.n	8002b76 <TIM_Base_SetConfig+0x2a>
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	2380      	movs	r3, #128	; 0x80
 8002b68:	05db      	lsls	r3, r3, #23
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d003      	beq.n	8002b76 <TIM_Base_SetConfig+0x2a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a2c      	ldr	r2, [pc, #176]	; (8002c24 <TIM_Base_SetConfig+0xd8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d108      	bne.n	8002b88 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2270      	movs	r2, #112	; 0x70
 8002b7a:	4393      	bics	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a25      	ldr	r2, [pc, #148]	; (8002c20 <TIM_Base_SetConfig+0xd4>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d014      	beq.n	8002bba <TIM_Base_SetConfig+0x6e>
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	2380      	movs	r3, #128	; 0x80
 8002b94:	05db      	lsls	r3, r3, #23
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d00f      	beq.n	8002bba <TIM_Base_SetConfig+0x6e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a21      	ldr	r2, [pc, #132]	; (8002c24 <TIM_Base_SetConfig+0xd8>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d00b      	beq.n	8002bba <TIM_Base_SetConfig+0x6e>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a20      	ldr	r2, [pc, #128]	; (8002c28 <TIM_Base_SetConfig+0xdc>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d007      	beq.n	8002bba <TIM_Base_SetConfig+0x6e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a1f      	ldr	r2, [pc, #124]	; (8002c2c <TIM_Base_SetConfig+0xe0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d003      	beq.n	8002bba <TIM_Base_SetConfig+0x6e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a1e      	ldr	r2, [pc, #120]	; (8002c30 <TIM_Base_SetConfig+0xe4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d108      	bne.n	8002bcc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4a1d      	ldr	r2, [pc, #116]	; (8002c34 <TIM_Base_SetConfig+0xe8>)
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2280      	movs	r2, #128	; 0x80
 8002bd0:	4393      	bics	r3, r2
 8002bd2:	001a      	movs	r2, r3
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <TIM_Base_SetConfig+0xd4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d007      	beq.n	8002c0a <TIM_Base_SetConfig+0xbe>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a0b      	ldr	r2, [pc, #44]	; (8002c2c <TIM_Base_SetConfig+0xe0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d003      	beq.n	8002c0a <TIM_Base_SetConfig+0xbe>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <TIM_Base_SetConfig+0xe4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d103      	bne.n	8002c12 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	691a      	ldr	r2, [r3, #16]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	615a      	str	r2, [r3, #20]
}
 8002c18:	46c0      	nop			; (mov r8, r8)
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b004      	add	sp, #16
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40012c00 	.word	0x40012c00
 8002c24:	40000400 	.word	0x40000400
 8002c28:	40002000 	.word	0x40002000
 8002c2c:	40014400 	.word	0x40014400
 8002c30:	40014800 	.word	0x40014800
 8002c34:	fffffcff 	.word	0xfffffcff

08002c38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	2201      	movs	r2, #1
 8002c48:	4393      	bics	r3, r2
 8002c4a:	001a      	movs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2270      	movs	r2, #112	; 0x70
 8002c66:	4393      	bics	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	4393      	bics	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	4393      	bics	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a23      	ldr	r2, [pc, #140]	; (8002d20 <TIM_OC1_SetConfig+0xe8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d007      	beq.n	8002ca6 <TIM_OC1_SetConfig+0x6e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a22      	ldr	r2, [pc, #136]	; (8002d24 <TIM_OC1_SetConfig+0xec>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d003      	beq.n	8002ca6 <TIM_OC1_SetConfig+0x6e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a21      	ldr	r2, [pc, #132]	; (8002d28 <TIM_OC1_SetConfig+0xf0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d10c      	bne.n	8002cc0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2208      	movs	r2, #8
 8002caa:	4393      	bics	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	2204      	movs	r2, #4
 8002cbc:	4393      	bics	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a17      	ldr	r2, [pc, #92]	; (8002d20 <TIM_OC1_SetConfig+0xe8>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d007      	beq.n	8002cd8 <TIM_OC1_SetConfig+0xa0>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a16      	ldr	r2, [pc, #88]	; (8002d24 <TIM_OC1_SetConfig+0xec>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d003      	beq.n	8002cd8 <TIM_OC1_SetConfig+0xa0>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a15      	ldr	r2, [pc, #84]	; (8002d28 <TIM_OC1_SetConfig+0xf0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d111      	bne.n	8002cfc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4a14      	ldr	r2, [pc, #80]	; (8002d2c <TIM_OC1_SetConfig+0xf4>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4a13      	ldr	r2, [pc, #76]	; (8002d30 <TIM_OC1_SetConfig+0xf8>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	621a      	str	r2, [r3, #32]
}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b006      	add	sp, #24
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	40012c00 	.word	0x40012c00
 8002d24:	40014400 	.word	0x40014400
 8002d28:	40014800 	.word	0x40014800
 8002d2c:	fffffeff 	.word	0xfffffeff
 8002d30:	fffffdff 	.word	0xfffffdff

08002d34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	2210      	movs	r2, #16
 8002d44:	4393      	bics	r3, r2
 8002d46:	001a      	movs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4a2c      	ldr	r2, [pc, #176]	; (8002e14 <TIM_OC2_SetConfig+0xe0>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4a2b      	ldr	r2, [pc, #172]	; (8002e18 <TIM_OC2_SetConfig+0xe4>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	021b      	lsls	r3, r3, #8
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	4393      	bics	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a22      	ldr	r2, [pc, #136]	; (8002e1c <TIM_OC2_SetConfig+0xe8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d10d      	bne.n	8002db2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2280      	movs	r2, #128	; 0x80
 8002d9a:	4393      	bics	r3, r2
 8002d9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2240      	movs	r2, #64	; 0x40
 8002dae:	4393      	bics	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a19      	ldr	r2, [pc, #100]	; (8002e1c <TIM_OC2_SetConfig+0xe8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d007      	beq.n	8002dca <TIM_OC2_SetConfig+0x96>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a18      	ldr	r2, [pc, #96]	; (8002e20 <TIM_OC2_SetConfig+0xec>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d003      	beq.n	8002dca <TIM_OC2_SetConfig+0x96>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a17      	ldr	r2, [pc, #92]	; (8002e24 <TIM_OC2_SetConfig+0xf0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d113      	bne.n	8002df2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4a16      	ldr	r2, [pc, #88]	; (8002e28 <TIM_OC2_SetConfig+0xf4>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	4a15      	ldr	r2, [pc, #84]	; (8002e2c <TIM_OC2_SetConfig+0xf8>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	621a      	str	r2, [r3, #32]
}
 8002e0c:	46c0      	nop			; (mov r8, r8)
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b006      	add	sp, #24
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	ffff8fff 	.word	0xffff8fff
 8002e18:	fffffcff 	.word	0xfffffcff
 8002e1c:	40012c00 	.word	0x40012c00
 8002e20:	40014400 	.word	0x40014400
 8002e24:	40014800 	.word	0x40014800
 8002e28:	fffffbff 	.word	0xfffffbff
 8002e2c:	fffff7ff 	.word	0xfffff7ff

08002e30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	4a33      	ldr	r2, [pc, #204]	; (8002f0c <TIM_OC3_SetConfig+0xdc>)
 8002e40:	401a      	ands	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2270      	movs	r2, #112	; 0x70
 8002e5c:	4393      	bics	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2203      	movs	r2, #3
 8002e64:	4393      	bics	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	4a26      	ldr	r2, [pc, #152]	; (8002f10 <TIM_OC3_SetConfig+0xe0>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	021b      	lsls	r3, r3, #8
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a22      	ldr	r2, [pc, #136]	; (8002f14 <TIM_OC3_SetConfig+0xe4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d10d      	bne.n	8002eaa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	4a21      	ldr	r2, [pc, #132]	; (8002f18 <TIM_OC3_SetConfig+0xe8>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	021b      	lsls	r3, r3, #8
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	4a1d      	ldr	r2, [pc, #116]	; (8002f1c <TIM_OC3_SetConfig+0xec>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a19      	ldr	r2, [pc, #100]	; (8002f14 <TIM_OC3_SetConfig+0xe4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d007      	beq.n	8002ec2 <TIM_OC3_SetConfig+0x92>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a1a      	ldr	r2, [pc, #104]	; (8002f20 <TIM_OC3_SetConfig+0xf0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d003      	beq.n	8002ec2 <TIM_OC3_SetConfig+0x92>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a19      	ldr	r2, [pc, #100]	; (8002f24 <TIM_OC3_SetConfig+0xf4>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d113      	bne.n	8002eea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4a18      	ldr	r2, [pc, #96]	; (8002f28 <TIM_OC3_SetConfig+0xf8>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4a17      	ldr	r2, [pc, #92]	; (8002f2c <TIM_OC3_SetConfig+0xfc>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	621a      	str	r2, [r3, #32]
}
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b006      	add	sp, #24
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	fffffeff 	.word	0xfffffeff
 8002f10:	fffffdff 	.word	0xfffffdff
 8002f14:	40012c00 	.word	0x40012c00
 8002f18:	fffff7ff 	.word	0xfffff7ff
 8002f1c:	fffffbff 	.word	0xfffffbff
 8002f20:	40014400 	.word	0x40014400
 8002f24:	40014800 	.word	0x40014800
 8002f28:	ffffefff 	.word	0xffffefff
 8002f2c:	ffffdfff 	.word	0xffffdfff

08002f30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	4a26      	ldr	r2, [pc, #152]	; (8002fd8 <TIM_OC4_SetConfig+0xa8>)
 8002f40:	401a      	ands	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4a20      	ldr	r2, [pc, #128]	; (8002fdc <TIM_OC4_SetConfig+0xac>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4a1f      	ldr	r2, [pc, #124]	; (8002fe0 <TIM_OC4_SetConfig+0xb0>)
 8002f64:	4013      	ands	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	021b      	lsls	r3, r3, #8
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4a1b      	ldr	r2, [pc, #108]	; (8002fe4 <TIM_OC4_SetConfig+0xb4>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	031b      	lsls	r3, r3, #12
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a17      	ldr	r2, [pc, #92]	; (8002fe8 <TIM_OC4_SetConfig+0xb8>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d007      	beq.n	8002fa0 <TIM_OC4_SetConfig+0x70>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a16      	ldr	r2, [pc, #88]	; (8002fec <TIM_OC4_SetConfig+0xbc>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d003      	beq.n	8002fa0 <TIM_OC4_SetConfig+0x70>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a15      	ldr	r2, [pc, #84]	; (8002ff0 <TIM_OC4_SetConfig+0xc0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d109      	bne.n	8002fb4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	4a14      	ldr	r2, [pc, #80]	; (8002ff4 <TIM_OC4_SetConfig+0xc4>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	019b      	lsls	r3, r3, #6
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	621a      	str	r2, [r3, #32]
}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	b006      	add	sp, #24
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	ffffefff 	.word	0xffffefff
 8002fdc:	ffff8fff 	.word	0xffff8fff
 8002fe0:	fffffcff 	.word	0xfffffcff
 8002fe4:	ffffdfff 	.word	0xffffdfff
 8002fe8:	40012c00 	.word	0x40012c00
 8002fec:	40014400 	.word	0x40014400
 8002ff0:	40014800 	.word	0x40014800
 8002ff4:	ffffbfff 	.word	0xffffbfff

08002ff8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	221f      	movs	r2, #31
 8003008:	4013      	ands	r3, r2
 800300a:	2201      	movs	r2, #1
 800300c:	409a      	lsls	r2, r3
 800300e:	0013      	movs	r3, r2
 8003010:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	43d2      	mvns	r2, r2
 800301a:	401a      	ands	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a1a      	ldr	r2, [r3, #32]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	211f      	movs	r1, #31
 8003028:	400b      	ands	r3, r1
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4099      	lsls	r1, r3
 800302e:	000b      	movs	r3, r1
 8003030:	431a      	orrs	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	621a      	str	r2, [r3, #32]
}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	46bd      	mov	sp, r7
 800303a:	b006      	add	sp, #24
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	223c      	movs	r2, #60	; 0x3c
 800304e:	5c9b      	ldrb	r3, [r3, r2]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003054:	2302      	movs	r3, #2
 8003056:	e042      	b.n	80030de <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	223c      	movs	r2, #60	; 0x3c
 800305c:	2101      	movs	r1, #1
 800305e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	223d      	movs	r2, #61	; 0x3d
 8003064:	2102      	movs	r1, #2
 8003066:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2270      	movs	r2, #112	; 0x70
 800307c:	4393      	bics	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a14      	ldr	r2, [pc, #80]	; (80030e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d00a      	beq.n	80030b2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	2380      	movs	r3, #128	; 0x80
 80030a2:	05db      	lsls	r3, r3, #23
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d004      	beq.n	80030b2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a0f      	ldr	r2, [pc, #60]	; (80030ec <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d10c      	bne.n	80030cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2280      	movs	r2, #128	; 0x80
 80030b6:	4393      	bics	r3, r2
 80030b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	223d      	movs	r2, #61	; 0x3d
 80030d0:	2101      	movs	r1, #1
 80030d2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	223c      	movs	r2, #60	; 0x3c
 80030d8:	2100      	movs	r1, #0
 80030da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	0018      	movs	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b004      	add	sp, #16
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	40012c00 	.word	0x40012c00
 80030ec:	40000400 	.word	0x40000400

080030f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e044      	b.n	800318c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003106:	2b00      	cmp	r3, #0
 8003108:	d107      	bne.n	800311a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2270      	movs	r2, #112	; 0x70
 800310e:	2100      	movs	r1, #0
 8003110:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	0018      	movs	r0, r3
 8003116:	f7fd fe1f 	bl	8000d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2224      	movs	r2, #36	; 0x24
 800311e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2101      	movs	r1, #1
 800312c:	438a      	bics	r2, r1
 800312e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	0018      	movs	r0, r3
 8003134:	f000 f830 	bl	8003198 <UART_SetConfig>
 8003138:	0003      	movs	r3, r0
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e024      	b.n	800318c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	0018      	movs	r0, r3
 800314e:	f000 f9a9 	bl	80034a4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	490d      	ldr	r1, [pc, #52]	; (8003194 <HAL_UART_Init+0xa4>)
 800315e:	400a      	ands	r2, r1
 8003160:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	212a      	movs	r1, #42	; 0x2a
 800316e:	438a      	bics	r2, r1
 8003170:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2101      	movs	r1, #1
 800317e:	430a      	orrs	r2, r1
 8003180:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	0018      	movs	r0, r3
 8003186:	f000 fa41 	bl	800360c <UART_CheckIdleState>
 800318a:	0003      	movs	r3, r0
}
 800318c:	0018      	movs	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	b002      	add	sp, #8
 8003192:	bd80      	pop	{r7, pc}
 8003194:	ffffb7ff 	.word	0xffffb7ff

08003198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80031a4:	2317      	movs	r3, #23
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	2200      	movs	r2, #0
 80031aa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4aad      	ldr	r2, [pc, #692]	; (8003480 <UART_SetConfig+0x2e8>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	0019      	movs	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	4aa8      	ldr	r2, [pc, #672]	; (8003484 <UART_SetConfig+0x2ec>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	0019      	movs	r1, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	4a9f      	ldr	r2, [pc, #636]	; (8003488 <UART_SetConfig+0x2f0>)
 800320a:	4013      	ands	r3, r2
 800320c:	0019      	movs	r1, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	430a      	orrs	r2, r1
 8003216:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a9b      	ldr	r2, [pc, #620]	; (800348c <UART_SetConfig+0x2f4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d125      	bne.n	800326e <UART_SetConfig+0xd6>
 8003222:	4b9b      	ldr	r3, [pc, #620]	; (8003490 <UART_SetConfig+0x2f8>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	2203      	movs	r2, #3
 8003228:	4013      	ands	r3, r2
 800322a:	2b01      	cmp	r3, #1
 800322c:	d00f      	beq.n	800324e <UART_SetConfig+0xb6>
 800322e:	d304      	bcc.n	800323a <UART_SetConfig+0xa2>
 8003230:	2b02      	cmp	r3, #2
 8003232:	d011      	beq.n	8003258 <UART_SetConfig+0xc0>
 8003234:	2b03      	cmp	r3, #3
 8003236:	d005      	beq.n	8003244 <UART_SetConfig+0xac>
 8003238:	e013      	b.n	8003262 <UART_SetConfig+0xca>
 800323a:	231f      	movs	r3, #31
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	2200      	movs	r2, #0
 8003240:	701a      	strb	r2, [r3, #0]
 8003242:	e022      	b.n	800328a <UART_SetConfig+0xf2>
 8003244:	231f      	movs	r3, #31
 8003246:	18fb      	adds	r3, r7, r3
 8003248:	2202      	movs	r2, #2
 800324a:	701a      	strb	r2, [r3, #0]
 800324c:	e01d      	b.n	800328a <UART_SetConfig+0xf2>
 800324e:	231f      	movs	r3, #31
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	2204      	movs	r2, #4
 8003254:	701a      	strb	r2, [r3, #0]
 8003256:	e018      	b.n	800328a <UART_SetConfig+0xf2>
 8003258:	231f      	movs	r3, #31
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	2208      	movs	r2, #8
 800325e:	701a      	strb	r2, [r3, #0]
 8003260:	e013      	b.n	800328a <UART_SetConfig+0xf2>
 8003262:	231f      	movs	r3, #31
 8003264:	18fb      	adds	r3, r7, r3
 8003266:	2210      	movs	r2, #16
 8003268:	701a      	strb	r2, [r3, #0]
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	e00d      	b.n	800328a <UART_SetConfig+0xf2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a88      	ldr	r2, [pc, #544]	; (8003494 <UART_SetConfig+0x2fc>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d104      	bne.n	8003282 <UART_SetConfig+0xea>
 8003278:	231f      	movs	r3, #31
 800327a:	18fb      	adds	r3, r7, r3
 800327c:	2200      	movs	r2, #0
 800327e:	701a      	strb	r2, [r3, #0]
 8003280:	e003      	b.n	800328a <UART_SetConfig+0xf2>
 8003282:	231f      	movs	r3, #31
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	2210      	movs	r2, #16
 8003288:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69da      	ldr	r2, [r3, #28]
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	021b      	lsls	r3, r3, #8
 8003292:	429a      	cmp	r2, r3
 8003294:	d000      	beq.n	8003298 <UART_SetConfig+0x100>
 8003296:	e07d      	b.n	8003394 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8003298:	231f      	movs	r3, #31
 800329a:	18fb      	adds	r3, r7, r3
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d01c      	beq.n	80032dc <UART_SetConfig+0x144>
 80032a2:	dc02      	bgt.n	80032aa <UART_SetConfig+0x112>
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <UART_SetConfig+0x11c>
 80032a8:	e04b      	b.n	8003342 <UART_SetConfig+0x1aa>
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d025      	beq.n	80032fa <UART_SetConfig+0x162>
 80032ae:	2b08      	cmp	r3, #8
 80032b0:	d037      	beq.n	8003322 <UART_SetConfig+0x18a>
 80032b2:	e046      	b.n	8003342 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032b4:	f7ff fa76 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 80032b8:	0003      	movs	r3, r0
 80032ba:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	005a      	lsls	r2, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	085b      	lsrs	r3, r3, #1
 80032c6:	18d2      	adds	r2, r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	0019      	movs	r1, r3
 80032ce:	0010      	movs	r0, r2
 80032d0:	f7fc ff1a 	bl	8000108 <__udivsi3>
 80032d4:	0003      	movs	r3, r0
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	61bb      	str	r3, [r7, #24]
        break;
 80032da:	e037      	b.n	800334c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	085b      	lsrs	r3, r3, #1
 80032e2:	4a6d      	ldr	r2, [pc, #436]	; (8003498 <UART_SetConfig+0x300>)
 80032e4:	189a      	adds	r2, r3, r2
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	0019      	movs	r1, r3
 80032ec:	0010      	movs	r0, r2
 80032ee:	f7fc ff0b 	bl	8000108 <__udivsi3>
 80032f2:	0003      	movs	r3, r0
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	61bb      	str	r3, [r7, #24]
        break;
 80032f8:	e028      	b.n	800334c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032fa:	f7ff f9cb 	bl	8002694 <HAL_RCC_GetSysClockFreq>
 80032fe:	0003      	movs	r3, r0
 8003300:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	005a      	lsls	r2, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	085b      	lsrs	r3, r3, #1
 800330c:	18d2      	adds	r2, r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	0019      	movs	r1, r3
 8003314:	0010      	movs	r0, r2
 8003316:	f7fc fef7 	bl	8000108 <__udivsi3>
 800331a:	0003      	movs	r3, r0
 800331c:	b29b      	uxth	r3, r3
 800331e:	61bb      	str	r3, [r7, #24]
        break;
 8003320:	e014      	b.n	800334c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	085b      	lsrs	r3, r3, #1
 8003328:	2280      	movs	r2, #128	; 0x80
 800332a:	0252      	lsls	r2, r2, #9
 800332c:	189a      	adds	r2, r3, r2
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	0019      	movs	r1, r3
 8003334:	0010      	movs	r0, r2
 8003336:	f7fc fee7 	bl	8000108 <__udivsi3>
 800333a:	0003      	movs	r3, r0
 800333c:	b29b      	uxth	r3, r3
 800333e:	61bb      	str	r3, [r7, #24]
        break;
 8003340:	e004      	b.n	800334c <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8003342:	2317      	movs	r3, #23
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	2201      	movs	r2, #1
 8003348:	701a      	strb	r2, [r3, #0]
        break;
 800334a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	2b0f      	cmp	r3, #15
 8003350:	d91b      	bls.n	800338a <UART_SetConfig+0x1f2>
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	4a51      	ldr	r2, [pc, #324]	; (800349c <UART_SetConfig+0x304>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d817      	bhi.n	800338a <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	b29a      	uxth	r2, r3
 800335e:	200a      	movs	r0, #10
 8003360:	183b      	adds	r3, r7, r0
 8003362:	210f      	movs	r1, #15
 8003364:	438a      	bics	r2, r1
 8003366:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	085b      	lsrs	r3, r3, #1
 800336c:	b29b      	uxth	r3, r3
 800336e:	2207      	movs	r2, #7
 8003370:	4013      	ands	r3, r2
 8003372:	b299      	uxth	r1, r3
 8003374:	183b      	adds	r3, r7, r0
 8003376:	183a      	adds	r2, r7, r0
 8003378:	8812      	ldrh	r2, [r2, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	183a      	adds	r2, r7, r0
 8003384:	8812      	ldrh	r2, [r2, #0]
 8003386:	60da      	str	r2, [r3, #12]
 8003388:	e06c      	b.n	8003464 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 800338a:	2317      	movs	r3, #23
 800338c:	18fb      	adds	r3, r7, r3
 800338e:	2201      	movs	r2, #1
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	e067      	b.n	8003464 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8003394:	231f      	movs	r3, #31
 8003396:	18fb      	adds	r3, r7, r3
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d01b      	beq.n	80033d6 <UART_SetConfig+0x23e>
 800339e:	dc02      	bgt.n	80033a6 <UART_SetConfig+0x20e>
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <UART_SetConfig+0x218>
 80033a4:	e049      	b.n	800343a <UART_SetConfig+0x2a2>
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d024      	beq.n	80033f4 <UART_SetConfig+0x25c>
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d035      	beq.n	800341a <UART_SetConfig+0x282>
 80033ae:	e044      	b.n	800343a <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b0:	f7ff f9f8 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 80033b4:	0003      	movs	r3, r0
 80033b6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	085a      	lsrs	r2, r3, #1
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	18d2      	adds	r2, r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	0019      	movs	r1, r3
 80033c8:	0010      	movs	r0, r2
 80033ca:	f7fc fe9d 	bl	8000108 <__udivsi3>
 80033ce:	0003      	movs	r3, r0
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	61bb      	str	r3, [r7, #24]
        break;
 80033d4:	e036      	b.n	8003444 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	085b      	lsrs	r3, r3, #1
 80033dc:	4a30      	ldr	r2, [pc, #192]	; (80034a0 <UART_SetConfig+0x308>)
 80033de:	189a      	adds	r2, r3, r2
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	0019      	movs	r1, r3
 80033e6:	0010      	movs	r0, r2
 80033e8:	f7fc fe8e 	bl	8000108 <__udivsi3>
 80033ec:	0003      	movs	r3, r0
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	61bb      	str	r3, [r7, #24]
        break;
 80033f2:	e027      	b.n	8003444 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033f4:	f7ff f94e 	bl	8002694 <HAL_RCC_GetSysClockFreq>
 80033f8:	0003      	movs	r3, r0
 80033fa:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	085a      	lsrs	r2, r3, #1
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	18d2      	adds	r2, r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	0019      	movs	r1, r3
 800340c:	0010      	movs	r0, r2
 800340e:	f7fc fe7b 	bl	8000108 <__udivsi3>
 8003412:	0003      	movs	r3, r0
 8003414:	b29b      	uxth	r3, r3
 8003416:	61bb      	str	r3, [r7, #24]
        break;
 8003418:	e014      	b.n	8003444 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	085b      	lsrs	r3, r3, #1
 8003420:	2280      	movs	r2, #128	; 0x80
 8003422:	0212      	lsls	r2, r2, #8
 8003424:	189a      	adds	r2, r3, r2
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	0019      	movs	r1, r3
 800342c:	0010      	movs	r0, r2
 800342e:	f7fc fe6b 	bl	8000108 <__udivsi3>
 8003432:	0003      	movs	r3, r0
 8003434:	b29b      	uxth	r3, r3
 8003436:	61bb      	str	r3, [r7, #24]
        break;
 8003438:	e004      	b.n	8003444 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 800343a:	2317      	movs	r3, #23
 800343c:	18fb      	adds	r3, r7, r3
 800343e:	2201      	movs	r2, #1
 8003440:	701a      	strb	r2, [r3, #0]
        break;
 8003442:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	2b0f      	cmp	r3, #15
 8003448:	d908      	bls.n	800345c <UART_SetConfig+0x2c4>
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	4a13      	ldr	r2, [pc, #76]	; (800349c <UART_SetConfig+0x304>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d804      	bhi.n	800345c <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	60da      	str	r2, [r3, #12]
 800345a:	e003      	b.n	8003464 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 800345c:	2317      	movs	r3, #23
 800345e:	18fb      	adds	r3, r7, r3
 8003460:	2201      	movs	r2, #1
 8003462:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003470:	2317      	movs	r3, #23
 8003472:	18fb      	adds	r3, r7, r3
 8003474:	781b      	ldrb	r3, [r3, #0]
}
 8003476:	0018      	movs	r0, r3
 8003478:	46bd      	mov	sp, r7
 800347a:	b008      	add	sp, #32
 800347c:	bd80      	pop	{r7, pc}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	efff69f3 	.word	0xefff69f3
 8003484:	ffffcfff 	.word	0xffffcfff
 8003488:	fffff4ff 	.word	0xfffff4ff
 800348c:	40013800 	.word	0x40013800
 8003490:	40021000 	.word	0x40021000
 8003494:	40004400 	.word	0x40004400
 8003498:	00f42400 	.word	0x00f42400
 800349c:	0000ffff 	.word	0x0000ffff
 80034a0:	007a1200 	.word	0x007a1200

080034a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	2201      	movs	r2, #1
 80034b2:	4013      	ands	r3, r2
 80034b4:	d00b      	beq.n	80034ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	4a4a      	ldr	r2, [pc, #296]	; (80035e8 <UART_AdvFeatureConfig+0x144>)
 80034be:	4013      	ands	r3, r2
 80034c0:	0019      	movs	r1, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	2202      	movs	r2, #2
 80034d4:	4013      	ands	r3, r2
 80034d6:	d00b      	beq.n	80034f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	4a43      	ldr	r2, [pc, #268]	; (80035ec <UART_AdvFeatureConfig+0x148>)
 80034e0:	4013      	ands	r3, r2
 80034e2:	0019      	movs	r1, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	2204      	movs	r2, #4
 80034f6:	4013      	ands	r3, r2
 80034f8:	d00b      	beq.n	8003512 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	4a3b      	ldr	r2, [pc, #236]	; (80035f0 <UART_AdvFeatureConfig+0x14c>)
 8003502:	4013      	ands	r3, r2
 8003504:	0019      	movs	r1, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	2208      	movs	r2, #8
 8003518:	4013      	ands	r3, r2
 800351a:	d00b      	beq.n	8003534 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	4a34      	ldr	r2, [pc, #208]	; (80035f4 <UART_AdvFeatureConfig+0x150>)
 8003524:	4013      	ands	r3, r2
 8003526:	0019      	movs	r1, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	2210      	movs	r2, #16
 800353a:	4013      	ands	r3, r2
 800353c:	d00b      	beq.n	8003556 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	4a2c      	ldr	r2, [pc, #176]	; (80035f8 <UART_AdvFeatureConfig+0x154>)
 8003546:	4013      	ands	r3, r2
 8003548:	0019      	movs	r1, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	2220      	movs	r2, #32
 800355c:	4013      	ands	r3, r2
 800355e:	d00b      	beq.n	8003578 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	4a25      	ldr	r2, [pc, #148]	; (80035fc <UART_AdvFeatureConfig+0x158>)
 8003568:	4013      	ands	r3, r2
 800356a:	0019      	movs	r1, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	2240      	movs	r2, #64	; 0x40
 800357e:	4013      	ands	r3, r2
 8003580:	d01d      	beq.n	80035be <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	4a1d      	ldr	r2, [pc, #116]	; (8003600 <UART_AdvFeatureConfig+0x15c>)
 800358a:	4013      	ands	r3, r2
 800358c:	0019      	movs	r1, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800359e:	2380      	movs	r3, #128	; 0x80
 80035a0:	035b      	lsls	r3, r3, #13
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d10b      	bne.n	80035be <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	4a15      	ldr	r2, [pc, #84]	; (8003604 <UART_AdvFeatureConfig+0x160>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	0019      	movs	r1, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	2280      	movs	r2, #128	; 0x80
 80035c4:	4013      	ands	r3, r2
 80035c6:	d00b      	beq.n	80035e0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	4a0e      	ldr	r2, [pc, #56]	; (8003608 <UART_AdvFeatureConfig+0x164>)
 80035d0:	4013      	ands	r3, r2
 80035d2:	0019      	movs	r1, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	605a      	str	r2, [r3, #4]
  }
}
 80035e0:	46c0      	nop			; (mov r8, r8)
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b002      	add	sp, #8
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	fffdffff 	.word	0xfffdffff
 80035ec:	fffeffff 	.word	0xfffeffff
 80035f0:	fffbffff 	.word	0xfffbffff
 80035f4:	ffff7fff 	.word	0xffff7fff
 80035f8:	ffffefff 	.word	0xffffefff
 80035fc:	ffffdfff 	.word	0xffffdfff
 8003600:	ffefffff 	.word	0xffefffff
 8003604:	ff9fffff 	.word	0xff9fffff
 8003608:	fff7ffff 	.word	0xfff7ffff

0800360c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af02      	add	r7, sp, #8
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800361a:	f7fd fcdd 	bl	8000fd8 <HAL_GetTick>
 800361e:	0003      	movs	r3, r0
 8003620:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2208      	movs	r2, #8
 800362a:	4013      	ands	r3, r2
 800362c:	2b08      	cmp	r3, #8
 800362e:	d10d      	bne.n	800364c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	2380      	movs	r3, #128	; 0x80
 8003634:	0399      	lsls	r1, r3, #14
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	4b16      	ldr	r3, [pc, #88]	; (8003694 <UART_CheckIdleState+0x88>)
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	0013      	movs	r3, r2
 800363e:	2200      	movs	r2, #0
 8003640:	f000 f82a 	bl	8003698 <UART_WaitOnFlagUntilTimeout>
 8003644:	1e03      	subs	r3, r0, #0
 8003646:	d001      	beq.n	800364c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e01f      	b.n	800368c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2204      	movs	r2, #4
 8003654:	4013      	ands	r3, r2
 8003656:	2b04      	cmp	r3, #4
 8003658:	d10d      	bne.n	8003676 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	2380      	movs	r3, #128	; 0x80
 800365e:	03d9      	lsls	r1, r3, #15
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <UART_CheckIdleState+0x88>)
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	0013      	movs	r3, r2
 8003668:	2200      	movs	r2, #0
 800366a:	f000 f815 	bl	8003698 <UART_WaitOnFlagUntilTimeout>
 800366e:	1e03      	subs	r3, r0, #0
 8003670:	d001      	beq.n	8003676 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e00a      	b.n	800368c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2220      	movs	r2, #32
 800367a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2270      	movs	r2, #112	; 0x70
 8003686:	2100      	movs	r1, #0
 8003688:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	0018      	movs	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	b004      	add	sp, #16
 8003692:	bd80      	pop	{r7, pc}
 8003694:	01ffffff 	.word	0x01ffffff

08003698 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	1dfb      	adds	r3, r7, #7
 80036a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a8:	e05d      	b.n	8003766 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	3301      	adds	r3, #1
 80036ae:	d05a      	beq.n	8003766 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b0:	f7fd fc92 	bl	8000fd8 <HAL_GetTick>
 80036b4:	0002      	movs	r2, r0
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d302      	bcc.n	80036c6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d11b      	bne.n	80036fe <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	492f      	ldr	r1, [pc, #188]	; (8003790 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80036d2:	400a      	ands	r2, r1
 80036d4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2101      	movs	r1, #1
 80036e2:	438a      	bics	r2, r1
 80036e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2220      	movs	r2, #32
 80036ea:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2220      	movs	r2, #32
 80036f0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2270      	movs	r2, #112	; 0x70
 80036f6:	2100      	movs	r1, #0
 80036f8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e043      	b.n	8003786 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2204      	movs	r2, #4
 8003706:	4013      	ands	r3, r2
 8003708:	d02d      	beq.n	8003766 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69da      	ldr	r2, [r3, #28]
 8003710:	2380      	movs	r3, #128	; 0x80
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	401a      	ands	r2, r3
 8003716:	2380      	movs	r3, #128	; 0x80
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	429a      	cmp	r2, r3
 800371c:	d123      	bne.n	8003766 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2280      	movs	r2, #128	; 0x80
 8003724:	0112      	lsls	r2, r2, #4
 8003726:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4917      	ldr	r1, [pc, #92]	; (8003790 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003734:	400a      	ands	r2, r1
 8003736:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2101      	movs	r1, #1
 8003744:	438a      	bics	r2, r1
 8003746:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2220      	movs	r2, #32
 800374c:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2220      	movs	r2, #32
 8003752:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2270      	movs	r2, #112	; 0x70
 800375e:	2100      	movs	r1, #0
 8003760:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e00f      	b.n	8003786 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	4013      	ands	r3, r2
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	425a      	negs	r2, r3
 8003776:	4153      	adcs	r3, r2
 8003778:	b2db      	uxtb	r3, r3
 800377a:	001a      	movs	r2, r3
 800377c:	1dfb      	adds	r3, r7, #7
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d092      	beq.n	80036aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	0018      	movs	r0, r3
 8003788:	46bd      	mov	sp, r7
 800378a:	b004      	add	sp, #16
 800378c:	bd80      	pop	{r7, pc}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	fffffe5f 	.word	0xfffffe5f

08003794 <__libc_init_array>:
 8003794:	b570      	push	{r4, r5, r6, lr}
 8003796:	2600      	movs	r6, #0
 8003798:	4d0c      	ldr	r5, [pc, #48]	; (80037cc <__libc_init_array+0x38>)
 800379a:	4c0d      	ldr	r4, [pc, #52]	; (80037d0 <__libc_init_array+0x3c>)
 800379c:	1b64      	subs	r4, r4, r5
 800379e:	10a4      	asrs	r4, r4, #2
 80037a0:	42a6      	cmp	r6, r4
 80037a2:	d109      	bne.n	80037b8 <__libc_init_array+0x24>
 80037a4:	2600      	movs	r6, #0
 80037a6:	f000 f821 	bl	80037ec <_init>
 80037aa:	4d0a      	ldr	r5, [pc, #40]	; (80037d4 <__libc_init_array+0x40>)
 80037ac:	4c0a      	ldr	r4, [pc, #40]	; (80037d8 <__libc_init_array+0x44>)
 80037ae:	1b64      	subs	r4, r4, r5
 80037b0:	10a4      	asrs	r4, r4, #2
 80037b2:	42a6      	cmp	r6, r4
 80037b4:	d105      	bne.n	80037c2 <__libc_init_array+0x2e>
 80037b6:	bd70      	pop	{r4, r5, r6, pc}
 80037b8:	00b3      	lsls	r3, r6, #2
 80037ba:	58eb      	ldr	r3, [r5, r3]
 80037bc:	4798      	blx	r3
 80037be:	3601      	adds	r6, #1
 80037c0:	e7ee      	b.n	80037a0 <__libc_init_array+0xc>
 80037c2:	00b3      	lsls	r3, r6, #2
 80037c4:	58eb      	ldr	r3, [r5, r3]
 80037c6:	4798      	blx	r3
 80037c8:	3601      	adds	r6, #1
 80037ca:	e7f2      	b.n	80037b2 <__libc_init_array+0x1e>
 80037cc:	0800384c 	.word	0x0800384c
 80037d0:	0800384c 	.word	0x0800384c
 80037d4:	0800384c 	.word	0x0800384c
 80037d8:	08003850 	.word	0x08003850

080037dc <memset>:
 80037dc:	0003      	movs	r3, r0
 80037de:	1812      	adds	r2, r2, r0
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d100      	bne.n	80037e6 <memset+0xa>
 80037e4:	4770      	bx	lr
 80037e6:	7019      	strb	r1, [r3, #0]
 80037e8:	3301      	adds	r3, #1
 80037ea:	e7f9      	b.n	80037e0 <memset+0x4>

080037ec <_init>:
 80037ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037f2:	bc08      	pop	{r3}
 80037f4:	469e      	mov	lr, r3
 80037f6:	4770      	bx	lr

080037f8 <_fini>:
 80037f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fe:	bc08      	pop	{r3}
 8003800:	469e      	mov	lr, r3
 8003802:	4770      	bx	lr
