
MD2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078fc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  080079bc  080079bc  000179bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f18  08007f18  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08007f18  08007f18  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f18  08007f18  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f18  08007f18  00017f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f1c  08007f1c  00017f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c4  20000010  08007f30  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008d4  08007f30  000208d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001229d  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f24  00000000  00000000  000322d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010d8  00000000  00000000  00035200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f60  00000000  00000000  000362d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017c99  00000000  00000000  00037238  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eb9e  00000000  00000000  0004eed1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080d04  00000000  00000000  0005da6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000de773  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ff0  00000000  00000000  000de7f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080079a4 	.word	0x080079a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080079a4 	.word	0x080079a4

08000108 <__gnu_thumb1_case_uhi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5a09      	ldrh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_cdrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	1c10      	adds	r0, r2, #0
 8000238:	4662      	mov	r2, ip
 800023a:	468c      	mov	ip, r1
 800023c:	1c19      	adds	r1, r3, #0
 800023e:	4663      	mov	r3, ip
 8000240:	e000      	b.n	8000244 <__aeabi_cdcmpeq>
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_cdcmpeq>:
 8000244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000246:	f001 fb59 	bl	80018fc <__ledf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	d401      	bmi.n	8000252 <__aeabi_cdcmpeq+0xe>
 800024e:	2100      	movs	r1, #0
 8000250:	42c8      	cmn	r0, r1
 8000252:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000254 <__aeabi_dcmpeq>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f001 fab1 	bl	80017bc <__eqdf2>
 800025a:	4240      	negs	r0, r0
 800025c:	3001      	adds	r0, #1
 800025e:	bd10      	pop	{r4, pc}

08000260 <__aeabi_dcmplt>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 fb4b 	bl	80018fc <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	db01      	blt.n	800026e <__aeabi_dcmplt+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmple>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 fb41 	bl	80018fc <__ledf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dd01      	ble.n	8000282 <__aeabi_dcmple+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpgt>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 fad3 	bl	8001834 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	dc01      	bgt.n	8000296 <__aeabi_dcmpgt+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_dcmpge>:
 800029c:	b510      	push	{r4, lr}
 800029e:	f001 fac9 	bl	8001834 <__gedf2>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	da01      	bge.n	80002aa <__aeabi_dcmpge+0xe>
 80002a6:	2000      	movs	r0, #0
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	2001      	movs	r0, #1
 80002ac:	bd10      	pop	{r4, pc}
 80002ae:	46c0      	nop			; (mov r8, r8)

080002b0 <__aeabi_cfrcmple>:
 80002b0:	4684      	mov	ip, r0
 80002b2:	1c08      	adds	r0, r1, #0
 80002b4:	4661      	mov	r1, ip
 80002b6:	e7ff      	b.n	80002b8 <__aeabi_cfcmpeq>

080002b8 <__aeabi_cfcmpeq>:
 80002b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002ba:	f000 fb73 	bl	80009a4 <__lesf2>
 80002be:	2800      	cmp	r0, #0
 80002c0:	d401      	bmi.n	80002c6 <__aeabi_cfcmpeq+0xe>
 80002c2:	2100      	movs	r1, #0
 80002c4:	42c8      	cmn	r0, r1
 80002c6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002c8 <__aeabi_fcmpeq>:
 80002c8:	b510      	push	{r4, lr}
 80002ca:	f000 faf5 	bl	80008b8 <__eqsf2>
 80002ce:	4240      	negs	r0, r0
 80002d0:	3001      	adds	r0, #1
 80002d2:	bd10      	pop	{r4, pc}

080002d4 <__aeabi_fcmplt>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 fb65 	bl	80009a4 <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	db01      	blt.n	80002e2 <__aeabi_fcmplt+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmple>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 fb5b 	bl	80009a4 <__lesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dd01      	ble.n	80002f6 <__aeabi_fcmple+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpgt>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 fb03 	bl	8000908 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	dc01      	bgt.n	800030a <__aeabi_fcmpgt+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__aeabi_fcmpge>:
 8000310:	b510      	push	{r4, lr}
 8000312:	f000 faf9 	bl	8000908 <__gesf2>
 8000316:	2800      	cmp	r0, #0
 8000318:	da01      	bge.n	800031e <__aeabi_fcmpge+0xe>
 800031a:	2000      	movs	r0, #0
 800031c:	bd10      	pop	{r4, pc}
 800031e:	2001      	movs	r0, #1
 8000320:	bd10      	pop	{r4, pc}
 8000322:	46c0      	nop			; (mov r8, r8)

08000324 <__aeabi_d2uiz>:
 8000324:	b570      	push	{r4, r5, r6, lr}
 8000326:	2200      	movs	r2, #0
 8000328:	4b0c      	ldr	r3, [pc, #48]	; (800035c <__aeabi_d2uiz+0x38>)
 800032a:	0004      	movs	r4, r0
 800032c:	000d      	movs	r5, r1
 800032e:	f7ff ffb5 	bl	800029c <__aeabi_dcmpge>
 8000332:	2800      	cmp	r0, #0
 8000334:	d104      	bne.n	8000340 <__aeabi_d2uiz+0x1c>
 8000336:	0020      	movs	r0, r4
 8000338:	0029      	movs	r1, r5
 800033a:	f002 f901 	bl	8002540 <__aeabi_d2iz>
 800033e:	bd70      	pop	{r4, r5, r6, pc}
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <__aeabi_d2uiz+0x38>)
 8000342:	2200      	movs	r2, #0
 8000344:	0020      	movs	r0, r4
 8000346:	0029      	movs	r1, r5
 8000348:	f001 fdb2 	bl	8001eb0 <__aeabi_dsub>
 800034c:	f002 f8f8 	bl	8002540 <__aeabi_d2iz>
 8000350:	2380      	movs	r3, #128	; 0x80
 8000352:	061b      	lsls	r3, r3, #24
 8000354:	469c      	mov	ip, r3
 8000356:	4460      	add	r0, ip
 8000358:	e7f1      	b.n	800033e <__aeabi_d2uiz+0x1a>
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	41e00000 	.word	0x41e00000

08000360 <__aeabi_fadd>:
 8000360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000362:	4647      	mov	r7, r8
 8000364:	46ce      	mov	lr, r9
 8000366:	0243      	lsls	r3, r0, #9
 8000368:	0a5b      	lsrs	r3, r3, #9
 800036a:	0044      	lsls	r4, r0, #1
 800036c:	0fc2      	lsrs	r2, r0, #31
 800036e:	469c      	mov	ip, r3
 8000370:	0048      	lsls	r0, r1, #1
 8000372:	00dd      	lsls	r5, r3, #3
 8000374:	024b      	lsls	r3, r1, #9
 8000376:	0e24      	lsrs	r4, r4, #24
 8000378:	0a5b      	lsrs	r3, r3, #9
 800037a:	0e00      	lsrs	r0, r0, #24
 800037c:	b580      	push	{r7, lr}
 800037e:	4698      	mov	r8, r3
 8000380:	0026      	movs	r6, r4
 8000382:	4691      	mov	r9, r2
 8000384:	0fc9      	lsrs	r1, r1, #31
 8000386:	00db      	lsls	r3, r3, #3
 8000388:	1a27      	subs	r7, r4, r0
 800038a:	428a      	cmp	r2, r1
 800038c:	d029      	beq.n	80003e2 <__aeabi_fadd+0x82>
 800038e:	2f00      	cmp	r7, #0
 8000390:	dd15      	ble.n	80003be <__aeabi_fadd+0x5e>
 8000392:	2800      	cmp	r0, #0
 8000394:	d14a      	bne.n	800042c <__aeabi_fadd+0xcc>
 8000396:	2b00      	cmp	r3, #0
 8000398:	d000      	beq.n	800039c <__aeabi_fadd+0x3c>
 800039a:	e095      	b.n	80004c8 <__aeabi_fadd+0x168>
 800039c:	08ed      	lsrs	r5, r5, #3
 800039e:	2cff      	cmp	r4, #255	; 0xff
 80003a0:	d100      	bne.n	80003a4 <__aeabi_fadd+0x44>
 80003a2:	e088      	b.n	80004b6 <__aeabi_fadd+0x156>
 80003a4:	026b      	lsls	r3, r5, #9
 80003a6:	0a5b      	lsrs	r3, r3, #9
 80003a8:	b2e6      	uxtb	r6, r4
 80003aa:	025b      	lsls	r3, r3, #9
 80003ac:	05f6      	lsls	r6, r6, #23
 80003ae:	0a58      	lsrs	r0, r3, #9
 80003b0:	4330      	orrs	r0, r6
 80003b2:	07d2      	lsls	r2, r2, #31
 80003b4:	4310      	orrs	r0, r2
 80003b6:	bc0c      	pop	{r2, r3}
 80003b8:	4690      	mov	r8, r2
 80003ba:	4699      	mov	r9, r3
 80003bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003be:	2f00      	cmp	r7, #0
 80003c0:	d000      	beq.n	80003c4 <__aeabi_fadd+0x64>
 80003c2:	e087      	b.n	80004d4 <__aeabi_fadd+0x174>
 80003c4:	1c60      	adds	r0, r4, #1
 80003c6:	b2c0      	uxtb	r0, r0
 80003c8:	2801      	cmp	r0, #1
 80003ca:	dc00      	bgt.n	80003ce <__aeabi_fadd+0x6e>
 80003cc:	e0b6      	b.n	800053c <__aeabi_fadd+0x1dc>
 80003ce:	1aee      	subs	r6, r5, r3
 80003d0:	0172      	lsls	r2, r6, #5
 80003d2:	d500      	bpl.n	80003d6 <__aeabi_fadd+0x76>
 80003d4:	e0c5      	b.n	8000562 <__aeabi_fadd+0x202>
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d13d      	bne.n	8000456 <__aeabi_fadd+0xf6>
 80003da:	2200      	movs	r2, #0
 80003dc:	2600      	movs	r6, #0
 80003de:	2300      	movs	r3, #0
 80003e0:	e7e3      	b.n	80003aa <__aeabi_fadd+0x4a>
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	dc00      	bgt.n	80003e8 <__aeabi_fadd+0x88>
 80003e6:	e096      	b.n	8000516 <__aeabi_fadd+0x1b6>
 80003e8:	2800      	cmp	r0, #0
 80003ea:	d05d      	beq.n	80004a8 <__aeabi_fadd+0x148>
 80003ec:	2cff      	cmp	r4, #255	; 0xff
 80003ee:	d060      	beq.n	80004b2 <__aeabi_fadd+0x152>
 80003f0:	2280      	movs	r2, #128	; 0x80
 80003f2:	04d2      	lsls	r2, r2, #19
 80003f4:	4313      	orrs	r3, r2
 80003f6:	2f1b      	cmp	r7, #27
 80003f8:	dd00      	ble.n	80003fc <__aeabi_fadd+0x9c>
 80003fa:	e0ec      	b.n	80005d6 <__aeabi_fadd+0x276>
 80003fc:	2220      	movs	r2, #32
 80003fe:	1bd2      	subs	r2, r2, r7
 8000400:	0018      	movs	r0, r3
 8000402:	4093      	lsls	r3, r2
 8000404:	40f8      	lsrs	r0, r7
 8000406:	1e5a      	subs	r2, r3, #1
 8000408:	4193      	sbcs	r3, r2
 800040a:	4303      	orrs	r3, r0
 800040c:	18ed      	adds	r5, r5, r3
 800040e:	016b      	lsls	r3, r5, #5
 8000410:	d57b      	bpl.n	800050a <__aeabi_fadd+0x1aa>
 8000412:	3401      	adds	r4, #1
 8000414:	2cff      	cmp	r4, #255	; 0xff
 8000416:	d100      	bne.n	800041a <__aeabi_fadd+0xba>
 8000418:	e0b7      	b.n	800058a <__aeabi_fadd+0x22a>
 800041a:	2201      	movs	r2, #1
 800041c:	2607      	movs	r6, #7
 800041e:	402a      	ands	r2, r5
 8000420:	086b      	lsrs	r3, r5, #1
 8000422:	4d9a      	ldr	r5, [pc, #616]	; (800068c <__aeabi_fadd+0x32c>)
 8000424:	401d      	ands	r5, r3
 8000426:	4315      	orrs	r5, r2
 8000428:	402e      	ands	r6, r5
 800042a:	e029      	b.n	8000480 <__aeabi_fadd+0x120>
 800042c:	2cff      	cmp	r4, #255	; 0xff
 800042e:	d0b5      	beq.n	800039c <__aeabi_fadd+0x3c>
 8000430:	2280      	movs	r2, #128	; 0x80
 8000432:	04d2      	lsls	r2, r2, #19
 8000434:	4313      	orrs	r3, r2
 8000436:	2f1b      	cmp	r7, #27
 8000438:	dd00      	ble.n	800043c <__aeabi_fadd+0xdc>
 800043a:	e0b2      	b.n	80005a2 <__aeabi_fadd+0x242>
 800043c:	2220      	movs	r2, #32
 800043e:	1bd2      	subs	r2, r2, r7
 8000440:	0019      	movs	r1, r3
 8000442:	4093      	lsls	r3, r2
 8000444:	40f9      	lsrs	r1, r7
 8000446:	1e5a      	subs	r2, r3, #1
 8000448:	4193      	sbcs	r3, r2
 800044a:	430b      	orrs	r3, r1
 800044c:	1aed      	subs	r5, r5, r3
 800044e:	016b      	lsls	r3, r5, #5
 8000450:	d55b      	bpl.n	800050a <__aeabi_fadd+0x1aa>
 8000452:	01ad      	lsls	r5, r5, #6
 8000454:	09ae      	lsrs	r6, r5, #6
 8000456:	0030      	movs	r0, r6
 8000458:	f002 f9b8 	bl	80027cc <__clzsi2>
 800045c:	3805      	subs	r0, #5
 800045e:	4086      	lsls	r6, r0
 8000460:	4284      	cmp	r4, r0
 8000462:	dc65      	bgt.n	8000530 <__aeabi_fadd+0x1d0>
 8000464:	1b04      	subs	r4, r0, r4
 8000466:	0033      	movs	r3, r6
 8000468:	2020      	movs	r0, #32
 800046a:	3401      	adds	r4, #1
 800046c:	40e3      	lsrs	r3, r4
 800046e:	1b04      	subs	r4, r0, r4
 8000470:	40a6      	lsls	r6, r4
 8000472:	1e75      	subs	r5, r6, #1
 8000474:	41ae      	sbcs	r6, r5
 8000476:	4333      	orrs	r3, r6
 8000478:	2607      	movs	r6, #7
 800047a:	001d      	movs	r5, r3
 800047c:	2400      	movs	r4, #0
 800047e:	401e      	ands	r6, r3
 8000480:	2201      	movs	r2, #1
 8000482:	464b      	mov	r3, r9
 8000484:	401a      	ands	r2, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d004      	beq.n	8000494 <__aeabi_fadd+0x134>
 800048a:	230f      	movs	r3, #15
 800048c:	402b      	ands	r3, r5
 800048e:	2b04      	cmp	r3, #4
 8000490:	d000      	beq.n	8000494 <__aeabi_fadd+0x134>
 8000492:	3504      	adds	r5, #4
 8000494:	016b      	lsls	r3, r5, #5
 8000496:	d400      	bmi.n	800049a <__aeabi_fadd+0x13a>
 8000498:	e780      	b.n	800039c <__aeabi_fadd+0x3c>
 800049a:	3401      	adds	r4, #1
 800049c:	b2e6      	uxtb	r6, r4
 800049e:	2cff      	cmp	r4, #255	; 0xff
 80004a0:	d12f      	bne.n	8000502 <__aeabi_fadd+0x1a2>
 80004a2:	26ff      	movs	r6, #255	; 0xff
 80004a4:	2300      	movs	r3, #0
 80004a6:	e780      	b.n	80003aa <__aeabi_fadd+0x4a>
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d152      	bne.n	8000552 <__aeabi_fadd+0x1f2>
 80004ac:	2cff      	cmp	r4, #255	; 0xff
 80004ae:	d000      	beq.n	80004b2 <__aeabi_fadd+0x152>
 80004b0:	e774      	b.n	800039c <__aeabi_fadd+0x3c>
 80004b2:	000a      	movs	r2, r1
 80004b4:	08ed      	lsrs	r5, r5, #3
 80004b6:	2d00      	cmp	r5, #0
 80004b8:	d0f3      	beq.n	80004a2 <__aeabi_fadd+0x142>
 80004ba:	2380      	movs	r3, #128	; 0x80
 80004bc:	03db      	lsls	r3, r3, #15
 80004be:	432b      	orrs	r3, r5
 80004c0:	025b      	lsls	r3, r3, #9
 80004c2:	0a5b      	lsrs	r3, r3, #9
 80004c4:	26ff      	movs	r6, #255	; 0xff
 80004c6:	e770      	b.n	80003aa <__aeabi_fadd+0x4a>
 80004c8:	3f01      	subs	r7, #1
 80004ca:	2f00      	cmp	r7, #0
 80004cc:	d0be      	beq.n	800044c <__aeabi_fadd+0xec>
 80004ce:	2cff      	cmp	r4, #255	; 0xff
 80004d0:	d1b1      	bne.n	8000436 <__aeabi_fadd+0xd6>
 80004d2:	e763      	b.n	800039c <__aeabi_fadd+0x3c>
 80004d4:	2c00      	cmp	r4, #0
 80004d6:	d047      	beq.n	8000568 <__aeabi_fadd+0x208>
 80004d8:	28ff      	cmp	r0, #255	; 0xff
 80004da:	d069      	beq.n	80005b0 <__aeabi_fadd+0x250>
 80004dc:	2480      	movs	r4, #128	; 0x80
 80004de:	04e4      	lsls	r4, r4, #19
 80004e0:	427a      	negs	r2, r7
 80004e2:	4325      	orrs	r5, r4
 80004e4:	2a1b      	cmp	r2, #27
 80004e6:	dd00      	ble.n	80004ea <__aeabi_fadd+0x18a>
 80004e8:	e0c5      	b.n	8000676 <__aeabi_fadd+0x316>
 80004ea:	002c      	movs	r4, r5
 80004ec:	2620      	movs	r6, #32
 80004ee:	40d4      	lsrs	r4, r2
 80004f0:	1ab2      	subs	r2, r6, r2
 80004f2:	4095      	lsls	r5, r2
 80004f4:	1e6a      	subs	r2, r5, #1
 80004f6:	4195      	sbcs	r5, r2
 80004f8:	4325      	orrs	r5, r4
 80004fa:	1b5d      	subs	r5, r3, r5
 80004fc:	0004      	movs	r4, r0
 80004fe:	4689      	mov	r9, r1
 8000500:	e7a5      	b.n	800044e <__aeabi_fadd+0xee>
 8000502:	01ab      	lsls	r3, r5, #6
 8000504:	0a5b      	lsrs	r3, r3, #9
 8000506:	e750      	b.n	80003aa <__aeabi_fadd+0x4a>
 8000508:	2400      	movs	r4, #0
 800050a:	2201      	movs	r2, #1
 800050c:	464b      	mov	r3, r9
 800050e:	401a      	ands	r2, r3
 8000510:	076b      	lsls	r3, r5, #29
 8000512:	d1ba      	bne.n	800048a <__aeabi_fadd+0x12a>
 8000514:	e742      	b.n	800039c <__aeabi_fadd+0x3c>
 8000516:	2f00      	cmp	r7, #0
 8000518:	d13b      	bne.n	8000592 <__aeabi_fadd+0x232>
 800051a:	3401      	adds	r4, #1
 800051c:	b2e0      	uxtb	r0, r4
 800051e:	2801      	cmp	r0, #1
 8000520:	dd4a      	ble.n	80005b8 <__aeabi_fadd+0x258>
 8000522:	2cff      	cmp	r4, #255	; 0xff
 8000524:	d0bd      	beq.n	80004a2 <__aeabi_fadd+0x142>
 8000526:	2607      	movs	r6, #7
 8000528:	18ed      	adds	r5, r5, r3
 800052a:	086d      	lsrs	r5, r5, #1
 800052c:	402e      	ands	r6, r5
 800052e:	e7a7      	b.n	8000480 <__aeabi_fadd+0x120>
 8000530:	2307      	movs	r3, #7
 8000532:	4d57      	ldr	r5, [pc, #348]	; (8000690 <__aeabi_fadd+0x330>)
 8000534:	1a24      	subs	r4, r4, r0
 8000536:	4035      	ands	r5, r6
 8000538:	401e      	ands	r6, r3
 800053a:	e7a1      	b.n	8000480 <__aeabi_fadd+0x120>
 800053c:	2c00      	cmp	r4, #0
 800053e:	d11b      	bne.n	8000578 <__aeabi_fadd+0x218>
 8000540:	2d00      	cmp	r5, #0
 8000542:	d16e      	bne.n	8000622 <__aeabi_fadd+0x2c2>
 8000544:	2b00      	cmp	r3, #0
 8000546:	d100      	bne.n	800054a <__aeabi_fadd+0x1ea>
 8000548:	e09a      	b.n	8000680 <__aeabi_fadd+0x320>
 800054a:	000a      	movs	r2, r1
 800054c:	001d      	movs	r5, r3
 800054e:	003c      	movs	r4, r7
 8000550:	e724      	b.n	800039c <__aeabi_fadd+0x3c>
 8000552:	3f01      	subs	r7, #1
 8000554:	2f00      	cmp	r7, #0
 8000556:	d100      	bne.n	800055a <__aeabi_fadd+0x1fa>
 8000558:	e758      	b.n	800040c <__aeabi_fadd+0xac>
 800055a:	2cff      	cmp	r4, #255	; 0xff
 800055c:	d000      	beq.n	8000560 <__aeabi_fadd+0x200>
 800055e:	e74a      	b.n	80003f6 <__aeabi_fadd+0x96>
 8000560:	e7a7      	b.n	80004b2 <__aeabi_fadd+0x152>
 8000562:	1b5e      	subs	r6, r3, r5
 8000564:	4689      	mov	r9, r1
 8000566:	e776      	b.n	8000456 <__aeabi_fadd+0xf6>
 8000568:	2d00      	cmp	r5, #0
 800056a:	d11c      	bne.n	80005a6 <__aeabi_fadd+0x246>
 800056c:	000a      	movs	r2, r1
 800056e:	28ff      	cmp	r0, #255	; 0xff
 8000570:	d01f      	beq.n	80005b2 <__aeabi_fadd+0x252>
 8000572:	0004      	movs	r4, r0
 8000574:	001d      	movs	r5, r3
 8000576:	e711      	b.n	800039c <__aeabi_fadd+0x3c>
 8000578:	2d00      	cmp	r5, #0
 800057a:	d15d      	bne.n	8000638 <__aeabi_fadd+0x2d8>
 800057c:	2b00      	cmp	r3, #0
 800057e:	d117      	bne.n	80005b0 <__aeabi_fadd+0x250>
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	2200      	movs	r2, #0
 8000584:	03db      	lsls	r3, r3, #15
 8000586:	26ff      	movs	r6, #255	; 0xff
 8000588:	e70f      	b.n	80003aa <__aeabi_fadd+0x4a>
 800058a:	000a      	movs	r2, r1
 800058c:	26ff      	movs	r6, #255	; 0xff
 800058e:	2300      	movs	r3, #0
 8000590:	e70b      	b.n	80003aa <__aeabi_fadd+0x4a>
 8000592:	2c00      	cmp	r4, #0
 8000594:	d121      	bne.n	80005da <__aeabi_fadd+0x27a>
 8000596:	2d00      	cmp	r5, #0
 8000598:	d166      	bne.n	8000668 <__aeabi_fadd+0x308>
 800059a:	28ff      	cmp	r0, #255	; 0xff
 800059c:	d1e9      	bne.n	8000572 <__aeabi_fadd+0x212>
 800059e:	001d      	movs	r5, r3
 80005a0:	e787      	b.n	80004b2 <__aeabi_fadd+0x152>
 80005a2:	2301      	movs	r3, #1
 80005a4:	e752      	b.n	800044c <__aeabi_fadd+0xec>
 80005a6:	1c7a      	adds	r2, r7, #1
 80005a8:	d0a7      	beq.n	80004fa <__aeabi_fadd+0x19a>
 80005aa:	43fa      	mvns	r2, r7
 80005ac:	28ff      	cmp	r0, #255	; 0xff
 80005ae:	d199      	bne.n	80004e4 <__aeabi_fadd+0x184>
 80005b0:	000a      	movs	r2, r1
 80005b2:	001d      	movs	r5, r3
 80005b4:	24ff      	movs	r4, #255	; 0xff
 80005b6:	e6f1      	b.n	800039c <__aeabi_fadd+0x3c>
 80005b8:	2e00      	cmp	r6, #0
 80005ba:	d121      	bne.n	8000600 <__aeabi_fadd+0x2a0>
 80005bc:	2d00      	cmp	r5, #0
 80005be:	d04f      	beq.n	8000660 <__aeabi_fadd+0x300>
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d04c      	beq.n	800065e <__aeabi_fadd+0x2fe>
 80005c4:	18ed      	adds	r5, r5, r3
 80005c6:	016b      	lsls	r3, r5, #5
 80005c8:	d59e      	bpl.n	8000508 <__aeabi_fadd+0x1a8>
 80005ca:	4b31      	ldr	r3, [pc, #196]	; (8000690 <__aeabi_fadd+0x330>)
 80005cc:	3607      	adds	r6, #7
 80005ce:	402e      	ands	r6, r5
 80005d0:	2401      	movs	r4, #1
 80005d2:	401d      	ands	r5, r3
 80005d4:	e754      	b.n	8000480 <__aeabi_fadd+0x120>
 80005d6:	2301      	movs	r3, #1
 80005d8:	e718      	b.n	800040c <__aeabi_fadd+0xac>
 80005da:	28ff      	cmp	r0, #255	; 0xff
 80005dc:	d0df      	beq.n	800059e <__aeabi_fadd+0x23e>
 80005de:	2480      	movs	r4, #128	; 0x80
 80005e0:	04e4      	lsls	r4, r4, #19
 80005e2:	427f      	negs	r7, r7
 80005e4:	4325      	orrs	r5, r4
 80005e6:	2f1b      	cmp	r7, #27
 80005e8:	dc4d      	bgt.n	8000686 <__aeabi_fadd+0x326>
 80005ea:	2620      	movs	r6, #32
 80005ec:	1bf6      	subs	r6, r6, r7
 80005ee:	002c      	movs	r4, r5
 80005f0:	40b5      	lsls	r5, r6
 80005f2:	40fc      	lsrs	r4, r7
 80005f4:	1e6a      	subs	r2, r5, #1
 80005f6:	4195      	sbcs	r5, r2
 80005f8:	4325      	orrs	r5, r4
 80005fa:	18ed      	adds	r5, r5, r3
 80005fc:	0004      	movs	r4, r0
 80005fe:	e706      	b.n	800040e <__aeabi_fadd+0xae>
 8000600:	2d00      	cmp	r5, #0
 8000602:	d0cc      	beq.n	800059e <__aeabi_fadd+0x23e>
 8000604:	2b00      	cmp	r3, #0
 8000606:	d100      	bne.n	800060a <__aeabi_fadd+0x2aa>
 8000608:	e753      	b.n	80004b2 <__aeabi_fadd+0x152>
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	4660      	mov	r0, ip
 800060e:	03c9      	lsls	r1, r1, #15
 8000610:	4208      	tst	r0, r1
 8000612:	d003      	beq.n	800061c <__aeabi_fadd+0x2bc>
 8000614:	4640      	mov	r0, r8
 8000616:	4208      	tst	r0, r1
 8000618:	d100      	bne.n	800061c <__aeabi_fadd+0x2bc>
 800061a:	001d      	movs	r5, r3
 800061c:	2101      	movs	r1, #1
 800061e:	4011      	ands	r1, r2
 8000620:	e747      	b.n	80004b2 <__aeabi_fadd+0x152>
 8000622:	2b00      	cmp	r3, #0
 8000624:	d100      	bne.n	8000628 <__aeabi_fadd+0x2c8>
 8000626:	e6b9      	b.n	800039c <__aeabi_fadd+0x3c>
 8000628:	1aea      	subs	r2, r5, r3
 800062a:	0150      	lsls	r0, r2, #5
 800062c:	d525      	bpl.n	800067a <__aeabi_fadd+0x31a>
 800062e:	2607      	movs	r6, #7
 8000630:	1b5d      	subs	r5, r3, r5
 8000632:	402e      	ands	r6, r5
 8000634:	4689      	mov	r9, r1
 8000636:	e723      	b.n	8000480 <__aeabi_fadd+0x120>
 8000638:	24ff      	movs	r4, #255	; 0xff
 800063a:	2b00      	cmp	r3, #0
 800063c:	d100      	bne.n	8000640 <__aeabi_fadd+0x2e0>
 800063e:	e6ad      	b.n	800039c <__aeabi_fadd+0x3c>
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	4660      	mov	r0, ip
 8000644:	03d2      	lsls	r2, r2, #15
 8000646:	4210      	tst	r0, r2
 8000648:	d004      	beq.n	8000654 <__aeabi_fadd+0x2f4>
 800064a:	4640      	mov	r0, r8
 800064c:	4210      	tst	r0, r2
 800064e:	d101      	bne.n	8000654 <__aeabi_fadd+0x2f4>
 8000650:	001d      	movs	r5, r3
 8000652:	4689      	mov	r9, r1
 8000654:	2201      	movs	r2, #1
 8000656:	464b      	mov	r3, r9
 8000658:	24ff      	movs	r4, #255	; 0xff
 800065a:	401a      	ands	r2, r3
 800065c:	e69e      	b.n	800039c <__aeabi_fadd+0x3c>
 800065e:	002b      	movs	r3, r5
 8000660:	08dd      	lsrs	r5, r3, #3
 8000662:	000a      	movs	r2, r1
 8000664:	2400      	movs	r4, #0
 8000666:	e69d      	b.n	80003a4 <__aeabi_fadd+0x44>
 8000668:	1c7a      	adds	r2, r7, #1
 800066a:	d0c6      	beq.n	80005fa <__aeabi_fadd+0x29a>
 800066c:	43ff      	mvns	r7, r7
 800066e:	28ff      	cmp	r0, #255	; 0xff
 8000670:	d1b9      	bne.n	80005e6 <__aeabi_fadd+0x286>
 8000672:	001d      	movs	r5, r3
 8000674:	e71d      	b.n	80004b2 <__aeabi_fadd+0x152>
 8000676:	2501      	movs	r5, #1
 8000678:	e73f      	b.n	80004fa <__aeabi_fadd+0x19a>
 800067a:	1e15      	subs	r5, r2, #0
 800067c:	d000      	beq.n	8000680 <__aeabi_fadd+0x320>
 800067e:	e744      	b.n	800050a <__aeabi_fadd+0x1aa>
 8000680:	2200      	movs	r2, #0
 8000682:	2300      	movs	r3, #0
 8000684:	e691      	b.n	80003aa <__aeabi_fadd+0x4a>
 8000686:	2501      	movs	r5, #1
 8000688:	e7b7      	b.n	80005fa <__aeabi_fadd+0x29a>
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	7dffffff 	.word	0x7dffffff
 8000690:	fbffffff 	.word	0xfbffffff

08000694 <__aeabi_fdiv>:
 8000694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000696:	4657      	mov	r7, sl
 8000698:	464e      	mov	r6, r9
 800069a:	4645      	mov	r5, r8
 800069c:	46de      	mov	lr, fp
 800069e:	0244      	lsls	r4, r0, #9
 80006a0:	b5e0      	push	{r5, r6, r7, lr}
 80006a2:	0046      	lsls	r6, r0, #1
 80006a4:	4688      	mov	r8, r1
 80006a6:	0a64      	lsrs	r4, r4, #9
 80006a8:	0e36      	lsrs	r6, r6, #24
 80006aa:	0fc7      	lsrs	r7, r0, #31
 80006ac:	2e00      	cmp	r6, #0
 80006ae:	d063      	beq.n	8000778 <__aeabi_fdiv+0xe4>
 80006b0:	2eff      	cmp	r6, #255	; 0xff
 80006b2:	d024      	beq.n	80006fe <__aeabi_fdiv+0x6a>
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	00e4      	lsls	r4, r4, #3
 80006b8:	04db      	lsls	r3, r3, #19
 80006ba:	431c      	orrs	r4, r3
 80006bc:	2300      	movs	r3, #0
 80006be:	4699      	mov	r9, r3
 80006c0:	469b      	mov	fp, r3
 80006c2:	3e7f      	subs	r6, #127	; 0x7f
 80006c4:	4643      	mov	r3, r8
 80006c6:	4642      	mov	r2, r8
 80006c8:	025d      	lsls	r5, r3, #9
 80006ca:	0fd2      	lsrs	r2, r2, #31
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	0a6d      	lsrs	r5, r5, #9
 80006d0:	0e1b      	lsrs	r3, r3, #24
 80006d2:	4690      	mov	r8, r2
 80006d4:	4692      	mov	sl, r2
 80006d6:	d065      	beq.n	80007a4 <__aeabi_fdiv+0x110>
 80006d8:	2bff      	cmp	r3, #255	; 0xff
 80006da:	d055      	beq.n	8000788 <__aeabi_fdiv+0xf4>
 80006dc:	2280      	movs	r2, #128	; 0x80
 80006de:	2100      	movs	r1, #0
 80006e0:	00ed      	lsls	r5, r5, #3
 80006e2:	04d2      	lsls	r2, r2, #19
 80006e4:	3b7f      	subs	r3, #127	; 0x7f
 80006e6:	4315      	orrs	r5, r2
 80006e8:	1af6      	subs	r6, r6, r3
 80006ea:	4643      	mov	r3, r8
 80006ec:	464a      	mov	r2, r9
 80006ee:	407b      	eors	r3, r7
 80006f0:	2a0f      	cmp	r2, #15
 80006f2:	d900      	bls.n	80006f6 <__aeabi_fdiv+0x62>
 80006f4:	e08d      	b.n	8000812 <__aeabi_fdiv+0x17e>
 80006f6:	486d      	ldr	r0, [pc, #436]	; (80008ac <__aeabi_fdiv+0x218>)
 80006f8:	0092      	lsls	r2, r2, #2
 80006fa:	5882      	ldr	r2, [r0, r2]
 80006fc:	4697      	mov	pc, r2
 80006fe:	2c00      	cmp	r4, #0
 8000700:	d154      	bne.n	80007ac <__aeabi_fdiv+0x118>
 8000702:	2308      	movs	r3, #8
 8000704:	4699      	mov	r9, r3
 8000706:	3b06      	subs	r3, #6
 8000708:	26ff      	movs	r6, #255	; 0xff
 800070a:	469b      	mov	fp, r3
 800070c:	e7da      	b.n	80006c4 <__aeabi_fdiv+0x30>
 800070e:	2500      	movs	r5, #0
 8000710:	4653      	mov	r3, sl
 8000712:	2902      	cmp	r1, #2
 8000714:	d01b      	beq.n	800074e <__aeabi_fdiv+0xba>
 8000716:	2903      	cmp	r1, #3
 8000718:	d100      	bne.n	800071c <__aeabi_fdiv+0x88>
 800071a:	e0bf      	b.n	800089c <__aeabi_fdiv+0x208>
 800071c:	2901      	cmp	r1, #1
 800071e:	d028      	beq.n	8000772 <__aeabi_fdiv+0xde>
 8000720:	0030      	movs	r0, r6
 8000722:	307f      	adds	r0, #127	; 0x7f
 8000724:	2800      	cmp	r0, #0
 8000726:	dd20      	ble.n	800076a <__aeabi_fdiv+0xd6>
 8000728:	076a      	lsls	r2, r5, #29
 800072a:	d004      	beq.n	8000736 <__aeabi_fdiv+0xa2>
 800072c:	220f      	movs	r2, #15
 800072e:	402a      	ands	r2, r5
 8000730:	2a04      	cmp	r2, #4
 8000732:	d000      	beq.n	8000736 <__aeabi_fdiv+0xa2>
 8000734:	3504      	adds	r5, #4
 8000736:	012a      	lsls	r2, r5, #4
 8000738:	d503      	bpl.n	8000742 <__aeabi_fdiv+0xae>
 800073a:	0030      	movs	r0, r6
 800073c:	4a5c      	ldr	r2, [pc, #368]	; (80008b0 <__aeabi_fdiv+0x21c>)
 800073e:	3080      	adds	r0, #128	; 0x80
 8000740:	4015      	ands	r5, r2
 8000742:	28fe      	cmp	r0, #254	; 0xfe
 8000744:	dc03      	bgt.n	800074e <__aeabi_fdiv+0xba>
 8000746:	01ac      	lsls	r4, r5, #6
 8000748:	0a64      	lsrs	r4, r4, #9
 800074a:	b2c2      	uxtb	r2, r0
 800074c:	e001      	b.n	8000752 <__aeabi_fdiv+0xbe>
 800074e:	22ff      	movs	r2, #255	; 0xff
 8000750:	2400      	movs	r4, #0
 8000752:	0264      	lsls	r4, r4, #9
 8000754:	05d2      	lsls	r2, r2, #23
 8000756:	0a60      	lsrs	r0, r4, #9
 8000758:	07db      	lsls	r3, r3, #31
 800075a:	4310      	orrs	r0, r2
 800075c:	4318      	orrs	r0, r3
 800075e:	bc3c      	pop	{r2, r3, r4, r5}
 8000760:	4690      	mov	r8, r2
 8000762:	4699      	mov	r9, r3
 8000764:	46a2      	mov	sl, r4
 8000766:	46ab      	mov	fp, r5
 8000768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800076a:	2201      	movs	r2, #1
 800076c:	1a10      	subs	r0, r2, r0
 800076e:	281b      	cmp	r0, #27
 8000770:	dd7c      	ble.n	800086c <__aeabi_fdiv+0x1d8>
 8000772:	2200      	movs	r2, #0
 8000774:	2400      	movs	r4, #0
 8000776:	e7ec      	b.n	8000752 <__aeabi_fdiv+0xbe>
 8000778:	2c00      	cmp	r4, #0
 800077a:	d11d      	bne.n	80007b8 <__aeabi_fdiv+0x124>
 800077c:	2304      	movs	r3, #4
 800077e:	4699      	mov	r9, r3
 8000780:	3b03      	subs	r3, #3
 8000782:	2600      	movs	r6, #0
 8000784:	469b      	mov	fp, r3
 8000786:	e79d      	b.n	80006c4 <__aeabi_fdiv+0x30>
 8000788:	3eff      	subs	r6, #255	; 0xff
 800078a:	2d00      	cmp	r5, #0
 800078c:	d120      	bne.n	80007d0 <__aeabi_fdiv+0x13c>
 800078e:	2102      	movs	r1, #2
 8000790:	4643      	mov	r3, r8
 8000792:	464a      	mov	r2, r9
 8000794:	407b      	eors	r3, r7
 8000796:	430a      	orrs	r2, r1
 8000798:	2a0f      	cmp	r2, #15
 800079a:	d8d8      	bhi.n	800074e <__aeabi_fdiv+0xba>
 800079c:	4845      	ldr	r0, [pc, #276]	; (80008b4 <__aeabi_fdiv+0x220>)
 800079e:	0092      	lsls	r2, r2, #2
 80007a0:	5882      	ldr	r2, [r0, r2]
 80007a2:	4697      	mov	pc, r2
 80007a4:	2d00      	cmp	r5, #0
 80007a6:	d119      	bne.n	80007dc <__aeabi_fdiv+0x148>
 80007a8:	2101      	movs	r1, #1
 80007aa:	e7f1      	b.n	8000790 <__aeabi_fdiv+0xfc>
 80007ac:	230c      	movs	r3, #12
 80007ae:	4699      	mov	r9, r3
 80007b0:	3b09      	subs	r3, #9
 80007b2:	26ff      	movs	r6, #255	; 0xff
 80007b4:	469b      	mov	fp, r3
 80007b6:	e785      	b.n	80006c4 <__aeabi_fdiv+0x30>
 80007b8:	0020      	movs	r0, r4
 80007ba:	f002 f807 	bl	80027cc <__clzsi2>
 80007be:	2676      	movs	r6, #118	; 0x76
 80007c0:	1f43      	subs	r3, r0, #5
 80007c2:	409c      	lsls	r4, r3
 80007c4:	2300      	movs	r3, #0
 80007c6:	4276      	negs	r6, r6
 80007c8:	1a36      	subs	r6, r6, r0
 80007ca:	4699      	mov	r9, r3
 80007cc:	469b      	mov	fp, r3
 80007ce:	e779      	b.n	80006c4 <__aeabi_fdiv+0x30>
 80007d0:	464a      	mov	r2, r9
 80007d2:	2303      	movs	r3, #3
 80007d4:	431a      	orrs	r2, r3
 80007d6:	4691      	mov	r9, r2
 80007d8:	2103      	movs	r1, #3
 80007da:	e786      	b.n	80006ea <__aeabi_fdiv+0x56>
 80007dc:	0028      	movs	r0, r5
 80007de:	f001 fff5 	bl	80027cc <__clzsi2>
 80007e2:	1f43      	subs	r3, r0, #5
 80007e4:	1836      	adds	r6, r6, r0
 80007e6:	409d      	lsls	r5, r3
 80007e8:	3676      	adds	r6, #118	; 0x76
 80007ea:	2100      	movs	r1, #0
 80007ec:	e77d      	b.n	80006ea <__aeabi_fdiv+0x56>
 80007ee:	2480      	movs	r4, #128	; 0x80
 80007f0:	2300      	movs	r3, #0
 80007f2:	03e4      	lsls	r4, r4, #15
 80007f4:	22ff      	movs	r2, #255	; 0xff
 80007f6:	e7ac      	b.n	8000752 <__aeabi_fdiv+0xbe>
 80007f8:	2500      	movs	r5, #0
 80007fa:	2380      	movs	r3, #128	; 0x80
 80007fc:	03db      	lsls	r3, r3, #15
 80007fe:	421c      	tst	r4, r3
 8000800:	d028      	beq.n	8000854 <__aeabi_fdiv+0x1c0>
 8000802:	421d      	tst	r5, r3
 8000804:	d126      	bne.n	8000854 <__aeabi_fdiv+0x1c0>
 8000806:	432b      	orrs	r3, r5
 8000808:	025c      	lsls	r4, r3, #9
 800080a:	0a64      	lsrs	r4, r4, #9
 800080c:	4643      	mov	r3, r8
 800080e:	22ff      	movs	r2, #255	; 0xff
 8000810:	e79f      	b.n	8000752 <__aeabi_fdiv+0xbe>
 8000812:	0162      	lsls	r2, r4, #5
 8000814:	016c      	lsls	r4, r5, #5
 8000816:	42a2      	cmp	r2, r4
 8000818:	d224      	bcs.n	8000864 <__aeabi_fdiv+0x1d0>
 800081a:	211b      	movs	r1, #27
 800081c:	2500      	movs	r5, #0
 800081e:	3e01      	subs	r6, #1
 8000820:	2701      	movs	r7, #1
 8000822:	0010      	movs	r0, r2
 8000824:	006d      	lsls	r5, r5, #1
 8000826:	0052      	lsls	r2, r2, #1
 8000828:	2800      	cmp	r0, #0
 800082a:	db01      	blt.n	8000830 <__aeabi_fdiv+0x19c>
 800082c:	4294      	cmp	r4, r2
 800082e:	d801      	bhi.n	8000834 <__aeabi_fdiv+0x1a0>
 8000830:	1b12      	subs	r2, r2, r4
 8000832:	433d      	orrs	r5, r7
 8000834:	3901      	subs	r1, #1
 8000836:	2900      	cmp	r1, #0
 8000838:	d1f3      	bne.n	8000822 <__aeabi_fdiv+0x18e>
 800083a:	0014      	movs	r4, r2
 800083c:	1e62      	subs	r2, r4, #1
 800083e:	4194      	sbcs	r4, r2
 8000840:	4325      	orrs	r5, r4
 8000842:	e76d      	b.n	8000720 <__aeabi_fdiv+0x8c>
 8000844:	46ba      	mov	sl, r7
 8000846:	4659      	mov	r1, fp
 8000848:	0025      	movs	r5, r4
 800084a:	4653      	mov	r3, sl
 800084c:	2902      	cmp	r1, #2
 800084e:	d000      	beq.n	8000852 <__aeabi_fdiv+0x1be>
 8000850:	e761      	b.n	8000716 <__aeabi_fdiv+0x82>
 8000852:	e77c      	b.n	800074e <__aeabi_fdiv+0xba>
 8000854:	2380      	movs	r3, #128	; 0x80
 8000856:	03db      	lsls	r3, r3, #15
 8000858:	431c      	orrs	r4, r3
 800085a:	0264      	lsls	r4, r4, #9
 800085c:	0a64      	lsrs	r4, r4, #9
 800085e:	003b      	movs	r3, r7
 8000860:	22ff      	movs	r2, #255	; 0xff
 8000862:	e776      	b.n	8000752 <__aeabi_fdiv+0xbe>
 8000864:	1b12      	subs	r2, r2, r4
 8000866:	211a      	movs	r1, #26
 8000868:	2501      	movs	r5, #1
 800086a:	e7d9      	b.n	8000820 <__aeabi_fdiv+0x18c>
 800086c:	369e      	adds	r6, #158	; 0x9e
 800086e:	002a      	movs	r2, r5
 8000870:	40b5      	lsls	r5, r6
 8000872:	002c      	movs	r4, r5
 8000874:	40c2      	lsrs	r2, r0
 8000876:	1e65      	subs	r5, r4, #1
 8000878:	41ac      	sbcs	r4, r5
 800087a:	4314      	orrs	r4, r2
 800087c:	0762      	lsls	r2, r4, #29
 800087e:	d004      	beq.n	800088a <__aeabi_fdiv+0x1f6>
 8000880:	220f      	movs	r2, #15
 8000882:	4022      	ands	r2, r4
 8000884:	2a04      	cmp	r2, #4
 8000886:	d000      	beq.n	800088a <__aeabi_fdiv+0x1f6>
 8000888:	3404      	adds	r4, #4
 800088a:	0162      	lsls	r2, r4, #5
 800088c:	d403      	bmi.n	8000896 <__aeabi_fdiv+0x202>
 800088e:	01a4      	lsls	r4, r4, #6
 8000890:	0a64      	lsrs	r4, r4, #9
 8000892:	2200      	movs	r2, #0
 8000894:	e75d      	b.n	8000752 <__aeabi_fdiv+0xbe>
 8000896:	2201      	movs	r2, #1
 8000898:	2400      	movs	r4, #0
 800089a:	e75a      	b.n	8000752 <__aeabi_fdiv+0xbe>
 800089c:	2480      	movs	r4, #128	; 0x80
 800089e:	03e4      	lsls	r4, r4, #15
 80008a0:	432c      	orrs	r4, r5
 80008a2:	0264      	lsls	r4, r4, #9
 80008a4:	0a64      	lsrs	r4, r4, #9
 80008a6:	22ff      	movs	r2, #255	; 0xff
 80008a8:	e753      	b.n	8000752 <__aeabi_fdiv+0xbe>
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	08007a30 	.word	0x08007a30
 80008b0:	f7ffffff 	.word	0xf7ffffff
 80008b4:	08007a70 	.word	0x08007a70

080008b8 <__eqsf2>:
 80008b8:	b570      	push	{r4, r5, r6, lr}
 80008ba:	0042      	lsls	r2, r0, #1
 80008bc:	024e      	lsls	r6, r1, #9
 80008be:	004c      	lsls	r4, r1, #1
 80008c0:	0245      	lsls	r5, r0, #9
 80008c2:	0a6d      	lsrs	r5, r5, #9
 80008c4:	0e12      	lsrs	r2, r2, #24
 80008c6:	0fc3      	lsrs	r3, r0, #31
 80008c8:	0a76      	lsrs	r6, r6, #9
 80008ca:	0e24      	lsrs	r4, r4, #24
 80008cc:	0fc9      	lsrs	r1, r1, #31
 80008ce:	2aff      	cmp	r2, #255	; 0xff
 80008d0:	d00f      	beq.n	80008f2 <__eqsf2+0x3a>
 80008d2:	2cff      	cmp	r4, #255	; 0xff
 80008d4:	d011      	beq.n	80008fa <__eqsf2+0x42>
 80008d6:	2001      	movs	r0, #1
 80008d8:	42a2      	cmp	r2, r4
 80008da:	d000      	beq.n	80008de <__eqsf2+0x26>
 80008dc:	bd70      	pop	{r4, r5, r6, pc}
 80008de:	42b5      	cmp	r5, r6
 80008e0:	d1fc      	bne.n	80008dc <__eqsf2+0x24>
 80008e2:	428b      	cmp	r3, r1
 80008e4:	d00d      	beq.n	8000902 <__eqsf2+0x4a>
 80008e6:	2a00      	cmp	r2, #0
 80008e8:	d1f8      	bne.n	80008dc <__eqsf2+0x24>
 80008ea:	0028      	movs	r0, r5
 80008ec:	1e45      	subs	r5, r0, #1
 80008ee:	41a8      	sbcs	r0, r5
 80008f0:	e7f4      	b.n	80008dc <__eqsf2+0x24>
 80008f2:	2001      	movs	r0, #1
 80008f4:	2d00      	cmp	r5, #0
 80008f6:	d1f1      	bne.n	80008dc <__eqsf2+0x24>
 80008f8:	e7eb      	b.n	80008d2 <__eqsf2+0x1a>
 80008fa:	2001      	movs	r0, #1
 80008fc:	2e00      	cmp	r6, #0
 80008fe:	d1ed      	bne.n	80008dc <__eqsf2+0x24>
 8000900:	e7e9      	b.n	80008d6 <__eqsf2+0x1e>
 8000902:	2000      	movs	r0, #0
 8000904:	e7ea      	b.n	80008dc <__eqsf2+0x24>
 8000906:	46c0      	nop			; (mov r8, r8)

08000908 <__gesf2>:
 8000908:	b570      	push	{r4, r5, r6, lr}
 800090a:	004a      	lsls	r2, r1, #1
 800090c:	024e      	lsls	r6, r1, #9
 800090e:	0245      	lsls	r5, r0, #9
 8000910:	0044      	lsls	r4, r0, #1
 8000912:	0a6d      	lsrs	r5, r5, #9
 8000914:	0e24      	lsrs	r4, r4, #24
 8000916:	0fc3      	lsrs	r3, r0, #31
 8000918:	0a76      	lsrs	r6, r6, #9
 800091a:	0e12      	lsrs	r2, r2, #24
 800091c:	0fc9      	lsrs	r1, r1, #31
 800091e:	2cff      	cmp	r4, #255	; 0xff
 8000920:	d015      	beq.n	800094e <__gesf2+0x46>
 8000922:	2aff      	cmp	r2, #255	; 0xff
 8000924:	d00e      	beq.n	8000944 <__gesf2+0x3c>
 8000926:	2c00      	cmp	r4, #0
 8000928:	d115      	bne.n	8000956 <__gesf2+0x4e>
 800092a:	2a00      	cmp	r2, #0
 800092c:	d101      	bne.n	8000932 <__gesf2+0x2a>
 800092e:	2e00      	cmp	r6, #0
 8000930:	d01c      	beq.n	800096c <__gesf2+0x64>
 8000932:	2d00      	cmp	r5, #0
 8000934:	d014      	beq.n	8000960 <__gesf2+0x58>
 8000936:	428b      	cmp	r3, r1
 8000938:	d027      	beq.n	800098a <__gesf2+0x82>
 800093a:	2002      	movs	r0, #2
 800093c:	3b01      	subs	r3, #1
 800093e:	4018      	ands	r0, r3
 8000940:	3801      	subs	r0, #1
 8000942:	bd70      	pop	{r4, r5, r6, pc}
 8000944:	2e00      	cmp	r6, #0
 8000946:	d0ee      	beq.n	8000926 <__gesf2+0x1e>
 8000948:	2002      	movs	r0, #2
 800094a:	4240      	negs	r0, r0
 800094c:	e7f9      	b.n	8000942 <__gesf2+0x3a>
 800094e:	2d00      	cmp	r5, #0
 8000950:	d1fa      	bne.n	8000948 <__gesf2+0x40>
 8000952:	2aff      	cmp	r2, #255	; 0xff
 8000954:	d00e      	beq.n	8000974 <__gesf2+0x6c>
 8000956:	2a00      	cmp	r2, #0
 8000958:	d10e      	bne.n	8000978 <__gesf2+0x70>
 800095a:	2e00      	cmp	r6, #0
 800095c:	d0ed      	beq.n	800093a <__gesf2+0x32>
 800095e:	e00b      	b.n	8000978 <__gesf2+0x70>
 8000960:	2301      	movs	r3, #1
 8000962:	3901      	subs	r1, #1
 8000964:	4399      	bics	r1, r3
 8000966:	0008      	movs	r0, r1
 8000968:	3001      	adds	r0, #1
 800096a:	e7ea      	b.n	8000942 <__gesf2+0x3a>
 800096c:	2000      	movs	r0, #0
 800096e:	2d00      	cmp	r5, #0
 8000970:	d0e7      	beq.n	8000942 <__gesf2+0x3a>
 8000972:	e7e2      	b.n	800093a <__gesf2+0x32>
 8000974:	2e00      	cmp	r6, #0
 8000976:	d1e7      	bne.n	8000948 <__gesf2+0x40>
 8000978:	428b      	cmp	r3, r1
 800097a:	d1de      	bne.n	800093a <__gesf2+0x32>
 800097c:	4294      	cmp	r4, r2
 800097e:	dd05      	ble.n	800098c <__gesf2+0x84>
 8000980:	2102      	movs	r1, #2
 8000982:	1e58      	subs	r0, r3, #1
 8000984:	4008      	ands	r0, r1
 8000986:	3801      	subs	r0, #1
 8000988:	e7db      	b.n	8000942 <__gesf2+0x3a>
 800098a:	2400      	movs	r4, #0
 800098c:	42a2      	cmp	r2, r4
 800098e:	dc04      	bgt.n	800099a <__gesf2+0x92>
 8000990:	42b5      	cmp	r5, r6
 8000992:	d8d2      	bhi.n	800093a <__gesf2+0x32>
 8000994:	2000      	movs	r0, #0
 8000996:	42b5      	cmp	r5, r6
 8000998:	d2d3      	bcs.n	8000942 <__gesf2+0x3a>
 800099a:	1e58      	subs	r0, r3, #1
 800099c:	2301      	movs	r3, #1
 800099e:	4398      	bics	r0, r3
 80009a0:	3001      	adds	r0, #1
 80009a2:	e7ce      	b.n	8000942 <__gesf2+0x3a>

080009a4 <__lesf2>:
 80009a4:	b530      	push	{r4, r5, lr}
 80009a6:	0042      	lsls	r2, r0, #1
 80009a8:	0244      	lsls	r4, r0, #9
 80009aa:	024d      	lsls	r5, r1, #9
 80009ac:	0fc3      	lsrs	r3, r0, #31
 80009ae:	0048      	lsls	r0, r1, #1
 80009b0:	0a64      	lsrs	r4, r4, #9
 80009b2:	0e12      	lsrs	r2, r2, #24
 80009b4:	0a6d      	lsrs	r5, r5, #9
 80009b6:	0e00      	lsrs	r0, r0, #24
 80009b8:	0fc9      	lsrs	r1, r1, #31
 80009ba:	2aff      	cmp	r2, #255	; 0xff
 80009bc:	d012      	beq.n	80009e4 <__lesf2+0x40>
 80009be:	28ff      	cmp	r0, #255	; 0xff
 80009c0:	d00c      	beq.n	80009dc <__lesf2+0x38>
 80009c2:	2a00      	cmp	r2, #0
 80009c4:	d112      	bne.n	80009ec <__lesf2+0x48>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	d119      	bne.n	80009fe <__lesf2+0x5a>
 80009ca:	2d00      	cmp	r5, #0
 80009cc:	d117      	bne.n	80009fe <__lesf2+0x5a>
 80009ce:	2c00      	cmp	r4, #0
 80009d0:	d02b      	beq.n	8000a2a <__lesf2+0x86>
 80009d2:	2002      	movs	r0, #2
 80009d4:	3b01      	subs	r3, #1
 80009d6:	4018      	ands	r0, r3
 80009d8:	3801      	subs	r0, #1
 80009da:	e026      	b.n	8000a2a <__lesf2+0x86>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d0f0      	beq.n	80009c2 <__lesf2+0x1e>
 80009e0:	2002      	movs	r0, #2
 80009e2:	e022      	b.n	8000a2a <__lesf2+0x86>
 80009e4:	2c00      	cmp	r4, #0
 80009e6:	d1fb      	bne.n	80009e0 <__lesf2+0x3c>
 80009e8:	28ff      	cmp	r0, #255	; 0xff
 80009ea:	d01f      	beq.n	8000a2c <__lesf2+0x88>
 80009ec:	2800      	cmp	r0, #0
 80009ee:	d11f      	bne.n	8000a30 <__lesf2+0x8c>
 80009f0:	2d00      	cmp	r5, #0
 80009f2:	d11d      	bne.n	8000a30 <__lesf2+0x8c>
 80009f4:	2002      	movs	r0, #2
 80009f6:	3b01      	subs	r3, #1
 80009f8:	4018      	ands	r0, r3
 80009fa:	3801      	subs	r0, #1
 80009fc:	e015      	b.n	8000a2a <__lesf2+0x86>
 80009fe:	2c00      	cmp	r4, #0
 8000a00:	d00e      	beq.n	8000a20 <__lesf2+0x7c>
 8000a02:	428b      	cmp	r3, r1
 8000a04:	d1e5      	bne.n	80009d2 <__lesf2+0x2e>
 8000a06:	2200      	movs	r2, #0
 8000a08:	4290      	cmp	r0, r2
 8000a0a:	dc04      	bgt.n	8000a16 <__lesf2+0x72>
 8000a0c:	42ac      	cmp	r4, r5
 8000a0e:	d8e0      	bhi.n	80009d2 <__lesf2+0x2e>
 8000a10:	2000      	movs	r0, #0
 8000a12:	42ac      	cmp	r4, r5
 8000a14:	d209      	bcs.n	8000a2a <__lesf2+0x86>
 8000a16:	1e58      	subs	r0, r3, #1
 8000a18:	2301      	movs	r3, #1
 8000a1a:	4398      	bics	r0, r3
 8000a1c:	3001      	adds	r0, #1
 8000a1e:	e004      	b.n	8000a2a <__lesf2+0x86>
 8000a20:	2301      	movs	r3, #1
 8000a22:	3901      	subs	r1, #1
 8000a24:	4399      	bics	r1, r3
 8000a26:	0008      	movs	r0, r1
 8000a28:	3001      	adds	r0, #1
 8000a2a:	bd30      	pop	{r4, r5, pc}
 8000a2c:	2d00      	cmp	r5, #0
 8000a2e:	d1d7      	bne.n	80009e0 <__lesf2+0x3c>
 8000a30:	428b      	cmp	r3, r1
 8000a32:	d1ce      	bne.n	80009d2 <__lesf2+0x2e>
 8000a34:	4282      	cmp	r2, r0
 8000a36:	dde7      	ble.n	8000a08 <__lesf2+0x64>
 8000a38:	2102      	movs	r1, #2
 8000a3a:	1e58      	subs	r0, r3, #1
 8000a3c:	4008      	ands	r0, r1
 8000a3e:	3801      	subs	r0, #1
 8000a40:	e7f3      	b.n	8000a2a <__lesf2+0x86>
 8000a42:	46c0      	nop			; (mov r8, r8)

08000a44 <__aeabi_fmul>:
 8000a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a46:	464e      	mov	r6, r9
 8000a48:	4657      	mov	r7, sl
 8000a4a:	4645      	mov	r5, r8
 8000a4c:	46de      	mov	lr, fp
 8000a4e:	b5e0      	push	{r5, r6, r7, lr}
 8000a50:	0243      	lsls	r3, r0, #9
 8000a52:	0a5b      	lsrs	r3, r3, #9
 8000a54:	0045      	lsls	r5, r0, #1
 8000a56:	b083      	sub	sp, #12
 8000a58:	1c0f      	adds	r7, r1, #0
 8000a5a:	4699      	mov	r9, r3
 8000a5c:	0e2d      	lsrs	r5, r5, #24
 8000a5e:	0fc6      	lsrs	r6, r0, #31
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d057      	beq.n	8000b14 <__aeabi_fmul+0xd0>
 8000a64:	2dff      	cmp	r5, #255	; 0xff
 8000a66:	d024      	beq.n	8000ab2 <__aeabi_fmul+0x6e>
 8000a68:	2080      	movs	r0, #128	; 0x80
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	04c0      	lsls	r0, r0, #19
 8000a6e:	4318      	orrs	r0, r3
 8000a70:	2300      	movs	r3, #0
 8000a72:	4681      	mov	r9, r0
 8000a74:	469a      	mov	sl, r3
 8000a76:	469b      	mov	fp, r3
 8000a78:	3d7f      	subs	r5, #127	; 0x7f
 8000a7a:	027c      	lsls	r4, r7, #9
 8000a7c:	007a      	lsls	r2, r7, #1
 8000a7e:	0ffb      	lsrs	r3, r7, #31
 8000a80:	0a64      	lsrs	r4, r4, #9
 8000a82:	0e12      	lsrs	r2, r2, #24
 8000a84:	4698      	mov	r8, r3
 8000a86:	d023      	beq.n	8000ad0 <__aeabi_fmul+0x8c>
 8000a88:	2aff      	cmp	r2, #255	; 0xff
 8000a8a:	d04b      	beq.n	8000b24 <__aeabi_fmul+0xe0>
 8000a8c:	00e3      	lsls	r3, r4, #3
 8000a8e:	2480      	movs	r4, #128	; 0x80
 8000a90:	2000      	movs	r0, #0
 8000a92:	04e4      	lsls	r4, r4, #19
 8000a94:	3a7f      	subs	r2, #127	; 0x7f
 8000a96:	431c      	orrs	r4, r3
 8000a98:	18ad      	adds	r5, r5, r2
 8000a9a:	1c6b      	adds	r3, r5, #1
 8000a9c:	4647      	mov	r7, r8
 8000a9e:	9301      	str	r3, [sp, #4]
 8000aa0:	4653      	mov	r3, sl
 8000aa2:	4077      	eors	r7, r6
 8000aa4:	003a      	movs	r2, r7
 8000aa6:	2b0f      	cmp	r3, #15
 8000aa8:	d848      	bhi.n	8000b3c <__aeabi_fmul+0xf8>
 8000aaa:	497d      	ldr	r1, [pc, #500]	; (8000ca0 <__aeabi_fmul+0x25c>)
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	58cb      	ldr	r3, [r1, r3]
 8000ab0:	469f      	mov	pc, r3
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d000      	beq.n	8000ab8 <__aeabi_fmul+0x74>
 8000ab6:	e085      	b.n	8000bc4 <__aeabi_fmul+0x180>
 8000ab8:	3308      	adds	r3, #8
 8000aba:	469a      	mov	sl, r3
 8000abc:	3b06      	subs	r3, #6
 8000abe:	469b      	mov	fp, r3
 8000ac0:	027c      	lsls	r4, r7, #9
 8000ac2:	007a      	lsls	r2, r7, #1
 8000ac4:	0ffb      	lsrs	r3, r7, #31
 8000ac6:	25ff      	movs	r5, #255	; 0xff
 8000ac8:	0a64      	lsrs	r4, r4, #9
 8000aca:	0e12      	lsrs	r2, r2, #24
 8000acc:	4698      	mov	r8, r3
 8000ace:	d1db      	bne.n	8000a88 <__aeabi_fmul+0x44>
 8000ad0:	2c00      	cmp	r4, #0
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_fmul+0x92>
 8000ad4:	e090      	b.n	8000bf8 <__aeabi_fmul+0x1b4>
 8000ad6:	4652      	mov	r2, sl
 8000ad8:	2301      	movs	r3, #1
 8000ada:	431a      	orrs	r2, r3
 8000adc:	4692      	mov	sl, r2
 8000ade:	2001      	movs	r0, #1
 8000ae0:	e7db      	b.n	8000a9a <__aeabi_fmul+0x56>
 8000ae2:	464c      	mov	r4, r9
 8000ae4:	4658      	mov	r0, fp
 8000ae6:	0017      	movs	r7, r2
 8000ae8:	2802      	cmp	r0, #2
 8000aea:	d024      	beq.n	8000b36 <__aeabi_fmul+0xf2>
 8000aec:	2803      	cmp	r0, #3
 8000aee:	d100      	bne.n	8000af2 <__aeabi_fmul+0xae>
 8000af0:	e0cf      	b.n	8000c92 <__aeabi_fmul+0x24e>
 8000af2:	2200      	movs	r2, #0
 8000af4:	2300      	movs	r3, #0
 8000af6:	2801      	cmp	r0, #1
 8000af8:	d14d      	bne.n	8000b96 <__aeabi_fmul+0x152>
 8000afa:	0258      	lsls	r0, r3, #9
 8000afc:	05d2      	lsls	r2, r2, #23
 8000afe:	0a40      	lsrs	r0, r0, #9
 8000b00:	07ff      	lsls	r7, r7, #31
 8000b02:	4310      	orrs	r0, r2
 8000b04:	4338      	orrs	r0, r7
 8000b06:	b003      	add	sp, #12
 8000b08:	bc3c      	pop	{r2, r3, r4, r5}
 8000b0a:	4690      	mov	r8, r2
 8000b0c:	4699      	mov	r9, r3
 8000b0e:	46a2      	mov	sl, r4
 8000b10:	46ab      	mov	fp, r5
 8000b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d15b      	bne.n	8000bd0 <__aeabi_fmul+0x18c>
 8000b18:	2304      	movs	r3, #4
 8000b1a:	469a      	mov	sl, r3
 8000b1c:	3b03      	subs	r3, #3
 8000b1e:	2500      	movs	r5, #0
 8000b20:	469b      	mov	fp, r3
 8000b22:	e7aa      	b.n	8000a7a <__aeabi_fmul+0x36>
 8000b24:	35ff      	adds	r5, #255	; 0xff
 8000b26:	2c00      	cmp	r4, #0
 8000b28:	d160      	bne.n	8000bec <__aeabi_fmul+0x1a8>
 8000b2a:	4652      	mov	r2, sl
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	4692      	mov	sl, r2
 8000b32:	2002      	movs	r0, #2
 8000b34:	e7b1      	b.n	8000a9a <__aeabi_fmul+0x56>
 8000b36:	22ff      	movs	r2, #255	; 0xff
 8000b38:	2300      	movs	r3, #0
 8000b3a:	e7de      	b.n	8000afa <__aeabi_fmul+0xb6>
 8000b3c:	464b      	mov	r3, r9
 8000b3e:	0c1b      	lsrs	r3, r3, #16
 8000b40:	469c      	mov	ip, r3
 8000b42:	464b      	mov	r3, r9
 8000b44:	0426      	lsls	r6, r4, #16
 8000b46:	0c36      	lsrs	r6, r6, #16
 8000b48:	0418      	lsls	r0, r3, #16
 8000b4a:	4661      	mov	r1, ip
 8000b4c:	0033      	movs	r3, r6
 8000b4e:	0c22      	lsrs	r2, r4, #16
 8000b50:	4664      	mov	r4, ip
 8000b52:	0c00      	lsrs	r0, r0, #16
 8000b54:	4343      	muls	r3, r0
 8000b56:	434e      	muls	r6, r1
 8000b58:	4350      	muls	r0, r2
 8000b5a:	4354      	muls	r4, r2
 8000b5c:	1980      	adds	r0, r0, r6
 8000b5e:	0c1a      	lsrs	r2, r3, #16
 8000b60:	1812      	adds	r2, r2, r0
 8000b62:	4296      	cmp	r6, r2
 8000b64:	d903      	bls.n	8000b6e <__aeabi_fmul+0x12a>
 8000b66:	2180      	movs	r1, #128	; 0x80
 8000b68:	0249      	lsls	r1, r1, #9
 8000b6a:	468c      	mov	ip, r1
 8000b6c:	4464      	add	r4, ip
 8000b6e:	041b      	lsls	r3, r3, #16
 8000b70:	0c1b      	lsrs	r3, r3, #16
 8000b72:	0410      	lsls	r0, r2, #16
 8000b74:	18c0      	adds	r0, r0, r3
 8000b76:	0183      	lsls	r3, r0, #6
 8000b78:	1e5e      	subs	r6, r3, #1
 8000b7a:	41b3      	sbcs	r3, r6
 8000b7c:	0e80      	lsrs	r0, r0, #26
 8000b7e:	4318      	orrs	r0, r3
 8000b80:	0c13      	lsrs	r3, r2, #16
 8000b82:	191b      	adds	r3, r3, r4
 8000b84:	019b      	lsls	r3, r3, #6
 8000b86:	4303      	orrs	r3, r0
 8000b88:	001c      	movs	r4, r3
 8000b8a:	0123      	lsls	r3, r4, #4
 8000b8c:	d579      	bpl.n	8000c82 <__aeabi_fmul+0x23e>
 8000b8e:	2301      	movs	r3, #1
 8000b90:	0862      	lsrs	r2, r4, #1
 8000b92:	401c      	ands	r4, r3
 8000b94:	4314      	orrs	r4, r2
 8000b96:	9a01      	ldr	r2, [sp, #4]
 8000b98:	327f      	adds	r2, #127	; 0x7f
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	dd4d      	ble.n	8000c3a <__aeabi_fmul+0x1f6>
 8000b9e:	0763      	lsls	r3, r4, #29
 8000ba0:	d004      	beq.n	8000bac <__aeabi_fmul+0x168>
 8000ba2:	230f      	movs	r3, #15
 8000ba4:	4023      	ands	r3, r4
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	d000      	beq.n	8000bac <__aeabi_fmul+0x168>
 8000baa:	3404      	adds	r4, #4
 8000bac:	0123      	lsls	r3, r4, #4
 8000bae:	d503      	bpl.n	8000bb8 <__aeabi_fmul+0x174>
 8000bb0:	4b3c      	ldr	r3, [pc, #240]	; (8000ca4 <__aeabi_fmul+0x260>)
 8000bb2:	9a01      	ldr	r2, [sp, #4]
 8000bb4:	401c      	ands	r4, r3
 8000bb6:	3280      	adds	r2, #128	; 0x80
 8000bb8:	2afe      	cmp	r2, #254	; 0xfe
 8000bba:	dcbc      	bgt.n	8000b36 <__aeabi_fmul+0xf2>
 8000bbc:	01a3      	lsls	r3, r4, #6
 8000bbe:	0a5b      	lsrs	r3, r3, #9
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	e79a      	b.n	8000afa <__aeabi_fmul+0xb6>
 8000bc4:	230c      	movs	r3, #12
 8000bc6:	469a      	mov	sl, r3
 8000bc8:	3b09      	subs	r3, #9
 8000bca:	25ff      	movs	r5, #255	; 0xff
 8000bcc:	469b      	mov	fp, r3
 8000bce:	e754      	b.n	8000a7a <__aeabi_fmul+0x36>
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f001 fdfb 	bl	80027cc <__clzsi2>
 8000bd6:	464a      	mov	r2, r9
 8000bd8:	1f43      	subs	r3, r0, #5
 8000bda:	2576      	movs	r5, #118	; 0x76
 8000bdc:	409a      	lsls	r2, r3
 8000bde:	2300      	movs	r3, #0
 8000be0:	426d      	negs	r5, r5
 8000be2:	4691      	mov	r9, r2
 8000be4:	1a2d      	subs	r5, r5, r0
 8000be6:	469a      	mov	sl, r3
 8000be8:	469b      	mov	fp, r3
 8000bea:	e746      	b.n	8000a7a <__aeabi_fmul+0x36>
 8000bec:	4652      	mov	r2, sl
 8000bee:	2303      	movs	r3, #3
 8000bf0:	431a      	orrs	r2, r3
 8000bf2:	4692      	mov	sl, r2
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	e750      	b.n	8000a9a <__aeabi_fmul+0x56>
 8000bf8:	0020      	movs	r0, r4
 8000bfa:	f001 fde7 	bl	80027cc <__clzsi2>
 8000bfe:	1f43      	subs	r3, r0, #5
 8000c00:	1a2d      	subs	r5, r5, r0
 8000c02:	409c      	lsls	r4, r3
 8000c04:	3d76      	subs	r5, #118	; 0x76
 8000c06:	2000      	movs	r0, #0
 8000c08:	e747      	b.n	8000a9a <__aeabi_fmul+0x56>
 8000c0a:	2380      	movs	r3, #128	; 0x80
 8000c0c:	2700      	movs	r7, #0
 8000c0e:	03db      	lsls	r3, r3, #15
 8000c10:	22ff      	movs	r2, #255	; 0xff
 8000c12:	e772      	b.n	8000afa <__aeabi_fmul+0xb6>
 8000c14:	4642      	mov	r2, r8
 8000c16:	e766      	b.n	8000ae6 <__aeabi_fmul+0xa2>
 8000c18:	464c      	mov	r4, r9
 8000c1a:	0032      	movs	r2, r6
 8000c1c:	4658      	mov	r0, fp
 8000c1e:	e762      	b.n	8000ae6 <__aeabi_fmul+0xa2>
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	464a      	mov	r2, r9
 8000c24:	03db      	lsls	r3, r3, #15
 8000c26:	421a      	tst	r2, r3
 8000c28:	d022      	beq.n	8000c70 <__aeabi_fmul+0x22c>
 8000c2a:	421c      	tst	r4, r3
 8000c2c:	d120      	bne.n	8000c70 <__aeabi_fmul+0x22c>
 8000c2e:	4323      	orrs	r3, r4
 8000c30:	025b      	lsls	r3, r3, #9
 8000c32:	0a5b      	lsrs	r3, r3, #9
 8000c34:	4647      	mov	r7, r8
 8000c36:	22ff      	movs	r2, #255	; 0xff
 8000c38:	e75f      	b.n	8000afa <__aeabi_fmul+0xb6>
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	1a9a      	subs	r2, r3, r2
 8000c3e:	2a1b      	cmp	r2, #27
 8000c40:	dc21      	bgt.n	8000c86 <__aeabi_fmul+0x242>
 8000c42:	0023      	movs	r3, r4
 8000c44:	9901      	ldr	r1, [sp, #4]
 8000c46:	40d3      	lsrs	r3, r2
 8000c48:	319e      	adds	r1, #158	; 0x9e
 8000c4a:	408c      	lsls	r4, r1
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	0023      	movs	r3, r4
 8000c50:	1e5c      	subs	r4, r3, #1
 8000c52:	41a3      	sbcs	r3, r4
 8000c54:	4313      	orrs	r3, r2
 8000c56:	075a      	lsls	r2, r3, #29
 8000c58:	d004      	beq.n	8000c64 <__aeabi_fmul+0x220>
 8000c5a:	220f      	movs	r2, #15
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	2a04      	cmp	r2, #4
 8000c60:	d000      	beq.n	8000c64 <__aeabi_fmul+0x220>
 8000c62:	3304      	adds	r3, #4
 8000c64:	015a      	lsls	r2, r3, #5
 8000c66:	d411      	bmi.n	8000c8c <__aeabi_fmul+0x248>
 8000c68:	019b      	lsls	r3, r3, #6
 8000c6a:	0a5b      	lsrs	r3, r3, #9
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	e744      	b.n	8000afa <__aeabi_fmul+0xb6>
 8000c70:	2380      	movs	r3, #128	; 0x80
 8000c72:	464a      	mov	r2, r9
 8000c74:	03db      	lsls	r3, r3, #15
 8000c76:	4313      	orrs	r3, r2
 8000c78:	025b      	lsls	r3, r3, #9
 8000c7a:	0a5b      	lsrs	r3, r3, #9
 8000c7c:	0037      	movs	r7, r6
 8000c7e:	22ff      	movs	r2, #255	; 0xff
 8000c80:	e73b      	b.n	8000afa <__aeabi_fmul+0xb6>
 8000c82:	9501      	str	r5, [sp, #4]
 8000c84:	e787      	b.n	8000b96 <__aeabi_fmul+0x152>
 8000c86:	2200      	movs	r2, #0
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e736      	b.n	8000afa <__aeabi_fmul+0xb6>
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e733      	b.n	8000afa <__aeabi_fmul+0xb6>
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	03db      	lsls	r3, r3, #15
 8000c96:	4323      	orrs	r3, r4
 8000c98:	025b      	lsls	r3, r3, #9
 8000c9a:	0a5b      	lsrs	r3, r3, #9
 8000c9c:	22ff      	movs	r2, #255	; 0xff
 8000c9e:	e72c      	b.n	8000afa <__aeabi_fmul+0xb6>
 8000ca0:	08007ab0 	.word	0x08007ab0
 8000ca4:	f7ffffff 	.word	0xf7ffffff

08000ca8 <__aeabi_fsub>:
 8000ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000caa:	4647      	mov	r7, r8
 8000cac:	46ce      	mov	lr, r9
 8000cae:	0044      	lsls	r4, r0, #1
 8000cb0:	0fc2      	lsrs	r2, r0, #31
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	0247      	lsls	r7, r0, #9
 8000cb6:	0248      	lsls	r0, r1, #9
 8000cb8:	0a40      	lsrs	r0, r0, #9
 8000cba:	4684      	mov	ip, r0
 8000cbc:	4666      	mov	r6, ip
 8000cbe:	0048      	lsls	r0, r1, #1
 8000cc0:	0a7f      	lsrs	r7, r7, #9
 8000cc2:	0e24      	lsrs	r4, r4, #24
 8000cc4:	00f6      	lsls	r6, r6, #3
 8000cc6:	0025      	movs	r5, r4
 8000cc8:	4690      	mov	r8, r2
 8000cca:	00fb      	lsls	r3, r7, #3
 8000ccc:	0e00      	lsrs	r0, r0, #24
 8000cce:	0fc9      	lsrs	r1, r1, #31
 8000cd0:	46b1      	mov	r9, r6
 8000cd2:	28ff      	cmp	r0, #255	; 0xff
 8000cd4:	d100      	bne.n	8000cd8 <__aeabi_fsub+0x30>
 8000cd6:	e085      	b.n	8000de4 <__aeabi_fsub+0x13c>
 8000cd8:	2601      	movs	r6, #1
 8000cda:	4071      	eors	r1, r6
 8000cdc:	1a26      	subs	r6, r4, r0
 8000cde:	4291      	cmp	r1, r2
 8000ce0:	d057      	beq.n	8000d92 <__aeabi_fsub+0xea>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	dd43      	ble.n	8000d6e <__aeabi_fsub+0xc6>
 8000ce6:	2800      	cmp	r0, #0
 8000ce8:	d000      	beq.n	8000cec <__aeabi_fsub+0x44>
 8000cea:	e07f      	b.n	8000dec <__aeabi_fsub+0x144>
 8000cec:	4649      	mov	r1, r9
 8000cee:	2900      	cmp	r1, #0
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_fsub+0x4c>
 8000cf2:	e0aa      	b.n	8000e4a <__aeabi_fsub+0x1a2>
 8000cf4:	3e01      	subs	r6, #1
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	d000      	beq.n	8000cfc <__aeabi_fsub+0x54>
 8000cfa:	e0f7      	b.n	8000eec <__aeabi_fsub+0x244>
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	015a      	lsls	r2, r3, #5
 8000d00:	d400      	bmi.n	8000d04 <__aeabi_fsub+0x5c>
 8000d02:	e08b      	b.n	8000e1c <__aeabi_fsub+0x174>
 8000d04:	019b      	lsls	r3, r3, #6
 8000d06:	099c      	lsrs	r4, r3, #6
 8000d08:	0020      	movs	r0, r4
 8000d0a:	f001 fd5f 	bl	80027cc <__clzsi2>
 8000d0e:	3805      	subs	r0, #5
 8000d10:	4084      	lsls	r4, r0
 8000d12:	4285      	cmp	r5, r0
 8000d14:	dd00      	ble.n	8000d18 <__aeabi_fsub+0x70>
 8000d16:	e0d3      	b.n	8000ec0 <__aeabi_fsub+0x218>
 8000d18:	1b45      	subs	r5, r0, r5
 8000d1a:	0023      	movs	r3, r4
 8000d1c:	2020      	movs	r0, #32
 8000d1e:	3501      	adds	r5, #1
 8000d20:	40eb      	lsrs	r3, r5
 8000d22:	1b45      	subs	r5, r0, r5
 8000d24:	40ac      	lsls	r4, r5
 8000d26:	1e62      	subs	r2, r4, #1
 8000d28:	4194      	sbcs	r4, r2
 8000d2a:	4323      	orrs	r3, r4
 8000d2c:	2407      	movs	r4, #7
 8000d2e:	2500      	movs	r5, #0
 8000d30:	401c      	ands	r4, r3
 8000d32:	2201      	movs	r2, #1
 8000d34:	4641      	mov	r1, r8
 8000d36:	400a      	ands	r2, r1
 8000d38:	2c00      	cmp	r4, #0
 8000d3a:	d004      	beq.n	8000d46 <__aeabi_fsub+0x9e>
 8000d3c:	210f      	movs	r1, #15
 8000d3e:	4019      	ands	r1, r3
 8000d40:	2904      	cmp	r1, #4
 8000d42:	d000      	beq.n	8000d46 <__aeabi_fsub+0x9e>
 8000d44:	3304      	adds	r3, #4
 8000d46:	0159      	lsls	r1, r3, #5
 8000d48:	d400      	bmi.n	8000d4c <__aeabi_fsub+0xa4>
 8000d4a:	e080      	b.n	8000e4e <__aeabi_fsub+0x1a6>
 8000d4c:	3501      	adds	r5, #1
 8000d4e:	b2ec      	uxtb	r4, r5
 8000d50:	2dff      	cmp	r5, #255	; 0xff
 8000d52:	d000      	beq.n	8000d56 <__aeabi_fsub+0xae>
 8000d54:	e0a3      	b.n	8000e9e <__aeabi_fsub+0x1f6>
 8000d56:	24ff      	movs	r4, #255	; 0xff
 8000d58:	2300      	movs	r3, #0
 8000d5a:	025b      	lsls	r3, r3, #9
 8000d5c:	05e4      	lsls	r4, r4, #23
 8000d5e:	0a58      	lsrs	r0, r3, #9
 8000d60:	07d2      	lsls	r2, r2, #31
 8000d62:	4320      	orrs	r0, r4
 8000d64:	4310      	orrs	r0, r2
 8000d66:	bc0c      	pop	{r2, r3}
 8000d68:	4690      	mov	r8, r2
 8000d6a:	4699      	mov	r9, r3
 8000d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d174      	bne.n	8000e5c <__aeabi_fsub+0x1b4>
 8000d72:	1c60      	adds	r0, r4, #1
 8000d74:	b2c0      	uxtb	r0, r0
 8000d76:	2801      	cmp	r0, #1
 8000d78:	dc00      	bgt.n	8000d7c <__aeabi_fsub+0xd4>
 8000d7a:	e0a7      	b.n	8000ecc <__aeabi_fsub+0x224>
 8000d7c:	464a      	mov	r2, r9
 8000d7e:	1a9c      	subs	r4, r3, r2
 8000d80:	0162      	lsls	r2, r4, #5
 8000d82:	d500      	bpl.n	8000d86 <__aeabi_fsub+0xde>
 8000d84:	e0b6      	b.n	8000ef4 <__aeabi_fsub+0x24c>
 8000d86:	2c00      	cmp	r4, #0
 8000d88:	d1be      	bne.n	8000d08 <__aeabi_fsub+0x60>
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2400      	movs	r4, #0
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e7e3      	b.n	8000d5a <__aeabi_fsub+0xb2>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	dc00      	bgt.n	8000d98 <__aeabi_fsub+0xf0>
 8000d96:	e085      	b.n	8000ea4 <__aeabi_fsub+0x1fc>
 8000d98:	2800      	cmp	r0, #0
 8000d9a:	d046      	beq.n	8000e2a <__aeabi_fsub+0x182>
 8000d9c:	2cff      	cmp	r4, #255	; 0xff
 8000d9e:	d049      	beq.n	8000e34 <__aeabi_fsub+0x18c>
 8000da0:	2280      	movs	r2, #128	; 0x80
 8000da2:	4648      	mov	r0, r9
 8000da4:	04d2      	lsls	r2, r2, #19
 8000da6:	4310      	orrs	r0, r2
 8000da8:	4681      	mov	r9, r0
 8000daa:	2201      	movs	r2, #1
 8000dac:	2e1b      	cmp	r6, #27
 8000dae:	dc09      	bgt.n	8000dc4 <__aeabi_fsub+0x11c>
 8000db0:	2020      	movs	r0, #32
 8000db2:	464c      	mov	r4, r9
 8000db4:	1b80      	subs	r0, r0, r6
 8000db6:	4084      	lsls	r4, r0
 8000db8:	464a      	mov	r2, r9
 8000dba:	0020      	movs	r0, r4
 8000dbc:	40f2      	lsrs	r2, r6
 8000dbe:	1e44      	subs	r4, r0, #1
 8000dc0:	41a0      	sbcs	r0, r4
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	189b      	adds	r3, r3, r2
 8000dc6:	015a      	lsls	r2, r3, #5
 8000dc8:	d528      	bpl.n	8000e1c <__aeabi_fsub+0x174>
 8000dca:	3501      	adds	r5, #1
 8000dcc:	2dff      	cmp	r5, #255	; 0xff
 8000dce:	d100      	bne.n	8000dd2 <__aeabi_fsub+0x12a>
 8000dd0:	e0a8      	b.n	8000f24 <__aeabi_fsub+0x27c>
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2407      	movs	r4, #7
 8000dd6:	4994      	ldr	r1, [pc, #592]	; (8001028 <__aeabi_fsub+0x380>)
 8000dd8:	401a      	ands	r2, r3
 8000dda:	085b      	lsrs	r3, r3, #1
 8000ddc:	400b      	ands	r3, r1
 8000dde:	4313      	orrs	r3, r2
 8000de0:	401c      	ands	r4, r3
 8000de2:	e7a6      	b.n	8000d32 <__aeabi_fsub+0x8a>
 8000de4:	2e00      	cmp	r6, #0
 8000de6:	d000      	beq.n	8000dea <__aeabi_fsub+0x142>
 8000de8:	e778      	b.n	8000cdc <__aeabi_fsub+0x34>
 8000dea:	e775      	b.n	8000cd8 <__aeabi_fsub+0x30>
 8000dec:	2cff      	cmp	r4, #255	; 0xff
 8000dee:	d054      	beq.n	8000e9a <__aeabi_fsub+0x1f2>
 8000df0:	2280      	movs	r2, #128	; 0x80
 8000df2:	4649      	mov	r1, r9
 8000df4:	04d2      	lsls	r2, r2, #19
 8000df6:	4311      	orrs	r1, r2
 8000df8:	4689      	mov	r9, r1
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2e1b      	cmp	r6, #27
 8000dfe:	dc09      	bgt.n	8000e14 <__aeabi_fsub+0x16c>
 8000e00:	2120      	movs	r1, #32
 8000e02:	4648      	mov	r0, r9
 8000e04:	1b89      	subs	r1, r1, r6
 8000e06:	4088      	lsls	r0, r1
 8000e08:	464a      	mov	r2, r9
 8000e0a:	0001      	movs	r1, r0
 8000e0c:	40f2      	lsrs	r2, r6
 8000e0e:	1e48      	subs	r0, r1, #1
 8000e10:	4181      	sbcs	r1, r0
 8000e12:	430a      	orrs	r2, r1
 8000e14:	1a9b      	subs	r3, r3, r2
 8000e16:	015a      	lsls	r2, r3, #5
 8000e18:	d500      	bpl.n	8000e1c <__aeabi_fsub+0x174>
 8000e1a:	e773      	b.n	8000d04 <__aeabi_fsub+0x5c>
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	4641      	mov	r1, r8
 8000e20:	400a      	ands	r2, r1
 8000e22:	0759      	lsls	r1, r3, #29
 8000e24:	d000      	beq.n	8000e28 <__aeabi_fsub+0x180>
 8000e26:	e789      	b.n	8000d3c <__aeabi_fsub+0x94>
 8000e28:	e011      	b.n	8000e4e <__aeabi_fsub+0x1a6>
 8000e2a:	4648      	mov	r0, r9
 8000e2c:	2800      	cmp	r0, #0
 8000e2e:	d158      	bne.n	8000ee2 <__aeabi_fsub+0x23a>
 8000e30:	2cff      	cmp	r4, #255	; 0xff
 8000e32:	d10c      	bne.n	8000e4e <__aeabi_fsub+0x1a6>
 8000e34:	08db      	lsrs	r3, r3, #3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_fsub+0x194>
 8000e3a:	e78c      	b.n	8000d56 <__aeabi_fsub+0xae>
 8000e3c:	2080      	movs	r0, #128	; 0x80
 8000e3e:	03c0      	lsls	r0, r0, #15
 8000e40:	4303      	orrs	r3, r0
 8000e42:	025b      	lsls	r3, r3, #9
 8000e44:	0a5b      	lsrs	r3, r3, #9
 8000e46:	24ff      	movs	r4, #255	; 0xff
 8000e48:	e787      	b.n	8000d5a <__aeabi_fsub+0xb2>
 8000e4a:	2cff      	cmp	r4, #255	; 0xff
 8000e4c:	d025      	beq.n	8000e9a <__aeabi_fsub+0x1f2>
 8000e4e:	08db      	lsrs	r3, r3, #3
 8000e50:	2dff      	cmp	r5, #255	; 0xff
 8000e52:	d0f0      	beq.n	8000e36 <__aeabi_fsub+0x18e>
 8000e54:	025b      	lsls	r3, r3, #9
 8000e56:	0a5b      	lsrs	r3, r3, #9
 8000e58:	b2ec      	uxtb	r4, r5
 8000e5a:	e77e      	b.n	8000d5a <__aeabi_fsub+0xb2>
 8000e5c:	2c00      	cmp	r4, #0
 8000e5e:	d04d      	beq.n	8000efc <__aeabi_fsub+0x254>
 8000e60:	28ff      	cmp	r0, #255	; 0xff
 8000e62:	d018      	beq.n	8000e96 <__aeabi_fsub+0x1ee>
 8000e64:	2480      	movs	r4, #128	; 0x80
 8000e66:	04e4      	lsls	r4, r4, #19
 8000e68:	4272      	negs	r2, r6
 8000e6a:	4323      	orrs	r3, r4
 8000e6c:	2a1b      	cmp	r2, #27
 8000e6e:	dd00      	ble.n	8000e72 <__aeabi_fsub+0x1ca>
 8000e70:	e0c4      	b.n	8000ffc <__aeabi_fsub+0x354>
 8000e72:	001c      	movs	r4, r3
 8000e74:	2520      	movs	r5, #32
 8000e76:	40d4      	lsrs	r4, r2
 8000e78:	1aaa      	subs	r2, r5, r2
 8000e7a:	4093      	lsls	r3, r2
 8000e7c:	1e5a      	subs	r2, r3, #1
 8000e7e:	4193      	sbcs	r3, r2
 8000e80:	4323      	orrs	r3, r4
 8000e82:	464a      	mov	r2, r9
 8000e84:	0005      	movs	r5, r0
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	4688      	mov	r8, r1
 8000e8a:	e738      	b.n	8000cfe <__aeabi_fsub+0x56>
 8000e8c:	1c72      	adds	r2, r6, #1
 8000e8e:	d0f8      	beq.n	8000e82 <__aeabi_fsub+0x1da>
 8000e90:	43f2      	mvns	r2, r6
 8000e92:	28ff      	cmp	r0, #255	; 0xff
 8000e94:	d1ea      	bne.n	8000e6c <__aeabi_fsub+0x1c4>
 8000e96:	000a      	movs	r2, r1
 8000e98:	464b      	mov	r3, r9
 8000e9a:	25ff      	movs	r5, #255	; 0xff
 8000e9c:	e7d7      	b.n	8000e4e <__aeabi_fsub+0x1a6>
 8000e9e:	019b      	lsls	r3, r3, #6
 8000ea0:	0a5b      	lsrs	r3, r3, #9
 8000ea2:	e75a      	b.n	8000d5a <__aeabi_fsub+0xb2>
 8000ea4:	2e00      	cmp	r6, #0
 8000ea6:	d141      	bne.n	8000f2c <__aeabi_fsub+0x284>
 8000ea8:	1c65      	adds	r5, r4, #1
 8000eaa:	b2e9      	uxtb	r1, r5
 8000eac:	2901      	cmp	r1, #1
 8000eae:	dd45      	ble.n	8000f3c <__aeabi_fsub+0x294>
 8000eb0:	2dff      	cmp	r5, #255	; 0xff
 8000eb2:	d100      	bne.n	8000eb6 <__aeabi_fsub+0x20e>
 8000eb4:	e74f      	b.n	8000d56 <__aeabi_fsub+0xae>
 8000eb6:	2407      	movs	r4, #7
 8000eb8:	444b      	add	r3, r9
 8000eba:	085b      	lsrs	r3, r3, #1
 8000ebc:	401c      	ands	r4, r3
 8000ebe:	e738      	b.n	8000d32 <__aeabi_fsub+0x8a>
 8000ec0:	2207      	movs	r2, #7
 8000ec2:	4b5a      	ldr	r3, [pc, #360]	; (800102c <__aeabi_fsub+0x384>)
 8000ec4:	1a2d      	subs	r5, r5, r0
 8000ec6:	4023      	ands	r3, r4
 8000ec8:	4014      	ands	r4, r2
 8000eca:	e732      	b.n	8000d32 <__aeabi_fsub+0x8a>
 8000ecc:	2c00      	cmp	r4, #0
 8000ece:	d11d      	bne.n	8000f0c <__aeabi_fsub+0x264>
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d17a      	bne.n	8000fca <__aeabi_fsub+0x322>
 8000ed4:	464b      	mov	r3, r9
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d100      	bne.n	8000edc <__aeabi_fsub+0x234>
 8000eda:	e091      	b.n	8001000 <__aeabi_fsub+0x358>
 8000edc:	000a      	movs	r2, r1
 8000ede:	2500      	movs	r5, #0
 8000ee0:	e7b5      	b.n	8000e4e <__aeabi_fsub+0x1a6>
 8000ee2:	3e01      	subs	r6, #1
 8000ee4:	2e00      	cmp	r6, #0
 8000ee6:	d119      	bne.n	8000f1c <__aeabi_fsub+0x274>
 8000ee8:	444b      	add	r3, r9
 8000eea:	e76c      	b.n	8000dc6 <__aeabi_fsub+0x11e>
 8000eec:	2cff      	cmp	r4, #255	; 0xff
 8000eee:	d184      	bne.n	8000dfa <__aeabi_fsub+0x152>
 8000ef0:	25ff      	movs	r5, #255	; 0xff
 8000ef2:	e7ac      	b.n	8000e4e <__aeabi_fsub+0x1a6>
 8000ef4:	464a      	mov	r2, r9
 8000ef6:	4688      	mov	r8, r1
 8000ef8:	1ad4      	subs	r4, r2, r3
 8000efa:	e705      	b.n	8000d08 <__aeabi_fsub+0x60>
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1c5      	bne.n	8000e8c <__aeabi_fsub+0x1e4>
 8000f00:	000a      	movs	r2, r1
 8000f02:	28ff      	cmp	r0, #255	; 0xff
 8000f04:	d0c8      	beq.n	8000e98 <__aeabi_fsub+0x1f0>
 8000f06:	0005      	movs	r5, r0
 8000f08:	464b      	mov	r3, r9
 8000f0a:	e7a0      	b.n	8000e4e <__aeabi_fsub+0x1a6>
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d149      	bne.n	8000fa4 <__aeabi_fsub+0x2fc>
 8000f10:	464b      	mov	r3, r9
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d077      	beq.n	8001006 <__aeabi_fsub+0x35e>
 8000f16:	000a      	movs	r2, r1
 8000f18:	25ff      	movs	r5, #255	; 0xff
 8000f1a:	e798      	b.n	8000e4e <__aeabi_fsub+0x1a6>
 8000f1c:	2cff      	cmp	r4, #255	; 0xff
 8000f1e:	d000      	beq.n	8000f22 <__aeabi_fsub+0x27a>
 8000f20:	e743      	b.n	8000daa <__aeabi_fsub+0x102>
 8000f22:	e787      	b.n	8000e34 <__aeabi_fsub+0x18c>
 8000f24:	000a      	movs	r2, r1
 8000f26:	24ff      	movs	r4, #255	; 0xff
 8000f28:	2300      	movs	r3, #0
 8000f2a:	e716      	b.n	8000d5a <__aeabi_fsub+0xb2>
 8000f2c:	2c00      	cmp	r4, #0
 8000f2e:	d115      	bne.n	8000f5c <__aeabi_fsub+0x2b4>
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d157      	bne.n	8000fe4 <__aeabi_fsub+0x33c>
 8000f34:	28ff      	cmp	r0, #255	; 0xff
 8000f36:	d1e6      	bne.n	8000f06 <__aeabi_fsub+0x25e>
 8000f38:	464b      	mov	r3, r9
 8000f3a:	e77b      	b.n	8000e34 <__aeabi_fsub+0x18c>
 8000f3c:	2c00      	cmp	r4, #0
 8000f3e:	d120      	bne.n	8000f82 <__aeabi_fsub+0x2da>
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d057      	beq.n	8000ff4 <__aeabi_fsub+0x34c>
 8000f44:	4649      	mov	r1, r9
 8000f46:	2900      	cmp	r1, #0
 8000f48:	d053      	beq.n	8000ff2 <__aeabi_fsub+0x34a>
 8000f4a:	444b      	add	r3, r9
 8000f4c:	015a      	lsls	r2, r3, #5
 8000f4e:	d568      	bpl.n	8001022 <__aeabi_fsub+0x37a>
 8000f50:	2407      	movs	r4, #7
 8000f52:	4a36      	ldr	r2, [pc, #216]	; (800102c <__aeabi_fsub+0x384>)
 8000f54:	401c      	ands	r4, r3
 8000f56:	2501      	movs	r5, #1
 8000f58:	4013      	ands	r3, r2
 8000f5a:	e6ea      	b.n	8000d32 <__aeabi_fsub+0x8a>
 8000f5c:	28ff      	cmp	r0, #255	; 0xff
 8000f5e:	d0eb      	beq.n	8000f38 <__aeabi_fsub+0x290>
 8000f60:	2280      	movs	r2, #128	; 0x80
 8000f62:	04d2      	lsls	r2, r2, #19
 8000f64:	4276      	negs	r6, r6
 8000f66:	4313      	orrs	r3, r2
 8000f68:	2e1b      	cmp	r6, #27
 8000f6a:	dc53      	bgt.n	8001014 <__aeabi_fsub+0x36c>
 8000f6c:	2520      	movs	r5, #32
 8000f6e:	1bad      	subs	r5, r5, r6
 8000f70:	001a      	movs	r2, r3
 8000f72:	40ab      	lsls	r3, r5
 8000f74:	40f2      	lsrs	r2, r6
 8000f76:	1e5c      	subs	r4, r3, #1
 8000f78:	41a3      	sbcs	r3, r4
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	444b      	add	r3, r9
 8000f7e:	0005      	movs	r5, r0
 8000f80:	e721      	b.n	8000dc6 <__aeabi_fsub+0x11e>
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d0d8      	beq.n	8000f38 <__aeabi_fsub+0x290>
 8000f86:	4649      	mov	r1, r9
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_fsub+0x2e6>
 8000f8c:	e752      	b.n	8000e34 <__aeabi_fsub+0x18c>
 8000f8e:	2180      	movs	r1, #128	; 0x80
 8000f90:	03c9      	lsls	r1, r1, #15
 8000f92:	420f      	tst	r7, r1
 8000f94:	d100      	bne.n	8000f98 <__aeabi_fsub+0x2f0>
 8000f96:	e74d      	b.n	8000e34 <__aeabi_fsub+0x18c>
 8000f98:	4660      	mov	r0, ip
 8000f9a:	4208      	tst	r0, r1
 8000f9c:	d000      	beq.n	8000fa0 <__aeabi_fsub+0x2f8>
 8000f9e:	e749      	b.n	8000e34 <__aeabi_fsub+0x18c>
 8000fa0:	464b      	mov	r3, r9
 8000fa2:	e747      	b.n	8000e34 <__aeabi_fsub+0x18c>
 8000fa4:	4648      	mov	r0, r9
 8000fa6:	25ff      	movs	r5, #255	; 0xff
 8000fa8:	2800      	cmp	r0, #0
 8000faa:	d100      	bne.n	8000fae <__aeabi_fsub+0x306>
 8000fac:	e74f      	b.n	8000e4e <__aeabi_fsub+0x1a6>
 8000fae:	2280      	movs	r2, #128	; 0x80
 8000fb0:	03d2      	lsls	r2, r2, #15
 8000fb2:	4217      	tst	r7, r2
 8000fb4:	d004      	beq.n	8000fc0 <__aeabi_fsub+0x318>
 8000fb6:	4660      	mov	r0, ip
 8000fb8:	4210      	tst	r0, r2
 8000fba:	d101      	bne.n	8000fc0 <__aeabi_fsub+0x318>
 8000fbc:	464b      	mov	r3, r9
 8000fbe:	4688      	mov	r8, r1
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4641      	mov	r1, r8
 8000fc4:	25ff      	movs	r5, #255	; 0xff
 8000fc6:	400a      	ands	r2, r1
 8000fc8:	e741      	b.n	8000e4e <__aeabi_fsub+0x1a6>
 8000fca:	4648      	mov	r0, r9
 8000fcc:	2800      	cmp	r0, #0
 8000fce:	d01f      	beq.n	8001010 <__aeabi_fsub+0x368>
 8000fd0:	1a1a      	subs	r2, r3, r0
 8000fd2:	0150      	lsls	r0, r2, #5
 8000fd4:	d520      	bpl.n	8001018 <__aeabi_fsub+0x370>
 8000fd6:	464a      	mov	r2, r9
 8000fd8:	2407      	movs	r4, #7
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	401c      	ands	r4, r3
 8000fde:	4688      	mov	r8, r1
 8000fe0:	2500      	movs	r5, #0
 8000fe2:	e6a6      	b.n	8000d32 <__aeabi_fsub+0x8a>
 8000fe4:	1c74      	adds	r4, r6, #1
 8000fe6:	d0c9      	beq.n	8000f7c <__aeabi_fsub+0x2d4>
 8000fe8:	43f6      	mvns	r6, r6
 8000fea:	28ff      	cmp	r0, #255	; 0xff
 8000fec:	d1bc      	bne.n	8000f68 <__aeabi_fsub+0x2c0>
 8000fee:	464b      	mov	r3, r9
 8000ff0:	e720      	b.n	8000e34 <__aeabi_fsub+0x18c>
 8000ff2:	4699      	mov	r9, r3
 8000ff4:	464b      	mov	r3, r9
 8000ff6:	2500      	movs	r5, #0
 8000ff8:	08db      	lsrs	r3, r3, #3
 8000ffa:	e72b      	b.n	8000e54 <__aeabi_fsub+0x1ac>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e740      	b.n	8000e82 <__aeabi_fsub+0x1da>
 8001000:	2200      	movs	r2, #0
 8001002:	2300      	movs	r3, #0
 8001004:	e6a9      	b.n	8000d5a <__aeabi_fsub+0xb2>
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	2200      	movs	r2, #0
 800100a:	03db      	lsls	r3, r3, #15
 800100c:	24ff      	movs	r4, #255	; 0xff
 800100e:	e6a4      	b.n	8000d5a <__aeabi_fsub+0xb2>
 8001010:	2500      	movs	r5, #0
 8001012:	e71c      	b.n	8000e4e <__aeabi_fsub+0x1a6>
 8001014:	2301      	movs	r3, #1
 8001016:	e7b1      	b.n	8000f7c <__aeabi_fsub+0x2d4>
 8001018:	2a00      	cmp	r2, #0
 800101a:	d0f1      	beq.n	8001000 <__aeabi_fsub+0x358>
 800101c:	0013      	movs	r3, r2
 800101e:	2500      	movs	r5, #0
 8001020:	e6fc      	b.n	8000e1c <__aeabi_fsub+0x174>
 8001022:	2500      	movs	r5, #0
 8001024:	e6fa      	b.n	8000e1c <__aeabi_fsub+0x174>
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	7dffffff 	.word	0x7dffffff
 800102c:	fbffffff 	.word	0xfbffffff

08001030 <__aeabi_f2iz>:
 8001030:	0241      	lsls	r1, r0, #9
 8001032:	0042      	lsls	r2, r0, #1
 8001034:	0fc3      	lsrs	r3, r0, #31
 8001036:	0a49      	lsrs	r1, r1, #9
 8001038:	0e12      	lsrs	r2, r2, #24
 800103a:	2000      	movs	r0, #0
 800103c:	2a7e      	cmp	r2, #126	; 0x7e
 800103e:	d90d      	bls.n	800105c <__aeabi_f2iz+0x2c>
 8001040:	2a9d      	cmp	r2, #157	; 0x9d
 8001042:	d80c      	bhi.n	800105e <__aeabi_f2iz+0x2e>
 8001044:	2080      	movs	r0, #128	; 0x80
 8001046:	0400      	lsls	r0, r0, #16
 8001048:	4301      	orrs	r1, r0
 800104a:	2a95      	cmp	r2, #149	; 0x95
 800104c:	dc0a      	bgt.n	8001064 <__aeabi_f2iz+0x34>
 800104e:	2096      	movs	r0, #150	; 0x96
 8001050:	1a82      	subs	r2, r0, r2
 8001052:	40d1      	lsrs	r1, r2
 8001054:	4248      	negs	r0, r1
 8001056:	2b00      	cmp	r3, #0
 8001058:	d100      	bne.n	800105c <__aeabi_f2iz+0x2c>
 800105a:	0008      	movs	r0, r1
 800105c:	4770      	bx	lr
 800105e:	4a03      	ldr	r2, [pc, #12]	; (800106c <__aeabi_f2iz+0x3c>)
 8001060:	1898      	adds	r0, r3, r2
 8001062:	e7fb      	b.n	800105c <__aeabi_f2iz+0x2c>
 8001064:	3a96      	subs	r2, #150	; 0x96
 8001066:	4091      	lsls	r1, r2
 8001068:	e7f4      	b.n	8001054 <__aeabi_f2iz+0x24>
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	7fffffff 	.word	0x7fffffff

08001070 <__aeabi_i2f>:
 8001070:	b570      	push	{r4, r5, r6, lr}
 8001072:	2800      	cmp	r0, #0
 8001074:	d03d      	beq.n	80010f2 <__aeabi_i2f+0x82>
 8001076:	17c3      	asrs	r3, r0, #31
 8001078:	18c5      	adds	r5, r0, r3
 800107a:	405d      	eors	r5, r3
 800107c:	0fc4      	lsrs	r4, r0, #31
 800107e:	0028      	movs	r0, r5
 8001080:	f001 fba4 	bl	80027cc <__clzsi2>
 8001084:	229e      	movs	r2, #158	; 0x9e
 8001086:	1a12      	subs	r2, r2, r0
 8001088:	2a96      	cmp	r2, #150	; 0x96
 800108a:	dc07      	bgt.n	800109c <__aeabi_i2f+0x2c>
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	2808      	cmp	r0, #8
 8001090:	dd33      	ble.n	80010fa <__aeabi_i2f+0x8a>
 8001092:	3808      	subs	r0, #8
 8001094:	4085      	lsls	r5, r0
 8001096:	0268      	lsls	r0, r5, #9
 8001098:	0a40      	lsrs	r0, r0, #9
 800109a:	e023      	b.n	80010e4 <__aeabi_i2f+0x74>
 800109c:	2a99      	cmp	r2, #153	; 0x99
 800109e:	dd0b      	ble.n	80010b8 <__aeabi_i2f+0x48>
 80010a0:	2305      	movs	r3, #5
 80010a2:	0029      	movs	r1, r5
 80010a4:	1a1b      	subs	r3, r3, r0
 80010a6:	40d9      	lsrs	r1, r3
 80010a8:	0003      	movs	r3, r0
 80010aa:	331b      	adds	r3, #27
 80010ac:	409d      	lsls	r5, r3
 80010ae:	002b      	movs	r3, r5
 80010b0:	1e5d      	subs	r5, r3, #1
 80010b2:	41ab      	sbcs	r3, r5
 80010b4:	4319      	orrs	r1, r3
 80010b6:	000d      	movs	r5, r1
 80010b8:	2805      	cmp	r0, #5
 80010ba:	dd01      	ble.n	80010c0 <__aeabi_i2f+0x50>
 80010bc:	1f43      	subs	r3, r0, #5
 80010be:	409d      	lsls	r5, r3
 80010c0:	002b      	movs	r3, r5
 80010c2:	490f      	ldr	r1, [pc, #60]	; (8001100 <__aeabi_i2f+0x90>)
 80010c4:	400b      	ands	r3, r1
 80010c6:	076e      	lsls	r6, r5, #29
 80010c8:	d009      	beq.n	80010de <__aeabi_i2f+0x6e>
 80010ca:	260f      	movs	r6, #15
 80010cc:	4035      	ands	r5, r6
 80010ce:	2d04      	cmp	r5, #4
 80010d0:	d005      	beq.n	80010de <__aeabi_i2f+0x6e>
 80010d2:	3304      	adds	r3, #4
 80010d4:	015d      	lsls	r5, r3, #5
 80010d6:	d502      	bpl.n	80010de <__aeabi_i2f+0x6e>
 80010d8:	229f      	movs	r2, #159	; 0x9f
 80010da:	400b      	ands	r3, r1
 80010dc:	1a12      	subs	r2, r2, r0
 80010de:	019b      	lsls	r3, r3, #6
 80010e0:	0a58      	lsrs	r0, r3, #9
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	0240      	lsls	r0, r0, #9
 80010e6:	05d2      	lsls	r2, r2, #23
 80010e8:	0a40      	lsrs	r0, r0, #9
 80010ea:	07e4      	lsls	r4, r4, #31
 80010ec:	4310      	orrs	r0, r2
 80010ee:	4320      	orrs	r0, r4
 80010f0:	bd70      	pop	{r4, r5, r6, pc}
 80010f2:	2400      	movs	r4, #0
 80010f4:	2200      	movs	r2, #0
 80010f6:	2000      	movs	r0, #0
 80010f8:	e7f4      	b.n	80010e4 <__aeabi_i2f+0x74>
 80010fa:	0268      	lsls	r0, r5, #9
 80010fc:	0a40      	lsrs	r0, r0, #9
 80010fe:	e7f1      	b.n	80010e4 <__aeabi_i2f+0x74>
 8001100:	fbffffff 	.word	0xfbffffff

08001104 <__aeabi_ui2f>:
 8001104:	b570      	push	{r4, r5, r6, lr}
 8001106:	1e04      	subs	r4, r0, #0
 8001108:	d034      	beq.n	8001174 <__aeabi_ui2f+0x70>
 800110a:	f001 fb5f 	bl	80027cc <__clzsi2>
 800110e:	229e      	movs	r2, #158	; 0x9e
 8001110:	1a12      	subs	r2, r2, r0
 8001112:	2a96      	cmp	r2, #150	; 0x96
 8001114:	dc07      	bgt.n	8001126 <__aeabi_ui2f+0x22>
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	2808      	cmp	r0, #8
 800111a:	dd2e      	ble.n	800117a <__aeabi_ui2f+0x76>
 800111c:	3808      	subs	r0, #8
 800111e:	4084      	lsls	r4, r0
 8001120:	0260      	lsls	r0, r4, #9
 8001122:	0a40      	lsrs	r0, r0, #9
 8001124:	e021      	b.n	800116a <__aeabi_ui2f+0x66>
 8001126:	2a99      	cmp	r2, #153	; 0x99
 8001128:	dd09      	ble.n	800113e <__aeabi_ui2f+0x3a>
 800112a:	0003      	movs	r3, r0
 800112c:	0021      	movs	r1, r4
 800112e:	331b      	adds	r3, #27
 8001130:	4099      	lsls	r1, r3
 8001132:	1e4b      	subs	r3, r1, #1
 8001134:	4199      	sbcs	r1, r3
 8001136:	2305      	movs	r3, #5
 8001138:	1a1b      	subs	r3, r3, r0
 800113a:	40dc      	lsrs	r4, r3
 800113c:	430c      	orrs	r4, r1
 800113e:	2805      	cmp	r0, #5
 8001140:	dd01      	ble.n	8001146 <__aeabi_ui2f+0x42>
 8001142:	1f43      	subs	r3, r0, #5
 8001144:	409c      	lsls	r4, r3
 8001146:	0023      	movs	r3, r4
 8001148:	490d      	ldr	r1, [pc, #52]	; (8001180 <__aeabi_ui2f+0x7c>)
 800114a:	400b      	ands	r3, r1
 800114c:	0765      	lsls	r5, r4, #29
 800114e:	d009      	beq.n	8001164 <__aeabi_ui2f+0x60>
 8001150:	250f      	movs	r5, #15
 8001152:	402c      	ands	r4, r5
 8001154:	2c04      	cmp	r4, #4
 8001156:	d005      	beq.n	8001164 <__aeabi_ui2f+0x60>
 8001158:	3304      	adds	r3, #4
 800115a:	015c      	lsls	r4, r3, #5
 800115c:	d502      	bpl.n	8001164 <__aeabi_ui2f+0x60>
 800115e:	229f      	movs	r2, #159	; 0x9f
 8001160:	400b      	ands	r3, r1
 8001162:	1a12      	subs	r2, r2, r0
 8001164:	019b      	lsls	r3, r3, #6
 8001166:	0a58      	lsrs	r0, r3, #9
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	0240      	lsls	r0, r0, #9
 800116c:	05d2      	lsls	r2, r2, #23
 800116e:	0a40      	lsrs	r0, r0, #9
 8001170:	4310      	orrs	r0, r2
 8001172:	bd70      	pop	{r4, r5, r6, pc}
 8001174:	2200      	movs	r2, #0
 8001176:	2000      	movs	r0, #0
 8001178:	e7f7      	b.n	800116a <__aeabi_ui2f+0x66>
 800117a:	0260      	lsls	r0, r4, #9
 800117c:	0a40      	lsrs	r0, r0, #9
 800117e:	e7f4      	b.n	800116a <__aeabi_ui2f+0x66>
 8001180:	fbffffff 	.word	0xfbffffff

08001184 <__aeabi_dadd>:
 8001184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001186:	464f      	mov	r7, r9
 8001188:	4646      	mov	r6, r8
 800118a:	46d6      	mov	lr, sl
 800118c:	000c      	movs	r4, r1
 800118e:	0309      	lsls	r1, r1, #12
 8001190:	b5c0      	push	{r6, r7, lr}
 8001192:	0a49      	lsrs	r1, r1, #9
 8001194:	0f47      	lsrs	r7, r0, #29
 8001196:	005e      	lsls	r6, r3, #1
 8001198:	4339      	orrs	r1, r7
 800119a:	031f      	lsls	r7, r3, #12
 800119c:	0fdb      	lsrs	r3, r3, #31
 800119e:	469c      	mov	ip, r3
 80011a0:	0065      	lsls	r5, r4, #1
 80011a2:	0a7b      	lsrs	r3, r7, #9
 80011a4:	0f57      	lsrs	r7, r2, #29
 80011a6:	431f      	orrs	r7, r3
 80011a8:	0d6d      	lsrs	r5, r5, #21
 80011aa:	0fe4      	lsrs	r4, r4, #31
 80011ac:	0d76      	lsrs	r6, r6, #21
 80011ae:	46a1      	mov	r9, r4
 80011b0:	00c0      	lsls	r0, r0, #3
 80011b2:	46b8      	mov	r8, r7
 80011b4:	00d2      	lsls	r2, r2, #3
 80011b6:	1bab      	subs	r3, r5, r6
 80011b8:	4564      	cmp	r4, ip
 80011ba:	d07b      	beq.n	80012b4 <__aeabi_dadd+0x130>
 80011bc:	2b00      	cmp	r3, #0
 80011be:	dd5f      	ble.n	8001280 <__aeabi_dadd+0xfc>
 80011c0:	2e00      	cmp	r6, #0
 80011c2:	d000      	beq.n	80011c6 <__aeabi_dadd+0x42>
 80011c4:	e0a4      	b.n	8001310 <__aeabi_dadd+0x18c>
 80011c6:	003e      	movs	r6, r7
 80011c8:	4316      	orrs	r6, r2
 80011ca:	d100      	bne.n	80011ce <__aeabi_dadd+0x4a>
 80011cc:	e112      	b.n	80013f4 <__aeabi_dadd+0x270>
 80011ce:	1e5e      	subs	r6, r3, #1
 80011d0:	2e00      	cmp	r6, #0
 80011d2:	d000      	beq.n	80011d6 <__aeabi_dadd+0x52>
 80011d4:	e19e      	b.n	8001514 <__aeabi_dadd+0x390>
 80011d6:	1a87      	subs	r7, r0, r2
 80011d8:	4643      	mov	r3, r8
 80011da:	42b8      	cmp	r0, r7
 80011dc:	4180      	sbcs	r0, r0
 80011de:	2501      	movs	r5, #1
 80011e0:	1ac9      	subs	r1, r1, r3
 80011e2:	4240      	negs	r0, r0
 80011e4:	1a09      	subs	r1, r1, r0
 80011e6:	020b      	lsls	r3, r1, #8
 80011e8:	d400      	bmi.n	80011ec <__aeabi_dadd+0x68>
 80011ea:	e131      	b.n	8001450 <__aeabi_dadd+0x2cc>
 80011ec:	0249      	lsls	r1, r1, #9
 80011ee:	0a4e      	lsrs	r6, r1, #9
 80011f0:	2e00      	cmp	r6, #0
 80011f2:	d100      	bne.n	80011f6 <__aeabi_dadd+0x72>
 80011f4:	e16e      	b.n	80014d4 <__aeabi_dadd+0x350>
 80011f6:	0030      	movs	r0, r6
 80011f8:	f001 fae8 	bl	80027cc <__clzsi2>
 80011fc:	0003      	movs	r3, r0
 80011fe:	3b08      	subs	r3, #8
 8001200:	2b1f      	cmp	r3, #31
 8001202:	dd00      	ble.n	8001206 <__aeabi_dadd+0x82>
 8001204:	e161      	b.n	80014ca <__aeabi_dadd+0x346>
 8001206:	2220      	movs	r2, #32
 8001208:	0039      	movs	r1, r7
 800120a:	1ad2      	subs	r2, r2, r3
 800120c:	409e      	lsls	r6, r3
 800120e:	40d1      	lsrs	r1, r2
 8001210:	409f      	lsls	r7, r3
 8001212:	430e      	orrs	r6, r1
 8001214:	429d      	cmp	r5, r3
 8001216:	dd00      	ble.n	800121a <__aeabi_dadd+0x96>
 8001218:	e151      	b.n	80014be <__aeabi_dadd+0x33a>
 800121a:	1b5d      	subs	r5, r3, r5
 800121c:	1c6b      	adds	r3, r5, #1
 800121e:	2b1f      	cmp	r3, #31
 8001220:	dd00      	ble.n	8001224 <__aeabi_dadd+0xa0>
 8001222:	e17c      	b.n	800151e <__aeabi_dadd+0x39a>
 8001224:	2120      	movs	r1, #32
 8001226:	1ac9      	subs	r1, r1, r3
 8001228:	003d      	movs	r5, r7
 800122a:	0030      	movs	r0, r6
 800122c:	408f      	lsls	r7, r1
 800122e:	4088      	lsls	r0, r1
 8001230:	40dd      	lsrs	r5, r3
 8001232:	1e79      	subs	r1, r7, #1
 8001234:	418f      	sbcs	r7, r1
 8001236:	0031      	movs	r1, r6
 8001238:	2207      	movs	r2, #7
 800123a:	4328      	orrs	r0, r5
 800123c:	40d9      	lsrs	r1, r3
 800123e:	2500      	movs	r5, #0
 8001240:	4307      	orrs	r7, r0
 8001242:	403a      	ands	r2, r7
 8001244:	2a00      	cmp	r2, #0
 8001246:	d009      	beq.n	800125c <__aeabi_dadd+0xd8>
 8001248:	230f      	movs	r3, #15
 800124a:	403b      	ands	r3, r7
 800124c:	2b04      	cmp	r3, #4
 800124e:	d005      	beq.n	800125c <__aeabi_dadd+0xd8>
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	42bb      	cmp	r3, r7
 8001254:	41bf      	sbcs	r7, r7
 8001256:	427f      	negs	r7, r7
 8001258:	19c9      	adds	r1, r1, r7
 800125a:	001f      	movs	r7, r3
 800125c:	020b      	lsls	r3, r1, #8
 800125e:	d400      	bmi.n	8001262 <__aeabi_dadd+0xde>
 8001260:	e226      	b.n	80016b0 <__aeabi_dadd+0x52c>
 8001262:	1c6a      	adds	r2, r5, #1
 8001264:	4bc6      	ldr	r3, [pc, #792]	; (8001580 <__aeabi_dadd+0x3fc>)
 8001266:	0555      	lsls	r5, r2, #21
 8001268:	0d6d      	lsrs	r5, r5, #21
 800126a:	429a      	cmp	r2, r3
 800126c:	d100      	bne.n	8001270 <__aeabi_dadd+0xec>
 800126e:	e106      	b.n	800147e <__aeabi_dadd+0x2fa>
 8001270:	4ac4      	ldr	r2, [pc, #784]	; (8001584 <__aeabi_dadd+0x400>)
 8001272:	08ff      	lsrs	r7, r7, #3
 8001274:	400a      	ands	r2, r1
 8001276:	0753      	lsls	r3, r2, #29
 8001278:	0252      	lsls	r2, r2, #9
 800127a:	433b      	orrs	r3, r7
 800127c:	0b12      	lsrs	r2, r2, #12
 800127e:	e08e      	b.n	800139e <__aeabi_dadd+0x21a>
 8001280:	2b00      	cmp	r3, #0
 8001282:	d000      	beq.n	8001286 <__aeabi_dadd+0x102>
 8001284:	e0b8      	b.n	80013f8 <__aeabi_dadd+0x274>
 8001286:	1c6b      	adds	r3, r5, #1
 8001288:	055b      	lsls	r3, r3, #21
 800128a:	0d5b      	lsrs	r3, r3, #21
 800128c:	2b01      	cmp	r3, #1
 800128e:	dc00      	bgt.n	8001292 <__aeabi_dadd+0x10e>
 8001290:	e130      	b.n	80014f4 <__aeabi_dadd+0x370>
 8001292:	1a87      	subs	r7, r0, r2
 8001294:	4643      	mov	r3, r8
 8001296:	42b8      	cmp	r0, r7
 8001298:	41b6      	sbcs	r6, r6
 800129a:	1acb      	subs	r3, r1, r3
 800129c:	4276      	negs	r6, r6
 800129e:	1b9e      	subs	r6, r3, r6
 80012a0:	0233      	lsls	r3, r6, #8
 80012a2:	d500      	bpl.n	80012a6 <__aeabi_dadd+0x122>
 80012a4:	e14c      	b.n	8001540 <__aeabi_dadd+0x3bc>
 80012a6:	003b      	movs	r3, r7
 80012a8:	4333      	orrs	r3, r6
 80012aa:	d1a1      	bne.n	80011f0 <__aeabi_dadd+0x6c>
 80012ac:	2200      	movs	r2, #0
 80012ae:	2400      	movs	r4, #0
 80012b0:	2500      	movs	r5, #0
 80012b2:	e070      	b.n	8001396 <__aeabi_dadd+0x212>
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	dc00      	bgt.n	80012ba <__aeabi_dadd+0x136>
 80012b8:	e0e5      	b.n	8001486 <__aeabi_dadd+0x302>
 80012ba:	2e00      	cmp	r6, #0
 80012bc:	d100      	bne.n	80012c0 <__aeabi_dadd+0x13c>
 80012be:	e083      	b.n	80013c8 <__aeabi_dadd+0x244>
 80012c0:	4eaf      	ldr	r6, [pc, #700]	; (8001580 <__aeabi_dadd+0x3fc>)
 80012c2:	42b5      	cmp	r5, r6
 80012c4:	d060      	beq.n	8001388 <__aeabi_dadd+0x204>
 80012c6:	2680      	movs	r6, #128	; 0x80
 80012c8:	0436      	lsls	r6, r6, #16
 80012ca:	4337      	orrs	r7, r6
 80012cc:	46b8      	mov	r8, r7
 80012ce:	2b38      	cmp	r3, #56	; 0x38
 80012d0:	dc00      	bgt.n	80012d4 <__aeabi_dadd+0x150>
 80012d2:	e13e      	b.n	8001552 <__aeabi_dadd+0x3ce>
 80012d4:	4643      	mov	r3, r8
 80012d6:	4313      	orrs	r3, r2
 80012d8:	001f      	movs	r7, r3
 80012da:	1e7a      	subs	r2, r7, #1
 80012dc:	4197      	sbcs	r7, r2
 80012de:	183f      	adds	r7, r7, r0
 80012e0:	4287      	cmp	r7, r0
 80012e2:	4180      	sbcs	r0, r0
 80012e4:	4240      	negs	r0, r0
 80012e6:	1809      	adds	r1, r1, r0
 80012e8:	020b      	lsls	r3, r1, #8
 80012ea:	d400      	bmi.n	80012ee <__aeabi_dadd+0x16a>
 80012ec:	e0b0      	b.n	8001450 <__aeabi_dadd+0x2cc>
 80012ee:	4ba4      	ldr	r3, [pc, #656]	; (8001580 <__aeabi_dadd+0x3fc>)
 80012f0:	3501      	adds	r5, #1
 80012f2:	429d      	cmp	r5, r3
 80012f4:	d100      	bne.n	80012f8 <__aeabi_dadd+0x174>
 80012f6:	e0c3      	b.n	8001480 <__aeabi_dadd+0x2fc>
 80012f8:	4aa2      	ldr	r2, [pc, #648]	; (8001584 <__aeabi_dadd+0x400>)
 80012fa:	087b      	lsrs	r3, r7, #1
 80012fc:	400a      	ands	r2, r1
 80012fe:	2101      	movs	r1, #1
 8001300:	400f      	ands	r7, r1
 8001302:	431f      	orrs	r7, r3
 8001304:	0851      	lsrs	r1, r2, #1
 8001306:	07d3      	lsls	r3, r2, #31
 8001308:	2207      	movs	r2, #7
 800130a:	431f      	orrs	r7, r3
 800130c:	403a      	ands	r2, r7
 800130e:	e799      	b.n	8001244 <__aeabi_dadd+0xc0>
 8001310:	4e9b      	ldr	r6, [pc, #620]	; (8001580 <__aeabi_dadd+0x3fc>)
 8001312:	42b5      	cmp	r5, r6
 8001314:	d038      	beq.n	8001388 <__aeabi_dadd+0x204>
 8001316:	2680      	movs	r6, #128	; 0x80
 8001318:	0436      	lsls	r6, r6, #16
 800131a:	4337      	orrs	r7, r6
 800131c:	46b8      	mov	r8, r7
 800131e:	2b38      	cmp	r3, #56	; 0x38
 8001320:	dd00      	ble.n	8001324 <__aeabi_dadd+0x1a0>
 8001322:	e0dc      	b.n	80014de <__aeabi_dadd+0x35a>
 8001324:	2b1f      	cmp	r3, #31
 8001326:	dc00      	bgt.n	800132a <__aeabi_dadd+0x1a6>
 8001328:	e130      	b.n	800158c <__aeabi_dadd+0x408>
 800132a:	001e      	movs	r6, r3
 800132c:	4647      	mov	r7, r8
 800132e:	3e20      	subs	r6, #32
 8001330:	40f7      	lsrs	r7, r6
 8001332:	46bc      	mov	ip, r7
 8001334:	2b20      	cmp	r3, #32
 8001336:	d004      	beq.n	8001342 <__aeabi_dadd+0x1be>
 8001338:	2640      	movs	r6, #64	; 0x40
 800133a:	1af3      	subs	r3, r6, r3
 800133c:	4646      	mov	r6, r8
 800133e:	409e      	lsls	r6, r3
 8001340:	4332      	orrs	r2, r6
 8001342:	0017      	movs	r7, r2
 8001344:	4663      	mov	r3, ip
 8001346:	1e7a      	subs	r2, r7, #1
 8001348:	4197      	sbcs	r7, r2
 800134a:	431f      	orrs	r7, r3
 800134c:	e0cc      	b.n	80014e8 <__aeabi_dadd+0x364>
 800134e:	2b00      	cmp	r3, #0
 8001350:	d100      	bne.n	8001354 <__aeabi_dadd+0x1d0>
 8001352:	e204      	b.n	800175e <__aeabi_dadd+0x5da>
 8001354:	4643      	mov	r3, r8
 8001356:	4313      	orrs	r3, r2
 8001358:	d100      	bne.n	800135c <__aeabi_dadd+0x1d8>
 800135a:	e159      	b.n	8001610 <__aeabi_dadd+0x48c>
 800135c:	074b      	lsls	r3, r1, #29
 800135e:	08c0      	lsrs	r0, r0, #3
 8001360:	4318      	orrs	r0, r3
 8001362:	2380      	movs	r3, #128	; 0x80
 8001364:	08c9      	lsrs	r1, r1, #3
 8001366:	031b      	lsls	r3, r3, #12
 8001368:	4219      	tst	r1, r3
 800136a:	d008      	beq.n	800137e <__aeabi_dadd+0x1fa>
 800136c:	4645      	mov	r5, r8
 800136e:	08ed      	lsrs	r5, r5, #3
 8001370:	421d      	tst	r5, r3
 8001372:	d104      	bne.n	800137e <__aeabi_dadd+0x1fa>
 8001374:	4643      	mov	r3, r8
 8001376:	08d0      	lsrs	r0, r2, #3
 8001378:	0759      	lsls	r1, r3, #29
 800137a:	4308      	orrs	r0, r1
 800137c:	0029      	movs	r1, r5
 800137e:	0f42      	lsrs	r2, r0, #29
 8001380:	00c9      	lsls	r1, r1, #3
 8001382:	4d7f      	ldr	r5, [pc, #508]	; (8001580 <__aeabi_dadd+0x3fc>)
 8001384:	4311      	orrs	r1, r2
 8001386:	00c0      	lsls	r0, r0, #3
 8001388:	074b      	lsls	r3, r1, #29
 800138a:	08ca      	lsrs	r2, r1, #3
 800138c:	497c      	ldr	r1, [pc, #496]	; (8001580 <__aeabi_dadd+0x3fc>)
 800138e:	08c0      	lsrs	r0, r0, #3
 8001390:	4303      	orrs	r3, r0
 8001392:	428d      	cmp	r5, r1
 8001394:	d068      	beq.n	8001468 <__aeabi_dadd+0x2e4>
 8001396:	0312      	lsls	r2, r2, #12
 8001398:	056d      	lsls	r5, r5, #21
 800139a:	0b12      	lsrs	r2, r2, #12
 800139c:	0d6d      	lsrs	r5, r5, #21
 800139e:	2100      	movs	r1, #0
 80013a0:	0312      	lsls	r2, r2, #12
 80013a2:	0018      	movs	r0, r3
 80013a4:	0b13      	lsrs	r3, r2, #12
 80013a6:	0d0a      	lsrs	r2, r1, #20
 80013a8:	0512      	lsls	r2, r2, #20
 80013aa:	431a      	orrs	r2, r3
 80013ac:	4b76      	ldr	r3, [pc, #472]	; (8001588 <__aeabi_dadd+0x404>)
 80013ae:	052d      	lsls	r5, r5, #20
 80013b0:	4013      	ands	r3, r2
 80013b2:	432b      	orrs	r3, r5
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	07e4      	lsls	r4, r4, #31
 80013b8:	085b      	lsrs	r3, r3, #1
 80013ba:	4323      	orrs	r3, r4
 80013bc:	0019      	movs	r1, r3
 80013be:	bc1c      	pop	{r2, r3, r4}
 80013c0:	4690      	mov	r8, r2
 80013c2:	4699      	mov	r9, r3
 80013c4:	46a2      	mov	sl, r4
 80013c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c8:	003e      	movs	r6, r7
 80013ca:	4316      	orrs	r6, r2
 80013cc:	d012      	beq.n	80013f4 <__aeabi_dadd+0x270>
 80013ce:	1e5e      	subs	r6, r3, #1
 80013d0:	2e00      	cmp	r6, #0
 80013d2:	d000      	beq.n	80013d6 <__aeabi_dadd+0x252>
 80013d4:	e100      	b.n	80015d8 <__aeabi_dadd+0x454>
 80013d6:	1887      	adds	r7, r0, r2
 80013d8:	4287      	cmp	r7, r0
 80013da:	4180      	sbcs	r0, r0
 80013dc:	4441      	add	r1, r8
 80013de:	4240      	negs	r0, r0
 80013e0:	1809      	adds	r1, r1, r0
 80013e2:	2501      	movs	r5, #1
 80013e4:	020b      	lsls	r3, r1, #8
 80013e6:	d533      	bpl.n	8001450 <__aeabi_dadd+0x2cc>
 80013e8:	2502      	movs	r5, #2
 80013ea:	e785      	b.n	80012f8 <__aeabi_dadd+0x174>
 80013ec:	4664      	mov	r4, ip
 80013ee:	0033      	movs	r3, r6
 80013f0:	4641      	mov	r1, r8
 80013f2:	0010      	movs	r0, r2
 80013f4:	001d      	movs	r5, r3
 80013f6:	e7c7      	b.n	8001388 <__aeabi_dadd+0x204>
 80013f8:	2d00      	cmp	r5, #0
 80013fa:	d000      	beq.n	80013fe <__aeabi_dadd+0x27a>
 80013fc:	e0da      	b.n	80015b4 <__aeabi_dadd+0x430>
 80013fe:	000c      	movs	r4, r1
 8001400:	4304      	orrs	r4, r0
 8001402:	d0f3      	beq.n	80013ec <__aeabi_dadd+0x268>
 8001404:	1c5c      	adds	r4, r3, #1
 8001406:	d100      	bne.n	800140a <__aeabi_dadd+0x286>
 8001408:	e19f      	b.n	800174a <__aeabi_dadd+0x5c6>
 800140a:	4c5d      	ldr	r4, [pc, #372]	; (8001580 <__aeabi_dadd+0x3fc>)
 800140c:	42a6      	cmp	r6, r4
 800140e:	d100      	bne.n	8001412 <__aeabi_dadd+0x28e>
 8001410:	e12f      	b.n	8001672 <__aeabi_dadd+0x4ee>
 8001412:	43db      	mvns	r3, r3
 8001414:	2b38      	cmp	r3, #56	; 0x38
 8001416:	dd00      	ble.n	800141a <__aeabi_dadd+0x296>
 8001418:	e166      	b.n	80016e8 <__aeabi_dadd+0x564>
 800141a:	2b1f      	cmp	r3, #31
 800141c:	dd00      	ble.n	8001420 <__aeabi_dadd+0x29c>
 800141e:	e183      	b.n	8001728 <__aeabi_dadd+0x5a4>
 8001420:	2420      	movs	r4, #32
 8001422:	0005      	movs	r5, r0
 8001424:	1ae4      	subs	r4, r4, r3
 8001426:	000f      	movs	r7, r1
 8001428:	40dd      	lsrs	r5, r3
 800142a:	40d9      	lsrs	r1, r3
 800142c:	40a0      	lsls	r0, r4
 800142e:	4643      	mov	r3, r8
 8001430:	40a7      	lsls	r7, r4
 8001432:	1a5b      	subs	r3, r3, r1
 8001434:	1e44      	subs	r4, r0, #1
 8001436:	41a0      	sbcs	r0, r4
 8001438:	4698      	mov	r8, r3
 800143a:	432f      	orrs	r7, r5
 800143c:	4338      	orrs	r0, r7
 800143e:	1a17      	subs	r7, r2, r0
 8001440:	42ba      	cmp	r2, r7
 8001442:	4192      	sbcs	r2, r2
 8001444:	4643      	mov	r3, r8
 8001446:	4252      	negs	r2, r2
 8001448:	1a99      	subs	r1, r3, r2
 800144a:	4664      	mov	r4, ip
 800144c:	0035      	movs	r5, r6
 800144e:	e6ca      	b.n	80011e6 <__aeabi_dadd+0x62>
 8001450:	2207      	movs	r2, #7
 8001452:	403a      	ands	r2, r7
 8001454:	2a00      	cmp	r2, #0
 8001456:	d000      	beq.n	800145a <__aeabi_dadd+0x2d6>
 8001458:	e6f6      	b.n	8001248 <__aeabi_dadd+0xc4>
 800145a:	074b      	lsls	r3, r1, #29
 800145c:	08ca      	lsrs	r2, r1, #3
 800145e:	4948      	ldr	r1, [pc, #288]	; (8001580 <__aeabi_dadd+0x3fc>)
 8001460:	08ff      	lsrs	r7, r7, #3
 8001462:	433b      	orrs	r3, r7
 8001464:	428d      	cmp	r5, r1
 8001466:	d196      	bne.n	8001396 <__aeabi_dadd+0x212>
 8001468:	0019      	movs	r1, r3
 800146a:	4311      	orrs	r1, r2
 800146c:	d100      	bne.n	8001470 <__aeabi_dadd+0x2ec>
 800146e:	e19e      	b.n	80017ae <__aeabi_dadd+0x62a>
 8001470:	2180      	movs	r1, #128	; 0x80
 8001472:	0309      	lsls	r1, r1, #12
 8001474:	430a      	orrs	r2, r1
 8001476:	0312      	lsls	r2, r2, #12
 8001478:	0b12      	lsrs	r2, r2, #12
 800147a:	4d41      	ldr	r5, [pc, #260]	; (8001580 <__aeabi_dadd+0x3fc>)
 800147c:	e78f      	b.n	800139e <__aeabi_dadd+0x21a>
 800147e:	0015      	movs	r5, r2
 8001480:	2200      	movs	r2, #0
 8001482:	2300      	movs	r3, #0
 8001484:	e78b      	b.n	800139e <__aeabi_dadd+0x21a>
 8001486:	2b00      	cmp	r3, #0
 8001488:	d000      	beq.n	800148c <__aeabi_dadd+0x308>
 800148a:	e0c7      	b.n	800161c <__aeabi_dadd+0x498>
 800148c:	1c6b      	adds	r3, r5, #1
 800148e:	055f      	lsls	r7, r3, #21
 8001490:	0d7f      	lsrs	r7, r7, #21
 8001492:	2f01      	cmp	r7, #1
 8001494:	dc00      	bgt.n	8001498 <__aeabi_dadd+0x314>
 8001496:	e0f1      	b.n	800167c <__aeabi_dadd+0x4f8>
 8001498:	4d39      	ldr	r5, [pc, #228]	; (8001580 <__aeabi_dadd+0x3fc>)
 800149a:	42ab      	cmp	r3, r5
 800149c:	d100      	bne.n	80014a0 <__aeabi_dadd+0x31c>
 800149e:	e0b9      	b.n	8001614 <__aeabi_dadd+0x490>
 80014a0:	1885      	adds	r5, r0, r2
 80014a2:	000a      	movs	r2, r1
 80014a4:	4285      	cmp	r5, r0
 80014a6:	4189      	sbcs	r1, r1
 80014a8:	4442      	add	r2, r8
 80014aa:	4249      	negs	r1, r1
 80014ac:	1851      	adds	r1, r2, r1
 80014ae:	2207      	movs	r2, #7
 80014b0:	07cf      	lsls	r7, r1, #31
 80014b2:	086d      	lsrs	r5, r5, #1
 80014b4:	432f      	orrs	r7, r5
 80014b6:	0849      	lsrs	r1, r1, #1
 80014b8:	403a      	ands	r2, r7
 80014ba:	001d      	movs	r5, r3
 80014bc:	e6c2      	b.n	8001244 <__aeabi_dadd+0xc0>
 80014be:	2207      	movs	r2, #7
 80014c0:	4930      	ldr	r1, [pc, #192]	; (8001584 <__aeabi_dadd+0x400>)
 80014c2:	1aed      	subs	r5, r5, r3
 80014c4:	4031      	ands	r1, r6
 80014c6:	403a      	ands	r2, r7
 80014c8:	e6bc      	b.n	8001244 <__aeabi_dadd+0xc0>
 80014ca:	003e      	movs	r6, r7
 80014cc:	3828      	subs	r0, #40	; 0x28
 80014ce:	4086      	lsls	r6, r0
 80014d0:	2700      	movs	r7, #0
 80014d2:	e69f      	b.n	8001214 <__aeabi_dadd+0x90>
 80014d4:	0038      	movs	r0, r7
 80014d6:	f001 f979 	bl	80027cc <__clzsi2>
 80014da:	3020      	adds	r0, #32
 80014dc:	e68e      	b.n	80011fc <__aeabi_dadd+0x78>
 80014de:	4643      	mov	r3, r8
 80014e0:	4313      	orrs	r3, r2
 80014e2:	001f      	movs	r7, r3
 80014e4:	1e7a      	subs	r2, r7, #1
 80014e6:	4197      	sbcs	r7, r2
 80014e8:	1bc7      	subs	r7, r0, r7
 80014ea:	42b8      	cmp	r0, r7
 80014ec:	4180      	sbcs	r0, r0
 80014ee:	4240      	negs	r0, r0
 80014f0:	1a09      	subs	r1, r1, r0
 80014f2:	e678      	b.n	80011e6 <__aeabi_dadd+0x62>
 80014f4:	000e      	movs	r6, r1
 80014f6:	003b      	movs	r3, r7
 80014f8:	4306      	orrs	r6, r0
 80014fa:	4313      	orrs	r3, r2
 80014fc:	2d00      	cmp	r5, #0
 80014fe:	d161      	bne.n	80015c4 <__aeabi_dadd+0x440>
 8001500:	2e00      	cmp	r6, #0
 8001502:	d000      	beq.n	8001506 <__aeabi_dadd+0x382>
 8001504:	e0f4      	b.n	80016f0 <__aeabi_dadd+0x56c>
 8001506:	2b00      	cmp	r3, #0
 8001508:	d100      	bne.n	800150c <__aeabi_dadd+0x388>
 800150a:	e11b      	b.n	8001744 <__aeabi_dadd+0x5c0>
 800150c:	4664      	mov	r4, ip
 800150e:	0039      	movs	r1, r7
 8001510:	0010      	movs	r0, r2
 8001512:	e739      	b.n	8001388 <__aeabi_dadd+0x204>
 8001514:	4f1a      	ldr	r7, [pc, #104]	; (8001580 <__aeabi_dadd+0x3fc>)
 8001516:	42bb      	cmp	r3, r7
 8001518:	d07a      	beq.n	8001610 <__aeabi_dadd+0x48c>
 800151a:	0033      	movs	r3, r6
 800151c:	e6ff      	b.n	800131e <__aeabi_dadd+0x19a>
 800151e:	0030      	movs	r0, r6
 8001520:	3d1f      	subs	r5, #31
 8001522:	40e8      	lsrs	r0, r5
 8001524:	2b20      	cmp	r3, #32
 8001526:	d003      	beq.n	8001530 <__aeabi_dadd+0x3ac>
 8001528:	2140      	movs	r1, #64	; 0x40
 800152a:	1acb      	subs	r3, r1, r3
 800152c:	409e      	lsls	r6, r3
 800152e:	4337      	orrs	r7, r6
 8001530:	1e7b      	subs	r3, r7, #1
 8001532:	419f      	sbcs	r7, r3
 8001534:	2207      	movs	r2, #7
 8001536:	4307      	orrs	r7, r0
 8001538:	403a      	ands	r2, r7
 800153a:	2100      	movs	r1, #0
 800153c:	2500      	movs	r5, #0
 800153e:	e789      	b.n	8001454 <__aeabi_dadd+0x2d0>
 8001540:	1a17      	subs	r7, r2, r0
 8001542:	4643      	mov	r3, r8
 8001544:	42ba      	cmp	r2, r7
 8001546:	41b6      	sbcs	r6, r6
 8001548:	1a59      	subs	r1, r3, r1
 800154a:	4276      	negs	r6, r6
 800154c:	1b8e      	subs	r6, r1, r6
 800154e:	4664      	mov	r4, ip
 8001550:	e64e      	b.n	80011f0 <__aeabi_dadd+0x6c>
 8001552:	2b1f      	cmp	r3, #31
 8001554:	dd00      	ble.n	8001558 <__aeabi_dadd+0x3d4>
 8001556:	e0ad      	b.n	80016b4 <__aeabi_dadd+0x530>
 8001558:	2620      	movs	r6, #32
 800155a:	4647      	mov	r7, r8
 800155c:	1af6      	subs	r6, r6, r3
 800155e:	40b7      	lsls	r7, r6
 8001560:	46b9      	mov	r9, r7
 8001562:	0017      	movs	r7, r2
 8001564:	46b2      	mov	sl, r6
 8001566:	40df      	lsrs	r7, r3
 8001568:	464e      	mov	r6, r9
 800156a:	433e      	orrs	r6, r7
 800156c:	0037      	movs	r7, r6
 800156e:	4656      	mov	r6, sl
 8001570:	40b2      	lsls	r2, r6
 8001572:	1e56      	subs	r6, r2, #1
 8001574:	41b2      	sbcs	r2, r6
 8001576:	4317      	orrs	r7, r2
 8001578:	4642      	mov	r2, r8
 800157a:	40da      	lsrs	r2, r3
 800157c:	1889      	adds	r1, r1, r2
 800157e:	e6ae      	b.n	80012de <__aeabi_dadd+0x15a>
 8001580:	000007ff 	.word	0x000007ff
 8001584:	ff7fffff 	.word	0xff7fffff
 8001588:	800fffff 	.word	0x800fffff
 800158c:	2620      	movs	r6, #32
 800158e:	4647      	mov	r7, r8
 8001590:	1af6      	subs	r6, r6, r3
 8001592:	40b7      	lsls	r7, r6
 8001594:	46b9      	mov	r9, r7
 8001596:	0017      	movs	r7, r2
 8001598:	46b2      	mov	sl, r6
 800159a:	40df      	lsrs	r7, r3
 800159c:	464e      	mov	r6, r9
 800159e:	433e      	orrs	r6, r7
 80015a0:	0037      	movs	r7, r6
 80015a2:	4656      	mov	r6, sl
 80015a4:	40b2      	lsls	r2, r6
 80015a6:	1e56      	subs	r6, r2, #1
 80015a8:	41b2      	sbcs	r2, r6
 80015aa:	4317      	orrs	r7, r2
 80015ac:	4642      	mov	r2, r8
 80015ae:	40da      	lsrs	r2, r3
 80015b0:	1a89      	subs	r1, r1, r2
 80015b2:	e799      	b.n	80014e8 <__aeabi_dadd+0x364>
 80015b4:	4c7f      	ldr	r4, [pc, #508]	; (80017b4 <__aeabi_dadd+0x630>)
 80015b6:	42a6      	cmp	r6, r4
 80015b8:	d05b      	beq.n	8001672 <__aeabi_dadd+0x4ee>
 80015ba:	2480      	movs	r4, #128	; 0x80
 80015bc:	0424      	lsls	r4, r4, #16
 80015be:	425b      	negs	r3, r3
 80015c0:	4321      	orrs	r1, r4
 80015c2:	e727      	b.n	8001414 <__aeabi_dadd+0x290>
 80015c4:	2e00      	cmp	r6, #0
 80015c6:	d10c      	bne.n	80015e2 <__aeabi_dadd+0x45e>
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d100      	bne.n	80015ce <__aeabi_dadd+0x44a>
 80015cc:	e0cb      	b.n	8001766 <__aeabi_dadd+0x5e2>
 80015ce:	4664      	mov	r4, ip
 80015d0:	0039      	movs	r1, r7
 80015d2:	0010      	movs	r0, r2
 80015d4:	4d77      	ldr	r5, [pc, #476]	; (80017b4 <__aeabi_dadd+0x630>)
 80015d6:	e6d7      	b.n	8001388 <__aeabi_dadd+0x204>
 80015d8:	4f76      	ldr	r7, [pc, #472]	; (80017b4 <__aeabi_dadd+0x630>)
 80015da:	42bb      	cmp	r3, r7
 80015dc:	d018      	beq.n	8001610 <__aeabi_dadd+0x48c>
 80015de:	0033      	movs	r3, r6
 80015e0:	e675      	b.n	80012ce <__aeabi_dadd+0x14a>
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d014      	beq.n	8001610 <__aeabi_dadd+0x48c>
 80015e6:	074b      	lsls	r3, r1, #29
 80015e8:	08c0      	lsrs	r0, r0, #3
 80015ea:	4318      	orrs	r0, r3
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	08c9      	lsrs	r1, r1, #3
 80015f0:	031b      	lsls	r3, r3, #12
 80015f2:	4219      	tst	r1, r3
 80015f4:	d007      	beq.n	8001606 <__aeabi_dadd+0x482>
 80015f6:	08fc      	lsrs	r4, r7, #3
 80015f8:	421c      	tst	r4, r3
 80015fa:	d104      	bne.n	8001606 <__aeabi_dadd+0x482>
 80015fc:	0779      	lsls	r1, r7, #29
 80015fe:	08d0      	lsrs	r0, r2, #3
 8001600:	4308      	orrs	r0, r1
 8001602:	46e1      	mov	r9, ip
 8001604:	0021      	movs	r1, r4
 8001606:	464c      	mov	r4, r9
 8001608:	0f42      	lsrs	r2, r0, #29
 800160a:	00c9      	lsls	r1, r1, #3
 800160c:	4311      	orrs	r1, r2
 800160e:	00c0      	lsls	r0, r0, #3
 8001610:	4d68      	ldr	r5, [pc, #416]	; (80017b4 <__aeabi_dadd+0x630>)
 8001612:	e6b9      	b.n	8001388 <__aeabi_dadd+0x204>
 8001614:	001d      	movs	r5, r3
 8001616:	2200      	movs	r2, #0
 8001618:	2300      	movs	r3, #0
 800161a:	e6c0      	b.n	800139e <__aeabi_dadd+0x21a>
 800161c:	2d00      	cmp	r5, #0
 800161e:	d15b      	bne.n	80016d8 <__aeabi_dadd+0x554>
 8001620:	000d      	movs	r5, r1
 8001622:	4305      	orrs	r5, r0
 8001624:	d100      	bne.n	8001628 <__aeabi_dadd+0x4a4>
 8001626:	e6e2      	b.n	80013ee <__aeabi_dadd+0x26a>
 8001628:	1c5d      	adds	r5, r3, #1
 800162a:	d100      	bne.n	800162e <__aeabi_dadd+0x4aa>
 800162c:	e0b0      	b.n	8001790 <__aeabi_dadd+0x60c>
 800162e:	4d61      	ldr	r5, [pc, #388]	; (80017b4 <__aeabi_dadd+0x630>)
 8001630:	42ae      	cmp	r6, r5
 8001632:	d01f      	beq.n	8001674 <__aeabi_dadd+0x4f0>
 8001634:	43db      	mvns	r3, r3
 8001636:	2b38      	cmp	r3, #56	; 0x38
 8001638:	dc71      	bgt.n	800171e <__aeabi_dadd+0x59a>
 800163a:	2b1f      	cmp	r3, #31
 800163c:	dd00      	ble.n	8001640 <__aeabi_dadd+0x4bc>
 800163e:	e096      	b.n	800176e <__aeabi_dadd+0x5ea>
 8001640:	2520      	movs	r5, #32
 8001642:	000f      	movs	r7, r1
 8001644:	1aed      	subs	r5, r5, r3
 8001646:	40af      	lsls	r7, r5
 8001648:	46b9      	mov	r9, r7
 800164a:	0007      	movs	r7, r0
 800164c:	46aa      	mov	sl, r5
 800164e:	40df      	lsrs	r7, r3
 8001650:	464d      	mov	r5, r9
 8001652:	433d      	orrs	r5, r7
 8001654:	002f      	movs	r7, r5
 8001656:	4655      	mov	r5, sl
 8001658:	40a8      	lsls	r0, r5
 800165a:	40d9      	lsrs	r1, r3
 800165c:	1e45      	subs	r5, r0, #1
 800165e:	41a8      	sbcs	r0, r5
 8001660:	4488      	add	r8, r1
 8001662:	4307      	orrs	r7, r0
 8001664:	18bf      	adds	r7, r7, r2
 8001666:	4297      	cmp	r7, r2
 8001668:	4192      	sbcs	r2, r2
 800166a:	4251      	negs	r1, r2
 800166c:	4441      	add	r1, r8
 800166e:	0035      	movs	r5, r6
 8001670:	e63a      	b.n	80012e8 <__aeabi_dadd+0x164>
 8001672:	4664      	mov	r4, ip
 8001674:	0035      	movs	r5, r6
 8001676:	4641      	mov	r1, r8
 8001678:	0010      	movs	r0, r2
 800167a:	e685      	b.n	8001388 <__aeabi_dadd+0x204>
 800167c:	000b      	movs	r3, r1
 800167e:	4303      	orrs	r3, r0
 8001680:	2d00      	cmp	r5, #0
 8001682:	d000      	beq.n	8001686 <__aeabi_dadd+0x502>
 8001684:	e663      	b.n	800134e <__aeabi_dadd+0x1ca>
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f5      	beq.n	8001676 <__aeabi_dadd+0x4f2>
 800168a:	4643      	mov	r3, r8
 800168c:	4313      	orrs	r3, r2
 800168e:	d100      	bne.n	8001692 <__aeabi_dadd+0x50e>
 8001690:	e67a      	b.n	8001388 <__aeabi_dadd+0x204>
 8001692:	1887      	adds	r7, r0, r2
 8001694:	4287      	cmp	r7, r0
 8001696:	4180      	sbcs	r0, r0
 8001698:	2207      	movs	r2, #7
 800169a:	4441      	add	r1, r8
 800169c:	4240      	negs	r0, r0
 800169e:	1809      	adds	r1, r1, r0
 80016a0:	403a      	ands	r2, r7
 80016a2:	020b      	lsls	r3, r1, #8
 80016a4:	d400      	bmi.n	80016a8 <__aeabi_dadd+0x524>
 80016a6:	e6d5      	b.n	8001454 <__aeabi_dadd+0x2d0>
 80016a8:	4b43      	ldr	r3, [pc, #268]	; (80017b8 <__aeabi_dadd+0x634>)
 80016aa:	3501      	adds	r5, #1
 80016ac:	4019      	ands	r1, r3
 80016ae:	e5c9      	b.n	8001244 <__aeabi_dadd+0xc0>
 80016b0:	0038      	movs	r0, r7
 80016b2:	e669      	b.n	8001388 <__aeabi_dadd+0x204>
 80016b4:	001e      	movs	r6, r3
 80016b6:	4647      	mov	r7, r8
 80016b8:	3e20      	subs	r6, #32
 80016ba:	40f7      	lsrs	r7, r6
 80016bc:	46bc      	mov	ip, r7
 80016be:	2b20      	cmp	r3, #32
 80016c0:	d004      	beq.n	80016cc <__aeabi_dadd+0x548>
 80016c2:	2640      	movs	r6, #64	; 0x40
 80016c4:	1af3      	subs	r3, r6, r3
 80016c6:	4646      	mov	r6, r8
 80016c8:	409e      	lsls	r6, r3
 80016ca:	4332      	orrs	r2, r6
 80016cc:	0017      	movs	r7, r2
 80016ce:	4663      	mov	r3, ip
 80016d0:	1e7a      	subs	r2, r7, #1
 80016d2:	4197      	sbcs	r7, r2
 80016d4:	431f      	orrs	r7, r3
 80016d6:	e602      	b.n	80012de <__aeabi_dadd+0x15a>
 80016d8:	4d36      	ldr	r5, [pc, #216]	; (80017b4 <__aeabi_dadd+0x630>)
 80016da:	42ae      	cmp	r6, r5
 80016dc:	d0ca      	beq.n	8001674 <__aeabi_dadd+0x4f0>
 80016de:	2580      	movs	r5, #128	; 0x80
 80016e0:	042d      	lsls	r5, r5, #16
 80016e2:	425b      	negs	r3, r3
 80016e4:	4329      	orrs	r1, r5
 80016e6:	e7a6      	b.n	8001636 <__aeabi_dadd+0x4b2>
 80016e8:	4308      	orrs	r0, r1
 80016ea:	1e41      	subs	r1, r0, #1
 80016ec:	4188      	sbcs	r0, r1
 80016ee:	e6a6      	b.n	800143e <__aeabi_dadd+0x2ba>
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d100      	bne.n	80016f6 <__aeabi_dadd+0x572>
 80016f4:	e648      	b.n	8001388 <__aeabi_dadd+0x204>
 80016f6:	1a87      	subs	r7, r0, r2
 80016f8:	4643      	mov	r3, r8
 80016fa:	42b8      	cmp	r0, r7
 80016fc:	41b6      	sbcs	r6, r6
 80016fe:	1acb      	subs	r3, r1, r3
 8001700:	4276      	negs	r6, r6
 8001702:	1b9e      	subs	r6, r3, r6
 8001704:	0233      	lsls	r3, r6, #8
 8001706:	d54b      	bpl.n	80017a0 <__aeabi_dadd+0x61c>
 8001708:	1a17      	subs	r7, r2, r0
 800170a:	4643      	mov	r3, r8
 800170c:	42ba      	cmp	r2, r7
 800170e:	4192      	sbcs	r2, r2
 8001710:	1a59      	subs	r1, r3, r1
 8001712:	4252      	negs	r2, r2
 8001714:	1a89      	subs	r1, r1, r2
 8001716:	2207      	movs	r2, #7
 8001718:	4664      	mov	r4, ip
 800171a:	403a      	ands	r2, r7
 800171c:	e592      	b.n	8001244 <__aeabi_dadd+0xc0>
 800171e:	4301      	orrs	r1, r0
 8001720:	000f      	movs	r7, r1
 8001722:	1e79      	subs	r1, r7, #1
 8001724:	418f      	sbcs	r7, r1
 8001726:	e79d      	b.n	8001664 <__aeabi_dadd+0x4e0>
 8001728:	001c      	movs	r4, r3
 800172a:	000f      	movs	r7, r1
 800172c:	3c20      	subs	r4, #32
 800172e:	40e7      	lsrs	r7, r4
 8001730:	2b20      	cmp	r3, #32
 8001732:	d003      	beq.n	800173c <__aeabi_dadd+0x5b8>
 8001734:	2440      	movs	r4, #64	; 0x40
 8001736:	1ae3      	subs	r3, r4, r3
 8001738:	4099      	lsls	r1, r3
 800173a:	4308      	orrs	r0, r1
 800173c:	1e41      	subs	r1, r0, #1
 800173e:	4188      	sbcs	r0, r1
 8001740:	4338      	orrs	r0, r7
 8001742:	e67c      	b.n	800143e <__aeabi_dadd+0x2ba>
 8001744:	2200      	movs	r2, #0
 8001746:	2400      	movs	r4, #0
 8001748:	e625      	b.n	8001396 <__aeabi_dadd+0x212>
 800174a:	1a17      	subs	r7, r2, r0
 800174c:	4643      	mov	r3, r8
 800174e:	42ba      	cmp	r2, r7
 8001750:	4192      	sbcs	r2, r2
 8001752:	1a59      	subs	r1, r3, r1
 8001754:	4252      	negs	r2, r2
 8001756:	1a89      	subs	r1, r1, r2
 8001758:	4664      	mov	r4, ip
 800175a:	0035      	movs	r5, r6
 800175c:	e543      	b.n	80011e6 <__aeabi_dadd+0x62>
 800175e:	4641      	mov	r1, r8
 8001760:	0010      	movs	r0, r2
 8001762:	4d14      	ldr	r5, [pc, #80]	; (80017b4 <__aeabi_dadd+0x630>)
 8001764:	e610      	b.n	8001388 <__aeabi_dadd+0x204>
 8001766:	2280      	movs	r2, #128	; 0x80
 8001768:	2400      	movs	r4, #0
 800176a:	0312      	lsls	r2, r2, #12
 800176c:	e680      	b.n	8001470 <__aeabi_dadd+0x2ec>
 800176e:	001d      	movs	r5, r3
 8001770:	000f      	movs	r7, r1
 8001772:	3d20      	subs	r5, #32
 8001774:	40ef      	lsrs	r7, r5
 8001776:	46bc      	mov	ip, r7
 8001778:	2b20      	cmp	r3, #32
 800177a:	d003      	beq.n	8001784 <__aeabi_dadd+0x600>
 800177c:	2540      	movs	r5, #64	; 0x40
 800177e:	1aeb      	subs	r3, r5, r3
 8001780:	4099      	lsls	r1, r3
 8001782:	4308      	orrs	r0, r1
 8001784:	0007      	movs	r7, r0
 8001786:	4663      	mov	r3, ip
 8001788:	1e78      	subs	r0, r7, #1
 800178a:	4187      	sbcs	r7, r0
 800178c:	431f      	orrs	r7, r3
 800178e:	e769      	b.n	8001664 <__aeabi_dadd+0x4e0>
 8001790:	1887      	adds	r7, r0, r2
 8001792:	4297      	cmp	r7, r2
 8001794:	419b      	sbcs	r3, r3
 8001796:	4441      	add	r1, r8
 8001798:	425b      	negs	r3, r3
 800179a:	18c9      	adds	r1, r1, r3
 800179c:	0035      	movs	r5, r6
 800179e:	e5a3      	b.n	80012e8 <__aeabi_dadd+0x164>
 80017a0:	003b      	movs	r3, r7
 80017a2:	4333      	orrs	r3, r6
 80017a4:	d0ce      	beq.n	8001744 <__aeabi_dadd+0x5c0>
 80017a6:	2207      	movs	r2, #7
 80017a8:	0031      	movs	r1, r6
 80017aa:	403a      	ands	r2, r7
 80017ac:	e652      	b.n	8001454 <__aeabi_dadd+0x2d0>
 80017ae:	2300      	movs	r3, #0
 80017b0:	001a      	movs	r2, r3
 80017b2:	e5f4      	b.n	800139e <__aeabi_dadd+0x21a>
 80017b4:	000007ff 	.word	0x000007ff
 80017b8:	ff7fffff 	.word	0xff7fffff

080017bc <__eqdf2>:
 80017bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017be:	464f      	mov	r7, r9
 80017c0:	4646      	mov	r6, r8
 80017c2:	46d6      	mov	lr, sl
 80017c4:	4684      	mov	ip, r0
 80017c6:	b5c0      	push	{r6, r7, lr}
 80017c8:	4680      	mov	r8, r0
 80017ca:	4e19      	ldr	r6, [pc, #100]	; (8001830 <__eqdf2+0x74>)
 80017cc:	0318      	lsls	r0, r3, #12
 80017ce:	030f      	lsls	r7, r1, #12
 80017d0:	004d      	lsls	r5, r1, #1
 80017d2:	0b00      	lsrs	r0, r0, #12
 80017d4:	005c      	lsls	r4, r3, #1
 80017d6:	4682      	mov	sl, r0
 80017d8:	0b3f      	lsrs	r7, r7, #12
 80017da:	0d6d      	lsrs	r5, r5, #21
 80017dc:	0fc9      	lsrs	r1, r1, #31
 80017de:	4691      	mov	r9, r2
 80017e0:	0d64      	lsrs	r4, r4, #21
 80017e2:	0fdb      	lsrs	r3, r3, #31
 80017e4:	2001      	movs	r0, #1
 80017e6:	42b5      	cmp	r5, r6
 80017e8:	d00a      	beq.n	8001800 <__eqdf2+0x44>
 80017ea:	42b4      	cmp	r4, r6
 80017ec:	d003      	beq.n	80017f6 <__eqdf2+0x3a>
 80017ee:	42a5      	cmp	r5, r4
 80017f0:	d101      	bne.n	80017f6 <__eqdf2+0x3a>
 80017f2:	4557      	cmp	r7, sl
 80017f4:	d00c      	beq.n	8001810 <__eqdf2+0x54>
 80017f6:	bc1c      	pop	{r2, r3, r4}
 80017f8:	4690      	mov	r8, r2
 80017fa:	4699      	mov	r9, r3
 80017fc:	46a2      	mov	sl, r4
 80017fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001800:	4666      	mov	r6, ip
 8001802:	433e      	orrs	r6, r7
 8001804:	d1f7      	bne.n	80017f6 <__eqdf2+0x3a>
 8001806:	42ac      	cmp	r4, r5
 8001808:	d1f5      	bne.n	80017f6 <__eqdf2+0x3a>
 800180a:	4654      	mov	r4, sl
 800180c:	4314      	orrs	r4, r2
 800180e:	d1f2      	bne.n	80017f6 <__eqdf2+0x3a>
 8001810:	2001      	movs	r0, #1
 8001812:	45c8      	cmp	r8, r9
 8001814:	d1ef      	bne.n	80017f6 <__eqdf2+0x3a>
 8001816:	4299      	cmp	r1, r3
 8001818:	d007      	beq.n	800182a <__eqdf2+0x6e>
 800181a:	2d00      	cmp	r5, #0
 800181c:	d1eb      	bne.n	80017f6 <__eqdf2+0x3a>
 800181e:	4663      	mov	r3, ip
 8001820:	431f      	orrs	r7, r3
 8001822:	0038      	movs	r0, r7
 8001824:	1e47      	subs	r7, r0, #1
 8001826:	41b8      	sbcs	r0, r7
 8001828:	e7e5      	b.n	80017f6 <__eqdf2+0x3a>
 800182a:	2000      	movs	r0, #0
 800182c:	e7e3      	b.n	80017f6 <__eqdf2+0x3a>
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	000007ff 	.word	0x000007ff

08001834 <__gedf2>:
 8001834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001836:	464f      	mov	r7, r9
 8001838:	4646      	mov	r6, r8
 800183a:	46d6      	mov	lr, sl
 800183c:	004d      	lsls	r5, r1, #1
 800183e:	b5c0      	push	{r6, r7, lr}
 8001840:	030e      	lsls	r6, r1, #12
 8001842:	0fc9      	lsrs	r1, r1, #31
 8001844:	468a      	mov	sl, r1
 8001846:	492c      	ldr	r1, [pc, #176]	; (80018f8 <__gedf2+0xc4>)
 8001848:	031f      	lsls	r7, r3, #12
 800184a:	005c      	lsls	r4, r3, #1
 800184c:	4680      	mov	r8, r0
 800184e:	0b36      	lsrs	r6, r6, #12
 8001850:	0d6d      	lsrs	r5, r5, #21
 8001852:	4691      	mov	r9, r2
 8001854:	0b3f      	lsrs	r7, r7, #12
 8001856:	0d64      	lsrs	r4, r4, #21
 8001858:	0fdb      	lsrs	r3, r3, #31
 800185a:	428d      	cmp	r5, r1
 800185c:	d01e      	beq.n	800189c <__gedf2+0x68>
 800185e:	428c      	cmp	r4, r1
 8001860:	d016      	beq.n	8001890 <__gedf2+0x5c>
 8001862:	2d00      	cmp	r5, #0
 8001864:	d11e      	bne.n	80018a4 <__gedf2+0x70>
 8001866:	4330      	orrs	r0, r6
 8001868:	4684      	mov	ip, r0
 800186a:	2c00      	cmp	r4, #0
 800186c:	d101      	bne.n	8001872 <__gedf2+0x3e>
 800186e:	433a      	orrs	r2, r7
 8001870:	d023      	beq.n	80018ba <__gedf2+0x86>
 8001872:	4662      	mov	r2, ip
 8001874:	2a00      	cmp	r2, #0
 8001876:	d01a      	beq.n	80018ae <__gedf2+0x7a>
 8001878:	459a      	cmp	sl, r3
 800187a:	d029      	beq.n	80018d0 <__gedf2+0x9c>
 800187c:	4651      	mov	r1, sl
 800187e:	2002      	movs	r0, #2
 8001880:	3901      	subs	r1, #1
 8001882:	4008      	ands	r0, r1
 8001884:	3801      	subs	r0, #1
 8001886:	bc1c      	pop	{r2, r3, r4}
 8001888:	4690      	mov	r8, r2
 800188a:	4699      	mov	r9, r3
 800188c:	46a2      	mov	sl, r4
 800188e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001890:	0039      	movs	r1, r7
 8001892:	4311      	orrs	r1, r2
 8001894:	d0e5      	beq.n	8001862 <__gedf2+0x2e>
 8001896:	2002      	movs	r0, #2
 8001898:	4240      	negs	r0, r0
 800189a:	e7f4      	b.n	8001886 <__gedf2+0x52>
 800189c:	4330      	orrs	r0, r6
 800189e:	d1fa      	bne.n	8001896 <__gedf2+0x62>
 80018a0:	42ac      	cmp	r4, r5
 80018a2:	d00f      	beq.n	80018c4 <__gedf2+0x90>
 80018a4:	2c00      	cmp	r4, #0
 80018a6:	d10f      	bne.n	80018c8 <__gedf2+0x94>
 80018a8:	433a      	orrs	r2, r7
 80018aa:	d0e7      	beq.n	800187c <__gedf2+0x48>
 80018ac:	e00c      	b.n	80018c8 <__gedf2+0x94>
 80018ae:	2201      	movs	r2, #1
 80018b0:	3b01      	subs	r3, #1
 80018b2:	4393      	bics	r3, r2
 80018b4:	0018      	movs	r0, r3
 80018b6:	3001      	adds	r0, #1
 80018b8:	e7e5      	b.n	8001886 <__gedf2+0x52>
 80018ba:	4663      	mov	r3, ip
 80018bc:	2000      	movs	r0, #0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0e1      	beq.n	8001886 <__gedf2+0x52>
 80018c2:	e7db      	b.n	800187c <__gedf2+0x48>
 80018c4:	433a      	orrs	r2, r7
 80018c6:	d1e6      	bne.n	8001896 <__gedf2+0x62>
 80018c8:	459a      	cmp	sl, r3
 80018ca:	d1d7      	bne.n	800187c <__gedf2+0x48>
 80018cc:	42a5      	cmp	r5, r4
 80018ce:	dcd5      	bgt.n	800187c <__gedf2+0x48>
 80018d0:	42a5      	cmp	r5, r4
 80018d2:	db05      	blt.n	80018e0 <__gedf2+0xac>
 80018d4:	42be      	cmp	r6, r7
 80018d6:	d8d1      	bhi.n	800187c <__gedf2+0x48>
 80018d8:	d008      	beq.n	80018ec <__gedf2+0xb8>
 80018da:	2000      	movs	r0, #0
 80018dc:	42be      	cmp	r6, r7
 80018de:	d2d2      	bcs.n	8001886 <__gedf2+0x52>
 80018e0:	4650      	mov	r0, sl
 80018e2:	2301      	movs	r3, #1
 80018e4:	3801      	subs	r0, #1
 80018e6:	4398      	bics	r0, r3
 80018e8:	3001      	adds	r0, #1
 80018ea:	e7cc      	b.n	8001886 <__gedf2+0x52>
 80018ec:	45c8      	cmp	r8, r9
 80018ee:	d8c5      	bhi.n	800187c <__gedf2+0x48>
 80018f0:	2000      	movs	r0, #0
 80018f2:	45c8      	cmp	r8, r9
 80018f4:	d3f4      	bcc.n	80018e0 <__gedf2+0xac>
 80018f6:	e7c6      	b.n	8001886 <__gedf2+0x52>
 80018f8:	000007ff 	.word	0x000007ff

080018fc <__ledf2>:
 80018fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fe:	464f      	mov	r7, r9
 8001900:	4646      	mov	r6, r8
 8001902:	46d6      	mov	lr, sl
 8001904:	004d      	lsls	r5, r1, #1
 8001906:	b5c0      	push	{r6, r7, lr}
 8001908:	030e      	lsls	r6, r1, #12
 800190a:	0fc9      	lsrs	r1, r1, #31
 800190c:	468a      	mov	sl, r1
 800190e:	492e      	ldr	r1, [pc, #184]	; (80019c8 <__ledf2+0xcc>)
 8001910:	031f      	lsls	r7, r3, #12
 8001912:	005c      	lsls	r4, r3, #1
 8001914:	4680      	mov	r8, r0
 8001916:	0b36      	lsrs	r6, r6, #12
 8001918:	0d6d      	lsrs	r5, r5, #21
 800191a:	4691      	mov	r9, r2
 800191c:	0b3f      	lsrs	r7, r7, #12
 800191e:	0d64      	lsrs	r4, r4, #21
 8001920:	0fdb      	lsrs	r3, r3, #31
 8001922:	428d      	cmp	r5, r1
 8001924:	d018      	beq.n	8001958 <__ledf2+0x5c>
 8001926:	428c      	cmp	r4, r1
 8001928:	d011      	beq.n	800194e <__ledf2+0x52>
 800192a:	2d00      	cmp	r5, #0
 800192c:	d118      	bne.n	8001960 <__ledf2+0x64>
 800192e:	4330      	orrs	r0, r6
 8001930:	4684      	mov	ip, r0
 8001932:	2c00      	cmp	r4, #0
 8001934:	d11e      	bne.n	8001974 <__ledf2+0x78>
 8001936:	433a      	orrs	r2, r7
 8001938:	d11c      	bne.n	8001974 <__ledf2+0x78>
 800193a:	4663      	mov	r3, ip
 800193c:	2000      	movs	r0, #0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d030      	beq.n	80019a4 <__ledf2+0xa8>
 8001942:	4651      	mov	r1, sl
 8001944:	2002      	movs	r0, #2
 8001946:	3901      	subs	r1, #1
 8001948:	4008      	ands	r0, r1
 800194a:	3801      	subs	r0, #1
 800194c:	e02a      	b.n	80019a4 <__ledf2+0xa8>
 800194e:	0039      	movs	r1, r7
 8001950:	4311      	orrs	r1, r2
 8001952:	d0ea      	beq.n	800192a <__ledf2+0x2e>
 8001954:	2002      	movs	r0, #2
 8001956:	e025      	b.n	80019a4 <__ledf2+0xa8>
 8001958:	4330      	orrs	r0, r6
 800195a:	d1fb      	bne.n	8001954 <__ledf2+0x58>
 800195c:	42ac      	cmp	r4, r5
 800195e:	d026      	beq.n	80019ae <__ledf2+0xb2>
 8001960:	2c00      	cmp	r4, #0
 8001962:	d126      	bne.n	80019b2 <__ledf2+0xb6>
 8001964:	433a      	orrs	r2, r7
 8001966:	d124      	bne.n	80019b2 <__ledf2+0xb6>
 8001968:	4651      	mov	r1, sl
 800196a:	2002      	movs	r0, #2
 800196c:	3901      	subs	r1, #1
 800196e:	4008      	ands	r0, r1
 8001970:	3801      	subs	r0, #1
 8001972:	e017      	b.n	80019a4 <__ledf2+0xa8>
 8001974:	4662      	mov	r2, ip
 8001976:	2a00      	cmp	r2, #0
 8001978:	d00f      	beq.n	800199a <__ledf2+0x9e>
 800197a:	459a      	cmp	sl, r3
 800197c:	d1e1      	bne.n	8001942 <__ledf2+0x46>
 800197e:	42a5      	cmp	r5, r4
 8001980:	db05      	blt.n	800198e <__ledf2+0x92>
 8001982:	42be      	cmp	r6, r7
 8001984:	d8dd      	bhi.n	8001942 <__ledf2+0x46>
 8001986:	d019      	beq.n	80019bc <__ledf2+0xc0>
 8001988:	2000      	movs	r0, #0
 800198a:	42be      	cmp	r6, r7
 800198c:	d20a      	bcs.n	80019a4 <__ledf2+0xa8>
 800198e:	4650      	mov	r0, sl
 8001990:	2301      	movs	r3, #1
 8001992:	3801      	subs	r0, #1
 8001994:	4398      	bics	r0, r3
 8001996:	3001      	adds	r0, #1
 8001998:	e004      	b.n	80019a4 <__ledf2+0xa8>
 800199a:	2201      	movs	r2, #1
 800199c:	3b01      	subs	r3, #1
 800199e:	4393      	bics	r3, r2
 80019a0:	0018      	movs	r0, r3
 80019a2:	3001      	adds	r0, #1
 80019a4:	bc1c      	pop	{r2, r3, r4}
 80019a6:	4690      	mov	r8, r2
 80019a8:	4699      	mov	r9, r3
 80019aa:	46a2      	mov	sl, r4
 80019ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ae:	433a      	orrs	r2, r7
 80019b0:	d1d0      	bne.n	8001954 <__ledf2+0x58>
 80019b2:	459a      	cmp	sl, r3
 80019b4:	d1c5      	bne.n	8001942 <__ledf2+0x46>
 80019b6:	42a5      	cmp	r5, r4
 80019b8:	dcc3      	bgt.n	8001942 <__ledf2+0x46>
 80019ba:	e7e0      	b.n	800197e <__ledf2+0x82>
 80019bc:	45c8      	cmp	r8, r9
 80019be:	d8c0      	bhi.n	8001942 <__ledf2+0x46>
 80019c0:	2000      	movs	r0, #0
 80019c2:	45c8      	cmp	r8, r9
 80019c4:	d3e3      	bcc.n	800198e <__ledf2+0x92>
 80019c6:	e7ed      	b.n	80019a4 <__ledf2+0xa8>
 80019c8:	000007ff 	.word	0x000007ff

080019cc <__aeabi_dmul>:
 80019cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ce:	4657      	mov	r7, sl
 80019d0:	46de      	mov	lr, fp
 80019d2:	464e      	mov	r6, r9
 80019d4:	4645      	mov	r5, r8
 80019d6:	b5e0      	push	{r5, r6, r7, lr}
 80019d8:	4683      	mov	fp, r0
 80019da:	0006      	movs	r6, r0
 80019dc:	030f      	lsls	r7, r1, #12
 80019de:	0048      	lsls	r0, r1, #1
 80019e0:	b087      	sub	sp, #28
 80019e2:	4692      	mov	sl, r2
 80019e4:	001d      	movs	r5, r3
 80019e6:	0b3f      	lsrs	r7, r7, #12
 80019e8:	0d40      	lsrs	r0, r0, #21
 80019ea:	0fcc      	lsrs	r4, r1, #31
 80019ec:	2800      	cmp	r0, #0
 80019ee:	d100      	bne.n	80019f2 <__aeabi_dmul+0x26>
 80019f0:	e06f      	b.n	8001ad2 <__aeabi_dmul+0x106>
 80019f2:	4bde      	ldr	r3, [pc, #888]	; (8001d6c <__aeabi_dmul+0x3a0>)
 80019f4:	4298      	cmp	r0, r3
 80019f6:	d038      	beq.n	8001a6a <__aeabi_dmul+0x9e>
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	00ff      	lsls	r7, r7, #3
 80019fc:	041b      	lsls	r3, r3, #16
 80019fe:	431f      	orrs	r7, r3
 8001a00:	0f73      	lsrs	r3, r6, #29
 8001a02:	433b      	orrs	r3, r7
 8001a04:	9301      	str	r3, [sp, #4]
 8001a06:	4bda      	ldr	r3, [pc, #872]	; (8001d70 <__aeabi_dmul+0x3a4>)
 8001a08:	2700      	movs	r7, #0
 8001a0a:	4699      	mov	r9, r3
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	469b      	mov	fp, r3
 8001a10:	00f6      	lsls	r6, r6, #3
 8001a12:	4481      	add	r9, r0
 8001a14:	032b      	lsls	r3, r5, #12
 8001a16:	0069      	lsls	r1, r5, #1
 8001a18:	0b1b      	lsrs	r3, r3, #12
 8001a1a:	4652      	mov	r2, sl
 8001a1c:	4698      	mov	r8, r3
 8001a1e:	0d49      	lsrs	r1, r1, #21
 8001a20:	0fed      	lsrs	r5, r5, #31
 8001a22:	2900      	cmp	r1, #0
 8001a24:	d100      	bne.n	8001a28 <__aeabi_dmul+0x5c>
 8001a26:	e085      	b.n	8001b34 <__aeabi_dmul+0x168>
 8001a28:	4bd0      	ldr	r3, [pc, #832]	; (8001d6c <__aeabi_dmul+0x3a0>)
 8001a2a:	4299      	cmp	r1, r3
 8001a2c:	d100      	bne.n	8001a30 <__aeabi_dmul+0x64>
 8001a2e:	e073      	b.n	8001b18 <__aeabi_dmul+0x14c>
 8001a30:	4643      	mov	r3, r8
 8001a32:	00da      	lsls	r2, r3, #3
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	041b      	lsls	r3, r3, #16
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	4652      	mov	r2, sl
 8001a3c:	48cc      	ldr	r0, [pc, #816]	; (8001d70 <__aeabi_dmul+0x3a4>)
 8001a3e:	0f52      	lsrs	r2, r2, #29
 8001a40:	4684      	mov	ip, r0
 8001a42:	4313      	orrs	r3, r2
 8001a44:	4652      	mov	r2, sl
 8001a46:	2000      	movs	r0, #0
 8001a48:	4461      	add	r1, ip
 8001a4a:	00d2      	lsls	r2, r2, #3
 8001a4c:	4489      	add	r9, r1
 8001a4e:	0021      	movs	r1, r4
 8001a50:	4069      	eors	r1, r5
 8001a52:	9100      	str	r1, [sp, #0]
 8001a54:	468c      	mov	ip, r1
 8001a56:	2101      	movs	r1, #1
 8001a58:	4449      	add	r1, r9
 8001a5a:	468a      	mov	sl, r1
 8001a5c:	2f0f      	cmp	r7, #15
 8001a5e:	d900      	bls.n	8001a62 <__aeabi_dmul+0x96>
 8001a60:	e090      	b.n	8001b84 <__aeabi_dmul+0x1b8>
 8001a62:	49c4      	ldr	r1, [pc, #784]	; (8001d74 <__aeabi_dmul+0x3a8>)
 8001a64:	00bf      	lsls	r7, r7, #2
 8001a66:	59cf      	ldr	r7, [r1, r7]
 8001a68:	46bf      	mov	pc, r7
 8001a6a:	465b      	mov	r3, fp
 8001a6c:	433b      	orrs	r3, r7
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	d000      	beq.n	8001a74 <__aeabi_dmul+0xa8>
 8001a72:	e16a      	b.n	8001d4a <__aeabi_dmul+0x37e>
 8001a74:	2302      	movs	r3, #2
 8001a76:	2708      	movs	r7, #8
 8001a78:	2600      	movs	r6, #0
 8001a7a:	4681      	mov	r9, r0
 8001a7c:	469b      	mov	fp, r3
 8001a7e:	e7c9      	b.n	8001a14 <__aeabi_dmul+0x48>
 8001a80:	0032      	movs	r2, r6
 8001a82:	4658      	mov	r0, fp
 8001a84:	9b01      	ldr	r3, [sp, #4]
 8001a86:	4661      	mov	r1, ip
 8001a88:	9100      	str	r1, [sp, #0]
 8001a8a:	2802      	cmp	r0, #2
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dmul+0xc4>
 8001a8e:	e075      	b.n	8001b7c <__aeabi_dmul+0x1b0>
 8001a90:	2803      	cmp	r0, #3
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dmul+0xca>
 8001a94:	e1fe      	b.n	8001e94 <__aeabi_dmul+0x4c8>
 8001a96:	2801      	cmp	r0, #1
 8001a98:	d000      	beq.n	8001a9c <__aeabi_dmul+0xd0>
 8001a9a:	e12c      	b.n	8001cf6 <__aeabi_dmul+0x32a>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	2700      	movs	r7, #0
 8001aa0:	2600      	movs	r6, #0
 8001aa2:	2500      	movs	r5, #0
 8001aa4:	033f      	lsls	r7, r7, #12
 8001aa6:	0d2a      	lsrs	r2, r5, #20
 8001aa8:	0b3f      	lsrs	r7, r7, #12
 8001aaa:	48b3      	ldr	r0, [pc, #716]	; (8001d78 <__aeabi_dmul+0x3ac>)
 8001aac:	0512      	lsls	r2, r2, #20
 8001aae:	433a      	orrs	r2, r7
 8001ab0:	4002      	ands	r2, r0
 8001ab2:	051b      	lsls	r3, r3, #20
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	9a00      	ldr	r2, [sp, #0]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	07d1      	lsls	r1, r2, #31
 8001abc:	085b      	lsrs	r3, r3, #1
 8001abe:	430b      	orrs	r3, r1
 8001ac0:	0030      	movs	r0, r6
 8001ac2:	0019      	movs	r1, r3
 8001ac4:	b007      	add	sp, #28
 8001ac6:	bc3c      	pop	{r2, r3, r4, r5}
 8001ac8:	4690      	mov	r8, r2
 8001aca:	4699      	mov	r9, r3
 8001acc:	46a2      	mov	sl, r4
 8001ace:	46ab      	mov	fp, r5
 8001ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ad2:	465b      	mov	r3, fp
 8001ad4:	433b      	orrs	r3, r7
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	d100      	bne.n	8001adc <__aeabi_dmul+0x110>
 8001ada:	e12f      	b.n	8001d3c <__aeabi_dmul+0x370>
 8001adc:	2f00      	cmp	r7, #0
 8001ade:	d100      	bne.n	8001ae2 <__aeabi_dmul+0x116>
 8001ae0:	e1a5      	b.n	8001e2e <__aeabi_dmul+0x462>
 8001ae2:	0038      	movs	r0, r7
 8001ae4:	f000 fe72 	bl	80027cc <__clzsi2>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	3b0b      	subs	r3, #11
 8001aec:	2b1c      	cmp	r3, #28
 8001aee:	dd00      	ble.n	8001af2 <__aeabi_dmul+0x126>
 8001af0:	e196      	b.n	8001e20 <__aeabi_dmul+0x454>
 8001af2:	221d      	movs	r2, #29
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	465a      	mov	r2, fp
 8001af8:	0001      	movs	r1, r0
 8001afa:	40da      	lsrs	r2, r3
 8001afc:	465e      	mov	r6, fp
 8001afe:	3908      	subs	r1, #8
 8001b00:	408f      	lsls	r7, r1
 8001b02:	0013      	movs	r3, r2
 8001b04:	408e      	lsls	r6, r1
 8001b06:	433b      	orrs	r3, r7
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	4b9c      	ldr	r3, [pc, #624]	; (8001d7c <__aeabi_dmul+0x3b0>)
 8001b0c:	2700      	movs	r7, #0
 8001b0e:	1a1b      	subs	r3, r3, r0
 8001b10:	4699      	mov	r9, r3
 8001b12:	2300      	movs	r3, #0
 8001b14:	469b      	mov	fp, r3
 8001b16:	e77d      	b.n	8001a14 <__aeabi_dmul+0x48>
 8001b18:	4641      	mov	r1, r8
 8001b1a:	4653      	mov	r3, sl
 8001b1c:	430b      	orrs	r3, r1
 8001b1e:	4993      	ldr	r1, [pc, #588]	; (8001d6c <__aeabi_dmul+0x3a0>)
 8001b20:	468c      	mov	ip, r1
 8001b22:	44e1      	add	r9, ip
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d000      	beq.n	8001b2a <__aeabi_dmul+0x15e>
 8001b28:	e11a      	b.n	8001d60 <__aeabi_dmul+0x394>
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	2002      	movs	r0, #2
 8001b2e:	4317      	orrs	r7, r2
 8001b30:	2200      	movs	r2, #0
 8001b32:	e78c      	b.n	8001a4e <__aeabi_dmul+0x82>
 8001b34:	4313      	orrs	r3, r2
 8001b36:	d100      	bne.n	8001b3a <__aeabi_dmul+0x16e>
 8001b38:	e10d      	b.n	8001d56 <__aeabi_dmul+0x38a>
 8001b3a:	4643      	mov	r3, r8
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dmul+0x176>
 8001b40:	e181      	b.n	8001e46 <__aeabi_dmul+0x47a>
 8001b42:	4640      	mov	r0, r8
 8001b44:	f000 fe42 	bl	80027cc <__clzsi2>
 8001b48:	0002      	movs	r2, r0
 8001b4a:	3a0b      	subs	r2, #11
 8001b4c:	2a1c      	cmp	r2, #28
 8001b4e:	dd00      	ble.n	8001b52 <__aeabi_dmul+0x186>
 8001b50:	e172      	b.n	8001e38 <__aeabi_dmul+0x46c>
 8001b52:	0001      	movs	r1, r0
 8001b54:	4643      	mov	r3, r8
 8001b56:	3908      	subs	r1, #8
 8001b58:	408b      	lsls	r3, r1
 8001b5a:	4698      	mov	r8, r3
 8001b5c:	231d      	movs	r3, #29
 8001b5e:	1a9a      	subs	r2, r3, r2
 8001b60:	4653      	mov	r3, sl
 8001b62:	40d3      	lsrs	r3, r2
 8001b64:	001a      	movs	r2, r3
 8001b66:	4643      	mov	r3, r8
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	4652      	mov	r2, sl
 8001b6c:	408a      	lsls	r2, r1
 8001b6e:	4649      	mov	r1, r9
 8001b70:	1a08      	subs	r0, r1, r0
 8001b72:	4982      	ldr	r1, [pc, #520]	; (8001d7c <__aeabi_dmul+0x3b0>)
 8001b74:	4689      	mov	r9, r1
 8001b76:	4481      	add	r9, r0
 8001b78:	2000      	movs	r0, #0
 8001b7a:	e768      	b.n	8001a4e <__aeabi_dmul+0x82>
 8001b7c:	4b7b      	ldr	r3, [pc, #492]	; (8001d6c <__aeabi_dmul+0x3a0>)
 8001b7e:	2700      	movs	r7, #0
 8001b80:	2600      	movs	r6, #0
 8001b82:	e78e      	b.n	8001aa2 <__aeabi_dmul+0xd6>
 8001b84:	0c14      	lsrs	r4, r2, #16
 8001b86:	0412      	lsls	r2, r2, #16
 8001b88:	0c12      	lsrs	r2, r2, #16
 8001b8a:	0011      	movs	r1, r2
 8001b8c:	0c37      	lsrs	r7, r6, #16
 8001b8e:	0436      	lsls	r6, r6, #16
 8001b90:	0c35      	lsrs	r5, r6, #16
 8001b92:	4379      	muls	r1, r7
 8001b94:	0028      	movs	r0, r5
 8001b96:	468c      	mov	ip, r1
 8001b98:	002e      	movs	r6, r5
 8001b9a:	4360      	muls	r0, r4
 8001b9c:	4460      	add	r0, ip
 8001b9e:	4683      	mov	fp, r0
 8001ba0:	4356      	muls	r6, r2
 8001ba2:	0021      	movs	r1, r4
 8001ba4:	0c30      	lsrs	r0, r6, #16
 8001ba6:	4680      	mov	r8, r0
 8001ba8:	4658      	mov	r0, fp
 8001baa:	4379      	muls	r1, r7
 8001bac:	4440      	add	r0, r8
 8001bae:	9102      	str	r1, [sp, #8]
 8001bb0:	4584      	cmp	ip, r0
 8001bb2:	d906      	bls.n	8001bc2 <__aeabi_dmul+0x1f6>
 8001bb4:	4688      	mov	r8, r1
 8001bb6:	2180      	movs	r1, #128	; 0x80
 8001bb8:	0249      	lsls	r1, r1, #9
 8001bba:	468c      	mov	ip, r1
 8001bbc:	44e0      	add	r8, ip
 8001bbe:	4641      	mov	r1, r8
 8001bc0:	9102      	str	r1, [sp, #8]
 8001bc2:	0436      	lsls	r6, r6, #16
 8001bc4:	0c01      	lsrs	r1, r0, #16
 8001bc6:	0c36      	lsrs	r6, r6, #16
 8001bc8:	0400      	lsls	r0, r0, #16
 8001bca:	468b      	mov	fp, r1
 8001bcc:	1981      	adds	r1, r0, r6
 8001bce:	0c1e      	lsrs	r6, r3, #16
 8001bd0:	041b      	lsls	r3, r3, #16
 8001bd2:	0c1b      	lsrs	r3, r3, #16
 8001bd4:	9103      	str	r1, [sp, #12]
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	4379      	muls	r1, r7
 8001bda:	468c      	mov	ip, r1
 8001bdc:	0028      	movs	r0, r5
 8001bde:	4375      	muls	r5, r6
 8001be0:	4465      	add	r5, ip
 8001be2:	46a8      	mov	r8, r5
 8001be4:	4358      	muls	r0, r3
 8001be6:	0c05      	lsrs	r5, r0, #16
 8001be8:	4445      	add	r5, r8
 8001bea:	4377      	muls	r7, r6
 8001bec:	42a9      	cmp	r1, r5
 8001bee:	d903      	bls.n	8001bf8 <__aeabi_dmul+0x22c>
 8001bf0:	2180      	movs	r1, #128	; 0x80
 8001bf2:	0249      	lsls	r1, r1, #9
 8001bf4:	468c      	mov	ip, r1
 8001bf6:	4467      	add	r7, ip
 8001bf8:	0c29      	lsrs	r1, r5, #16
 8001bfa:	468c      	mov	ip, r1
 8001bfc:	0039      	movs	r1, r7
 8001bfe:	0400      	lsls	r0, r0, #16
 8001c00:	0c00      	lsrs	r0, r0, #16
 8001c02:	042d      	lsls	r5, r5, #16
 8001c04:	182d      	adds	r5, r5, r0
 8001c06:	4461      	add	r1, ip
 8001c08:	44ab      	add	fp, r5
 8001c0a:	9105      	str	r1, [sp, #20]
 8001c0c:	4659      	mov	r1, fp
 8001c0e:	9104      	str	r1, [sp, #16]
 8001c10:	9901      	ldr	r1, [sp, #4]
 8001c12:	040f      	lsls	r7, r1, #16
 8001c14:	0c3f      	lsrs	r7, r7, #16
 8001c16:	0c08      	lsrs	r0, r1, #16
 8001c18:	0039      	movs	r1, r7
 8001c1a:	4351      	muls	r1, r2
 8001c1c:	4342      	muls	r2, r0
 8001c1e:	4690      	mov	r8, r2
 8001c20:	0002      	movs	r2, r0
 8001c22:	468c      	mov	ip, r1
 8001c24:	0c09      	lsrs	r1, r1, #16
 8001c26:	468b      	mov	fp, r1
 8001c28:	4362      	muls	r2, r4
 8001c2a:	437c      	muls	r4, r7
 8001c2c:	4444      	add	r4, r8
 8001c2e:	445c      	add	r4, fp
 8001c30:	45a0      	cmp	r8, r4
 8001c32:	d903      	bls.n	8001c3c <__aeabi_dmul+0x270>
 8001c34:	2180      	movs	r1, #128	; 0x80
 8001c36:	0249      	lsls	r1, r1, #9
 8001c38:	4688      	mov	r8, r1
 8001c3a:	4442      	add	r2, r8
 8001c3c:	0c21      	lsrs	r1, r4, #16
 8001c3e:	4688      	mov	r8, r1
 8001c40:	4661      	mov	r1, ip
 8001c42:	0409      	lsls	r1, r1, #16
 8001c44:	0c09      	lsrs	r1, r1, #16
 8001c46:	468c      	mov	ip, r1
 8001c48:	0039      	movs	r1, r7
 8001c4a:	4359      	muls	r1, r3
 8001c4c:	4343      	muls	r3, r0
 8001c4e:	4370      	muls	r0, r6
 8001c50:	437e      	muls	r6, r7
 8001c52:	0c0f      	lsrs	r7, r1, #16
 8001c54:	18f6      	adds	r6, r6, r3
 8001c56:	0424      	lsls	r4, r4, #16
 8001c58:	19be      	adds	r6, r7, r6
 8001c5a:	4464      	add	r4, ip
 8001c5c:	4442      	add	r2, r8
 8001c5e:	468c      	mov	ip, r1
 8001c60:	42b3      	cmp	r3, r6
 8001c62:	d903      	bls.n	8001c6c <__aeabi_dmul+0x2a0>
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	025b      	lsls	r3, r3, #9
 8001c68:	4698      	mov	r8, r3
 8001c6a:	4440      	add	r0, r8
 8001c6c:	9b02      	ldr	r3, [sp, #8]
 8001c6e:	4661      	mov	r1, ip
 8001c70:	4698      	mov	r8, r3
 8001c72:	9b04      	ldr	r3, [sp, #16]
 8001c74:	0437      	lsls	r7, r6, #16
 8001c76:	4443      	add	r3, r8
 8001c78:	469b      	mov	fp, r3
 8001c7a:	45ab      	cmp	fp, r5
 8001c7c:	41ad      	sbcs	r5, r5
 8001c7e:	426b      	negs	r3, r5
 8001c80:	040d      	lsls	r5, r1, #16
 8001c82:	9905      	ldr	r1, [sp, #20]
 8001c84:	0c2d      	lsrs	r5, r5, #16
 8001c86:	468c      	mov	ip, r1
 8001c88:	197f      	adds	r7, r7, r5
 8001c8a:	4467      	add	r7, ip
 8001c8c:	18fd      	adds	r5, r7, r3
 8001c8e:	46a8      	mov	r8, r5
 8001c90:	465d      	mov	r5, fp
 8001c92:	192d      	adds	r5, r5, r4
 8001c94:	42a5      	cmp	r5, r4
 8001c96:	41a4      	sbcs	r4, r4
 8001c98:	4693      	mov	fp, r2
 8001c9a:	4264      	negs	r4, r4
 8001c9c:	46a4      	mov	ip, r4
 8001c9e:	44c3      	add	fp, r8
 8001ca0:	44dc      	add	ip, fp
 8001ca2:	428f      	cmp	r7, r1
 8001ca4:	41bf      	sbcs	r7, r7
 8001ca6:	4598      	cmp	r8, r3
 8001ca8:	419b      	sbcs	r3, r3
 8001caa:	4593      	cmp	fp, r2
 8001cac:	4192      	sbcs	r2, r2
 8001cae:	45a4      	cmp	ip, r4
 8001cb0:	41a4      	sbcs	r4, r4
 8001cb2:	425b      	negs	r3, r3
 8001cb4:	427f      	negs	r7, r7
 8001cb6:	431f      	orrs	r7, r3
 8001cb8:	0c36      	lsrs	r6, r6, #16
 8001cba:	4252      	negs	r2, r2
 8001cbc:	4264      	negs	r4, r4
 8001cbe:	19bf      	adds	r7, r7, r6
 8001cc0:	4322      	orrs	r2, r4
 8001cc2:	18bf      	adds	r7, r7, r2
 8001cc4:	4662      	mov	r2, ip
 8001cc6:	1838      	adds	r0, r7, r0
 8001cc8:	0243      	lsls	r3, r0, #9
 8001cca:	0dd2      	lsrs	r2, r2, #23
 8001ccc:	9903      	ldr	r1, [sp, #12]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	026a      	lsls	r2, r5, #9
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	1e50      	subs	r0, r2, #1
 8001cd6:	4182      	sbcs	r2, r0
 8001cd8:	4661      	mov	r1, ip
 8001cda:	0ded      	lsrs	r5, r5, #23
 8001cdc:	432a      	orrs	r2, r5
 8001cde:	024e      	lsls	r6, r1, #9
 8001ce0:	4332      	orrs	r2, r6
 8001ce2:	01d9      	lsls	r1, r3, #7
 8001ce4:	d400      	bmi.n	8001ce8 <__aeabi_dmul+0x31c>
 8001ce6:	e0b3      	b.n	8001e50 <__aeabi_dmul+0x484>
 8001ce8:	2601      	movs	r6, #1
 8001cea:	0850      	lsrs	r0, r2, #1
 8001cec:	4032      	ands	r2, r6
 8001cee:	4302      	orrs	r2, r0
 8001cf0:	07de      	lsls	r6, r3, #31
 8001cf2:	4332      	orrs	r2, r6
 8001cf4:	085b      	lsrs	r3, r3, #1
 8001cf6:	4c22      	ldr	r4, [pc, #136]	; (8001d80 <__aeabi_dmul+0x3b4>)
 8001cf8:	4454      	add	r4, sl
 8001cfa:	2c00      	cmp	r4, #0
 8001cfc:	dd62      	ble.n	8001dc4 <__aeabi_dmul+0x3f8>
 8001cfe:	0751      	lsls	r1, r2, #29
 8001d00:	d009      	beq.n	8001d16 <__aeabi_dmul+0x34a>
 8001d02:	200f      	movs	r0, #15
 8001d04:	4010      	ands	r0, r2
 8001d06:	2804      	cmp	r0, #4
 8001d08:	d005      	beq.n	8001d16 <__aeabi_dmul+0x34a>
 8001d0a:	1d10      	adds	r0, r2, #4
 8001d0c:	4290      	cmp	r0, r2
 8001d0e:	4192      	sbcs	r2, r2
 8001d10:	4252      	negs	r2, r2
 8001d12:	189b      	adds	r3, r3, r2
 8001d14:	0002      	movs	r2, r0
 8001d16:	01d9      	lsls	r1, r3, #7
 8001d18:	d504      	bpl.n	8001d24 <__aeabi_dmul+0x358>
 8001d1a:	2480      	movs	r4, #128	; 0x80
 8001d1c:	4819      	ldr	r0, [pc, #100]	; (8001d84 <__aeabi_dmul+0x3b8>)
 8001d1e:	00e4      	lsls	r4, r4, #3
 8001d20:	4003      	ands	r3, r0
 8001d22:	4454      	add	r4, sl
 8001d24:	4818      	ldr	r0, [pc, #96]	; (8001d88 <__aeabi_dmul+0x3bc>)
 8001d26:	4284      	cmp	r4, r0
 8001d28:	dd00      	ble.n	8001d2c <__aeabi_dmul+0x360>
 8001d2a:	e727      	b.n	8001b7c <__aeabi_dmul+0x1b0>
 8001d2c:	075e      	lsls	r6, r3, #29
 8001d2e:	025b      	lsls	r3, r3, #9
 8001d30:	08d2      	lsrs	r2, r2, #3
 8001d32:	0b1f      	lsrs	r7, r3, #12
 8001d34:	0563      	lsls	r3, r4, #21
 8001d36:	4316      	orrs	r6, r2
 8001d38:	0d5b      	lsrs	r3, r3, #21
 8001d3a:	e6b2      	b.n	8001aa2 <__aeabi_dmul+0xd6>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	4699      	mov	r9, r3
 8001d40:	3301      	adds	r3, #1
 8001d42:	2704      	movs	r7, #4
 8001d44:	2600      	movs	r6, #0
 8001d46:	469b      	mov	fp, r3
 8001d48:	e664      	b.n	8001a14 <__aeabi_dmul+0x48>
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	9701      	str	r7, [sp, #4]
 8001d4e:	4681      	mov	r9, r0
 8001d50:	270c      	movs	r7, #12
 8001d52:	469b      	mov	fp, r3
 8001d54:	e65e      	b.n	8001a14 <__aeabi_dmul+0x48>
 8001d56:	2201      	movs	r2, #1
 8001d58:	2001      	movs	r0, #1
 8001d5a:	4317      	orrs	r7, r2
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	e676      	b.n	8001a4e <__aeabi_dmul+0x82>
 8001d60:	2303      	movs	r3, #3
 8001d62:	2003      	movs	r0, #3
 8001d64:	431f      	orrs	r7, r3
 8001d66:	4643      	mov	r3, r8
 8001d68:	e671      	b.n	8001a4e <__aeabi_dmul+0x82>
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	000007ff 	.word	0x000007ff
 8001d70:	fffffc01 	.word	0xfffffc01
 8001d74:	08007af0 	.word	0x08007af0
 8001d78:	800fffff 	.word	0x800fffff
 8001d7c:	fffffc0d 	.word	0xfffffc0d
 8001d80:	000003ff 	.word	0x000003ff
 8001d84:	feffffff 	.word	0xfeffffff
 8001d88:	000007fe 	.word	0x000007fe
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	2780      	movs	r7, #128	; 0x80
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	033f      	lsls	r7, r7, #12
 8001d94:	2600      	movs	r6, #0
 8001d96:	4b43      	ldr	r3, [pc, #268]	; (8001ea4 <__aeabi_dmul+0x4d8>)
 8001d98:	e683      	b.n	8001aa2 <__aeabi_dmul+0xd6>
 8001d9a:	9b01      	ldr	r3, [sp, #4]
 8001d9c:	0032      	movs	r2, r6
 8001d9e:	46a4      	mov	ip, r4
 8001da0:	4658      	mov	r0, fp
 8001da2:	e670      	b.n	8001a86 <__aeabi_dmul+0xba>
 8001da4:	46ac      	mov	ip, r5
 8001da6:	e66e      	b.n	8001a86 <__aeabi_dmul+0xba>
 8001da8:	2780      	movs	r7, #128	; 0x80
 8001daa:	9901      	ldr	r1, [sp, #4]
 8001dac:	033f      	lsls	r7, r7, #12
 8001dae:	4239      	tst	r1, r7
 8001db0:	d02d      	beq.n	8001e0e <__aeabi_dmul+0x442>
 8001db2:	423b      	tst	r3, r7
 8001db4:	d12b      	bne.n	8001e0e <__aeabi_dmul+0x442>
 8001db6:	431f      	orrs	r7, r3
 8001db8:	033f      	lsls	r7, r7, #12
 8001dba:	0b3f      	lsrs	r7, r7, #12
 8001dbc:	9500      	str	r5, [sp, #0]
 8001dbe:	0016      	movs	r6, r2
 8001dc0:	4b38      	ldr	r3, [pc, #224]	; (8001ea4 <__aeabi_dmul+0x4d8>)
 8001dc2:	e66e      	b.n	8001aa2 <__aeabi_dmul+0xd6>
 8001dc4:	2501      	movs	r5, #1
 8001dc6:	1b2d      	subs	r5, r5, r4
 8001dc8:	2d38      	cmp	r5, #56	; 0x38
 8001dca:	dd00      	ble.n	8001dce <__aeabi_dmul+0x402>
 8001dcc:	e666      	b.n	8001a9c <__aeabi_dmul+0xd0>
 8001dce:	2d1f      	cmp	r5, #31
 8001dd0:	dc40      	bgt.n	8001e54 <__aeabi_dmul+0x488>
 8001dd2:	4835      	ldr	r0, [pc, #212]	; (8001ea8 <__aeabi_dmul+0x4dc>)
 8001dd4:	001c      	movs	r4, r3
 8001dd6:	4450      	add	r0, sl
 8001dd8:	0016      	movs	r6, r2
 8001dda:	4082      	lsls	r2, r0
 8001ddc:	4084      	lsls	r4, r0
 8001dde:	40ee      	lsrs	r6, r5
 8001de0:	1e50      	subs	r0, r2, #1
 8001de2:	4182      	sbcs	r2, r0
 8001de4:	4334      	orrs	r4, r6
 8001de6:	4314      	orrs	r4, r2
 8001de8:	40eb      	lsrs	r3, r5
 8001dea:	0762      	lsls	r2, r4, #29
 8001dec:	d009      	beq.n	8001e02 <__aeabi_dmul+0x436>
 8001dee:	220f      	movs	r2, #15
 8001df0:	4022      	ands	r2, r4
 8001df2:	2a04      	cmp	r2, #4
 8001df4:	d005      	beq.n	8001e02 <__aeabi_dmul+0x436>
 8001df6:	0022      	movs	r2, r4
 8001df8:	1d14      	adds	r4, r2, #4
 8001dfa:	4294      	cmp	r4, r2
 8001dfc:	4180      	sbcs	r0, r0
 8001dfe:	4240      	negs	r0, r0
 8001e00:	181b      	adds	r3, r3, r0
 8001e02:	021a      	lsls	r2, r3, #8
 8001e04:	d53e      	bpl.n	8001e84 <__aeabi_dmul+0x4b8>
 8001e06:	2301      	movs	r3, #1
 8001e08:	2700      	movs	r7, #0
 8001e0a:	2600      	movs	r6, #0
 8001e0c:	e649      	b.n	8001aa2 <__aeabi_dmul+0xd6>
 8001e0e:	2780      	movs	r7, #128	; 0x80
 8001e10:	9b01      	ldr	r3, [sp, #4]
 8001e12:	033f      	lsls	r7, r7, #12
 8001e14:	431f      	orrs	r7, r3
 8001e16:	033f      	lsls	r7, r7, #12
 8001e18:	0b3f      	lsrs	r7, r7, #12
 8001e1a:	9400      	str	r4, [sp, #0]
 8001e1c:	4b21      	ldr	r3, [pc, #132]	; (8001ea4 <__aeabi_dmul+0x4d8>)
 8001e1e:	e640      	b.n	8001aa2 <__aeabi_dmul+0xd6>
 8001e20:	0003      	movs	r3, r0
 8001e22:	465a      	mov	r2, fp
 8001e24:	3b28      	subs	r3, #40	; 0x28
 8001e26:	409a      	lsls	r2, r3
 8001e28:	2600      	movs	r6, #0
 8001e2a:	9201      	str	r2, [sp, #4]
 8001e2c:	e66d      	b.n	8001b0a <__aeabi_dmul+0x13e>
 8001e2e:	4658      	mov	r0, fp
 8001e30:	f000 fccc 	bl	80027cc <__clzsi2>
 8001e34:	3020      	adds	r0, #32
 8001e36:	e657      	b.n	8001ae8 <__aeabi_dmul+0x11c>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	4652      	mov	r2, sl
 8001e3c:	3b28      	subs	r3, #40	; 0x28
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	0013      	movs	r3, r2
 8001e42:	2200      	movs	r2, #0
 8001e44:	e693      	b.n	8001b6e <__aeabi_dmul+0x1a2>
 8001e46:	4650      	mov	r0, sl
 8001e48:	f000 fcc0 	bl	80027cc <__clzsi2>
 8001e4c:	3020      	adds	r0, #32
 8001e4e:	e67b      	b.n	8001b48 <__aeabi_dmul+0x17c>
 8001e50:	46ca      	mov	sl, r9
 8001e52:	e750      	b.n	8001cf6 <__aeabi_dmul+0x32a>
 8001e54:	201f      	movs	r0, #31
 8001e56:	001e      	movs	r6, r3
 8001e58:	4240      	negs	r0, r0
 8001e5a:	1b04      	subs	r4, r0, r4
 8001e5c:	40e6      	lsrs	r6, r4
 8001e5e:	2d20      	cmp	r5, #32
 8001e60:	d003      	beq.n	8001e6a <__aeabi_dmul+0x49e>
 8001e62:	4c12      	ldr	r4, [pc, #72]	; (8001eac <__aeabi_dmul+0x4e0>)
 8001e64:	4454      	add	r4, sl
 8001e66:	40a3      	lsls	r3, r4
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	1e50      	subs	r0, r2, #1
 8001e6c:	4182      	sbcs	r2, r0
 8001e6e:	4332      	orrs	r2, r6
 8001e70:	2607      	movs	r6, #7
 8001e72:	2700      	movs	r7, #0
 8001e74:	4016      	ands	r6, r2
 8001e76:	d009      	beq.n	8001e8c <__aeabi_dmul+0x4c0>
 8001e78:	200f      	movs	r0, #15
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	4010      	ands	r0, r2
 8001e7e:	0014      	movs	r4, r2
 8001e80:	2804      	cmp	r0, #4
 8001e82:	d1b9      	bne.n	8001df8 <__aeabi_dmul+0x42c>
 8001e84:	0022      	movs	r2, r4
 8001e86:	075e      	lsls	r6, r3, #29
 8001e88:	025b      	lsls	r3, r3, #9
 8001e8a:	0b1f      	lsrs	r7, r3, #12
 8001e8c:	08d2      	lsrs	r2, r2, #3
 8001e8e:	4316      	orrs	r6, r2
 8001e90:	2300      	movs	r3, #0
 8001e92:	e606      	b.n	8001aa2 <__aeabi_dmul+0xd6>
 8001e94:	2780      	movs	r7, #128	; 0x80
 8001e96:	033f      	lsls	r7, r7, #12
 8001e98:	431f      	orrs	r7, r3
 8001e9a:	033f      	lsls	r7, r7, #12
 8001e9c:	0b3f      	lsrs	r7, r7, #12
 8001e9e:	0016      	movs	r6, r2
 8001ea0:	4b00      	ldr	r3, [pc, #0]	; (8001ea4 <__aeabi_dmul+0x4d8>)
 8001ea2:	e5fe      	b.n	8001aa2 <__aeabi_dmul+0xd6>
 8001ea4:	000007ff 	.word	0x000007ff
 8001ea8:	0000041e 	.word	0x0000041e
 8001eac:	0000043e 	.word	0x0000043e

08001eb0 <__aeabi_dsub>:
 8001eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb2:	4657      	mov	r7, sl
 8001eb4:	464e      	mov	r6, r9
 8001eb6:	4645      	mov	r5, r8
 8001eb8:	46de      	mov	lr, fp
 8001eba:	000c      	movs	r4, r1
 8001ebc:	0309      	lsls	r1, r1, #12
 8001ebe:	b5e0      	push	{r5, r6, r7, lr}
 8001ec0:	0a49      	lsrs	r1, r1, #9
 8001ec2:	0f46      	lsrs	r6, r0, #29
 8001ec4:	005f      	lsls	r7, r3, #1
 8001ec6:	4331      	orrs	r1, r6
 8001ec8:	031e      	lsls	r6, r3, #12
 8001eca:	0fdb      	lsrs	r3, r3, #31
 8001ecc:	0a76      	lsrs	r6, r6, #9
 8001ece:	469b      	mov	fp, r3
 8001ed0:	0f53      	lsrs	r3, r2, #29
 8001ed2:	4333      	orrs	r3, r6
 8001ed4:	4ec8      	ldr	r6, [pc, #800]	; (80021f8 <__aeabi_dsub+0x348>)
 8001ed6:	0065      	lsls	r5, r4, #1
 8001ed8:	00c0      	lsls	r0, r0, #3
 8001eda:	0fe4      	lsrs	r4, r4, #31
 8001edc:	00d2      	lsls	r2, r2, #3
 8001ede:	0d6d      	lsrs	r5, r5, #21
 8001ee0:	46a2      	mov	sl, r4
 8001ee2:	4681      	mov	r9, r0
 8001ee4:	0d7f      	lsrs	r7, r7, #21
 8001ee6:	469c      	mov	ip, r3
 8001ee8:	4690      	mov	r8, r2
 8001eea:	42b7      	cmp	r7, r6
 8001eec:	d100      	bne.n	8001ef0 <__aeabi_dsub+0x40>
 8001eee:	e0b9      	b.n	8002064 <__aeabi_dsub+0x1b4>
 8001ef0:	465b      	mov	r3, fp
 8001ef2:	2601      	movs	r6, #1
 8001ef4:	4073      	eors	r3, r6
 8001ef6:	469b      	mov	fp, r3
 8001ef8:	1bee      	subs	r6, r5, r7
 8001efa:	45a3      	cmp	fp, r4
 8001efc:	d100      	bne.n	8001f00 <__aeabi_dsub+0x50>
 8001efe:	e083      	b.n	8002008 <__aeabi_dsub+0x158>
 8001f00:	2e00      	cmp	r6, #0
 8001f02:	dd63      	ble.n	8001fcc <__aeabi_dsub+0x11c>
 8001f04:	2f00      	cmp	r7, #0
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x5a>
 8001f08:	e0b1      	b.n	800206e <__aeabi_dsub+0x1be>
 8001f0a:	4663      	mov	r3, ip
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	d100      	bne.n	8001f12 <__aeabi_dsub+0x62>
 8001f10:	e123      	b.n	800215a <__aeabi_dsub+0x2aa>
 8001f12:	1e73      	subs	r3, r6, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d000      	beq.n	8001f1a <__aeabi_dsub+0x6a>
 8001f18:	e1ba      	b.n	8002290 <__aeabi_dsub+0x3e0>
 8001f1a:	1a86      	subs	r6, r0, r2
 8001f1c:	4663      	mov	r3, ip
 8001f1e:	42b0      	cmp	r0, r6
 8001f20:	4180      	sbcs	r0, r0
 8001f22:	2501      	movs	r5, #1
 8001f24:	1ac9      	subs	r1, r1, r3
 8001f26:	4240      	negs	r0, r0
 8001f28:	1a09      	subs	r1, r1, r0
 8001f2a:	020b      	lsls	r3, r1, #8
 8001f2c:	d400      	bmi.n	8001f30 <__aeabi_dsub+0x80>
 8001f2e:	e147      	b.n	80021c0 <__aeabi_dsub+0x310>
 8001f30:	0249      	lsls	r1, r1, #9
 8001f32:	0a4b      	lsrs	r3, r1, #9
 8001f34:	4698      	mov	r8, r3
 8001f36:	4643      	mov	r3, r8
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d100      	bne.n	8001f3e <__aeabi_dsub+0x8e>
 8001f3c:	e189      	b.n	8002252 <__aeabi_dsub+0x3a2>
 8001f3e:	4640      	mov	r0, r8
 8001f40:	f000 fc44 	bl	80027cc <__clzsi2>
 8001f44:	0003      	movs	r3, r0
 8001f46:	3b08      	subs	r3, #8
 8001f48:	2b1f      	cmp	r3, #31
 8001f4a:	dd00      	ble.n	8001f4e <__aeabi_dsub+0x9e>
 8001f4c:	e17c      	b.n	8002248 <__aeabi_dsub+0x398>
 8001f4e:	2220      	movs	r2, #32
 8001f50:	0030      	movs	r0, r6
 8001f52:	1ad2      	subs	r2, r2, r3
 8001f54:	4641      	mov	r1, r8
 8001f56:	40d0      	lsrs	r0, r2
 8001f58:	4099      	lsls	r1, r3
 8001f5a:	0002      	movs	r2, r0
 8001f5c:	409e      	lsls	r6, r3
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	429d      	cmp	r5, r3
 8001f62:	dd00      	ble.n	8001f66 <__aeabi_dsub+0xb6>
 8001f64:	e16a      	b.n	800223c <__aeabi_dsub+0x38c>
 8001f66:	1b5d      	subs	r5, r3, r5
 8001f68:	1c6b      	adds	r3, r5, #1
 8001f6a:	2b1f      	cmp	r3, #31
 8001f6c:	dd00      	ble.n	8001f70 <__aeabi_dsub+0xc0>
 8001f6e:	e194      	b.n	800229a <__aeabi_dsub+0x3ea>
 8001f70:	2120      	movs	r1, #32
 8001f72:	0010      	movs	r0, r2
 8001f74:	0035      	movs	r5, r6
 8001f76:	1ac9      	subs	r1, r1, r3
 8001f78:	408e      	lsls	r6, r1
 8001f7a:	40da      	lsrs	r2, r3
 8001f7c:	4088      	lsls	r0, r1
 8001f7e:	40dd      	lsrs	r5, r3
 8001f80:	1e71      	subs	r1, r6, #1
 8001f82:	418e      	sbcs	r6, r1
 8001f84:	0011      	movs	r1, r2
 8001f86:	2207      	movs	r2, #7
 8001f88:	4328      	orrs	r0, r5
 8001f8a:	2500      	movs	r5, #0
 8001f8c:	4306      	orrs	r6, r0
 8001f8e:	4032      	ands	r2, r6
 8001f90:	2a00      	cmp	r2, #0
 8001f92:	d009      	beq.n	8001fa8 <__aeabi_dsub+0xf8>
 8001f94:	230f      	movs	r3, #15
 8001f96:	4033      	ands	r3, r6
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d005      	beq.n	8001fa8 <__aeabi_dsub+0xf8>
 8001f9c:	1d33      	adds	r3, r6, #4
 8001f9e:	42b3      	cmp	r3, r6
 8001fa0:	41b6      	sbcs	r6, r6
 8001fa2:	4276      	negs	r6, r6
 8001fa4:	1989      	adds	r1, r1, r6
 8001fa6:	001e      	movs	r6, r3
 8001fa8:	020b      	lsls	r3, r1, #8
 8001faa:	d400      	bmi.n	8001fae <__aeabi_dsub+0xfe>
 8001fac:	e23d      	b.n	800242a <__aeabi_dsub+0x57a>
 8001fae:	1c6a      	adds	r2, r5, #1
 8001fb0:	4b91      	ldr	r3, [pc, #580]	; (80021f8 <__aeabi_dsub+0x348>)
 8001fb2:	0555      	lsls	r5, r2, #21
 8001fb4:	0d6d      	lsrs	r5, r5, #21
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d100      	bne.n	8001fbc <__aeabi_dsub+0x10c>
 8001fba:	e119      	b.n	80021f0 <__aeabi_dsub+0x340>
 8001fbc:	4a8f      	ldr	r2, [pc, #572]	; (80021fc <__aeabi_dsub+0x34c>)
 8001fbe:	08f6      	lsrs	r6, r6, #3
 8001fc0:	400a      	ands	r2, r1
 8001fc2:	0757      	lsls	r7, r2, #29
 8001fc4:	0252      	lsls	r2, r2, #9
 8001fc6:	4337      	orrs	r7, r6
 8001fc8:	0b12      	lsrs	r2, r2, #12
 8001fca:	e09b      	b.n	8002104 <__aeabi_dsub+0x254>
 8001fcc:	2e00      	cmp	r6, #0
 8001fce:	d000      	beq.n	8001fd2 <__aeabi_dsub+0x122>
 8001fd0:	e0c5      	b.n	800215e <__aeabi_dsub+0x2ae>
 8001fd2:	1c6e      	adds	r6, r5, #1
 8001fd4:	0576      	lsls	r6, r6, #21
 8001fd6:	0d76      	lsrs	r6, r6, #21
 8001fd8:	2e01      	cmp	r6, #1
 8001fda:	dc00      	bgt.n	8001fde <__aeabi_dsub+0x12e>
 8001fdc:	e148      	b.n	8002270 <__aeabi_dsub+0x3c0>
 8001fde:	4667      	mov	r7, ip
 8001fe0:	1a86      	subs	r6, r0, r2
 8001fe2:	1bcb      	subs	r3, r1, r7
 8001fe4:	42b0      	cmp	r0, r6
 8001fe6:	41bf      	sbcs	r7, r7
 8001fe8:	427f      	negs	r7, r7
 8001fea:	46b8      	mov	r8, r7
 8001fec:	001f      	movs	r7, r3
 8001fee:	4643      	mov	r3, r8
 8001ff0:	1aff      	subs	r7, r7, r3
 8001ff2:	003b      	movs	r3, r7
 8001ff4:	46b8      	mov	r8, r7
 8001ff6:	021b      	lsls	r3, r3, #8
 8001ff8:	d500      	bpl.n	8001ffc <__aeabi_dsub+0x14c>
 8001ffa:	e15f      	b.n	80022bc <__aeabi_dsub+0x40c>
 8001ffc:	4337      	orrs	r7, r6
 8001ffe:	d19a      	bne.n	8001f36 <__aeabi_dsub+0x86>
 8002000:	2200      	movs	r2, #0
 8002002:	2400      	movs	r4, #0
 8002004:	2500      	movs	r5, #0
 8002006:	e079      	b.n	80020fc <__aeabi_dsub+0x24c>
 8002008:	2e00      	cmp	r6, #0
 800200a:	dc00      	bgt.n	800200e <__aeabi_dsub+0x15e>
 800200c:	e0fa      	b.n	8002204 <__aeabi_dsub+0x354>
 800200e:	2f00      	cmp	r7, #0
 8002010:	d100      	bne.n	8002014 <__aeabi_dsub+0x164>
 8002012:	e08d      	b.n	8002130 <__aeabi_dsub+0x280>
 8002014:	4b78      	ldr	r3, [pc, #480]	; (80021f8 <__aeabi_dsub+0x348>)
 8002016:	429d      	cmp	r5, r3
 8002018:	d067      	beq.n	80020ea <__aeabi_dsub+0x23a>
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	4667      	mov	r7, ip
 800201e:	041b      	lsls	r3, r3, #16
 8002020:	431f      	orrs	r7, r3
 8002022:	46bc      	mov	ip, r7
 8002024:	2e38      	cmp	r6, #56	; 0x38
 8002026:	dc00      	bgt.n	800202a <__aeabi_dsub+0x17a>
 8002028:	e152      	b.n	80022d0 <__aeabi_dsub+0x420>
 800202a:	4663      	mov	r3, ip
 800202c:	4313      	orrs	r3, r2
 800202e:	1e5a      	subs	r2, r3, #1
 8002030:	4193      	sbcs	r3, r2
 8002032:	181e      	adds	r6, r3, r0
 8002034:	4286      	cmp	r6, r0
 8002036:	4180      	sbcs	r0, r0
 8002038:	4240      	negs	r0, r0
 800203a:	1809      	adds	r1, r1, r0
 800203c:	020b      	lsls	r3, r1, #8
 800203e:	d400      	bmi.n	8002042 <__aeabi_dsub+0x192>
 8002040:	e0be      	b.n	80021c0 <__aeabi_dsub+0x310>
 8002042:	4b6d      	ldr	r3, [pc, #436]	; (80021f8 <__aeabi_dsub+0x348>)
 8002044:	3501      	adds	r5, #1
 8002046:	429d      	cmp	r5, r3
 8002048:	d100      	bne.n	800204c <__aeabi_dsub+0x19c>
 800204a:	e0d2      	b.n	80021f2 <__aeabi_dsub+0x342>
 800204c:	4a6b      	ldr	r2, [pc, #428]	; (80021fc <__aeabi_dsub+0x34c>)
 800204e:	0873      	lsrs	r3, r6, #1
 8002050:	400a      	ands	r2, r1
 8002052:	2101      	movs	r1, #1
 8002054:	400e      	ands	r6, r1
 8002056:	431e      	orrs	r6, r3
 8002058:	0851      	lsrs	r1, r2, #1
 800205a:	07d3      	lsls	r3, r2, #31
 800205c:	2207      	movs	r2, #7
 800205e:	431e      	orrs	r6, r3
 8002060:	4032      	ands	r2, r6
 8002062:	e795      	b.n	8001f90 <__aeabi_dsub+0xe0>
 8002064:	001e      	movs	r6, r3
 8002066:	4316      	orrs	r6, r2
 8002068:	d000      	beq.n	800206c <__aeabi_dsub+0x1bc>
 800206a:	e745      	b.n	8001ef8 <__aeabi_dsub+0x48>
 800206c:	e740      	b.n	8001ef0 <__aeabi_dsub+0x40>
 800206e:	4b62      	ldr	r3, [pc, #392]	; (80021f8 <__aeabi_dsub+0x348>)
 8002070:	429d      	cmp	r5, r3
 8002072:	d03a      	beq.n	80020ea <__aeabi_dsub+0x23a>
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	4667      	mov	r7, ip
 8002078:	041b      	lsls	r3, r3, #16
 800207a:	431f      	orrs	r7, r3
 800207c:	46bc      	mov	ip, r7
 800207e:	2e38      	cmp	r6, #56	; 0x38
 8002080:	dd00      	ble.n	8002084 <__aeabi_dsub+0x1d4>
 8002082:	e0eb      	b.n	800225c <__aeabi_dsub+0x3ac>
 8002084:	2e1f      	cmp	r6, #31
 8002086:	dc00      	bgt.n	800208a <__aeabi_dsub+0x1da>
 8002088:	e13a      	b.n	8002300 <__aeabi_dsub+0x450>
 800208a:	0033      	movs	r3, r6
 800208c:	4667      	mov	r7, ip
 800208e:	3b20      	subs	r3, #32
 8002090:	40df      	lsrs	r7, r3
 8002092:	003b      	movs	r3, r7
 8002094:	2e20      	cmp	r6, #32
 8002096:	d005      	beq.n	80020a4 <__aeabi_dsub+0x1f4>
 8002098:	2740      	movs	r7, #64	; 0x40
 800209a:	1bbf      	subs	r7, r7, r6
 800209c:	4666      	mov	r6, ip
 800209e:	40be      	lsls	r6, r7
 80020a0:	4332      	orrs	r2, r6
 80020a2:	4690      	mov	r8, r2
 80020a4:	4646      	mov	r6, r8
 80020a6:	1e72      	subs	r2, r6, #1
 80020a8:	4196      	sbcs	r6, r2
 80020aa:	4333      	orrs	r3, r6
 80020ac:	e0da      	b.n	8002264 <__aeabi_dsub+0x3b4>
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d100      	bne.n	80020b4 <__aeabi_dsub+0x204>
 80020b2:	e214      	b.n	80024de <__aeabi_dsub+0x62e>
 80020b4:	4663      	mov	r3, ip
 80020b6:	4313      	orrs	r3, r2
 80020b8:	d100      	bne.n	80020bc <__aeabi_dsub+0x20c>
 80020ba:	e168      	b.n	800238e <__aeabi_dsub+0x4de>
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	074e      	lsls	r6, r1, #29
 80020c0:	08c0      	lsrs	r0, r0, #3
 80020c2:	08c9      	lsrs	r1, r1, #3
 80020c4:	031b      	lsls	r3, r3, #12
 80020c6:	4306      	orrs	r6, r0
 80020c8:	4219      	tst	r1, r3
 80020ca:	d008      	beq.n	80020de <__aeabi_dsub+0x22e>
 80020cc:	4660      	mov	r0, ip
 80020ce:	08c0      	lsrs	r0, r0, #3
 80020d0:	4218      	tst	r0, r3
 80020d2:	d104      	bne.n	80020de <__aeabi_dsub+0x22e>
 80020d4:	4663      	mov	r3, ip
 80020d6:	0001      	movs	r1, r0
 80020d8:	08d2      	lsrs	r2, r2, #3
 80020da:	075e      	lsls	r6, r3, #29
 80020dc:	4316      	orrs	r6, r2
 80020de:	00f3      	lsls	r3, r6, #3
 80020e0:	4699      	mov	r9, r3
 80020e2:	00c9      	lsls	r1, r1, #3
 80020e4:	0f72      	lsrs	r2, r6, #29
 80020e6:	4d44      	ldr	r5, [pc, #272]	; (80021f8 <__aeabi_dsub+0x348>)
 80020e8:	4311      	orrs	r1, r2
 80020ea:	464b      	mov	r3, r9
 80020ec:	08de      	lsrs	r6, r3, #3
 80020ee:	4b42      	ldr	r3, [pc, #264]	; (80021f8 <__aeabi_dsub+0x348>)
 80020f0:	074f      	lsls	r7, r1, #29
 80020f2:	4337      	orrs	r7, r6
 80020f4:	08ca      	lsrs	r2, r1, #3
 80020f6:	429d      	cmp	r5, r3
 80020f8:	d100      	bne.n	80020fc <__aeabi_dsub+0x24c>
 80020fa:	e06e      	b.n	80021da <__aeabi_dsub+0x32a>
 80020fc:	0312      	lsls	r2, r2, #12
 80020fe:	056d      	lsls	r5, r5, #21
 8002100:	0b12      	lsrs	r2, r2, #12
 8002102:	0d6d      	lsrs	r5, r5, #21
 8002104:	2100      	movs	r1, #0
 8002106:	0312      	lsls	r2, r2, #12
 8002108:	0b13      	lsrs	r3, r2, #12
 800210a:	0d0a      	lsrs	r2, r1, #20
 800210c:	0512      	lsls	r2, r2, #20
 800210e:	431a      	orrs	r2, r3
 8002110:	4b3b      	ldr	r3, [pc, #236]	; (8002200 <__aeabi_dsub+0x350>)
 8002112:	052d      	lsls	r5, r5, #20
 8002114:	4013      	ands	r3, r2
 8002116:	432b      	orrs	r3, r5
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	07e4      	lsls	r4, r4, #31
 800211c:	085b      	lsrs	r3, r3, #1
 800211e:	4323      	orrs	r3, r4
 8002120:	0038      	movs	r0, r7
 8002122:	0019      	movs	r1, r3
 8002124:	bc3c      	pop	{r2, r3, r4, r5}
 8002126:	4690      	mov	r8, r2
 8002128:	4699      	mov	r9, r3
 800212a:	46a2      	mov	sl, r4
 800212c:	46ab      	mov	fp, r5
 800212e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002130:	4663      	mov	r3, ip
 8002132:	4313      	orrs	r3, r2
 8002134:	d011      	beq.n	800215a <__aeabi_dsub+0x2aa>
 8002136:	1e73      	subs	r3, r6, #1
 8002138:	2b00      	cmp	r3, #0
 800213a:	d000      	beq.n	800213e <__aeabi_dsub+0x28e>
 800213c:	e107      	b.n	800234e <__aeabi_dsub+0x49e>
 800213e:	1886      	adds	r6, r0, r2
 8002140:	4286      	cmp	r6, r0
 8002142:	4180      	sbcs	r0, r0
 8002144:	4461      	add	r1, ip
 8002146:	4240      	negs	r0, r0
 8002148:	1809      	adds	r1, r1, r0
 800214a:	2501      	movs	r5, #1
 800214c:	020b      	lsls	r3, r1, #8
 800214e:	d537      	bpl.n	80021c0 <__aeabi_dsub+0x310>
 8002150:	2502      	movs	r5, #2
 8002152:	e77b      	b.n	800204c <__aeabi_dsub+0x19c>
 8002154:	003e      	movs	r6, r7
 8002156:	4661      	mov	r1, ip
 8002158:	4691      	mov	r9, r2
 800215a:	0035      	movs	r5, r6
 800215c:	e7c5      	b.n	80020ea <__aeabi_dsub+0x23a>
 800215e:	465c      	mov	r4, fp
 8002160:	2d00      	cmp	r5, #0
 8002162:	d000      	beq.n	8002166 <__aeabi_dsub+0x2b6>
 8002164:	e0e1      	b.n	800232a <__aeabi_dsub+0x47a>
 8002166:	000b      	movs	r3, r1
 8002168:	4303      	orrs	r3, r0
 800216a:	d0f3      	beq.n	8002154 <__aeabi_dsub+0x2a4>
 800216c:	1c73      	adds	r3, r6, #1
 800216e:	d100      	bne.n	8002172 <__aeabi_dsub+0x2c2>
 8002170:	e1ac      	b.n	80024cc <__aeabi_dsub+0x61c>
 8002172:	4b21      	ldr	r3, [pc, #132]	; (80021f8 <__aeabi_dsub+0x348>)
 8002174:	429f      	cmp	r7, r3
 8002176:	d100      	bne.n	800217a <__aeabi_dsub+0x2ca>
 8002178:	e13a      	b.n	80023f0 <__aeabi_dsub+0x540>
 800217a:	43f3      	mvns	r3, r6
 800217c:	2b38      	cmp	r3, #56	; 0x38
 800217e:	dd00      	ble.n	8002182 <__aeabi_dsub+0x2d2>
 8002180:	e16f      	b.n	8002462 <__aeabi_dsub+0x5b2>
 8002182:	2b1f      	cmp	r3, #31
 8002184:	dd00      	ble.n	8002188 <__aeabi_dsub+0x2d8>
 8002186:	e18c      	b.n	80024a2 <__aeabi_dsub+0x5f2>
 8002188:	2520      	movs	r5, #32
 800218a:	000e      	movs	r6, r1
 800218c:	1aed      	subs	r5, r5, r3
 800218e:	40ae      	lsls	r6, r5
 8002190:	46b0      	mov	r8, r6
 8002192:	0006      	movs	r6, r0
 8002194:	46aa      	mov	sl, r5
 8002196:	40de      	lsrs	r6, r3
 8002198:	4645      	mov	r5, r8
 800219a:	4335      	orrs	r5, r6
 800219c:	002e      	movs	r6, r5
 800219e:	4655      	mov	r5, sl
 80021a0:	40d9      	lsrs	r1, r3
 80021a2:	40a8      	lsls	r0, r5
 80021a4:	4663      	mov	r3, ip
 80021a6:	1e45      	subs	r5, r0, #1
 80021a8:	41a8      	sbcs	r0, r5
 80021aa:	1a5b      	subs	r3, r3, r1
 80021ac:	469c      	mov	ip, r3
 80021ae:	4330      	orrs	r0, r6
 80021b0:	1a16      	subs	r6, r2, r0
 80021b2:	42b2      	cmp	r2, r6
 80021b4:	4192      	sbcs	r2, r2
 80021b6:	4663      	mov	r3, ip
 80021b8:	4252      	negs	r2, r2
 80021ba:	1a99      	subs	r1, r3, r2
 80021bc:	003d      	movs	r5, r7
 80021be:	e6b4      	b.n	8001f2a <__aeabi_dsub+0x7a>
 80021c0:	2207      	movs	r2, #7
 80021c2:	4032      	ands	r2, r6
 80021c4:	2a00      	cmp	r2, #0
 80021c6:	d000      	beq.n	80021ca <__aeabi_dsub+0x31a>
 80021c8:	e6e4      	b.n	8001f94 <__aeabi_dsub+0xe4>
 80021ca:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <__aeabi_dsub+0x348>)
 80021cc:	08f6      	lsrs	r6, r6, #3
 80021ce:	074f      	lsls	r7, r1, #29
 80021d0:	4337      	orrs	r7, r6
 80021d2:	08ca      	lsrs	r2, r1, #3
 80021d4:	429d      	cmp	r5, r3
 80021d6:	d000      	beq.n	80021da <__aeabi_dsub+0x32a>
 80021d8:	e790      	b.n	80020fc <__aeabi_dsub+0x24c>
 80021da:	003b      	movs	r3, r7
 80021dc:	4313      	orrs	r3, r2
 80021de:	d100      	bne.n	80021e2 <__aeabi_dsub+0x332>
 80021e0:	e1a6      	b.n	8002530 <__aeabi_dsub+0x680>
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	031b      	lsls	r3, r3, #12
 80021e6:	431a      	orrs	r2, r3
 80021e8:	0312      	lsls	r2, r2, #12
 80021ea:	0b12      	lsrs	r2, r2, #12
 80021ec:	4d02      	ldr	r5, [pc, #8]	; (80021f8 <__aeabi_dsub+0x348>)
 80021ee:	e789      	b.n	8002104 <__aeabi_dsub+0x254>
 80021f0:	0015      	movs	r5, r2
 80021f2:	2200      	movs	r2, #0
 80021f4:	2700      	movs	r7, #0
 80021f6:	e785      	b.n	8002104 <__aeabi_dsub+0x254>
 80021f8:	000007ff 	.word	0x000007ff
 80021fc:	ff7fffff 	.word	0xff7fffff
 8002200:	800fffff 	.word	0x800fffff
 8002204:	2e00      	cmp	r6, #0
 8002206:	d000      	beq.n	800220a <__aeabi_dsub+0x35a>
 8002208:	e0c7      	b.n	800239a <__aeabi_dsub+0x4ea>
 800220a:	1c6b      	adds	r3, r5, #1
 800220c:	055e      	lsls	r6, r3, #21
 800220e:	0d76      	lsrs	r6, r6, #21
 8002210:	2e01      	cmp	r6, #1
 8002212:	dc00      	bgt.n	8002216 <__aeabi_dsub+0x366>
 8002214:	e0f0      	b.n	80023f8 <__aeabi_dsub+0x548>
 8002216:	4dc8      	ldr	r5, [pc, #800]	; (8002538 <__aeabi_dsub+0x688>)
 8002218:	42ab      	cmp	r3, r5
 800221a:	d100      	bne.n	800221e <__aeabi_dsub+0x36e>
 800221c:	e0b9      	b.n	8002392 <__aeabi_dsub+0x4e2>
 800221e:	1885      	adds	r5, r0, r2
 8002220:	000a      	movs	r2, r1
 8002222:	4285      	cmp	r5, r0
 8002224:	4189      	sbcs	r1, r1
 8002226:	4462      	add	r2, ip
 8002228:	4249      	negs	r1, r1
 800222a:	1851      	adds	r1, r2, r1
 800222c:	2207      	movs	r2, #7
 800222e:	07ce      	lsls	r6, r1, #31
 8002230:	086d      	lsrs	r5, r5, #1
 8002232:	432e      	orrs	r6, r5
 8002234:	0849      	lsrs	r1, r1, #1
 8002236:	4032      	ands	r2, r6
 8002238:	001d      	movs	r5, r3
 800223a:	e6a9      	b.n	8001f90 <__aeabi_dsub+0xe0>
 800223c:	49bf      	ldr	r1, [pc, #764]	; (800253c <__aeabi_dsub+0x68c>)
 800223e:	1aed      	subs	r5, r5, r3
 8002240:	4011      	ands	r1, r2
 8002242:	2207      	movs	r2, #7
 8002244:	4032      	ands	r2, r6
 8002246:	e6a3      	b.n	8001f90 <__aeabi_dsub+0xe0>
 8002248:	0032      	movs	r2, r6
 800224a:	3828      	subs	r0, #40	; 0x28
 800224c:	4082      	lsls	r2, r0
 800224e:	2600      	movs	r6, #0
 8002250:	e686      	b.n	8001f60 <__aeabi_dsub+0xb0>
 8002252:	0030      	movs	r0, r6
 8002254:	f000 faba 	bl	80027cc <__clzsi2>
 8002258:	3020      	adds	r0, #32
 800225a:	e673      	b.n	8001f44 <__aeabi_dsub+0x94>
 800225c:	4663      	mov	r3, ip
 800225e:	4313      	orrs	r3, r2
 8002260:	1e5a      	subs	r2, r3, #1
 8002262:	4193      	sbcs	r3, r2
 8002264:	1ac6      	subs	r6, r0, r3
 8002266:	42b0      	cmp	r0, r6
 8002268:	4180      	sbcs	r0, r0
 800226a:	4240      	negs	r0, r0
 800226c:	1a09      	subs	r1, r1, r0
 800226e:	e65c      	b.n	8001f2a <__aeabi_dsub+0x7a>
 8002270:	000e      	movs	r6, r1
 8002272:	4667      	mov	r7, ip
 8002274:	4306      	orrs	r6, r0
 8002276:	4317      	orrs	r7, r2
 8002278:	2d00      	cmp	r5, #0
 800227a:	d15e      	bne.n	800233a <__aeabi_dsub+0x48a>
 800227c:	2e00      	cmp	r6, #0
 800227e:	d000      	beq.n	8002282 <__aeabi_dsub+0x3d2>
 8002280:	e0f3      	b.n	800246a <__aeabi_dsub+0x5ba>
 8002282:	2f00      	cmp	r7, #0
 8002284:	d100      	bne.n	8002288 <__aeabi_dsub+0x3d8>
 8002286:	e11e      	b.n	80024c6 <__aeabi_dsub+0x616>
 8002288:	465c      	mov	r4, fp
 800228a:	4661      	mov	r1, ip
 800228c:	4691      	mov	r9, r2
 800228e:	e72c      	b.n	80020ea <__aeabi_dsub+0x23a>
 8002290:	4fa9      	ldr	r7, [pc, #676]	; (8002538 <__aeabi_dsub+0x688>)
 8002292:	42be      	cmp	r6, r7
 8002294:	d07b      	beq.n	800238e <__aeabi_dsub+0x4de>
 8002296:	001e      	movs	r6, r3
 8002298:	e6f1      	b.n	800207e <__aeabi_dsub+0x1ce>
 800229a:	0010      	movs	r0, r2
 800229c:	3d1f      	subs	r5, #31
 800229e:	40e8      	lsrs	r0, r5
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	d003      	beq.n	80022ac <__aeabi_dsub+0x3fc>
 80022a4:	2140      	movs	r1, #64	; 0x40
 80022a6:	1acb      	subs	r3, r1, r3
 80022a8:	409a      	lsls	r2, r3
 80022aa:	4316      	orrs	r6, r2
 80022ac:	1e73      	subs	r3, r6, #1
 80022ae:	419e      	sbcs	r6, r3
 80022b0:	2207      	movs	r2, #7
 80022b2:	4306      	orrs	r6, r0
 80022b4:	4032      	ands	r2, r6
 80022b6:	2100      	movs	r1, #0
 80022b8:	2500      	movs	r5, #0
 80022ba:	e783      	b.n	80021c4 <__aeabi_dsub+0x314>
 80022bc:	1a16      	subs	r6, r2, r0
 80022be:	4663      	mov	r3, ip
 80022c0:	42b2      	cmp	r2, r6
 80022c2:	4180      	sbcs	r0, r0
 80022c4:	1a59      	subs	r1, r3, r1
 80022c6:	4240      	negs	r0, r0
 80022c8:	1a0b      	subs	r3, r1, r0
 80022ca:	4698      	mov	r8, r3
 80022cc:	465c      	mov	r4, fp
 80022ce:	e632      	b.n	8001f36 <__aeabi_dsub+0x86>
 80022d0:	2e1f      	cmp	r6, #31
 80022d2:	dd00      	ble.n	80022d6 <__aeabi_dsub+0x426>
 80022d4:	e0ab      	b.n	800242e <__aeabi_dsub+0x57e>
 80022d6:	2720      	movs	r7, #32
 80022d8:	1bbb      	subs	r3, r7, r6
 80022da:	469a      	mov	sl, r3
 80022dc:	4663      	mov	r3, ip
 80022de:	4657      	mov	r7, sl
 80022e0:	40bb      	lsls	r3, r7
 80022e2:	4699      	mov	r9, r3
 80022e4:	0013      	movs	r3, r2
 80022e6:	464f      	mov	r7, r9
 80022e8:	40f3      	lsrs	r3, r6
 80022ea:	431f      	orrs	r7, r3
 80022ec:	003b      	movs	r3, r7
 80022ee:	4657      	mov	r7, sl
 80022f0:	40ba      	lsls	r2, r7
 80022f2:	1e57      	subs	r7, r2, #1
 80022f4:	41ba      	sbcs	r2, r7
 80022f6:	4313      	orrs	r3, r2
 80022f8:	4662      	mov	r2, ip
 80022fa:	40f2      	lsrs	r2, r6
 80022fc:	1889      	adds	r1, r1, r2
 80022fe:	e698      	b.n	8002032 <__aeabi_dsub+0x182>
 8002300:	2720      	movs	r7, #32
 8002302:	1bbb      	subs	r3, r7, r6
 8002304:	469a      	mov	sl, r3
 8002306:	4663      	mov	r3, ip
 8002308:	4657      	mov	r7, sl
 800230a:	40bb      	lsls	r3, r7
 800230c:	4699      	mov	r9, r3
 800230e:	0013      	movs	r3, r2
 8002310:	464f      	mov	r7, r9
 8002312:	40f3      	lsrs	r3, r6
 8002314:	431f      	orrs	r7, r3
 8002316:	003b      	movs	r3, r7
 8002318:	4657      	mov	r7, sl
 800231a:	40ba      	lsls	r2, r7
 800231c:	1e57      	subs	r7, r2, #1
 800231e:	41ba      	sbcs	r2, r7
 8002320:	4313      	orrs	r3, r2
 8002322:	4662      	mov	r2, ip
 8002324:	40f2      	lsrs	r2, r6
 8002326:	1a89      	subs	r1, r1, r2
 8002328:	e79c      	b.n	8002264 <__aeabi_dsub+0x3b4>
 800232a:	4b83      	ldr	r3, [pc, #524]	; (8002538 <__aeabi_dsub+0x688>)
 800232c:	429f      	cmp	r7, r3
 800232e:	d05f      	beq.n	80023f0 <__aeabi_dsub+0x540>
 8002330:	2580      	movs	r5, #128	; 0x80
 8002332:	042d      	lsls	r5, r5, #16
 8002334:	4273      	negs	r3, r6
 8002336:	4329      	orrs	r1, r5
 8002338:	e720      	b.n	800217c <__aeabi_dsub+0x2cc>
 800233a:	2e00      	cmp	r6, #0
 800233c:	d10c      	bne.n	8002358 <__aeabi_dsub+0x4a8>
 800233e:	2f00      	cmp	r7, #0
 8002340:	d100      	bne.n	8002344 <__aeabi_dsub+0x494>
 8002342:	e0d0      	b.n	80024e6 <__aeabi_dsub+0x636>
 8002344:	465c      	mov	r4, fp
 8002346:	4661      	mov	r1, ip
 8002348:	4691      	mov	r9, r2
 800234a:	4d7b      	ldr	r5, [pc, #492]	; (8002538 <__aeabi_dsub+0x688>)
 800234c:	e6cd      	b.n	80020ea <__aeabi_dsub+0x23a>
 800234e:	4f7a      	ldr	r7, [pc, #488]	; (8002538 <__aeabi_dsub+0x688>)
 8002350:	42be      	cmp	r6, r7
 8002352:	d01c      	beq.n	800238e <__aeabi_dsub+0x4de>
 8002354:	001e      	movs	r6, r3
 8002356:	e665      	b.n	8002024 <__aeabi_dsub+0x174>
 8002358:	2f00      	cmp	r7, #0
 800235a:	d018      	beq.n	800238e <__aeabi_dsub+0x4de>
 800235c:	08c0      	lsrs	r0, r0, #3
 800235e:	074e      	lsls	r6, r1, #29
 8002360:	4306      	orrs	r6, r0
 8002362:	2080      	movs	r0, #128	; 0x80
 8002364:	08c9      	lsrs	r1, r1, #3
 8002366:	0300      	lsls	r0, r0, #12
 8002368:	4201      	tst	r1, r0
 800236a:	d008      	beq.n	800237e <__aeabi_dsub+0x4ce>
 800236c:	4663      	mov	r3, ip
 800236e:	08dc      	lsrs	r4, r3, #3
 8002370:	4204      	tst	r4, r0
 8002372:	d104      	bne.n	800237e <__aeabi_dsub+0x4ce>
 8002374:	0021      	movs	r1, r4
 8002376:	46da      	mov	sl, fp
 8002378:	08d2      	lsrs	r2, r2, #3
 800237a:	075e      	lsls	r6, r3, #29
 800237c:	4316      	orrs	r6, r2
 800237e:	00f3      	lsls	r3, r6, #3
 8002380:	4699      	mov	r9, r3
 8002382:	2401      	movs	r4, #1
 8002384:	4653      	mov	r3, sl
 8002386:	00c9      	lsls	r1, r1, #3
 8002388:	0f72      	lsrs	r2, r6, #29
 800238a:	4311      	orrs	r1, r2
 800238c:	401c      	ands	r4, r3
 800238e:	4d6a      	ldr	r5, [pc, #424]	; (8002538 <__aeabi_dsub+0x688>)
 8002390:	e6ab      	b.n	80020ea <__aeabi_dsub+0x23a>
 8002392:	001d      	movs	r5, r3
 8002394:	2200      	movs	r2, #0
 8002396:	2700      	movs	r7, #0
 8002398:	e6b4      	b.n	8002104 <__aeabi_dsub+0x254>
 800239a:	2d00      	cmp	r5, #0
 800239c:	d159      	bne.n	8002452 <__aeabi_dsub+0x5a2>
 800239e:	000b      	movs	r3, r1
 80023a0:	4303      	orrs	r3, r0
 80023a2:	d100      	bne.n	80023a6 <__aeabi_dsub+0x4f6>
 80023a4:	e6d6      	b.n	8002154 <__aeabi_dsub+0x2a4>
 80023a6:	1c73      	adds	r3, r6, #1
 80023a8:	d100      	bne.n	80023ac <__aeabi_dsub+0x4fc>
 80023aa:	e0b2      	b.n	8002512 <__aeabi_dsub+0x662>
 80023ac:	4b62      	ldr	r3, [pc, #392]	; (8002538 <__aeabi_dsub+0x688>)
 80023ae:	429f      	cmp	r7, r3
 80023b0:	d01e      	beq.n	80023f0 <__aeabi_dsub+0x540>
 80023b2:	43f3      	mvns	r3, r6
 80023b4:	2b38      	cmp	r3, #56	; 0x38
 80023b6:	dc6f      	bgt.n	8002498 <__aeabi_dsub+0x5e8>
 80023b8:	2b1f      	cmp	r3, #31
 80023ba:	dd00      	ble.n	80023be <__aeabi_dsub+0x50e>
 80023bc:	e097      	b.n	80024ee <__aeabi_dsub+0x63e>
 80023be:	2520      	movs	r5, #32
 80023c0:	000e      	movs	r6, r1
 80023c2:	1aed      	subs	r5, r5, r3
 80023c4:	40ae      	lsls	r6, r5
 80023c6:	46b0      	mov	r8, r6
 80023c8:	0006      	movs	r6, r0
 80023ca:	46aa      	mov	sl, r5
 80023cc:	40de      	lsrs	r6, r3
 80023ce:	4645      	mov	r5, r8
 80023d0:	4335      	orrs	r5, r6
 80023d2:	002e      	movs	r6, r5
 80023d4:	4655      	mov	r5, sl
 80023d6:	40a8      	lsls	r0, r5
 80023d8:	40d9      	lsrs	r1, r3
 80023da:	1e45      	subs	r5, r0, #1
 80023dc:	41a8      	sbcs	r0, r5
 80023de:	448c      	add	ip, r1
 80023e0:	4306      	orrs	r6, r0
 80023e2:	18b6      	adds	r6, r6, r2
 80023e4:	4296      	cmp	r6, r2
 80023e6:	4192      	sbcs	r2, r2
 80023e8:	4251      	negs	r1, r2
 80023ea:	4461      	add	r1, ip
 80023ec:	003d      	movs	r5, r7
 80023ee:	e625      	b.n	800203c <__aeabi_dsub+0x18c>
 80023f0:	003d      	movs	r5, r7
 80023f2:	4661      	mov	r1, ip
 80023f4:	4691      	mov	r9, r2
 80023f6:	e678      	b.n	80020ea <__aeabi_dsub+0x23a>
 80023f8:	000b      	movs	r3, r1
 80023fa:	4303      	orrs	r3, r0
 80023fc:	2d00      	cmp	r5, #0
 80023fe:	d000      	beq.n	8002402 <__aeabi_dsub+0x552>
 8002400:	e655      	b.n	80020ae <__aeabi_dsub+0x1fe>
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f5      	beq.n	80023f2 <__aeabi_dsub+0x542>
 8002406:	4663      	mov	r3, ip
 8002408:	4313      	orrs	r3, r2
 800240a:	d100      	bne.n	800240e <__aeabi_dsub+0x55e>
 800240c:	e66d      	b.n	80020ea <__aeabi_dsub+0x23a>
 800240e:	1886      	adds	r6, r0, r2
 8002410:	4286      	cmp	r6, r0
 8002412:	4180      	sbcs	r0, r0
 8002414:	4461      	add	r1, ip
 8002416:	4240      	negs	r0, r0
 8002418:	1809      	adds	r1, r1, r0
 800241a:	2200      	movs	r2, #0
 800241c:	020b      	lsls	r3, r1, #8
 800241e:	d400      	bmi.n	8002422 <__aeabi_dsub+0x572>
 8002420:	e6d0      	b.n	80021c4 <__aeabi_dsub+0x314>
 8002422:	4b46      	ldr	r3, [pc, #280]	; (800253c <__aeabi_dsub+0x68c>)
 8002424:	3501      	adds	r5, #1
 8002426:	4019      	ands	r1, r3
 8002428:	e5b2      	b.n	8001f90 <__aeabi_dsub+0xe0>
 800242a:	46b1      	mov	r9, r6
 800242c:	e65d      	b.n	80020ea <__aeabi_dsub+0x23a>
 800242e:	0033      	movs	r3, r6
 8002430:	4667      	mov	r7, ip
 8002432:	3b20      	subs	r3, #32
 8002434:	40df      	lsrs	r7, r3
 8002436:	003b      	movs	r3, r7
 8002438:	2e20      	cmp	r6, #32
 800243a:	d005      	beq.n	8002448 <__aeabi_dsub+0x598>
 800243c:	2740      	movs	r7, #64	; 0x40
 800243e:	1bbf      	subs	r7, r7, r6
 8002440:	4666      	mov	r6, ip
 8002442:	40be      	lsls	r6, r7
 8002444:	4332      	orrs	r2, r6
 8002446:	4690      	mov	r8, r2
 8002448:	4646      	mov	r6, r8
 800244a:	1e72      	subs	r2, r6, #1
 800244c:	4196      	sbcs	r6, r2
 800244e:	4333      	orrs	r3, r6
 8002450:	e5ef      	b.n	8002032 <__aeabi_dsub+0x182>
 8002452:	4b39      	ldr	r3, [pc, #228]	; (8002538 <__aeabi_dsub+0x688>)
 8002454:	429f      	cmp	r7, r3
 8002456:	d0cb      	beq.n	80023f0 <__aeabi_dsub+0x540>
 8002458:	2580      	movs	r5, #128	; 0x80
 800245a:	042d      	lsls	r5, r5, #16
 800245c:	4273      	negs	r3, r6
 800245e:	4329      	orrs	r1, r5
 8002460:	e7a8      	b.n	80023b4 <__aeabi_dsub+0x504>
 8002462:	4308      	orrs	r0, r1
 8002464:	1e41      	subs	r1, r0, #1
 8002466:	4188      	sbcs	r0, r1
 8002468:	e6a2      	b.n	80021b0 <__aeabi_dsub+0x300>
 800246a:	2f00      	cmp	r7, #0
 800246c:	d100      	bne.n	8002470 <__aeabi_dsub+0x5c0>
 800246e:	e63c      	b.n	80020ea <__aeabi_dsub+0x23a>
 8002470:	4663      	mov	r3, ip
 8002472:	1a86      	subs	r6, r0, r2
 8002474:	1acf      	subs	r7, r1, r3
 8002476:	42b0      	cmp	r0, r6
 8002478:	419b      	sbcs	r3, r3
 800247a:	425b      	negs	r3, r3
 800247c:	1afb      	subs	r3, r7, r3
 800247e:	4698      	mov	r8, r3
 8002480:	021b      	lsls	r3, r3, #8
 8002482:	d54e      	bpl.n	8002522 <__aeabi_dsub+0x672>
 8002484:	1a16      	subs	r6, r2, r0
 8002486:	4663      	mov	r3, ip
 8002488:	42b2      	cmp	r2, r6
 800248a:	4192      	sbcs	r2, r2
 800248c:	1a59      	subs	r1, r3, r1
 800248e:	4252      	negs	r2, r2
 8002490:	1a89      	subs	r1, r1, r2
 8002492:	465c      	mov	r4, fp
 8002494:	2200      	movs	r2, #0
 8002496:	e57b      	b.n	8001f90 <__aeabi_dsub+0xe0>
 8002498:	4301      	orrs	r1, r0
 800249a:	000e      	movs	r6, r1
 800249c:	1e71      	subs	r1, r6, #1
 800249e:	418e      	sbcs	r6, r1
 80024a0:	e79f      	b.n	80023e2 <__aeabi_dsub+0x532>
 80024a2:	001d      	movs	r5, r3
 80024a4:	000e      	movs	r6, r1
 80024a6:	3d20      	subs	r5, #32
 80024a8:	40ee      	lsrs	r6, r5
 80024aa:	46b0      	mov	r8, r6
 80024ac:	2b20      	cmp	r3, #32
 80024ae:	d004      	beq.n	80024ba <__aeabi_dsub+0x60a>
 80024b0:	2540      	movs	r5, #64	; 0x40
 80024b2:	1aeb      	subs	r3, r5, r3
 80024b4:	4099      	lsls	r1, r3
 80024b6:	4308      	orrs	r0, r1
 80024b8:	4681      	mov	r9, r0
 80024ba:	4648      	mov	r0, r9
 80024bc:	4643      	mov	r3, r8
 80024be:	1e41      	subs	r1, r0, #1
 80024c0:	4188      	sbcs	r0, r1
 80024c2:	4318      	orrs	r0, r3
 80024c4:	e674      	b.n	80021b0 <__aeabi_dsub+0x300>
 80024c6:	2200      	movs	r2, #0
 80024c8:	2400      	movs	r4, #0
 80024ca:	e617      	b.n	80020fc <__aeabi_dsub+0x24c>
 80024cc:	1a16      	subs	r6, r2, r0
 80024ce:	4663      	mov	r3, ip
 80024d0:	42b2      	cmp	r2, r6
 80024d2:	4192      	sbcs	r2, r2
 80024d4:	1a59      	subs	r1, r3, r1
 80024d6:	4252      	negs	r2, r2
 80024d8:	1a89      	subs	r1, r1, r2
 80024da:	003d      	movs	r5, r7
 80024dc:	e525      	b.n	8001f2a <__aeabi_dsub+0x7a>
 80024de:	4661      	mov	r1, ip
 80024e0:	4691      	mov	r9, r2
 80024e2:	4d15      	ldr	r5, [pc, #84]	; (8002538 <__aeabi_dsub+0x688>)
 80024e4:	e601      	b.n	80020ea <__aeabi_dsub+0x23a>
 80024e6:	2280      	movs	r2, #128	; 0x80
 80024e8:	2400      	movs	r4, #0
 80024ea:	0312      	lsls	r2, r2, #12
 80024ec:	e679      	b.n	80021e2 <__aeabi_dsub+0x332>
 80024ee:	001d      	movs	r5, r3
 80024f0:	000e      	movs	r6, r1
 80024f2:	3d20      	subs	r5, #32
 80024f4:	40ee      	lsrs	r6, r5
 80024f6:	46b0      	mov	r8, r6
 80024f8:	2b20      	cmp	r3, #32
 80024fa:	d004      	beq.n	8002506 <__aeabi_dsub+0x656>
 80024fc:	2540      	movs	r5, #64	; 0x40
 80024fe:	1aeb      	subs	r3, r5, r3
 8002500:	4099      	lsls	r1, r3
 8002502:	4308      	orrs	r0, r1
 8002504:	4681      	mov	r9, r0
 8002506:	464e      	mov	r6, r9
 8002508:	4643      	mov	r3, r8
 800250a:	1e71      	subs	r1, r6, #1
 800250c:	418e      	sbcs	r6, r1
 800250e:	431e      	orrs	r6, r3
 8002510:	e767      	b.n	80023e2 <__aeabi_dsub+0x532>
 8002512:	1886      	adds	r6, r0, r2
 8002514:	4296      	cmp	r6, r2
 8002516:	419b      	sbcs	r3, r3
 8002518:	4461      	add	r1, ip
 800251a:	425b      	negs	r3, r3
 800251c:	18c9      	adds	r1, r1, r3
 800251e:	003d      	movs	r5, r7
 8002520:	e58c      	b.n	800203c <__aeabi_dsub+0x18c>
 8002522:	4647      	mov	r7, r8
 8002524:	4337      	orrs	r7, r6
 8002526:	d0ce      	beq.n	80024c6 <__aeabi_dsub+0x616>
 8002528:	2207      	movs	r2, #7
 800252a:	4641      	mov	r1, r8
 800252c:	4032      	ands	r2, r6
 800252e:	e649      	b.n	80021c4 <__aeabi_dsub+0x314>
 8002530:	2700      	movs	r7, #0
 8002532:	003a      	movs	r2, r7
 8002534:	e5e6      	b.n	8002104 <__aeabi_dsub+0x254>
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	000007ff 	.word	0x000007ff
 800253c:	ff7fffff 	.word	0xff7fffff

08002540 <__aeabi_d2iz>:
 8002540:	b530      	push	{r4, r5, lr}
 8002542:	4d14      	ldr	r5, [pc, #80]	; (8002594 <__aeabi_d2iz+0x54>)
 8002544:	030a      	lsls	r2, r1, #12
 8002546:	004b      	lsls	r3, r1, #1
 8002548:	0b12      	lsrs	r2, r2, #12
 800254a:	0d5b      	lsrs	r3, r3, #21
 800254c:	0fc9      	lsrs	r1, r1, #31
 800254e:	2400      	movs	r4, #0
 8002550:	42ab      	cmp	r3, r5
 8002552:	dd11      	ble.n	8002578 <__aeabi_d2iz+0x38>
 8002554:	4c10      	ldr	r4, [pc, #64]	; (8002598 <__aeabi_d2iz+0x58>)
 8002556:	42a3      	cmp	r3, r4
 8002558:	dc10      	bgt.n	800257c <__aeabi_d2iz+0x3c>
 800255a:	2480      	movs	r4, #128	; 0x80
 800255c:	0364      	lsls	r4, r4, #13
 800255e:	4322      	orrs	r2, r4
 8002560:	4c0e      	ldr	r4, [pc, #56]	; (800259c <__aeabi_d2iz+0x5c>)
 8002562:	1ae4      	subs	r4, r4, r3
 8002564:	2c1f      	cmp	r4, #31
 8002566:	dd0c      	ble.n	8002582 <__aeabi_d2iz+0x42>
 8002568:	480d      	ldr	r0, [pc, #52]	; (80025a0 <__aeabi_d2iz+0x60>)
 800256a:	1ac3      	subs	r3, r0, r3
 800256c:	40da      	lsrs	r2, r3
 800256e:	0013      	movs	r3, r2
 8002570:	425c      	negs	r4, r3
 8002572:	2900      	cmp	r1, #0
 8002574:	d100      	bne.n	8002578 <__aeabi_d2iz+0x38>
 8002576:	001c      	movs	r4, r3
 8002578:	0020      	movs	r0, r4
 800257a:	bd30      	pop	{r4, r5, pc}
 800257c:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <__aeabi_d2iz+0x64>)
 800257e:	18cc      	adds	r4, r1, r3
 8002580:	e7fa      	b.n	8002578 <__aeabi_d2iz+0x38>
 8002582:	4d09      	ldr	r5, [pc, #36]	; (80025a8 <__aeabi_d2iz+0x68>)
 8002584:	40e0      	lsrs	r0, r4
 8002586:	46ac      	mov	ip, r5
 8002588:	4463      	add	r3, ip
 800258a:	409a      	lsls	r2, r3
 800258c:	0013      	movs	r3, r2
 800258e:	4303      	orrs	r3, r0
 8002590:	e7ee      	b.n	8002570 <__aeabi_d2iz+0x30>
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	000003fe 	.word	0x000003fe
 8002598:	0000041d 	.word	0x0000041d
 800259c:	00000433 	.word	0x00000433
 80025a0:	00000413 	.word	0x00000413
 80025a4:	7fffffff 	.word	0x7fffffff
 80025a8:	fffffbed 	.word	0xfffffbed

080025ac <__aeabi_i2d>:
 80025ac:	b570      	push	{r4, r5, r6, lr}
 80025ae:	2800      	cmp	r0, #0
 80025b0:	d02d      	beq.n	800260e <__aeabi_i2d+0x62>
 80025b2:	17c3      	asrs	r3, r0, #31
 80025b4:	18c5      	adds	r5, r0, r3
 80025b6:	405d      	eors	r5, r3
 80025b8:	0fc4      	lsrs	r4, r0, #31
 80025ba:	0028      	movs	r0, r5
 80025bc:	f000 f906 	bl	80027cc <__clzsi2>
 80025c0:	4b15      	ldr	r3, [pc, #84]	; (8002618 <__aeabi_i2d+0x6c>)
 80025c2:	1a1b      	subs	r3, r3, r0
 80025c4:	055b      	lsls	r3, r3, #21
 80025c6:	0d5b      	lsrs	r3, r3, #21
 80025c8:	280a      	cmp	r0, #10
 80025ca:	dd15      	ble.n	80025f8 <__aeabi_i2d+0x4c>
 80025cc:	380b      	subs	r0, #11
 80025ce:	4085      	lsls	r5, r0
 80025d0:	2200      	movs	r2, #0
 80025d2:	032d      	lsls	r5, r5, #12
 80025d4:	0b2d      	lsrs	r5, r5, #12
 80025d6:	2100      	movs	r1, #0
 80025d8:	0010      	movs	r0, r2
 80025da:	032d      	lsls	r5, r5, #12
 80025dc:	0d0a      	lsrs	r2, r1, #20
 80025de:	0b2d      	lsrs	r5, r5, #12
 80025e0:	0512      	lsls	r2, r2, #20
 80025e2:	432a      	orrs	r2, r5
 80025e4:	4d0d      	ldr	r5, [pc, #52]	; (800261c <__aeabi_i2d+0x70>)
 80025e6:	051b      	lsls	r3, r3, #20
 80025e8:	402a      	ands	r2, r5
 80025ea:	4313      	orrs	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	07e4      	lsls	r4, r4, #31
 80025f0:	085b      	lsrs	r3, r3, #1
 80025f2:	4323      	orrs	r3, r4
 80025f4:	0019      	movs	r1, r3
 80025f6:	bd70      	pop	{r4, r5, r6, pc}
 80025f8:	0002      	movs	r2, r0
 80025fa:	0029      	movs	r1, r5
 80025fc:	3215      	adds	r2, #21
 80025fe:	4091      	lsls	r1, r2
 8002600:	000a      	movs	r2, r1
 8002602:	210b      	movs	r1, #11
 8002604:	1a08      	subs	r0, r1, r0
 8002606:	40c5      	lsrs	r5, r0
 8002608:	032d      	lsls	r5, r5, #12
 800260a:	0b2d      	lsrs	r5, r5, #12
 800260c:	e7e3      	b.n	80025d6 <__aeabi_i2d+0x2a>
 800260e:	2400      	movs	r4, #0
 8002610:	2300      	movs	r3, #0
 8002612:	2500      	movs	r5, #0
 8002614:	2200      	movs	r2, #0
 8002616:	e7de      	b.n	80025d6 <__aeabi_i2d+0x2a>
 8002618:	0000041e 	.word	0x0000041e
 800261c:	800fffff 	.word	0x800fffff

08002620 <__aeabi_f2d>:
 8002620:	0041      	lsls	r1, r0, #1
 8002622:	0e09      	lsrs	r1, r1, #24
 8002624:	1c4b      	adds	r3, r1, #1
 8002626:	b570      	push	{r4, r5, r6, lr}
 8002628:	b2db      	uxtb	r3, r3
 800262a:	0246      	lsls	r6, r0, #9
 800262c:	0a75      	lsrs	r5, r6, #9
 800262e:	0fc4      	lsrs	r4, r0, #31
 8002630:	2b01      	cmp	r3, #1
 8002632:	dd14      	ble.n	800265e <__aeabi_f2d+0x3e>
 8002634:	23e0      	movs	r3, #224	; 0xe0
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	076d      	lsls	r5, r5, #29
 800263a:	0b36      	lsrs	r6, r6, #12
 800263c:	18cb      	adds	r3, r1, r3
 800263e:	2100      	movs	r1, #0
 8002640:	0d0a      	lsrs	r2, r1, #20
 8002642:	0028      	movs	r0, r5
 8002644:	0512      	lsls	r2, r2, #20
 8002646:	4d1c      	ldr	r5, [pc, #112]	; (80026b8 <__aeabi_f2d+0x98>)
 8002648:	4332      	orrs	r2, r6
 800264a:	055b      	lsls	r3, r3, #21
 800264c:	402a      	ands	r2, r5
 800264e:	085b      	lsrs	r3, r3, #1
 8002650:	4313      	orrs	r3, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	07e4      	lsls	r4, r4, #31
 8002656:	085b      	lsrs	r3, r3, #1
 8002658:	4323      	orrs	r3, r4
 800265a:	0019      	movs	r1, r3
 800265c:	bd70      	pop	{r4, r5, r6, pc}
 800265e:	2900      	cmp	r1, #0
 8002660:	d114      	bne.n	800268c <__aeabi_f2d+0x6c>
 8002662:	2d00      	cmp	r5, #0
 8002664:	d01e      	beq.n	80026a4 <__aeabi_f2d+0x84>
 8002666:	0028      	movs	r0, r5
 8002668:	f000 f8b0 	bl	80027cc <__clzsi2>
 800266c:	280a      	cmp	r0, #10
 800266e:	dc1c      	bgt.n	80026aa <__aeabi_f2d+0x8a>
 8002670:	230b      	movs	r3, #11
 8002672:	002a      	movs	r2, r5
 8002674:	1a1b      	subs	r3, r3, r0
 8002676:	40da      	lsrs	r2, r3
 8002678:	0003      	movs	r3, r0
 800267a:	3315      	adds	r3, #21
 800267c:	409d      	lsls	r5, r3
 800267e:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <__aeabi_f2d+0x9c>)
 8002680:	0312      	lsls	r2, r2, #12
 8002682:	1a1b      	subs	r3, r3, r0
 8002684:	055b      	lsls	r3, r3, #21
 8002686:	0b16      	lsrs	r6, r2, #12
 8002688:	0d5b      	lsrs	r3, r3, #21
 800268a:	e7d8      	b.n	800263e <__aeabi_f2d+0x1e>
 800268c:	2d00      	cmp	r5, #0
 800268e:	d006      	beq.n	800269e <__aeabi_f2d+0x7e>
 8002690:	0b32      	lsrs	r2, r6, #12
 8002692:	2680      	movs	r6, #128	; 0x80
 8002694:	0336      	lsls	r6, r6, #12
 8002696:	076d      	lsls	r5, r5, #29
 8002698:	4316      	orrs	r6, r2
 800269a:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <__aeabi_f2d+0xa0>)
 800269c:	e7cf      	b.n	800263e <__aeabi_f2d+0x1e>
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <__aeabi_f2d+0xa0>)
 80026a0:	2600      	movs	r6, #0
 80026a2:	e7cc      	b.n	800263e <__aeabi_f2d+0x1e>
 80026a4:	2300      	movs	r3, #0
 80026a6:	2600      	movs	r6, #0
 80026a8:	e7c9      	b.n	800263e <__aeabi_f2d+0x1e>
 80026aa:	0003      	movs	r3, r0
 80026ac:	002a      	movs	r2, r5
 80026ae:	3b0b      	subs	r3, #11
 80026b0:	409a      	lsls	r2, r3
 80026b2:	2500      	movs	r5, #0
 80026b4:	e7e3      	b.n	800267e <__aeabi_f2d+0x5e>
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	800fffff 	.word	0x800fffff
 80026bc:	00000389 	.word	0x00000389
 80026c0:	000007ff 	.word	0x000007ff

080026c4 <__aeabi_d2f>:
 80026c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026c6:	004c      	lsls	r4, r1, #1
 80026c8:	0d64      	lsrs	r4, r4, #21
 80026ca:	030b      	lsls	r3, r1, #12
 80026cc:	1c62      	adds	r2, r4, #1
 80026ce:	0a5b      	lsrs	r3, r3, #9
 80026d0:	0f46      	lsrs	r6, r0, #29
 80026d2:	0552      	lsls	r2, r2, #21
 80026d4:	0fc9      	lsrs	r1, r1, #31
 80026d6:	431e      	orrs	r6, r3
 80026d8:	00c5      	lsls	r5, r0, #3
 80026da:	0d52      	lsrs	r2, r2, #21
 80026dc:	2a01      	cmp	r2, #1
 80026de:	dd29      	ble.n	8002734 <__aeabi_d2f+0x70>
 80026e0:	4b37      	ldr	r3, [pc, #220]	; (80027c0 <__aeabi_d2f+0xfc>)
 80026e2:	18e7      	adds	r7, r4, r3
 80026e4:	2ffe      	cmp	r7, #254	; 0xfe
 80026e6:	dc1c      	bgt.n	8002722 <__aeabi_d2f+0x5e>
 80026e8:	2f00      	cmp	r7, #0
 80026ea:	dd3b      	ble.n	8002764 <__aeabi_d2f+0xa0>
 80026ec:	0180      	lsls	r0, r0, #6
 80026ee:	1e43      	subs	r3, r0, #1
 80026f0:	4198      	sbcs	r0, r3
 80026f2:	2207      	movs	r2, #7
 80026f4:	00f3      	lsls	r3, r6, #3
 80026f6:	0f6d      	lsrs	r5, r5, #29
 80026f8:	4303      	orrs	r3, r0
 80026fa:	432b      	orrs	r3, r5
 80026fc:	401a      	ands	r2, r3
 80026fe:	2a00      	cmp	r2, #0
 8002700:	d004      	beq.n	800270c <__aeabi_d2f+0x48>
 8002702:	220f      	movs	r2, #15
 8002704:	401a      	ands	r2, r3
 8002706:	2a04      	cmp	r2, #4
 8002708:	d000      	beq.n	800270c <__aeabi_d2f+0x48>
 800270a:	3304      	adds	r3, #4
 800270c:	2280      	movs	r2, #128	; 0x80
 800270e:	04d2      	lsls	r2, r2, #19
 8002710:	401a      	ands	r2, r3
 8002712:	d024      	beq.n	800275e <__aeabi_d2f+0x9a>
 8002714:	3701      	adds	r7, #1
 8002716:	b2fa      	uxtb	r2, r7
 8002718:	2fff      	cmp	r7, #255	; 0xff
 800271a:	d002      	beq.n	8002722 <__aeabi_d2f+0x5e>
 800271c:	019b      	lsls	r3, r3, #6
 800271e:	0a58      	lsrs	r0, r3, #9
 8002720:	e001      	b.n	8002726 <__aeabi_d2f+0x62>
 8002722:	22ff      	movs	r2, #255	; 0xff
 8002724:	2000      	movs	r0, #0
 8002726:	0240      	lsls	r0, r0, #9
 8002728:	05d2      	lsls	r2, r2, #23
 800272a:	0a40      	lsrs	r0, r0, #9
 800272c:	07c9      	lsls	r1, r1, #31
 800272e:	4310      	orrs	r0, r2
 8002730:	4308      	orrs	r0, r1
 8002732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002734:	4335      	orrs	r5, r6
 8002736:	2c00      	cmp	r4, #0
 8002738:	d104      	bne.n	8002744 <__aeabi_d2f+0x80>
 800273a:	2d00      	cmp	r5, #0
 800273c:	d10a      	bne.n	8002754 <__aeabi_d2f+0x90>
 800273e:	2200      	movs	r2, #0
 8002740:	2000      	movs	r0, #0
 8002742:	e7f0      	b.n	8002726 <__aeabi_d2f+0x62>
 8002744:	2d00      	cmp	r5, #0
 8002746:	d0ec      	beq.n	8002722 <__aeabi_d2f+0x5e>
 8002748:	2080      	movs	r0, #128	; 0x80
 800274a:	03c0      	lsls	r0, r0, #15
 800274c:	4330      	orrs	r0, r6
 800274e:	22ff      	movs	r2, #255	; 0xff
 8002750:	e7e9      	b.n	8002726 <__aeabi_d2f+0x62>
 8002752:	2400      	movs	r4, #0
 8002754:	2300      	movs	r3, #0
 8002756:	025b      	lsls	r3, r3, #9
 8002758:	0a58      	lsrs	r0, r3, #9
 800275a:	b2e2      	uxtb	r2, r4
 800275c:	e7e3      	b.n	8002726 <__aeabi_d2f+0x62>
 800275e:	08db      	lsrs	r3, r3, #3
 8002760:	003c      	movs	r4, r7
 8002762:	e7f8      	b.n	8002756 <__aeabi_d2f+0x92>
 8002764:	003b      	movs	r3, r7
 8002766:	3317      	adds	r3, #23
 8002768:	dbf3      	blt.n	8002752 <__aeabi_d2f+0x8e>
 800276a:	2380      	movs	r3, #128	; 0x80
 800276c:	041b      	lsls	r3, r3, #16
 800276e:	4333      	orrs	r3, r6
 8002770:	261e      	movs	r6, #30
 8002772:	1bf6      	subs	r6, r6, r7
 8002774:	2e1f      	cmp	r6, #31
 8002776:	dd14      	ble.n	80027a2 <__aeabi_d2f+0xde>
 8002778:	2202      	movs	r2, #2
 800277a:	4252      	negs	r2, r2
 800277c:	1bd7      	subs	r7, r2, r7
 800277e:	001a      	movs	r2, r3
 8002780:	40fa      	lsrs	r2, r7
 8002782:	0017      	movs	r7, r2
 8002784:	2e20      	cmp	r6, #32
 8002786:	d004      	beq.n	8002792 <__aeabi_d2f+0xce>
 8002788:	4a0e      	ldr	r2, [pc, #56]	; (80027c4 <__aeabi_d2f+0x100>)
 800278a:	4694      	mov	ip, r2
 800278c:	4464      	add	r4, ip
 800278e:	40a3      	lsls	r3, r4
 8002790:	431d      	orrs	r5, r3
 8002792:	002b      	movs	r3, r5
 8002794:	1e5d      	subs	r5, r3, #1
 8002796:	41ab      	sbcs	r3, r5
 8002798:	2207      	movs	r2, #7
 800279a:	433b      	orrs	r3, r7
 800279c:	401a      	ands	r2, r3
 800279e:	2700      	movs	r7, #0
 80027a0:	e7ad      	b.n	80026fe <__aeabi_d2f+0x3a>
 80027a2:	4a09      	ldr	r2, [pc, #36]	; (80027c8 <__aeabi_d2f+0x104>)
 80027a4:	0028      	movs	r0, r5
 80027a6:	18a2      	adds	r2, r4, r2
 80027a8:	4095      	lsls	r5, r2
 80027aa:	4093      	lsls	r3, r2
 80027ac:	1e6c      	subs	r4, r5, #1
 80027ae:	41a5      	sbcs	r5, r4
 80027b0:	40f0      	lsrs	r0, r6
 80027b2:	2207      	movs	r2, #7
 80027b4:	432b      	orrs	r3, r5
 80027b6:	4303      	orrs	r3, r0
 80027b8:	401a      	ands	r2, r3
 80027ba:	2700      	movs	r7, #0
 80027bc:	e79f      	b.n	80026fe <__aeabi_d2f+0x3a>
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	fffffc80 	.word	0xfffffc80
 80027c4:	fffffca2 	.word	0xfffffca2
 80027c8:	fffffc82 	.word	0xfffffc82

080027cc <__clzsi2>:
 80027cc:	211c      	movs	r1, #28
 80027ce:	2301      	movs	r3, #1
 80027d0:	041b      	lsls	r3, r3, #16
 80027d2:	4298      	cmp	r0, r3
 80027d4:	d301      	bcc.n	80027da <__clzsi2+0xe>
 80027d6:	0c00      	lsrs	r0, r0, #16
 80027d8:	3910      	subs	r1, #16
 80027da:	0a1b      	lsrs	r3, r3, #8
 80027dc:	4298      	cmp	r0, r3
 80027de:	d301      	bcc.n	80027e4 <__clzsi2+0x18>
 80027e0:	0a00      	lsrs	r0, r0, #8
 80027e2:	3908      	subs	r1, #8
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	4298      	cmp	r0, r3
 80027e8:	d301      	bcc.n	80027ee <__clzsi2+0x22>
 80027ea:	0900      	lsrs	r0, r0, #4
 80027ec:	3904      	subs	r1, #4
 80027ee:	a202      	add	r2, pc, #8	; (adr r2, 80027f8 <__clzsi2+0x2c>)
 80027f0:	5c10      	ldrb	r0, [r2, r0]
 80027f2:	1840      	adds	r0, r0, r1
 80027f4:	4770      	bx	lr
 80027f6:	46c0      	nop			; (mov r8, r8)
 80027f8:	02020304 	.word	0x02020304
 80027fc:	01010101 	.word	0x01010101
	...

08002808 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800280e:	1d3b      	adds	r3, r7, #4
 8002810:	0018      	movs	r0, r3
 8002812:	230c      	movs	r3, #12
 8002814:	001a      	movs	r2, r3
 8002816:	2100      	movs	r1, #0
 8002818:	f004 facc 	bl	8006db4 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 800281c:	4b33      	ldr	r3, [pc, #204]	; (80028ec <MX_ADC_Init+0xe4>)
 800281e:	4a34      	ldr	r2, [pc, #208]	; (80028f0 <MX_ADC_Init+0xe8>)
 8002820:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002822:	4b32      	ldr	r3, [pc, #200]	; (80028ec <MX_ADC_Init+0xe4>)
 8002824:	2200      	movs	r2, #0
 8002826:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002828:	4b30      	ldr	r3, [pc, #192]	; (80028ec <MX_ADC_Init+0xe4>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800282e:	4b2f      	ldr	r3, [pc, #188]	; (80028ec <MX_ADC_Init+0xe4>)
 8002830:	2200      	movs	r2, #0
 8002832:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002834:	4b2d      	ldr	r3, [pc, #180]	; (80028ec <MX_ADC_Init+0xe4>)
 8002836:	2201      	movs	r2, #1
 8002838:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800283a:	4b2c      	ldr	r3, [pc, #176]	; (80028ec <MX_ADC_Init+0xe4>)
 800283c:	2204      	movs	r2, #4
 800283e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002840:	4b2a      	ldr	r3, [pc, #168]	; (80028ec <MX_ADC_Init+0xe4>)
 8002842:	2200      	movs	r2, #0
 8002844:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002846:	4b29      	ldr	r3, [pc, #164]	; (80028ec <MX_ADC_Init+0xe4>)
 8002848:	2200      	movs	r2, #0
 800284a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 800284c:	4b27      	ldr	r3, [pc, #156]	; (80028ec <MX_ADC_Init+0xe4>)
 800284e:	2201      	movs	r2, #1
 8002850:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002852:	4b26      	ldr	r3, [pc, #152]	; (80028ec <MX_ADC_Init+0xe4>)
 8002854:	2200      	movs	r2, #0
 8002856:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002858:	4b24      	ldr	r3, [pc, #144]	; (80028ec <MX_ADC_Init+0xe4>)
 800285a:	22c2      	movs	r2, #194	; 0xc2
 800285c:	32ff      	adds	r2, #255	; 0xff
 800285e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002860:	4b22      	ldr	r3, [pc, #136]	; (80028ec <MX_ADC_Init+0xe4>)
 8002862:	2200      	movs	r2, #0
 8002864:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8002866:	4b21      	ldr	r3, [pc, #132]	; (80028ec <MX_ADC_Init+0xe4>)
 8002868:	2224      	movs	r2, #36	; 0x24
 800286a:	2101      	movs	r1, #1
 800286c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800286e:	4b1f      	ldr	r3, [pc, #124]	; (80028ec <MX_ADC_Init+0xe4>)
 8002870:	2201      	movs	r2, #1
 8002872:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002874:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <MX_ADC_Init+0xe4>)
 8002876:	0018      	movs	r0, r3
 8002878:	f001 f8bc 	bl	80039f4 <HAL_ADC_Init>
 800287c:	1e03      	subs	r3, r0, #0
 800287e:	d001      	beq.n	8002884 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002880:	f000 fd3a 	bl	80032f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002884:	1d3b      	adds	r3, r7, #4
 8002886:	2203      	movs	r2, #3
 8002888:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800288a:	1d3b      	adds	r3, r7, #4
 800288c:	2280      	movs	r2, #128	; 0x80
 800288e:	0152      	lsls	r2, r2, #5
 8002890:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002892:	1d3b      	adds	r3, r7, #4
 8002894:	2280      	movs	r2, #128	; 0x80
 8002896:	0552      	lsls	r2, r2, #21
 8002898:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800289a:	1d3a      	adds	r2, r7, #4
 800289c:	4b13      	ldr	r3, [pc, #76]	; (80028ec <MX_ADC_Init+0xe4>)
 800289e:	0011      	movs	r1, r2
 80028a0:	0018      	movs	r0, r3
 80028a2:	f001 f9e7 	bl	8003c74 <HAL_ADC_ConfigChannel>
 80028a6:	1e03      	subs	r3, r0, #0
 80028a8:	d001      	beq.n	80028ae <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80028aa:	f000 fd25 	bl	80032f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80028ae:	1d3b      	adds	r3, r7, #4
 80028b0:	2204      	movs	r2, #4
 80028b2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80028b4:	1d3a      	adds	r2, r7, #4
 80028b6:	4b0d      	ldr	r3, [pc, #52]	; (80028ec <MX_ADC_Init+0xe4>)
 80028b8:	0011      	movs	r1, r2
 80028ba:	0018      	movs	r0, r3
 80028bc:	f001 f9da 	bl	8003c74 <HAL_ADC_ConfigChannel>
 80028c0:	1e03      	subs	r3, r0, #0
 80028c2:	d001      	beq.n	80028c8 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80028c4:	f000 fd18 	bl	80032f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80028c8:	1d3b      	adds	r3, r7, #4
 80028ca:	2205      	movs	r2, #5
 80028cc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80028ce:	1d3a      	adds	r2, r7, #4
 80028d0:	4b06      	ldr	r3, [pc, #24]	; (80028ec <MX_ADC_Init+0xe4>)
 80028d2:	0011      	movs	r1, r2
 80028d4:	0018      	movs	r0, r3
 80028d6:	f001 f9cd 	bl	8003c74 <HAL_ADC_ConfigChannel>
 80028da:	1e03      	subs	r3, r0, #0
 80028dc:	d001      	beq.n	80028e2 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80028de:	f000 fd0b 	bl	80032f8 <Error_Handler>
  }

}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	46bd      	mov	sp, r7
 80028e6:	b004      	add	sp, #16
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	200003e0 	.word	0x200003e0
 80028f0:	40012400 	.word	0x40012400

080028f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08a      	sub	sp, #40	; 0x28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	2314      	movs	r3, #20
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	0018      	movs	r0, r3
 8002902:	2314      	movs	r3, #20
 8002904:	001a      	movs	r2, r3
 8002906:	2100      	movs	r1, #0
 8002908:	f004 fa54 	bl	8006db4 <memset>
  if(adcHandle->Instance==ADC1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a2d      	ldr	r2, [pc, #180]	; (80029c8 <HAL_ADC_MspInit+0xd4>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d154      	bne.n	80029c0 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002916:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <HAL_ADC_MspInit+0xd8>)
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	4b2c      	ldr	r3, [pc, #176]	; (80029cc <HAL_ADC_MspInit+0xd8>)
 800291c:	2180      	movs	r1, #128	; 0x80
 800291e:	0089      	lsls	r1, r1, #2
 8002920:	430a      	orrs	r2, r1
 8002922:	619a      	str	r2, [r3, #24]
 8002924:	4b29      	ldr	r3, [pc, #164]	; (80029cc <HAL_ADC_MspInit+0xd8>)
 8002926:	699a      	ldr	r2, [r3, #24]
 8002928:	2380      	movs	r3, #128	; 0x80
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002932:	4b26      	ldr	r3, [pc, #152]	; (80029cc <HAL_ADC_MspInit+0xd8>)
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	4b25      	ldr	r3, [pc, #148]	; (80029cc <HAL_ADC_MspInit+0xd8>)
 8002938:	2180      	movs	r1, #128	; 0x80
 800293a:	0289      	lsls	r1, r1, #10
 800293c:	430a      	orrs	r2, r1
 800293e:	615a      	str	r2, [r3, #20]
 8002940:	4b22      	ldr	r3, [pc, #136]	; (80029cc <HAL_ADC_MspInit+0xd8>)
 8002942:	695a      	ldr	r2, [r3, #20]
 8002944:	2380      	movs	r3, #128	; 0x80
 8002946:	029b      	lsls	r3, r3, #10
 8002948:	4013      	ands	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5 
    */
    GPIO_InitStruct.Pin = INA199_REF_Pin|INA199_OUT_Pin|BATT_VOLT_Pin;
 800294e:	2114      	movs	r1, #20
 8002950:	187b      	adds	r3, r7, r1
 8002952:	2238      	movs	r2, #56	; 0x38
 8002954:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002956:	187b      	adds	r3, r7, r1
 8002958:	2203      	movs	r2, #3
 800295a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	187b      	adds	r3, r7, r1
 800295e:	2200      	movs	r2, #0
 8002960:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002962:	187a      	adds	r2, r7, r1
 8002964:	2390      	movs	r3, #144	; 0x90
 8002966:	05db      	lsls	r3, r3, #23
 8002968:	0011      	movs	r1, r2
 800296a:	0018      	movs	r0, r3
 800296c:	f001 fd42 	bl	80043f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002970:	4b17      	ldr	r3, [pc, #92]	; (80029d0 <HAL_ADC_MspInit+0xdc>)
 8002972:	4a18      	ldr	r2, [pc, #96]	; (80029d4 <HAL_ADC_MspInit+0xe0>)
 8002974:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002976:	4b16      	ldr	r3, [pc, #88]	; (80029d0 <HAL_ADC_MspInit+0xdc>)
 8002978:	2200      	movs	r2, #0
 800297a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800297c:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <HAL_ADC_MspInit+0xdc>)
 800297e:	2200      	movs	r2, #0
 8002980:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002982:	4b13      	ldr	r3, [pc, #76]	; (80029d0 <HAL_ADC_MspInit+0xdc>)
 8002984:	2280      	movs	r2, #128	; 0x80
 8002986:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002988:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <HAL_ADC_MspInit+0xdc>)
 800298a:	2280      	movs	r2, #128	; 0x80
 800298c:	0052      	lsls	r2, r2, #1
 800298e:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <HAL_ADC_MspInit+0xdc>)
 8002992:	2280      	movs	r2, #128	; 0x80
 8002994:	00d2      	lsls	r2, r2, #3
 8002996:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002998:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <HAL_ADC_MspInit+0xdc>)
 800299a:	2220      	movs	r2, #32
 800299c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800299e:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <HAL_ADC_MspInit+0xdc>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80029a4:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <HAL_ADC_MspInit+0xdc>)
 80029a6:	0018      	movs	r0, r3
 80029a8:	f001 fc1e 	bl	80041e8 <HAL_DMA_Init>
 80029ac:	1e03      	subs	r3, r0, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80029b0:	f000 fca2 	bl	80032f8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a06      	ldr	r2, [pc, #24]	; (80029d0 <HAL_ADC_MspInit+0xdc>)
 80029b8:	631a      	str	r2, [r3, #48]	; 0x30
 80029ba:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <HAL_ADC_MspInit+0xdc>)
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80029c0:	46c0      	nop			; (mov r8, r8)
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b00a      	add	sp, #40	; 0x28
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40012400 	.word	0x40012400
 80029cc:	40021000 	.word	0x40021000
 80029d0:	2000039c 	.word	0x2000039c
 80029d4:	40020008 	.word	0x40020008

080029d8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0

  hcan.Instance = CAN;
 80029dc:	4b18      	ldr	r3, [pc, #96]	; (8002a40 <MX_CAN_Init+0x68>)
 80029de:	4a19      	ldr	r2, [pc, #100]	; (8002a44 <MX_CAN_Init+0x6c>)
 80029e0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 80029e2:	4b17      	ldr	r3, [pc, #92]	; (8002a40 <MX_CAN_Init+0x68>)
 80029e4:	2203      	movs	r2, #3
 80029e6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80029e8:	4b15      	ldr	r3, [pc, #84]	; (8002a40 <MX_CAN_Init+0x68>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80029ee:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <MX_CAN_Init+0x68>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80029f4:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <MX_CAN_Init+0x68>)
 80029f6:	22c0      	movs	r2, #192	; 0xc0
 80029f8:	0312      	lsls	r2, r2, #12
 80029fa:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80029fc:	4b10      	ldr	r3, [pc, #64]	; (8002a40 <MX_CAN_Init+0x68>)
 80029fe:	2280      	movs	r2, #128	; 0x80
 8002a00:	0352      	lsls	r2, r2, #13
 8002a02:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002a04:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <MX_CAN_Init+0x68>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <MX_CAN_Init+0x68>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <MX_CAN_Init+0x68>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002a16:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <MX_CAN_Init+0x68>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002a1c:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <MX_CAN_Init+0x68>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002a22:	4b07      	ldr	r3, [pc, #28]	; (8002a40 <MX_CAN_Init+0x68>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <MX_CAN_Init+0x68>)
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f001 fa30 	bl	8003e90 <HAL_CAN_Init>
 8002a30:	1e03      	subs	r3, r0, #0
 8002a32:	d001      	beq.n	8002a38 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8002a34:	f000 fc60 	bl	80032f8 <Error_Handler>
  }

}
 8002a38:	46c0      	nop			; (mov r8, r8)
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	20000420 	.word	0x20000420
 8002a44:	40006400 	.word	0x40006400

08002a48 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	; 0x28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a50:	2314      	movs	r3, #20
 8002a52:	18fb      	adds	r3, r7, r3
 8002a54:	0018      	movs	r0, r3
 8002a56:	2314      	movs	r3, #20
 8002a58:	001a      	movs	r2, r3
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	f004 f9aa 	bl	8006db4 <memset>
  if(canHandle->Instance==CAN)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a1d      	ldr	r2, [pc, #116]	; (8002adc <HAL_CAN_MspInit+0x94>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d133      	bne.n	8002ad2 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002a6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <HAL_CAN_MspInit+0x98>)
 8002a6c:	69da      	ldr	r2, [r3, #28]
 8002a6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ae0 <HAL_CAN_MspInit+0x98>)
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	0489      	lsls	r1, r1, #18
 8002a74:	430a      	orrs	r2, r1
 8002a76:	61da      	str	r2, [r3, #28]
 8002a78:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <HAL_CAN_MspInit+0x98>)
 8002a7a:	69da      	ldr	r2, [r3, #28]
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	049b      	lsls	r3, r3, #18
 8002a80:	4013      	ands	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a86:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <HAL_CAN_MspInit+0x98>)
 8002a88:	695a      	ldr	r2, [r3, #20]
 8002a8a:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <HAL_CAN_MspInit+0x98>)
 8002a8c:	2180      	movs	r1, #128	; 0x80
 8002a8e:	0289      	lsls	r1, r1, #10
 8002a90:	430a      	orrs	r2, r1
 8002a92:	615a      	str	r2, [r3, #20]
 8002a94:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <HAL_CAN_MspInit+0x98>)
 8002a96:	695a      	ldr	r2, [r3, #20]
 8002a98:	2380      	movs	r3, #128	; 0x80
 8002a9a:	029b      	lsls	r3, r3, #10
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002aa2:	2114      	movs	r1, #20
 8002aa4:	187b      	adds	r3, r7, r1
 8002aa6:	22c0      	movs	r2, #192	; 0xc0
 8002aa8:	0152      	lsls	r2, r2, #5
 8002aaa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aac:	187b      	adds	r3, r7, r1
 8002aae:	2202      	movs	r2, #2
 8002ab0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	187b      	adds	r3, r7, r1
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ab8:	187b      	adds	r3, r7, r1
 8002aba:	2203      	movs	r2, #3
 8002abc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8002abe:	187b      	adds	r3, r7, r1
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac4:	187a      	adds	r2, r7, r1
 8002ac6:	2390      	movs	r3, #144	; 0x90
 8002ac8:	05db      	lsls	r3, r3, #23
 8002aca:	0011      	movs	r1, r2
 8002acc:	0018      	movs	r0, r3
 8002ace:	f001 fc91 	bl	80043f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b00a      	add	sp, #40	; 0x28
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	40006400 	.word	0x40006400
 8002ae0:	40021000 	.word	0x40021000

08002ae4 <get_time>:
#define POSERRINT_LIMIT 1.0//[rad・s]
static float vel_pos_gain=0;
const float RADPERCNT = -2.0 * M_PI / ONEREVCNT; //[rad/cnt]
static float Kp_p = Kp_p_DEFAULT, Ki_p = Ki_p_DEFAULT, Kd_p = Kd_p_DEFAULT;

void get_time() { //wake only once in control loop
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
//	static uint32_t loopcounter;
//	loopcounter++;
//	TimeNow = loopcounter * dt_major;
	TimeNow = HAL_GetTick() * 0.001f;
 8002ae8:	f000 ff7a 	bl	80039e0 <HAL_GetTick>
 8002aec:	0003      	movs	r3, r0
 8002aee:	0018      	movs	r0, r3
 8002af0:	f7fe fb08 	bl	8001104 <__aeabi_ui2f>
 8002af4:	1c03      	adds	r3, r0, #0
 8002af6:	4905      	ldr	r1, [pc, #20]	; (8002b0c <get_time+0x28>)
 8002af8:	1c18      	adds	r0, r3, #0
 8002afa:	f7fd ffa3 	bl	8000a44 <__aeabi_fmul>
 8002afe:	1c03      	adds	r3, r0, #0
 8002b00:	1c1a      	adds	r2, r3, #0
 8002b02:	4b03      	ldr	r3, [pc, #12]	; (8002b10 <get_time+0x2c>)
 8002b04:	601a      	str	r2, [r3, #0]
}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	3a83126f 	.word	0x3a83126f
 8002b10:	20000050 	.word	0x20000050

08002b14 <get_pos>:
void get_pos() {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
	PosRes = Enc_Read() * RADPERCNT;
 8002b18:	f000 feec 	bl	80038f4 <Enc_Read>
 8002b1c:	0003      	movs	r3, r0
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f7fe faa6 	bl	8001070 <__aeabi_i2f>
 8002b24:	1c02      	adds	r2, r0, #0
 8002b26:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <get_pos+0x2c>)
 8002b28:	1c19      	adds	r1, r3, #0
 8002b2a:	1c10      	adds	r0, r2, #0
 8002b2c:	f7fd ff8a 	bl	8000a44 <__aeabi_fmul>
 8002b30:	1c03      	adds	r3, r0, #0
 8002b32:	1c1a      	adds	r2, r3, #0
 8002b34:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <get_pos+0x30>)
 8002b36:	601a      	str	r2, [r3, #0]
}
 8002b38:	46c0      	nop			; (mov r8, r8)
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	bdb2b8c2 	.word	0xbdb2b8c2
 8002b44:	20000030 	.word	0x20000030

08002b48 <get_vel>:
void get_vel() {
 8002b48:	b590      	push	{r4, r7, lr}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
	static float PosLast = 0.0f, TimeLast = 0.0f; //　過去位置，過去時間

	float dtheta = PosRes - PosLast;
 8002b4e:	4b27      	ldr	r3, [pc, #156]	; (8002bec <get_vel+0xa4>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	4b27      	ldr	r3, [pc, #156]	; (8002bf0 <get_vel+0xa8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	1c19      	adds	r1, r3, #0
 8002b58:	1c10      	adds	r0, r2, #0
 8002b5a:	f7fe f8a5 	bl	8000ca8 <__aeabi_fsub>
 8002b5e:	1c03      	adds	r3, r0, #0
 8002b60:	607b      	str	r3, [r7, #4]
	float spendtime = TimeNow - TimeLast;
 8002b62:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <get_vel+0xac>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	4b24      	ldr	r3, [pc, #144]	; (8002bf8 <get_vel+0xb0>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	1c19      	adds	r1, r3, #0
 8002b6c:	1c10      	adds	r0, r2, #0
 8002b6e:	f7fe f89b 	bl	8000ca8 <__aeabi_fsub>
 8002b72:	1c03      	adds	r3, r0, #0
 8002b74:	603b      	str	r3, [r7, #0]

	if (abs(dtheta) > M_PI_4) { //　±45度以上
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff fd52 	bl	8002620 <__aeabi_f2d>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	000c      	movs	r4, r1
 8002b80:	0018      	movs	r0, r3
 8002b82:	0021      	movs	r1, r4
 8002b84:	f004 f8ee 	bl	8006d64 <abs>
 8002b88:	0003      	movs	r3, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f7ff fd0e 	bl	80025ac <__aeabi_i2d>
 8002b90:	4a1a      	ldr	r2, [pc, #104]	; (8002bfc <get_vel+0xb4>)
 8002b92:	4b1b      	ldr	r3, [pc, #108]	; (8002c00 <get_vel+0xb8>)
 8002b94:	f7fd fb78 	bl	8000288 <__aeabi_dcmpgt>
 8002b98:	1e03      	subs	r3, r0, #0
 8002b9a:	d010      	beq.n	8002bbe <get_vel+0x76>
		VelRes = dtheta / spendtime; //　速度更新
 8002b9c:	6839      	ldr	r1, [r7, #0]
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7fd fd78 	bl	8000694 <__aeabi_fdiv>
 8002ba4:	1c03      	adds	r3, r0, #0
 8002ba6:	1c1a      	adds	r2, r3, #0
 8002ba8:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <get_vel+0xbc>)
 8002baa:	601a      	str	r2, [r3, #0]
		PosLast = PosRes; //　位置更新
 8002bac:	4b0f      	ldr	r3, [pc, #60]	; (8002bec <get_vel+0xa4>)
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <get_vel+0xa8>)
 8002bb2:	601a      	str	r2, [r3, #0]
		TimeLast = TimeNow; //　過去時間更新
 8002bb4:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <get_vel+0xac>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <get_vel+0xb0>)
 8002bba:	601a      	str	r2, [r3, #0]
	} else if (spendtime > 1) { //　1秒たっても半回転してない時
		VelRes = 0.0; //　停止と判断
		PosLast = PosRes; //　位置更新
		TimeLast = TimeNow; //　過去時間更新
	}
}
 8002bbc:	e012      	b.n	8002be4 <get_vel+0x9c>
	} else if (spendtime > 1) { //　1秒たっても半回転してない時
 8002bbe:	21fe      	movs	r1, #254	; 0xfe
 8002bc0:	0589      	lsls	r1, r1, #22
 8002bc2:	6838      	ldr	r0, [r7, #0]
 8002bc4:	f7fd fb9a 	bl	80002fc <__aeabi_fcmpgt>
 8002bc8:	1e03      	subs	r3, r0, #0
 8002bca:	d100      	bne.n	8002bce <get_vel+0x86>
}
 8002bcc:	e00a      	b.n	8002be4 <get_vel+0x9c>
		VelRes = 0.0; //　停止と判断
 8002bce:	4b0d      	ldr	r3, [pc, #52]	; (8002c04 <get_vel+0xbc>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
		PosLast = PosRes; //　位置更新
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <get_vel+0xa4>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <get_vel+0xa8>)
 8002bda:	601a      	str	r2, [r3, #0]
		TimeLast = TimeNow; //　過去時間更新
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <get_vel+0xac>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <get_vel+0xb0>)
 8002be2:	601a      	str	r2, [r3, #0]
}
 8002be4:	46c0      	nop			; (mov r8, r8)
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b003      	add	sp, #12
 8002bea:	bd90      	pop	{r4, r7, pc}
 8002bec:	20000030 	.word	0x20000030
 8002bf0:	2000005c 	.word	0x2000005c
 8002bf4:	20000050 	.word	0x20000050
 8002bf8:	20000060 	.word	0x20000060
 8002bfc:	54442d18 	.word	0x54442d18
 8002c00:	3fe921fb 	.word	0x3fe921fb
 8002c04:	20000040 	.word	0x20000040

08002c08 <control>:

void control() {
 8002c08:	b5b0      	push	{r4, r5, r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
	get_time(); //　時刻更新
 8002c0c:	f7ff ff6a 	bl	8002ae4 <get_time>
	get_pos(); //　位置更新
 8002c10:	f7ff ff80 	bl	8002b14 <get_pos>
	get_vel(); //　速度更新
 8002c14:	f7ff ff98 	bl	8002b48 <get_vel>

	PosCmd = 31.4 * sinf(TimeNow * M_PI); //2sで±10pirad=+-1800deg
 8002c18:	4b85      	ldr	r3, [pc, #532]	; (8002e30 <control+0x228>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	1c18      	adds	r0, r3, #0
 8002c1e:	f7ff fcff 	bl	8002620 <__aeabi_f2d>
 8002c22:	4a84      	ldr	r2, [pc, #528]	; (8002e34 <control+0x22c>)
 8002c24:	4b84      	ldr	r3, [pc, #528]	; (8002e38 <control+0x230>)
 8002c26:	f7fe fed1 	bl	80019cc <__aeabi_dmul>
 8002c2a:	0003      	movs	r3, r0
 8002c2c:	000c      	movs	r4, r1
 8002c2e:	0018      	movs	r0, r3
 8002c30:	0021      	movs	r1, r4
 8002c32:	f7ff fd47 	bl	80026c4 <__aeabi_d2f>
 8002c36:	1c03      	adds	r3, r0, #0
 8002c38:	1c18      	adds	r0, r3, #0
 8002c3a:	f004 f8c3 	bl	8006dc4 <sinf>
 8002c3e:	1c03      	adds	r3, r0, #0
 8002c40:	1c18      	adds	r0, r3, #0
 8002c42:	f7ff fced 	bl	8002620 <__aeabi_f2d>
 8002c46:	4a7d      	ldr	r2, [pc, #500]	; (8002e3c <control+0x234>)
 8002c48:	4b7d      	ldr	r3, [pc, #500]	; (8002e40 <control+0x238>)
 8002c4a:	f7fe febf 	bl	80019cc <__aeabi_dmul>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	000c      	movs	r4, r1
 8002c52:	0018      	movs	r0, r3
 8002c54:	0021      	movs	r1, r4
 8002c56:	f7ff fd35 	bl	80026c4 <__aeabi_d2f>
 8002c5a:	1c02      	adds	r2, r0, #0
 8002c5c:	4b79      	ldr	r3, [pc, #484]	; (8002e44 <control+0x23c>)
 8002c5e:	601a      	str	r2, [r3, #0]
	VelCmd = 31.4 * M_PI* sinf(TimeNow * M_PI+M_PI_2);
 8002c60:	4b73      	ldr	r3, [pc, #460]	; (8002e30 <control+0x228>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	1c18      	adds	r0, r3, #0
 8002c66:	f7ff fcdb 	bl	8002620 <__aeabi_f2d>
 8002c6a:	4a72      	ldr	r2, [pc, #456]	; (8002e34 <control+0x22c>)
 8002c6c:	4b72      	ldr	r3, [pc, #456]	; (8002e38 <control+0x230>)
 8002c6e:	f7fe fead 	bl	80019cc <__aeabi_dmul>
 8002c72:	0003      	movs	r3, r0
 8002c74:	000c      	movs	r4, r1
 8002c76:	0018      	movs	r0, r3
 8002c78:	0021      	movs	r1, r4
 8002c7a:	4a6e      	ldr	r2, [pc, #440]	; (8002e34 <control+0x22c>)
 8002c7c:	4b72      	ldr	r3, [pc, #456]	; (8002e48 <control+0x240>)
 8002c7e:	f7fe fa81 	bl	8001184 <__aeabi_dadd>
 8002c82:	0003      	movs	r3, r0
 8002c84:	000c      	movs	r4, r1
 8002c86:	0018      	movs	r0, r3
 8002c88:	0021      	movs	r1, r4
 8002c8a:	f7ff fd1b 	bl	80026c4 <__aeabi_d2f>
 8002c8e:	1c03      	adds	r3, r0, #0
 8002c90:	1c18      	adds	r0, r3, #0
 8002c92:	f004 f897 	bl	8006dc4 <sinf>
 8002c96:	1c03      	adds	r3, r0, #0
 8002c98:	1c18      	adds	r0, r3, #0
 8002c9a:	f7ff fcc1 	bl	8002620 <__aeabi_f2d>
 8002c9e:	4a6b      	ldr	r2, [pc, #428]	; (8002e4c <control+0x244>)
 8002ca0:	4b6b      	ldr	r3, [pc, #428]	; (8002e50 <control+0x248>)
 8002ca2:	f7fe fe93 	bl	80019cc <__aeabi_dmul>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	000c      	movs	r4, r1
 8002caa:	0018      	movs	r0, r3
 8002cac:	0021      	movs	r1, r4
 8002cae:	f7ff fd09 	bl	80026c4 <__aeabi_d2f>
 8002cb2:	1c02      	adds	r2, r0, #0
 8002cb4:	4b67      	ldr	r3, [pc, #412]	; (8002e54 <control+0x24c>)
 8002cb6:	601a      	str	r2, [r3, #0]
//	PosCmd = TimeNow;
//	PosCmd=100.0;
//	VelCmd = 10;

	//　位置制御モード
	PosErr = PosCmd - PosRes; //　位置偏差
 8002cb8:	4b62      	ldr	r3, [pc, #392]	; (8002e44 <control+0x23c>)
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	4b66      	ldr	r3, [pc, #408]	; (8002e58 <control+0x250>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	1c19      	adds	r1, r3, #0
 8002cc2:	1c10      	adds	r0, r2, #0
 8002cc4:	f7fd fff0 	bl	8000ca8 <__aeabi_fsub>
 8002cc8:	1c03      	adds	r3, r0, #0
 8002cca:	1c1a      	adds	r2, r3, #0
 8002ccc:	4b63      	ldr	r3, [pc, #396]	; (8002e5c <control+0x254>)
 8002cce:	601a      	str	r2, [r3, #0]
//	if (abs(PosErr) < M_PI)  //残り半周以内なら
//		VelCmd = PosErr * vel_pos_gain; //　残角度に比例した速度

	VelErr = VelCmd - VelRes; //　速度偏差
 8002cd0:	4b60      	ldr	r3, [pc, #384]	; (8002e54 <control+0x24c>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4b62      	ldr	r3, [pc, #392]	; (8002e60 <control+0x258>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	1c19      	adds	r1, r3, #0
 8002cda:	1c10      	adds	r0, r2, #0
 8002cdc:	f7fd ffe4 	bl	8000ca8 <__aeabi_fsub>
 8002ce0:	1c03      	adds	r3, r0, #0
 8002ce2:	1c1a      	adds	r2, r3, #0
 8002ce4:	4b5f      	ldr	r3, [pc, #380]	; (8002e64 <control+0x25c>)
 8002ce6:	601a      	str	r2, [r3, #0]
	PosErrInt += PosErr * dt_major; // 積分成分
 8002ce8:	4b5c      	ldr	r3, [pc, #368]	; (8002e5c <control+0x254>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	495e      	ldr	r1, [pc, #376]	; (8002e68 <control+0x260>)
 8002cee:	1c18      	adds	r0, r3, #0
 8002cf0:	f7fd fea8 	bl	8000a44 <__aeabi_fmul>
 8002cf4:	1c03      	adds	r3, r0, #0
 8002cf6:	1c1a      	adds	r2, r3, #0
 8002cf8:	4b5c      	ldr	r3, [pc, #368]	; (8002e6c <control+0x264>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	1c19      	adds	r1, r3, #0
 8002cfe:	1c10      	adds	r0, r2, #0
 8002d00:	f7fd fb2e 	bl	8000360 <__aeabi_fadd>
 8002d04:	1c03      	adds	r3, r0, #0
 8002d06:	1c1a      	adds	r2, r3, #0
 8002d08:	4b58      	ldr	r3, [pc, #352]	; (8002e6c <control+0x264>)
 8002d0a:	601a      	str	r2, [r3, #0]
	if (abs(PosErrInt) > POSERRINT_LIMIT) //　積分成分の範囲内強制
 8002d0c:	4b57      	ldr	r3, [pc, #348]	; (8002e6c <control+0x264>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	1c18      	adds	r0, r3, #0
 8002d12:	f7ff fc85 	bl	8002620 <__aeabi_f2d>
 8002d16:	0003      	movs	r3, r0
 8002d18:	000c      	movs	r4, r1
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	0021      	movs	r1, r4
 8002d1e:	f004 f821 	bl	8006d64 <abs>
 8002d22:	0003      	movs	r3, r0
 8002d24:	0018      	movs	r0, r3
 8002d26:	f7ff fc41 	bl	80025ac <__aeabi_i2d>
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	4b50      	ldr	r3, [pc, #320]	; (8002e70 <control+0x268>)
 8002d2e:	f7fd faab 	bl	8000288 <__aeabi_dcmpgt>
 8002d32:	1e03      	subs	r3, r0, #0
 8002d34:	d019      	beq.n	8002d6a <control+0x162>
		PosErrInt = constrain(PosErrInt, -POSERRINT_LIMIT, POSERRINT_LIMIT);
 8002d36:	4b4d      	ldr	r3, [pc, #308]	; (8002e6c <control+0x264>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	494e      	ldr	r1, [pc, #312]	; (8002e74 <control+0x26c>)
 8002d3c:	1c18      	adds	r0, r3, #0
 8002d3e:	f7fd fac9 	bl	80002d4 <__aeabi_fcmplt>
 8002d42:	1e03      	subs	r3, r0, #0
 8002d44:	d001      	beq.n	8002d4a <control+0x142>
 8002d46:	4b4b      	ldr	r3, [pc, #300]	; (8002e74 <control+0x26c>)
 8002d48:	e00d      	b.n	8002d66 <control+0x15e>
 8002d4a:	4b48      	ldr	r3, [pc, #288]	; (8002e6c <control+0x264>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	21fe      	movs	r1, #254	; 0xfe
 8002d50:	0589      	lsls	r1, r1, #22
 8002d52:	1c18      	adds	r0, r3, #0
 8002d54:	f7fd fad2 	bl	80002fc <__aeabi_fcmpgt>
 8002d58:	1e03      	subs	r3, r0, #0
 8002d5a:	d002      	beq.n	8002d62 <control+0x15a>
 8002d5c:	23fe      	movs	r3, #254	; 0xfe
 8002d5e:	059b      	lsls	r3, r3, #22
 8002d60:	e001      	b.n	8002d66 <control+0x15e>
 8002d62:	4b42      	ldr	r3, [pc, #264]	; (8002e6c <control+0x264>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a41      	ldr	r2, [pc, #260]	; (8002e6c <control+0x264>)
 8002d68:	6013      	str	r3, [r2, #0]

	AccelerationRef = Kp_p * PosErr + Kd_p * VelErr + Ki_p * PosErrInt;
 8002d6a:	4b43      	ldr	r3, [pc, #268]	; (8002e78 <control+0x270>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	4b3b      	ldr	r3, [pc, #236]	; (8002e5c <control+0x254>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	1c19      	adds	r1, r3, #0
 8002d74:	1c10      	adds	r0, r2, #0
 8002d76:	f7fd fe65 	bl	8000a44 <__aeabi_fmul>
 8002d7a:	1c03      	adds	r3, r0, #0
 8002d7c:	1c1c      	adds	r4, r3, #0
 8002d7e:	4b3f      	ldr	r3, [pc, #252]	; (8002e7c <control+0x274>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	4b38      	ldr	r3, [pc, #224]	; (8002e64 <control+0x25c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	1c19      	adds	r1, r3, #0
 8002d88:	1c10      	adds	r0, r2, #0
 8002d8a:	f7fd fe5b 	bl	8000a44 <__aeabi_fmul>
 8002d8e:	1c03      	adds	r3, r0, #0
 8002d90:	1c19      	adds	r1, r3, #0
 8002d92:	1c20      	adds	r0, r4, #0
 8002d94:	f7fd fae4 	bl	8000360 <__aeabi_fadd>
 8002d98:	1c03      	adds	r3, r0, #0
 8002d9a:	1c1c      	adds	r4, r3, #0
 8002d9c:	4b38      	ldr	r3, [pc, #224]	; (8002e80 <control+0x278>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4b32      	ldr	r3, [pc, #200]	; (8002e6c <control+0x264>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	1c19      	adds	r1, r3, #0
 8002da6:	1c10      	adds	r0, r2, #0
 8002da8:	f7fd fe4c 	bl	8000a44 <__aeabi_fmul>
 8002dac:	1c03      	adds	r3, r0, #0
 8002dae:	1c19      	adds	r1, r3, #0
 8002db0:	1c20      	adds	r0, r4, #0
 8002db2:	f7fd fad5 	bl	8000360 <__aeabi_fadd>
 8002db6:	1c03      	adds	r3, r0, #0
 8002db8:	1c1a      	adds	r2, r3, #0
 8002dba:	4b32      	ldr	r3, [pc, #200]	; (8002e84 <control+0x27c>)
 8002dbc:	601a      	str	r2, [r3, #0]
//	static const float Acceleration2Current = Mn / Ktn;
//	CurrentRef = AccelerationRef * Acceleration2Current;
//	CurCmd = CurrentRef;
	VoltageRef = AccelerationRef;//CurCmd * Rn;
 8002dbe:	4b31      	ldr	r3, [pc, #196]	; (8002e84 <control+0x27c>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	4b31      	ldr	r3, [pc, #196]	; (8002e88 <control+0x280>)
 8002dc4:	601a      	str	r2, [r3, #0]
	Duty_Out(constrain(VoltageRef / 12, -0.5, 0.5));
 8002dc6:	4b30      	ldr	r3, [pc, #192]	; (8002e88 <control+0x280>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4930      	ldr	r1, [pc, #192]	; (8002e8c <control+0x284>)
 8002dcc:	1c18      	adds	r0, r3, #0
 8002dce:	f7fd fc61 	bl	8000694 <__aeabi_fdiv>
 8002dd2:	1c03      	adds	r3, r0, #0
 8002dd4:	21bf      	movs	r1, #191	; 0xbf
 8002dd6:	0609      	lsls	r1, r1, #24
 8002dd8:	1c18      	adds	r0, r3, #0
 8002dda:	f7fd fa7b 	bl	80002d4 <__aeabi_fcmplt>
 8002dde:	1e03      	subs	r3, r0, #0
 8002de0:	d002      	beq.n	8002de8 <control+0x1e0>
 8002de2:	2300      	movs	r3, #0
 8002de4:	4c2a      	ldr	r4, [pc, #168]	; (8002e90 <control+0x288>)
 8002de6:	e01c      	b.n	8002e22 <control+0x21a>
 8002de8:	4b27      	ldr	r3, [pc, #156]	; (8002e88 <control+0x280>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4927      	ldr	r1, [pc, #156]	; (8002e8c <control+0x284>)
 8002dee:	1c18      	adds	r0, r3, #0
 8002df0:	f7fd fc50 	bl	8000694 <__aeabi_fdiv>
 8002df4:	1c03      	adds	r3, r0, #0
 8002df6:	21fc      	movs	r1, #252	; 0xfc
 8002df8:	0589      	lsls	r1, r1, #22
 8002dfa:	1c18      	adds	r0, r3, #0
 8002dfc:	f7fd fa7e 	bl	80002fc <__aeabi_fcmpgt>
 8002e00:	1e03      	subs	r3, r0, #0
 8002e02:	d002      	beq.n	8002e0a <control+0x202>
 8002e04:	2300      	movs	r3, #0
 8002e06:	4c23      	ldr	r4, [pc, #140]	; (8002e94 <control+0x28c>)
 8002e08:	e00b      	b.n	8002e22 <control+0x21a>
 8002e0a:	4b1f      	ldr	r3, [pc, #124]	; (8002e88 <control+0x280>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	491f      	ldr	r1, [pc, #124]	; (8002e8c <control+0x284>)
 8002e10:	1c18      	adds	r0, r3, #0
 8002e12:	f7fd fc3f 	bl	8000694 <__aeabi_fdiv>
 8002e16:	1c03      	adds	r3, r0, #0
 8002e18:	1c18      	adds	r0, r3, #0
 8002e1a:	f7ff fc01 	bl	8002620 <__aeabi_f2d>
 8002e1e:	0003      	movs	r3, r0
 8002e20:	000c      	movs	r4, r1
 8002e22:	0018      	movs	r0, r3
 8002e24:	0021      	movs	r1, r4
 8002e26:	f000 fcf5 	bl	8003814 <Duty_Out>
//	Duty_Out(0.3);
//	setMotorVoltage(VoltageRef);
}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e30:	20000050 	.word	0x20000050
 8002e34:	54442d18 	.word	0x54442d18
 8002e38:	400921fb 	.word	0x400921fb
 8002e3c:	66666666 	.word	0x66666666
 8002e40:	403f6666 	.word	0x403f6666
 8002e44:	2000002c 	.word	0x2000002c
 8002e48:	3ff921fb 	.word	0x3ff921fb
 8002e4c:	377c7f72 	.word	0x377c7f72
 8002e50:	4058a958 	.word	0x4058a958
 8002e54:	2000003c 	.word	0x2000003c
 8002e58:	20000030 	.word	0x20000030
 8002e5c:	20000034 	.word	0x20000034
 8002e60:	20000040 	.word	0x20000040
 8002e64:	20000044 	.word	0x20000044
 8002e68:	3951b717 	.word	0x3951b717
 8002e6c:	20000038 	.word	0x20000038
 8002e70:	3ff00000 	.word	0x3ff00000
 8002e74:	bf800000 	.word	0xbf800000
 8002e78:	20000000 	.word	0x20000000
 8002e7c:	20000058 	.word	0x20000058
 8002e80:	20000054 	.word	0x20000054
 8002e84:	20000048 	.word	0x20000048
 8002e88:	2000004c 	.word	0x2000004c
 8002e8c:	41400000 	.word	0x41400000
 8002e90:	bfe00000 	.word	0xbfe00000
 8002e94:	3fe00000 	.word	0x3fe00000

08002e98 <get_vel_cmd>:
float get_vel_cmd() {
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
	return VelCmd;
 8002e9c:	4b02      	ldr	r3, [pc, #8]	; (8002ea8 <get_vel_cmd+0x10>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
}
 8002ea0:	1c18      	adds	r0, r3, #0
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	2000003c 	.word	0x2000003c

08002eac <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002eb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <MX_DMA_Init+0x38>)
 8002eb4:	695a      	ldr	r2, [r3, #20]
 8002eb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <MX_DMA_Init+0x38>)
 8002eb8:	2101      	movs	r1, #1
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	615a      	str	r2, [r3, #20]
 8002ebe:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <MX_DMA_Init+0x38>)
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	607b      	str	r3, [r7, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2103      	movs	r1, #3
 8002ece:	2009      	movs	r0, #9
 8002ed0:	f001 f964 	bl	800419c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002ed4:	2009      	movs	r0, #9
 8002ed6:	f001 f976 	bl	80041c6 <HAL_NVIC_EnableIRQ>

}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	46bd      	mov	sp, r7
 8002ede:	b002      	add	sp, #8
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	40021000 	.word	0x40021000

08002ee8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4a06      	ldr	r2, [pc, #24]	; (8002f10 <vApplicationGetIdleTaskMemory+0x28>)
 8002ef8:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	4a05      	ldr	r2, [pc, #20]	; (8002f14 <vApplicationGetIdleTaskMemory+0x2c>)
 8002efe:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2264      	movs	r2, #100	; 0x64
 8002f04:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	b004      	add	sp, #16
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	20000064 	.word	0x20000064
 8002f14:	200000b4 	.word	0x200000b4

08002f18 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002f18:	b5b0      	push	{r4, r5, r7, lr}
 8002f1a:	b08e      	sub	sp, #56	; 0x38
 8002f1c:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 100, defaultTaskBuffer, &defaultTaskControlBlock);
 8002f1e:	211c      	movs	r1, #28
 8002f20:	187b      	adds	r3, r7, r1
 8002f22:	4a11      	ldr	r2, [pc, #68]	; (8002f68 <MX_FREERTOS_Init+0x50>)
 8002f24:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002f26:	c331      	stmia	r3!, {r0, r4, r5}
 8002f28:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002f2a:	c331      	stmia	r3!, {r0, r4, r5}
 8002f2c:	6812      	ldr	r2, [r2, #0]
 8002f2e:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002f30:	187b      	adds	r3, r7, r1
 8002f32:	2100      	movs	r1, #0
 8002f34:	0018      	movs	r0, r3
 8002f36:	f003 f8e8 	bl	800610a <osThreadCreate>
 8002f3a:	0002      	movs	r2, r0
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <MX_FREERTOS_Init+0x54>)
 8002f3e:	601a      	str	r2, [r3, #0]

  /* definition and creation of Control */
  osThreadStaticDef(Control, StartControl, osPriorityRealtime, 0, 100, myTask02Buffer, &myTask02ControlBlock);
 8002f40:	003b      	movs	r3, r7
 8002f42:	4a0b      	ldr	r2, [pc, #44]	; (8002f70 <MX_FREERTOS_Init+0x58>)
 8002f44:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f46:	c313      	stmia	r3!, {r0, r1, r4}
 8002f48:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f4a:	c313      	stmia	r3!, {r0, r1, r4}
 8002f4c:	6812      	ldr	r2, [r2, #0]
 8002f4e:	601a      	str	r2, [r3, #0]
  ControlHandle = osThreadCreate(osThread(Control), NULL);
 8002f50:	003b      	movs	r3, r7
 8002f52:	2100      	movs	r1, #0
 8002f54:	0018      	movs	r0, r3
 8002f56:	f003 f8d8 	bl	800610a <osThreadCreate>
 8002f5a:	0002      	movs	r2, r0
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <MX_FREERTOS_Init+0x5c>)
 8002f5e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002f60:	46c0      	nop			; (mov r8, r8)
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b00e      	add	sp, #56	; 0x38
 8002f66:	bdb0      	pop	{r4, r5, r7, pc}
 8002f68:	080079c8 	.word	0x080079c8
 8002f6c:	20000498 	.word	0x20000498
 8002f70:	080079ec 	.word	0x080079ec
 8002f74:	2000049c 	.word	0x2000049c

08002f78 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	TickType_t xPreviousWakeTime = xTaskGetTickCount();
 8002f80:	f003 fbf2 	bl	8006768 <xTaskGetTickCount>
 8002f84:	0003      	movs	r3, r0
 8002f86:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {
		vTaskDelayUntil(&xPreviousWakeTime, 100); //10k/100=100Hz
 8002f88:	230c      	movs	r3, #12
 8002f8a:	18fb      	adds	r3, r7, r3
 8002f8c:	2164      	movs	r1, #100	; 0x64
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f003 faa8 	bl	80064e4 <vTaskDelayUntil>
		LED_Go2Go(get_vel_cmd());
 8002f94:	f7ff ff80 	bl	8002e98 <get_vel_cmd>
 8002f98:	1c03      	adds	r3, r0, #0
 8002f9a:	1c18      	adds	r0, r3, #0
 8002f9c:	f7fe f848 	bl	8001030 <__aeabi_f2iz>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f000 f88e 	bl	80030c4 <LED_Go2Go>
		vTaskDelayUntil(&xPreviousWakeTime, 100); //10k/100=100Hz
 8002fa8:	e7ee      	b.n	8002f88 <StartDefaultTask+0x10>

08002faa <StartControl>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControl */
void StartControl(void const * argument)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControl */
	TickType_t pxPreviousWakeTime = xTaskGetTickCount();
 8002fb2:	f003 fbd9 	bl	8006768 <xTaskGetTickCount>
 8002fb6:	0003      	movs	r3, r0
 8002fb8:	60fb      	str	r3, [r7, #12]
	Enc_Start(); //init encoder
 8002fba:	f000 fc89 	bl	80038d0 <Enc_Start>
	PWM_Start();
 8002fbe:	f000 fc0d 	bl	80037dc <PWM_Start>
	/* Infinite loop */
	for (;;) {
		vTaskDelayUntil(&pxPreviousWakeTime, 2); //10k/2=5kHz=0.0002s
 8002fc2:	230c      	movs	r3, #12
 8002fc4:	18fb      	adds	r3, r7, r3
 8002fc6:	2102      	movs	r1, #2
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f003 fa8b 	bl	80064e4 <vTaskDelayUntil>
		control();
 8002fce:	f7ff fe1b 	bl	8002c08 <control>
		vTaskDelayUntil(&pxPreviousWakeTime, 2); //10k/2=5kHz=0.0002s
 8002fd2:	e7f6      	b.n	8002fc2 <StartControl+0x18>

08002fd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b089      	sub	sp, #36	; 0x24
 8002fd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fda:	240c      	movs	r4, #12
 8002fdc:	193b      	adds	r3, r7, r4
 8002fde:	0018      	movs	r0, r3
 8002fe0:	2314      	movs	r3, #20
 8002fe2:	001a      	movs	r2, r3
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	f003 fee5 	bl	8006db4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fea:	4b33      	ldr	r3, [pc, #204]	; (80030b8 <MX_GPIO_Init+0xe4>)
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	4b32      	ldr	r3, [pc, #200]	; (80030b8 <MX_GPIO_Init+0xe4>)
 8002ff0:	2180      	movs	r1, #128	; 0x80
 8002ff2:	0289      	lsls	r1, r1, #10
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	615a      	str	r2, [r3, #20]
 8002ff8:	4b2f      	ldr	r3, [pc, #188]	; (80030b8 <MX_GPIO_Init+0xe4>)
 8002ffa:	695a      	ldr	r2, [r3, #20]
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	029b      	lsls	r3, r3, #10
 8003000:	4013      	ands	r3, r2
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003006:	4b2c      	ldr	r3, [pc, #176]	; (80030b8 <MX_GPIO_Init+0xe4>)
 8003008:	695a      	ldr	r2, [r3, #20]
 800300a:	4b2b      	ldr	r3, [pc, #172]	; (80030b8 <MX_GPIO_Init+0xe4>)
 800300c:	2180      	movs	r1, #128	; 0x80
 800300e:	02c9      	lsls	r1, r1, #11
 8003010:	430a      	orrs	r2, r1
 8003012:	615a      	str	r2, [r3, #20]
 8003014:	4b28      	ldr	r3, [pc, #160]	; (80030b8 <MX_GPIO_Init+0xe4>)
 8003016:	695a      	ldr	r2, [r3, #20]
 8003018:	2380      	movs	r3, #128	; 0x80
 800301a:	02db      	lsls	r3, r3, #11
 800301c:	4013      	ands	r3, r2
 800301e:	607b      	str	r3, [r7, #4]
 8003020:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA2_Pin|PA15_Pin, GPIO_PIN_RESET);
 8003022:	4926      	ldr	r1, [pc, #152]	; (80030bc <MX_GPIO_Init+0xe8>)
 8003024:	2390      	movs	r3, #144	; 0x90
 8003026:	05db      	lsls	r3, r3, #23
 8003028:	2200      	movs	r2, #0
 800302a:	0018      	movs	r0, r3
 800302c:	f001 fb4a 	bl	80046c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RA_BK_Pin|LD5_11_Pin|LD4_10_Pin|LD3_9_Pin 
 8003030:	23fc      	movs	r3, #252	; 0xfc
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	4822      	ldr	r0, [pc, #136]	; (80030c0 <MX_GPIO_Init+0xec>)
 8003036:	2200      	movs	r2, #0
 8003038:	0019      	movs	r1, r3
 800303a:	f001 fb43 	bl	80046c4 <HAL_GPIO_WritePin>
                          |LD2_8_Pin|LD1_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = PA2_Pin|PA15_Pin;
 800303e:	193b      	adds	r3, r7, r4
 8003040:	4a1e      	ldr	r2, [pc, #120]	; (80030bc <MX_GPIO_Init+0xe8>)
 8003042:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003044:	193b      	adds	r3, r7, r4
 8003046:	2201      	movs	r2, #1
 8003048:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304a:	193b      	adds	r3, r7, r4
 800304c:	2200      	movs	r2, #0
 800304e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003050:	193b      	adds	r3, r7, r4
 8003052:	2200      	movs	r2, #0
 8003054:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003056:	193a      	adds	r2, r7, r4
 8003058:	2390      	movs	r3, #144	; 0x90
 800305a:	05db      	lsls	r3, r3, #23
 800305c:	0011      	movs	r1, r2
 800305e:	0018      	movs	r0, r3
 8003060:	f001 f9c8 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW4_Pin|SW3_Pin|SW2_Pin;
 8003064:	193b      	adds	r3, r7, r4
 8003066:	22e0      	movs	r2, #224	; 0xe0
 8003068:	00d2      	lsls	r2, r2, #3
 800306a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800306c:	193b      	adds	r3, r7, r4
 800306e:	2200      	movs	r2, #0
 8003070:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003072:	193b      	adds	r3, r7, r4
 8003074:	2201      	movs	r2, #1
 8003076:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003078:	193a      	adds	r2, r7, r4
 800307a:	2390      	movs	r3, #144	; 0x90
 800307c:	05db      	lsls	r3, r3, #23
 800307e:	0011      	movs	r1, r2
 8003080:	0018      	movs	r0, r3
 8003082:	f001 f9b7 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin */
  GPIO_InitStruct.Pin = RA_BK_Pin|LD5_11_Pin|LD4_10_Pin|LD3_9_Pin 
 8003086:	0021      	movs	r1, r4
 8003088:	187b      	adds	r3, r7, r1
 800308a:	22fc      	movs	r2, #252	; 0xfc
 800308c:	0052      	lsls	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]
                          |LD2_8_Pin|LD1_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003090:	187b      	adds	r3, r7, r1
 8003092:	2201      	movs	r2, #1
 8003094:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003096:	187b      	adds	r3, r7, r1
 8003098:	2200      	movs	r2, #0
 800309a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309c:	187b      	adds	r3, r7, r1
 800309e:	2200      	movs	r2, #0
 80030a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a2:	187b      	adds	r3, r7, r1
 80030a4:	4a06      	ldr	r2, [pc, #24]	; (80030c0 <MX_GPIO_Init+0xec>)
 80030a6:	0019      	movs	r1, r3
 80030a8:	0010      	movs	r0, r2
 80030aa:	f001 f9a3 	bl	80043f4 <HAL_GPIO_Init>

}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b009      	add	sp, #36	; 0x24
 80030b4:	bd90      	pop	{r4, r7, pc}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	40021000 	.word	0x40021000
 80030bc:	00008004 	.word	0x00008004
 80030c0:	48000400 	.word	0x48000400

080030c4 <LED_Go2Go>:

/* USER CODE BEGIN 2 */
void LED_Go2Go(int x) {
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RA_BK_GPIO_Port, RA_BK_Pin, x > 0);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	17da      	asrs	r2, r3, #31
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	0fdb      	lsrs	r3, r3, #31
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	001a      	movs	r2, r3
 80030d8:	4b49      	ldr	r3, [pc, #292]	; (8003200 <LED_Go2Go+0x13c>)
 80030da:	2108      	movs	r1, #8
 80030dc:	0018      	movs	r0, r3
 80030de:	f001 faf1 	bl	80046c4 <HAL_GPIO_WritePin>
	if (x > 0) {
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	dd44      	ble.n	8003172 <LED_Go2Go+0xae>
		HAL_GPIO_WritePin(LD1_7_GPIO_Port, LD1_7_Pin, x < 5);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2204      	movs	r2, #4
 80030ec:	0fd8      	lsrs	r0, r3, #31
 80030ee:	17d1      	asrs	r1, r2, #31
 80030f0:	429a      	cmp	r2, r3
 80030f2:	4148      	adcs	r0, r1
 80030f4:	0003      	movs	r3, r0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	001a      	movs	r2, r3
 80030fa:	2380      	movs	r3, #128	; 0x80
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4840      	ldr	r0, [pc, #256]	; (8003200 <LED_Go2Go+0x13c>)
 8003100:	0019      	movs	r1, r3
 8003102:	f001 fadf 	bl	80046c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_8_GPIO_Port, LD2_8_Pin, x < 4);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2203      	movs	r2, #3
 800310a:	0fd8      	lsrs	r0, r3, #31
 800310c:	17d1      	asrs	r1, r2, #31
 800310e:	429a      	cmp	r2, r3
 8003110:	4148      	adcs	r0, r1
 8003112:	0003      	movs	r3, r0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	001a      	movs	r2, r3
 8003118:	4b39      	ldr	r3, [pc, #228]	; (8003200 <LED_Go2Go+0x13c>)
 800311a:	2180      	movs	r1, #128	; 0x80
 800311c:	0018      	movs	r0, r3
 800311e:	f001 fad1 	bl	80046c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_9_GPIO_Port, LD3_9_Pin, x < 3);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2202      	movs	r2, #2
 8003126:	0fd8      	lsrs	r0, r3, #31
 8003128:	17d1      	asrs	r1, r2, #31
 800312a:	429a      	cmp	r2, r3
 800312c:	4148      	adcs	r0, r1
 800312e:	0003      	movs	r3, r0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	001a      	movs	r2, r3
 8003134:	4b32      	ldr	r3, [pc, #200]	; (8003200 <LED_Go2Go+0x13c>)
 8003136:	2140      	movs	r1, #64	; 0x40
 8003138:	0018      	movs	r0, r3
 800313a:	f001 fac3 	bl	80046c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_10_GPIO_Port, LD4_10_Pin, x < 2);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	0fd8      	lsrs	r0, r3, #31
 8003144:	17d1      	asrs	r1, r2, #31
 8003146:	429a      	cmp	r2, r3
 8003148:	4148      	adcs	r0, r1
 800314a:	0003      	movs	r3, r0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	001a      	movs	r2, r3
 8003150:	4b2b      	ldr	r3, [pc, #172]	; (8003200 <LED_Go2Go+0x13c>)
 8003152:	2120      	movs	r1, #32
 8003154:	0018      	movs	r0, r3
 8003156:	f001 fab5 	bl	80046c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_11_GPIO_Port, LD5_11_Pin, x < 1);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	1e5a      	subs	r2, r3, #1
 800315e:	4313      	orrs	r3, r2
 8003160:	0fdb      	lsrs	r3, r3, #31
 8003162:	b2db      	uxtb	r3, r3
 8003164:	001a      	movs	r2, r3
 8003166:	4b26      	ldr	r3, [pc, #152]	; (8003200 <LED_Go2Go+0x13c>)
 8003168:	2110      	movs	r1, #16
 800316a:	0018      	movs	r0, r3
 800316c:	f001 faaa 	bl	80046c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_8_GPIO_Port, LD2_8_Pin, x < -1);
		HAL_GPIO_WritePin(LD3_9_GPIO_Port, LD3_9_Pin, x < -2);
		HAL_GPIO_WritePin(LD4_10_GPIO_Port, LD4_10_Pin, x < -3);
		HAL_GPIO_WritePin(LD5_11_GPIO_Port, LD5_11_Pin, x < -4);
	}
}
 8003170:	e041      	b.n	80031f6 <LED_Go2Go+0x132>
		HAL_GPIO_WritePin(LD1_7_GPIO_Port, LD1_7_Pin, x < 0);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	0fdb      	lsrs	r3, r3, #31
 8003176:	b2db      	uxtb	r3, r3
 8003178:	001a      	movs	r2, r3
 800317a:	2380      	movs	r3, #128	; 0x80
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	4820      	ldr	r0, [pc, #128]	; (8003200 <LED_Go2Go+0x13c>)
 8003180:	0019      	movs	r1, r3
 8003182:	f001 fa9f 	bl	80046c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_8_GPIO_Port, LD2_8_Pin, x < -1);
 8003186:	2301      	movs	r3, #1
 8003188:	1c1a      	adds	r2, r3, #0
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3301      	adds	r3, #1
 800318e:	db01      	blt.n	8003194 <LED_Go2Go+0xd0>
 8003190:	2300      	movs	r3, #0
 8003192:	1c1a      	adds	r2, r3, #0
 8003194:	b2d3      	uxtb	r3, r2
 8003196:	001a      	movs	r2, r3
 8003198:	4b19      	ldr	r3, [pc, #100]	; (8003200 <LED_Go2Go+0x13c>)
 800319a:	2180      	movs	r1, #128	; 0x80
 800319c:	0018      	movs	r0, r3
 800319e:	f001 fa91 	bl	80046c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_9_GPIO_Port, LD3_9_Pin, x < -2);
 80031a2:	2301      	movs	r3, #1
 80031a4:	1c1a      	adds	r2, r3, #0
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3302      	adds	r3, #2
 80031aa:	db01      	blt.n	80031b0 <LED_Go2Go+0xec>
 80031ac:	2300      	movs	r3, #0
 80031ae:	1c1a      	adds	r2, r3, #0
 80031b0:	b2d3      	uxtb	r3, r2
 80031b2:	001a      	movs	r2, r3
 80031b4:	4b12      	ldr	r3, [pc, #72]	; (8003200 <LED_Go2Go+0x13c>)
 80031b6:	2140      	movs	r1, #64	; 0x40
 80031b8:	0018      	movs	r0, r3
 80031ba:	f001 fa83 	bl	80046c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_10_GPIO_Port, LD4_10_Pin, x < -3);
 80031be:	2301      	movs	r3, #1
 80031c0:	1c1a      	adds	r2, r3, #0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	3303      	adds	r3, #3
 80031c6:	db01      	blt.n	80031cc <LED_Go2Go+0x108>
 80031c8:	2300      	movs	r3, #0
 80031ca:	1c1a      	adds	r2, r3, #0
 80031cc:	b2d3      	uxtb	r3, r2
 80031ce:	001a      	movs	r2, r3
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <LED_Go2Go+0x13c>)
 80031d2:	2120      	movs	r1, #32
 80031d4:	0018      	movs	r0, r3
 80031d6:	f001 fa75 	bl	80046c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_11_GPIO_Port, LD5_11_Pin, x < -4);
 80031da:	2301      	movs	r3, #1
 80031dc:	1c1a      	adds	r2, r3, #0
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3304      	adds	r3, #4
 80031e2:	db01      	blt.n	80031e8 <LED_Go2Go+0x124>
 80031e4:	2300      	movs	r3, #0
 80031e6:	1c1a      	adds	r2, r3, #0
 80031e8:	b2d3      	uxtb	r3, r2
 80031ea:	001a      	movs	r2, r3
 80031ec:	4b04      	ldr	r3, [pc, #16]	; (8003200 <LED_Go2Go+0x13c>)
 80031ee:	2110      	movs	r1, #16
 80031f0:	0018      	movs	r0, r3
 80031f2:	f001 fa67 	bl	80046c4 <HAL_GPIO_WritePin>
}
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	46bd      	mov	sp, r7
 80031fa:	b002      	add	sp, #8
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	48000400 	.word	0x48000400

08003204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003208:	f000 fbc4 	bl	8003994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800320c:	f000 f811 	bl	8003232 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003210:	f7ff fee0 	bl	8002fd4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003214:	f7ff fe4a 	bl	8002eac <MX_DMA_Init>
  MX_ADC_Init();
 8003218:	f7ff faf6 	bl	8002808 <MX_ADC_Init>
  MX_CAN_Init();
 800321c:	f7ff fbdc 	bl	80029d8 <MX_CAN_Init>
  MX_TIM2_Init();
 8003220:	f000 f92a 	bl	8003478 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003224:	f000 f97c 	bl	8003520 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8003228:	f7ff fe76 	bl	8002f18 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800322c:	f002 ff65 	bl	80060fa <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8003230:	e7fe      	b.n	8003230 <main+0x2c>

08003232 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003232:	b590      	push	{r4, r7, lr}
 8003234:	b093      	sub	sp, #76	; 0x4c
 8003236:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003238:	2414      	movs	r4, #20
 800323a:	193b      	adds	r3, r7, r4
 800323c:	0018      	movs	r0, r3
 800323e:	2334      	movs	r3, #52	; 0x34
 8003240:	001a      	movs	r2, r3
 8003242:	2100      	movs	r1, #0
 8003244:	f003 fdb6 	bl	8006db4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003248:	1d3b      	adds	r3, r7, #4
 800324a:	0018      	movs	r0, r3
 800324c:	2310      	movs	r3, #16
 800324e:	001a      	movs	r2, r3
 8003250:	2100      	movs	r1, #0
 8003252:	f003 fdaf 	bl	8006db4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8003256:	0021      	movs	r1, r4
 8003258:	187b      	adds	r3, r7, r1
 800325a:	2212      	movs	r2, #18
 800325c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800325e:	187b      	adds	r3, r7, r1
 8003260:	2201      	movs	r2, #1
 8003262:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8003264:	187b      	adds	r3, r7, r1
 8003266:	2201      	movs	r2, #1
 8003268:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800326a:	187b      	adds	r3, r7, r1
 800326c:	2210      	movs	r2, #16
 800326e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8003270:	187b      	adds	r3, r7, r1
 8003272:	2210      	movs	r2, #16
 8003274:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003276:	187b      	adds	r3, r7, r1
 8003278:	2202      	movs	r2, #2
 800327a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800327c:	187b      	adds	r3, r7, r1
 800327e:	2280      	movs	r2, #128	; 0x80
 8003280:	0212      	lsls	r2, r2, #8
 8003282:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003284:	187b      	adds	r3, r7, r1
 8003286:	2280      	movs	r2, #128	; 0x80
 8003288:	0352      	lsls	r2, r2, #13
 800328a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800328c:	187b      	adds	r3, r7, r1
 800328e:	2200      	movs	r2, #0
 8003290:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003292:	187b      	adds	r3, r7, r1
 8003294:	0018      	movs	r0, r3
 8003296:	f001 fa33 	bl	8004700 <HAL_RCC_OscConfig>
 800329a:	1e03      	subs	r3, r0, #0
 800329c:	d001      	beq.n	80032a2 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800329e:	f000 f82b 	bl	80032f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032a2:	1d3b      	adds	r3, r7, #4
 80032a4:	2207      	movs	r2, #7
 80032a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032a8:	1d3b      	adds	r3, r7, #4
 80032aa:	2202      	movs	r2, #2
 80032ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032ae:	1d3b      	adds	r3, r7, #4
 80032b0:	2200      	movs	r2, #0
 80032b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80032b4:	1d3b      	adds	r3, r7, #4
 80032b6:	2200      	movs	r2, #0
 80032b8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80032ba:	1d3b      	adds	r3, r7, #4
 80032bc:	2101      	movs	r1, #1
 80032be:	0018      	movs	r0, r3
 80032c0:	f001 fda4 	bl	8004e0c <HAL_RCC_ClockConfig>
 80032c4:	1e03      	subs	r3, r0, #0
 80032c6:	d001      	beq.n	80032cc <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80032c8:	f000 f816 	bl	80032f8 <Error_Handler>
  }
}
 80032cc:	46c0      	nop			; (mov r8, r8)
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b013      	add	sp, #76	; 0x4c
 80032d2:	bd90      	pop	{r4, r7, pc}

080032d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a04      	ldr	r2, [pc, #16]	; (80032f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d101      	bne.n	80032ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80032e6:	f000 fb69 	bl	80039bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	46bd      	mov	sp, r7
 80032ee:	b002      	add	sp, #8
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	40014800 	.word	0x40014800

080032f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80032fc:	46c0      	nop			; (mov r8, r8)
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800330a:	4b12      	ldr	r3, [pc, #72]	; (8003354 <HAL_MspInit+0x50>)
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	4b11      	ldr	r3, [pc, #68]	; (8003354 <HAL_MspInit+0x50>)
 8003310:	2101      	movs	r1, #1
 8003312:	430a      	orrs	r2, r1
 8003314:	619a      	str	r2, [r3, #24]
 8003316:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <HAL_MspInit+0x50>)
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	2201      	movs	r2, #1
 800331c:	4013      	ands	r3, r2
 800331e:	607b      	str	r3, [r7, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003322:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <HAL_MspInit+0x50>)
 8003324:	69da      	ldr	r2, [r3, #28]
 8003326:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_MspInit+0x50>)
 8003328:	2180      	movs	r1, #128	; 0x80
 800332a:	0549      	lsls	r1, r1, #21
 800332c:	430a      	orrs	r2, r1
 800332e:	61da      	str	r2, [r3, #28]
 8003330:	4b08      	ldr	r3, [pc, #32]	; (8003354 <HAL_MspInit+0x50>)
 8003332:	69da      	ldr	r2, [r3, #28]
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	055b      	lsls	r3, r3, #21
 8003338:	4013      	ands	r3, r2
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800333e:	2302      	movs	r3, #2
 8003340:	425b      	negs	r3, r3
 8003342:	2200      	movs	r2, #0
 8003344:	2103      	movs	r1, #3
 8003346:	0018      	movs	r0, r3
 8003348:	f000 ff28 	bl	800419c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	b002      	add	sp, #8
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40021000 	.word	0x40021000

08003358 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08a      	sub	sp, #40	; 0x28
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003360:	2300      	movs	r3, #0
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0); 
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	0019      	movs	r1, r3
 800336e:	2016      	movs	r0, #22
 8003370:	f000 ff14 	bl	800419c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn); 
 8003374:	2016      	movs	r0, #22
 8003376:	f000 ff26 	bl	80041c6 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 800337a:	4b21      	ldr	r3, [pc, #132]	; (8003400 <HAL_InitTick+0xa8>)
 800337c:	699a      	ldr	r2, [r3, #24]
 800337e:	4b20      	ldr	r3, [pc, #128]	; (8003400 <HAL_InitTick+0xa8>)
 8003380:	2180      	movs	r1, #128	; 0x80
 8003382:	02c9      	lsls	r1, r1, #11
 8003384:	430a      	orrs	r2, r1
 8003386:	619a      	str	r2, [r3, #24]
 8003388:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <HAL_InitTick+0xa8>)
 800338a:	699a      	ldr	r2, [r3, #24]
 800338c:	2380      	movs	r3, #128	; 0x80
 800338e:	02db      	lsls	r3, r3, #11
 8003390:	4013      	ands	r3, r2
 8003392:	60bb      	str	r3, [r7, #8]
 8003394:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003396:	230c      	movs	r3, #12
 8003398:	18fa      	adds	r2, r7, r3
 800339a:	2310      	movs	r3, #16
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	0011      	movs	r1, r2
 80033a0:	0018      	movs	r0, r3
 80033a2:	f001 feab 	bl	80050fc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80033a6:	f001 fe93 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 80033aa:	0003      	movs	r3, r0
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	4914      	ldr	r1, [pc, #80]	; (8003404 <HAL_InitTick+0xac>)
 80033b2:	0018      	movs	r0, r3
 80033b4:	f7fc feb2 	bl	800011c <__udivsi3>
 80033b8:	0003      	movs	r3, r0
 80033ba:	3b01      	subs	r3, #1
 80033bc:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80033be:	4b12      	ldr	r3, [pc, #72]	; (8003408 <HAL_InitTick+0xb0>)
 80033c0:	4a12      	ldr	r2, [pc, #72]	; (800340c <HAL_InitTick+0xb4>)
 80033c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000 / 1000) - 1;
 80033c4:	4b10      	ldr	r3, [pc, #64]	; (8003408 <HAL_InitTick+0xb0>)
 80033c6:	4a12      	ldr	r2, [pc, #72]	; (8003410 <HAL_InitTick+0xb8>)
 80033c8:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80033ca:	4b0f      	ldr	r3, [pc, #60]	; (8003408 <HAL_InitTick+0xb0>)
 80033cc:	6a3a      	ldr	r2, [r7, #32]
 80033ce:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 80033d0:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <HAL_InitTick+0xb0>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033d6:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <HAL_InitTick+0xb0>)
 80033d8:	2200      	movs	r2, #0
 80033da:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 80033dc:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <HAL_InitTick+0xb0>)
 80033de:	0018      	movs	r0, r3
 80033e0:	f001 feb6 	bl	8005150 <HAL_TIM_Base_Init>
 80033e4:	1e03      	subs	r3, r0, #0
 80033e6:	d105      	bne.n	80033f4 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80033e8:	4b07      	ldr	r3, [pc, #28]	; (8003408 <HAL_InitTick+0xb0>)
 80033ea:	0018      	movs	r0, r3
 80033ec:	f001 fedc 	bl	80051a8 <HAL_TIM_Base_Start_IT>
 80033f0:	0003      	movs	r3, r0
 80033f2:	e000      	b.n	80033f6 <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
}
 80033f6:	0018      	movs	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	b00a      	add	sp, #40	; 0x28
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	40021000 	.word	0x40021000
 8003404:	000f4240 	.word	0x000f4240
 8003408:	20000810 	.word	0x20000810
 800340c:	40014800 	.word	0x40014800
 8003410:	000003e7 	.word	0x000003e7

08003414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003418:	46c0      	nop			; (mov r8, r8)
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003422:	e7fe      	b.n	8003422 <HardFault_Handler+0x4>

08003424 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003428:	4b03      	ldr	r3, [pc, #12]	; (8003438 <DMA1_Channel1_IRQHandler+0x14>)
 800342a:	0018      	movs	r0, r3
 800342c:	f000 ff24 	bl	8004278 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003430:	46c0      	nop			; (mov r8, r8)
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	2000039c 	.word	0x2000039c

0800343c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003440:	4b03      	ldr	r3, [pc, #12]	; (8003450 <TIM3_IRQHandler+0x14>)
 8003442:	0018      	movs	r0, r3
 8003444:	f002 f817 	bl	8005476 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003448:	46c0      	nop			; (mov r8, r8)
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	20000850 	.word	0x20000850

08003454 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003458:	4b03      	ldr	r3, [pc, #12]	; (8003468 <TIM17_IRQHandler+0x14>)
 800345a:	0018      	movs	r0, r3
 800345c:	f002 f80b 	bl	8005476 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003460:	46c0      	nop			; (mov r8, r8)
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	20000810 	.word	0x20000810

0800346c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003470:	46c0      	nop			; (mov r8, r8)
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void) {
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
//  TIM_Encoder_InitTypeDef sConfig = {0};
//  TIM_MasterConfigTypeDef sMasterConfig = {0};

	htim2.Instance = TIM2;
 800347c:	4b25      	ldr	r3, [pc, #148]	; (8003514 <MX_TIM2_Init+0x9c>)
 800347e:	2280      	movs	r2, #128	; 0x80
 8003480:	05d2      	lsls	r2, r2, #23
 8003482:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8003484:	4b23      	ldr	r3, [pc, #140]	; (8003514 <MX_TIM2_Init+0x9c>)
 8003486:	2200      	movs	r2, #0
 8003488:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800348a:	4b22      	ldr	r3, [pc, #136]	; (8003514 <MX_TIM2_Init+0x9c>)
 800348c:	2200      	movs	r2, #0
 800348e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xffffffff;
 8003490:	4b20      	ldr	r3, [pc, #128]	; (8003514 <MX_TIM2_Init+0x9c>)
 8003492:	2201      	movs	r2, #1
 8003494:	4252      	negs	r2, r2
 8003496:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003498:	4b1e      	ldr	r3, [pc, #120]	; (8003514 <MX_TIM2_Init+0x9c>)
 800349a:	2200      	movs	r2, #0
 800349c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800349e:	4b1d      	ldr	r3, [pc, #116]	; (8003514 <MX_TIM2_Init+0x9c>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80034a4:	4b1c      	ldr	r3, [pc, #112]	; (8003518 <MX_TIM2_Init+0xa0>)
 80034a6:	2203      	movs	r2, #3
 80034a8:	601a      	str	r2, [r3, #0]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80034aa:	4b1b      	ldr	r3, [pc, #108]	; (8003518 <MX_TIM2_Init+0xa0>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	605a      	str	r2, [r3, #4]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80034b0:	4b19      	ldr	r3, [pc, #100]	; (8003518 <MX_TIM2_Init+0xa0>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	609a      	str	r2, [r3, #8]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80034b6:	4b18      	ldr	r3, [pc, #96]	; (8003518 <MX_TIM2_Init+0xa0>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	60da      	str	r2, [r3, #12]
	sConfig.IC1Filter = 3;
 80034bc:	4b16      	ldr	r3, [pc, #88]	; (8003518 <MX_TIM2_Init+0xa0>)
 80034be:	2203      	movs	r2, #3
 80034c0:	611a      	str	r2, [r3, #16]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80034c2:	4b15      	ldr	r3, [pc, #84]	; (8003518 <MX_TIM2_Init+0xa0>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	615a      	str	r2, [r3, #20]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80034c8:	4b13      	ldr	r3, [pc, #76]	; (8003518 <MX_TIM2_Init+0xa0>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	619a      	str	r2, [r3, #24]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80034ce:	4b12      	ldr	r3, [pc, #72]	; (8003518 <MX_TIM2_Init+0xa0>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	61da      	str	r2, [r3, #28]
	sConfig.IC2Filter = 3;
 80034d4:	4b10      	ldr	r3, [pc, #64]	; (8003518 <MX_TIM2_Init+0xa0>)
 80034d6:	2203      	movs	r2, #3
 80034d8:	621a      	str	r2, [r3, #32]
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 80034da:	4a0f      	ldr	r2, [pc, #60]	; (8003518 <MX_TIM2_Init+0xa0>)
 80034dc:	4b0d      	ldr	r3, [pc, #52]	; (8003514 <MX_TIM2_Init+0x9c>)
 80034de:	0011      	movs	r1, r2
 80034e0:	0018      	movs	r0, r3
 80034e2:	f001 fefd 	bl	80052e0 <HAL_TIM_Encoder_Init>
 80034e6:	1e03      	subs	r3, r0, #0
 80034e8:	d001      	beq.n	80034ee <MX_TIM2_Init+0x76>
		Error_Handler();
 80034ea:	f7ff ff05 	bl	80032f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034ee:	4b0b      	ldr	r3, [pc, #44]	; (800351c <MX_TIM2_Init+0xa4>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034f4:	4b09      	ldr	r3, [pc, #36]	; (800351c <MX_TIM2_Init+0xa4>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80034fa:	4a08      	ldr	r2, [pc, #32]	; (800351c <MX_TIM2_Init+0xa4>)
 80034fc:	4b05      	ldr	r3, [pc, #20]	; (8003514 <MX_TIM2_Init+0x9c>)
 80034fe:	0011      	movs	r1, r2
 8003500:	0018      	movs	r0, r3
 8003502:	f002 fd79 	bl	8005ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8003506:	1e03      	subs	r3, r0, #0
 8003508:	d001      	beq.n	800350e <MX_TIM2_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 800350a:	f7ff fef5 	bl	80032f8 <Error_Handler>
	}

}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	20000890 	.word	0x20000890
 8003518:	20000268 	.word	0x20000268
 800351c:	20000244 	.word	0x20000244

08003520 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void) {
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
//  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
//  TIM_MasterConfigTypeDef sMasterConfig = {0};
//  TIM_OC_InitTypeDef sConfigOC = {0};

	htim3.Instance = TIM3;
 8003524:	4b3d      	ldr	r3, [pc, #244]	; (800361c <MX_TIM3_Init+0xfc>)
 8003526:	4a3e      	ldr	r2, [pc, #248]	; (8003620 <MX_TIM3_Init+0x100>)
 8003528:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800352a:	4b3c      	ldr	r3, [pc, #240]	; (800361c <MX_TIM3_Init+0xfc>)
 800352c:	2200      	movs	r2, #0
 800352e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003530:	4b3a      	ldr	r3, [pc, #232]	; (800361c <MX_TIM3_Init+0xfc>)
 8003532:	2220      	movs	r2, #32
 8003534:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = PWM_PERIOD; //24kHz
 8003536:	4b39      	ldr	r3, [pc, #228]	; (800361c <MX_TIM3_Init+0xfc>)
 8003538:	4a3a      	ldr	r2, [pc, #232]	; (8003624 <MX_TIM3_Init+0x104>)
 800353a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800353c:	4b37      	ldr	r3, [pc, #220]	; (800361c <MX_TIM3_Init+0xfc>)
 800353e:	2200      	movs	r2, #0
 8003540:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003542:	4b36      	ldr	r3, [pc, #216]	; (800361c <MX_TIM3_Init+0xfc>)
 8003544:	2280      	movs	r2, #128	; 0x80
 8003546:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8003548:	4b34      	ldr	r3, [pc, #208]	; (800361c <MX_TIM3_Init+0xfc>)
 800354a:	0018      	movs	r0, r3
 800354c:	f001 fe00 	bl	8005150 <HAL_TIM_Base_Init>
 8003550:	1e03      	subs	r3, r0, #0
 8003552:	d001      	beq.n	8003558 <MX_TIM3_Init+0x38>
		Error_Handler();
 8003554:	f7ff fed0 	bl	80032f8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003558:	4b33      	ldr	r3, [pc, #204]	; (8003628 <MX_TIM3_Init+0x108>)
 800355a:	2280      	movs	r2, #128	; 0x80
 800355c:	0152      	lsls	r2, r2, #5
 800355e:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8003560:	4a31      	ldr	r2, [pc, #196]	; (8003628 <MX_TIM3_Init+0x108>)
 8003562:	4b2e      	ldr	r3, [pc, #184]	; (800361c <MX_TIM3_Init+0xfc>)
 8003564:	0011      	movs	r1, r2
 8003566:	0018      	movs	r0, r3
 8003568:	f002 f954 	bl	8005814 <HAL_TIM_ConfigClockSource>
 800356c:	1e03      	subs	r3, r0, #0
 800356e:	d001      	beq.n	8003574 <MX_TIM3_Init+0x54>
		Error_Handler();
 8003570:	f7ff fec2 	bl	80032f8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8003574:	4b29      	ldr	r3, [pc, #164]	; (800361c <MX_TIM3_Init+0xfc>)
 8003576:	0018      	movs	r0, r3
 8003578:	f001 fe38 	bl	80051ec <HAL_TIM_PWM_Init>
 800357c:	1e03      	subs	r3, r0, #0
 800357e:	d001      	beq.n	8003584 <MX_TIM3_Init+0x64>
		Error_Handler();
 8003580:	f7ff feba 	bl	80032f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003584:	4b29      	ldr	r3, [pc, #164]	; (800362c <MX_TIM3_Init+0x10c>)
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800358a:	4b28      	ldr	r3, [pc, #160]	; (800362c <MX_TIM3_Init+0x10c>)
 800358c:	2200      	movs	r2, #0
 800358e:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8003590:	4a26      	ldr	r2, [pc, #152]	; (800362c <MX_TIM3_Init+0x10c>)
 8003592:	4b22      	ldr	r3, [pc, #136]	; (800361c <MX_TIM3_Init+0xfc>)
 8003594:	0011      	movs	r1, r2
 8003596:	0018      	movs	r0, r3
 8003598:	f002 fd2e 	bl	8005ff8 <HAL_TIMEx_MasterConfigSynchronization>
 800359c:	1e03      	subs	r3, r0, #0
 800359e:	d001      	beq.n	80035a4 <MX_TIM3_Init+0x84>
			!= HAL_OK) {
		Error_Handler();
 80035a0:	f7ff feaa 	bl	80032f8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035a4:	4b22      	ldr	r3, [pc, #136]	; (8003630 <MX_TIM3_Init+0x110>)
 80035a6:	2260      	movs	r2, #96	; 0x60
 80035a8:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 80035aa:	4b21      	ldr	r3, [pc, #132]	; (8003630 <MX_TIM3_Init+0x110>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035b0:	4b1f      	ldr	r3, [pc, #124]	; (8003630 <MX_TIM3_Init+0x110>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80035b6:	4b1e      	ldr	r3, [pc, #120]	; (8003630 <MX_TIM3_Init+0x110>)
 80035b8:	2204      	movs	r2, #4
 80035ba:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 80035bc:	491c      	ldr	r1, [pc, #112]	; (8003630 <MX_TIM3_Init+0x110>)
 80035be:	4b17      	ldr	r3, [pc, #92]	; (800361c <MX_TIM3_Init+0xfc>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	0018      	movs	r0, r3
 80035c4:	f002 f86e 	bl	80056a4 <HAL_TIM_PWM_ConfigChannel>
 80035c8:	1e03      	subs	r3, r0, #0
 80035ca:	d001      	beq.n	80035d0 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 80035cc:	f7ff fe94 	bl	80032f8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 80035d0:	4917      	ldr	r1, [pc, #92]	; (8003630 <MX_TIM3_Init+0x110>)
 80035d2:	4b12      	ldr	r3, [pc, #72]	; (800361c <MX_TIM3_Init+0xfc>)
 80035d4:	2204      	movs	r2, #4
 80035d6:	0018      	movs	r0, r3
 80035d8:	f002 f864 	bl	80056a4 <HAL_TIM_PWM_ConfigChannel>
 80035dc:	1e03      	subs	r3, r0, #0
 80035de:	d001      	beq.n	80035e4 <MX_TIM3_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80035e0:	f7ff fe8a 	bl	80032f8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 80035e4:	4912      	ldr	r1, [pc, #72]	; (8003630 <MX_TIM3_Init+0x110>)
 80035e6:	4b0d      	ldr	r3, [pc, #52]	; (800361c <MX_TIM3_Init+0xfc>)
 80035e8:	2208      	movs	r2, #8
 80035ea:	0018      	movs	r0, r3
 80035ec:	f002 f85a 	bl	80056a4 <HAL_TIM_PWM_ConfigChannel>
 80035f0:	1e03      	subs	r3, r0, #0
 80035f2:	d001      	beq.n	80035f8 <MX_TIM3_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 80035f4:	f7ff fe80 	bl	80032f8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 80035f8:	490d      	ldr	r1, [pc, #52]	; (8003630 <MX_TIM3_Init+0x110>)
 80035fa:	4b08      	ldr	r3, [pc, #32]	; (800361c <MX_TIM3_Init+0xfc>)
 80035fc:	220c      	movs	r2, #12
 80035fe:	0018      	movs	r0, r3
 8003600:	f002 f850 	bl	80056a4 <HAL_TIM_PWM_ConfigChannel>
 8003604:	1e03      	subs	r3, r0, #0
 8003606:	d001      	beq.n	800360c <MX_TIM3_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 8003608:	f7ff fe76 	bl	80032f8 <Error_Handler>
	}
	HAL_TIM_MspPostInit(&htim3);
 800360c:	4b03      	ldr	r3, [pc, #12]	; (800361c <MX_TIM3_Init+0xfc>)
 800360e:	0018      	movs	r0, r3
 8003610:	f000 f880 	bl	8003714 <HAL_TIM_MspPostInit>

}
 8003614:	46c0      	nop			; (mov r8, r8)
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	20000850 	.word	0x20000850
 8003620:	40000400 	.word	0x40000400
 8003624:	000003e7 	.word	0x000003e7
 8003628:	2000028c 	.word	0x2000028c
 800362c:	20000244 	.word	0x20000244
 8003630:	2000024c 	.word	0x2000024c

08003634 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *tim_encoderHandle) {
 8003634:	b580      	push	{r7, lr}
 8003636:	b08a      	sub	sp, #40	; 0x28
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800363c:	2314      	movs	r3, #20
 800363e:	18fb      	adds	r3, r7, r3
 8003640:	0018      	movs	r0, r3
 8003642:	2314      	movs	r3, #20
 8003644:	001a      	movs	r2, r3
 8003646:	2100      	movs	r1, #0
 8003648:	f003 fbb4 	bl	8006db4 <memset>
	if (tim_encoderHandle->Instance == TIM2) {
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	2380      	movs	r3, #128	; 0x80
 8003652:	05db      	lsls	r3, r3, #23
 8003654:	429a      	cmp	r2, r3
 8003656:	d130      	bne.n	80036ba <HAL_TIM_Encoder_MspInit+0x86>
		/* USER CODE BEGIN TIM2_MspInit 0 */

		/* USER CODE END TIM2_MspInit 0 */
		/* TIM2 clock enable */
		__HAL_RCC_TIM2_CLK_ENABLE();
 8003658:	4b1a      	ldr	r3, [pc, #104]	; (80036c4 <HAL_TIM_Encoder_MspInit+0x90>)
 800365a:	69da      	ldr	r2, [r3, #28]
 800365c:	4b19      	ldr	r3, [pc, #100]	; (80036c4 <HAL_TIM_Encoder_MspInit+0x90>)
 800365e:	2101      	movs	r1, #1
 8003660:	430a      	orrs	r2, r1
 8003662:	61da      	str	r2, [r3, #28]
 8003664:	4b17      	ldr	r3, [pc, #92]	; (80036c4 <HAL_TIM_Encoder_MspInit+0x90>)
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	2201      	movs	r2, #1
 800366a:	4013      	ands	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003670:	4b14      	ldr	r3, [pc, #80]	; (80036c4 <HAL_TIM_Encoder_MspInit+0x90>)
 8003672:	695a      	ldr	r2, [r3, #20]
 8003674:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <HAL_TIM_Encoder_MspInit+0x90>)
 8003676:	2180      	movs	r1, #128	; 0x80
 8003678:	0289      	lsls	r1, r1, #10
 800367a:	430a      	orrs	r2, r1
 800367c:	615a      	str	r2, [r3, #20]
 800367e:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <HAL_TIM_Encoder_MspInit+0x90>)
 8003680:	695a      	ldr	r2, [r3, #20]
 8003682:	2380      	movs	r3, #128	; 0x80
 8003684:	029b      	lsls	r3, r3, #10
 8003686:	4013      	ands	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	68fb      	ldr	r3, [r7, #12]
		/**TIM2 GPIO Configuration
		 PA0     ------> TIM2_CH1
		 PA1     ------> TIM2_CH2
		 */
		GPIO_InitStruct.Pin = ENC_A_Pin | ENC_B_Pin;
 800368c:	2114      	movs	r1, #20
 800368e:	187b      	adds	r3, r7, r1
 8003690:	2203      	movs	r2, #3
 8003692:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003694:	187b      	adds	r3, r7, r1
 8003696:	2202      	movs	r2, #2
 8003698:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369a:	187b      	adds	r3, r7, r1
 800369c:	2200      	movs	r2, #0
 800369e:	609a      	str	r2, [r3, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a0:	187b      	adds	r3, r7, r1
 80036a2:	2200      	movs	r2, #0
 80036a4:	60da      	str	r2, [r3, #12]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80036a6:	187b      	adds	r3, r7, r1
 80036a8:	2202      	movs	r2, #2
 80036aa:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ac:	187a      	adds	r2, r7, r1
 80036ae:	2390      	movs	r3, #144	; 0x90
 80036b0:	05db      	lsls	r3, r3, #23
 80036b2:	0011      	movs	r1, r2
 80036b4:	0018      	movs	r0, r3
 80036b6:	f000 fe9d 	bl	80043f4 <HAL_GPIO_Init>

		/* USER CODE BEGIN TIM2_MspInit 1 */

		/* USER CODE END TIM2_MspInit 1 */
	}
}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	46bd      	mov	sp, r7
 80036be:	b00a      	add	sp, #40	; 0x28
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	40021000 	.word	0x40021000

080036c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *tim_baseHandle) {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]

	if (tim_baseHandle->Instance == TIM3) {
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a0d      	ldr	r2, [pc, #52]	; (800370c <HAL_TIM_Base_MspInit+0x44>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d113      	bne.n	8003702 <HAL_TIM_Base_MspInit+0x3a>
		/* USER CODE BEGIN TIM3_MspInit 0 */

		/* USER CODE END TIM3_MspInit 0 */
		/* TIM3 clock enable */
		__HAL_RCC_TIM3_CLK_ENABLE();
 80036da:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <HAL_TIM_Base_MspInit+0x48>)
 80036dc:	69da      	ldr	r2, [r3, #28]
 80036de:	4b0c      	ldr	r3, [pc, #48]	; (8003710 <HAL_TIM_Base_MspInit+0x48>)
 80036e0:	2102      	movs	r1, #2
 80036e2:	430a      	orrs	r2, r1
 80036e4:	61da      	str	r2, [r3, #28]
 80036e6:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <HAL_TIM_Base_MspInit+0x48>)
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	2202      	movs	r2, #2
 80036ec:	4013      	ands	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	68fb      	ldr	r3, [r7, #12]

		/* TIM3 interrupt Init */
		HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 80036f2:	2200      	movs	r2, #0
 80036f4:	2103      	movs	r1, #3
 80036f6:	2010      	movs	r0, #16
 80036f8:	f000 fd50 	bl	800419c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80036fc:	2010      	movs	r0, #16
 80036fe:	f000 fd62 	bl	80041c6 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM3_MspInit 1 */

		/* USER CODE END TIM3_MspInit 1 */
	}
}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	46bd      	mov	sp, r7
 8003706:	b004      	add	sp, #16
 8003708:	bd80      	pop	{r7, pc}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	40000400 	.word	0x40000400
 8003710:	40021000 	.word	0x40021000

08003714 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *timHandle) {
 8003714:	b590      	push	{r4, r7, lr}
 8003716:	b08b      	sub	sp, #44	; 0x2c
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800371c:	2314      	movs	r3, #20
 800371e:	18fb      	adds	r3, r7, r3
 8003720:	0018      	movs	r0, r3
 8003722:	2314      	movs	r3, #20
 8003724:	001a      	movs	r2, r3
 8003726:	2100      	movs	r1, #0
 8003728:	f003 fb44 	bl	8006db4 <memset>
	if (timHandle->Instance == TIM3) {
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a27      	ldr	r2, [pc, #156]	; (80037d0 <HAL_TIM_MspPostInit+0xbc>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d148      	bne.n	80037c8 <HAL_TIM_MspPostInit+0xb4>
		/* USER CODE BEGIN TIM3_MspPostInit 0 */

		/* USER CODE END TIM3_MspPostInit 0 */

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003736:	4b27      	ldr	r3, [pc, #156]	; (80037d4 <HAL_TIM_MspPostInit+0xc0>)
 8003738:	695a      	ldr	r2, [r3, #20]
 800373a:	4b26      	ldr	r3, [pc, #152]	; (80037d4 <HAL_TIM_MspPostInit+0xc0>)
 800373c:	2180      	movs	r1, #128	; 0x80
 800373e:	0289      	lsls	r1, r1, #10
 8003740:	430a      	orrs	r2, r1
 8003742:	615a      	str	r2, [r3, #20]
 8003744:	4b23      	ldr	r3, [pc, #140]	; (80037d4 <HAL_TIM_MspPostInit+0xc0>)
 8003746:	695a      	ldr	r2, [r3, #20]
 8003748:	2380      	movs	r3, #128	; 0x80
 800374a:	029b      	lsls	r3, r3, #10
 800374c:	4013      	ands	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8003752:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <HAL_TIM_MspPostInit+0xc0>)
 8003754:	695a      	ldr	r2, [r3, #20]
 8003756:	4b1f      	ldr	r3, [pc, #124]	; (80037d4 <HAL_TIM_MspPostInit+0xc0>)
 8003758:	2180      	movs	r1, #128	; 0x80
 800375a:	02c9      	lsls	r1, r1, #11
 800375c:	430a      	orrs	r2, r1
 800375e:	615a      	str	r2, [r3, #20]
 8003760:	4b1c      	ldr	r3, [pc, #112]	; (80037d4 <HAL_TIM_MspPostInit+0xc0>)
 8003762:	695a      	ldr	r2, [r3, #20]
 8003764:	2380      	movs	r3, #128	; 0x80
 8003766:	02db      	lsls	r3, r3, #11
 8003768:	4013      	ands	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	68fb      	ldr	r3, [r7, #12]
		 PA6     ------> TIM3_CH1
		 PA7     ------> TIM3_CH2
		 PB0     ------> TIM3_CH3
		 PB1     ------> TIM3_CH4
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 800376e:	2414      	movs	r4, #20
 8003770:	193b      	adds	r3, r7, r4
 8003772:	22c0      	movs	r2, #192	; 0xc0
 8003774:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003776:	193b      	adds	r3, r7, r4
 8003778:	2202      	movs	r2, #2
 800377a:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377c:	193b      	adds	r3, r7, r4
 800377e:	2200      	movs	r2, #0
 8003780:	609a      	str	r2, [r3, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003782:	193b      	adds	r3, r7, r4
 8003784:	2200      	movs	r2, #0
 8003786:	60da      	str	r2, [r3, #12]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003788:	193b      	adds	r3, r7, r4
 800378a:	2201      	movs	r2, #1
 800378c:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800378e:	193a      	adds	r2, r7, r4
 8003790:	2390      	movs	r3, #144	; 0x90
 8003792:	05db      	lsls	r3, r3, #23
 8003794:	0011      	movs	r1, r2
 8003796:	0018      	movs	r0, r3
 8003798:	f000 fe2c 	bl	80043f4 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800379c:	0021      	movs	r1, r4
 800379e:	187b      	adds	r3, r7, r1
 80037a0:	2203      	movs	r2, #3
 80037a2:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a4:	187b      	adds	r3, r7, r1
 80037a6:	2202      	movs	r2, #2
 80037a8:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037aa:	187b      	adds	r3, r7, r1
 80037ac:	2200      	movs	r2, #0
 80037ae:	609a      	str	r2, [r3, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b0:	187b      	adds	r3, r7, r1
 80037b2:	2200      	movs	r2, #0
 80037b4:	60da      	str	r2, [r3, #12]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80037b6:	187b      	adds	r3, r7, r1
 80037b8:	2201      	movs	r2, #1
 80037ba:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037bc:	187b      	adds	r3, r7, r1
 80037be:	4a06      	ldr	r2, [pc, #24]	; (80037d8 <HAL_TIM_MspPostInit+0xc4>)
 80037c0:	0019      	movs	r1, r3
 80037c2:	0010      	movs	r0, r2
 80037c4:	f000 fe16 	bl	80043f4 <HAL_GPIO_Init>
		/* USER CODE BEGIN TIM3_MspPostInit 1 */

		/* USER CODE END TIM3_MspPostInit 1 */
	}

}
 80037c8:	46c0      	nop			; (mov r8, r8)
 80037ca:	46bd      	mov	sp, r7
 80037cc:	b00b      	add	sp, #44	; 0x2c
 80037ce:	bd90      	pop	{r4, r7, pc}
 80037d0:	40000400 	.word	0x40000400
 80037d4:	40021000 	.word	0x40021000
 80037d8:	48000400 	.word	0x48000400

080037dc <PWM_Start>:
//			Error_Handler();
//		if (HAL_TIM_PWM_Start(&htim3, CHANNELS[i]) != HAL_OK)
//			Error_Handler();
//	}
//}
void PWM_Start() {
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80037e0:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <PWM_Start+0x34>)
 80037e2:	2100      	movs	r1, #0
 80037e4:	0018      	movs	r0, r3
 80037e6:	f001 fd35 	bl	8005254 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80037ea:	4b09      	ldr	r3, [pc, #36]	; (8003810 <PWM_Start+0x34>)
 80037ec:	2104      	movs	r1, #4
 80037ee:	0018      	movs	r0, r3
 80037f0:	f001 fd30 	bl	8005254 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <PWM_Start+0x34>)
 80037f6:	2108      	movs	r1, #8
 80037f8:	0018      	movs	r0, r3
 80037fa:	f001 fd2b 	bl	8005254 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80037fe:	4b04      	ldr	r3, [pc, #16]	; (8003810 <PWM_Start+0x34>)
 8003800:	210c      	movs	r1, #12
 8003802:	0018      	movs	r0, r3
 8003804:	f001 fd26 	bl	8005254 <HAL_TIM_PWM_Start>
}
 8003808:	46c0      	nop			; (mov r8, r8)
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	20000850 	.word	0x20000850

08003814 <Duty_Out>:
void Duty_Out(double duty_persentage) {
 8003814:	b5b0      	push	{r4, r5, r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6038      	str	r0, [r7, #0]
 800381c:	6079      	str	r1, [r7, #4]
	if (duty_persentage >= 0) {
 800381e:	2200      	movs	r2, #0
 8003820:	2300      	movs	r3, #0
 8003822:	6838      	ldr	r0, [r7, #0]
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	f7fc fd39 	bl	800029c <__aeabi_dcmpge>
 800382a:	1e03      	subs	r3, r0, #0
 800382c:	d020      	beq.n	8003870 <Duty_Out+0x5c>
		uint32_t Pulse = (duty_persentage) * PWM_PERIOD; //正なら最大??��?��パ�?�セント左サイ?��?
 800382e:	2200      	movs	r2, #0
 8003830:	4b25      	ldr	r3, [pc, #148]	; (80038c8 <Duty_Out+0xb4>)
 8003832:	6838      	ldr	r0, [r7, #0]
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	f7fe f8c9 	bl	80019cc <__aeabi_dmul>
 800383a:	0003      	movs	r3, r0
 800383c:	000c      	movs	r4, r1
 800383e:	0018      	movs	r0, r3
 8003840:	0021      	movs	r1, r4
 8003842:	f7fc fd6f 	bl	8000324 <__aeabi_d2uiz>
 8003846:	0003      	movs	r3, r0
 8003848:	60bb      	str	r3, [r7, #8]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Pulse);
 800384a:	4b20      	ldr	r3, [pc, #128]	; (80038cc <Duty_Out+0xb8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, Pulse + 0);
 8003852:	4b1e      	ldr	r3, [pc, #120]	; (80038cc <Duty_Out+0xb8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	639a      	str	r2, [r3, #56]	; 0x38
		Pulse = 0;
 800385a:	2300      	movs	r3, #0
 800385c:	60bb      	str	r3, [r7, #8]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, Pulse);
 800385e:	4b1b      	ldr	r3, [pc, #108]	; (80038cc <Duty_Out+0xb8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, Pulse);
 8003866:	4b19      	ldr	r3, [pc, #100]	; (80038cc <Duty_Out+0xb8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	641a      	str	r2, [r3, #64]	; 0x40
////		Error_Handler();
//	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
//		Error_Handler();
//	if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_ALL) != HAL_OK)
//		Error_Handler();
}
 800386e:	e026      	b.n	80038be <Duty_Out+0xaa>
		uint32_t Pulse = (-duty_persentage) * PWM_PERIOD; //正なら最大??��?��パ�?�セント左サイ?��?
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	001c      	movs	r4, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2280      	movs	r2, #128	; 0x80
 8003878:	0612      	lsls	r2, r2, #24
 800387a:	405a      	eors	r2, r3
 800387c:	0015      	movs	r5, r2
 800387e:	2200      	movs	r2, #0
 8003880:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <Duty_Out+0xb4>)
 8003882:	0020      	movs	r0, r4
 8003884:	0029      	movs	r1, r5
 8003886:	f7fe f8a1 	bl	80019cc <__aeabi_dmul>
 800388a:	0003      	movs	r3, r0
 800388c:	000c      	movs	r4, r1
 800388e:	0018      	movs	r0, r3
 8003890:	0021      	movs	r1, r4
 8003892:	f7fc fd47 	bl	8000324 <__aeabi_d2uiz>
 8003896:	0003      	movs	r3, r0
 8003898:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, Pulse);
 800389a:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <Duty_Out+0xb8>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, Pulse + 0);
 80038a2:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <Duty_Out+0xb8>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	641a      	str	r2, [r3, #64]	; 0x40
		Pulse = 0;
 80038aa:	2300      	movs	r3, #0
 80038ac:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Pulse);
 80038ae:	4b07      	ldr	r3, [pc, #28]	; (80038cc <Duty_Out+0xb8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, Pulse);
 80038b6:	4b05      	ldr	r3, [pc, #20]	; (80038cc <Duty_Out+0xb8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	46bd      	mov	sp, r7
 80038c2:	b004      	add	sp, #16
 80038c4:	bdb0      	pop	{r4, r5, r7, pc}
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	408f3800 	.word	0x408f3800
 80038cc:	20000850 	.word	0x20000850

080038d0 <Enc_Start>:
void Enc_Start() {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <Enc_Start+0x1c>)
 80038d6:	213c      	movs	r1, #60	; 0x3c
 80038d8:	0018      	movs	r0, r3
 80038da:	f001 fd95 	bl	8005408 <HAL_TIM_Encoder_Start>
	TIM2->CNT = 0x7fffffff;
 80038de:	2380      	movs	r3, #128	; 0x80
 80038e0:	05db      	lsls	r3, r3, #23
 80038e2:	4a03      	ldr	r2, [pc, #12]	; (80038f0 <Enc_Start+0x20>)
 80038e4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	20000890 	.word	0x20000890
 80038f0:	7fffffff 	.word	0x7fffffff

080038f4 <Enc_Read>:
int32_t Enc_Read() { //4294967295cnt /2(±) /18(?��?) /4(逓�??)?��?/6000(rpm) =4971(min) 計測可
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
	return TIM2->CNT - 0x7fffffff;
 80038f8:	2380      	movs	r3, #128	; 0x80
 80038fa:	05db      	lsls	r3, r3, #23
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	4a03      	ldr	r2, [pc, #12]	; (800390c <Enc_Read+0x18>)
 8003900:	4694      	mov	ip, r2
 8003902:	4463      	add	r3, ip
}
 8003904:	0018      	movs	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	80000001 	.word	0x80000001

08003910 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003910:	4813      	ldr	r0, [pc, #76]	; (8003960 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003912:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8003914:	4813      	ldr	r0, [pc, #76]	; (8003964 <LoopForever+0x6>)
    LDR R1, [R0]
 8003916:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8003918:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800391a:	4a13      	ldr	r2, [pc, #76]	; (8003968 <LoopForever+0xa>)
    CMP R1, R2
 800391c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800391e:	d105      	bne.n	800392c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8003920:	4812      	ldr	r0, [pc, #72]	; (800396c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8003922:	4913      	ldr	r1, [pc, #76]	; (8003970 <LoopForever+0x12>)
    STR R1, [R0]
 8003924:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8003926:	4813      	ldr	r0, [pc, #76]	; (8003974 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8003928:	4913      	ldr	r1, [pc, #76]	; (8003978 <LoopForever+0x1a>)
    STR R1, [R0]
 800392a:	6001      	str	r1, [r0, #0]

0800392c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800392c:	4813      	ldr	r0, [pc, #76]	; (800397c <LoopForever+0x1e>)
  ldr r1, =_edata
 800392e:	4914      	ldr	r1, [pc, #80]	; (8003980 <LoopForever+0x22>)
  ldr r2, =_sidata
 8003930:	4a14      	ldr	r2, [pc, #80]	; (8003984 <LoopForever+0x26>)
  movs r3, #0
 8003932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003934:	e002      	b.n	800393c <LoopCopyDataInit>

08003936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800393a:	3304      	adds	r3, #4

0800393c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800393c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800393e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003940:	d3f9      	bcc.n	8003936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003942:	4a11      	ldr	r2, [pc, #68]	; (8003988 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8003944:	4c11      	ldr	r4, [pc, #68]	; (800398c <LoopForever+0x2e>)
  movs r3, #0
 8003946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003948:	e001      	b.n	800394e <LoopFillZerobss>

0800394a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800394a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800394c:	3204      	adds	r2, #4

0800394e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800394e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003950:	d3fb      	bcc.n	800394a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003952:	f7ff fd8b 	bl	800346c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003956:	f003 fa09 	bl	8006d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800395a:	f7ff fc53 	bl	8003204 <main>

0800395e <LoopForever>:

LoopForever:
    b LoopForever
 800395e:	e7fe      	b.n	800395e <LoopForever>
  ldr   r0, =_estack
 8003960:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8003964:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8003968:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800396c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8003970:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8003974:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8003978:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800397c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003980:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8003984:	08007f20 	.word	0x08007f20
  ldr r2, =_sbss
 8003988:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800398c:	200008d4 	.word	0x200008d4

08003990 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003990:	e7fe      	b.n	8003990 <ADC1_IRQHandler>
	...

08003994 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003998:	4b07      	ldr	r3, [pc, #28]	; (80039b8 <HAL_Init+0x24>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <HAL_Init+0x24>)
 800399e:	2110      	movs	r1, #16
 80039a0:	430a      	orrs	r2, r1
 80039a2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80039a4:	2000      	movs	r0, #0
 80039a6:	f7ff fcd7 	bl	8003358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039aa:	f7ff fcab 	bl	8003304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	0018      	movs	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	40022000 	.word	0x40022000

080039bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039c0:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <HAL_IncTick+0x1c>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	001a      	movs	r2, r3
 80039c6:	4b05      	ldr	r3, [pc, #20]	; (80039dc <HAL_IncTick+0x20>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	18d2      	adds	r2, r2, r3
 80039cc:	4b03      	ldr	r3, [pc, #12]	; (80039dc <HAL_IncTick+0x20>)
 80039ce:	601a      	str	r2, [r3, #0]
}
 80039d0:	46c0      	nop			; (mov r8, r8)
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	20000008 	.word	0x20000008
 80039dc:	200008d0 	.word	0x200008d0

080039e0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  return uwTick;
 80039e4:	4b02      	ldr	r3, [pc, #8]	; (80039f0 <HAL_GetTick+0x10>)
 80039e6:	681b      	ldr	r3, [r3, #0]
}
 80039e8:	0018      	movs	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	200008d0 	.word	0x200008d0

080039f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039fc:	230f      	movs	r3, #15
 80039fe:	18fb      	adds	r3, r7, r3
 8003a00:	2200      	movs	r2, #0
 8003a02:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e125      	b.n	8003c5e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10a      	bne.n	8003a30 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2234      	movs	r2, #52	; 0x34
 8003a24:	2100      	movs	r1, #0
 8003a26:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f7fe ff62 	bl	80028f4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a34:	2210      	movs	r2, #16
 8003a36:	4013      	ands	r3, r2
 8003a38:	d000      	beq.n	8003a3c <HAL_ADC_Init+0x48>
 8003a3a:	e103      	b.n	8003c44 <HAL_ADC_Init+0x250>
 8003a3c:	230f      	movs	r3, #15
 8003a3e:	18fb      	adds	r3, r7, r3
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d000      	beq.n	8003a48 <HAL_ADC_Init+0x54>
 8003a46:	e0fd      	b.n	8003c44 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2204      	movs	r2, #4
 8003a50:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003a52:	d000      	beq.n	8003a56 <HAL_ADC_Init+0x62>
 8003a54:	e0f6      	b.n	8003c44 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5a:	4a83      	ldr	r2, [pc, #524]	; (8003c68 <HAL_ADC_Init+0x274>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2202      	movs	r2, #2
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	4013      	ands	r3, r2
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d112      	bne.n	8003a9a <HAL_ADC_Init+0xa6>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d009      	beq.n	8003a96 <HAL_ADC_Init+0xa2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	2380      	movs	r3, #128	; 0x80
 8003a8a:	021b      	lsls	r3, r3, #8
 8003a8c:	401a      	ands	r2, r3
 8003a8e:	2380      	movs	r3, #128	; 0x80
 8003a90:	021b      	lsls	r3, r3, #8
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d101      	bne.n	8003a9a <HAL_ADC_Init+0xa6>
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <HAL_ADC_Init+0xa8>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d116      	bne.n	8003ace <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	2218      	movs	r2, #24
 8003aa8:	4393      	bics	r3, r2
 8003aaa:	0019      	movs	r1, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	0899      	lsrs	r1, r3, #2
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4964      	ldr	r1, [pc, #400]	; (8003c6c <HAL_ADC_Init+0x278>)
 8003ada:	400a      	ands	r2, r1
 8003adc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	7e1b      	ldrb	r3, [r3, #24]
 8003ae2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	7e5b      	ldrb	r3, [r3, #25]
 8003ae8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003aea:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	7e9b      	ldrb	r3, [r3, #26]
 8003af0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003af2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d002      	beq.n	8003b02 <HAL_ADC_Init+0x10e>
 8003afc:	2380      	movs	r3, #128	; 0x80
 8003afe:	015b      	lsls	r3, r3, #5
 8003b00:	e000      	b.n	8003b04 <HAL_ADC_Init+0x110>
 8003b02:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003b04:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003b0a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d101      	bne.n	8003b18 <HAL_ADC_Init+0x124>
 8003b14:	2304      	movs	r3, #4
 8003b16:	e000      	b.n	8003b1a <HAL_ADC_Init+0x126>
 8003b18:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8003b1a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2124      	movs	r1, #36	; 0x24
 8003b20:	5c5b      	ldrb	r3, [r3, r1]
 8003b22:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003b24:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	7edb      	ldrb	r3, [r3, #27]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d115      	bne.n	8003b60 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	7e9b      	ldrb	r3, [r3, #26]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d105      	bne.n	8003b48 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2280      	movs	r2, #128	; 0x80
 8003b40:	0252      	lsls	r2, r2, #9
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	e00b      	b.n	8003b60 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b58:	2201      	movs	r2, #1
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69da      	ldr	r2, [r3, #28]
 8003b64:	23c2      	movs	r3, #194	; 0xc2
 8003b66:	33ff      	adds	r3, #255	; 0xff
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d007      	beq.n	8003b7c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003b74:	4313      	orrs	r3, r2
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68d9      	ldr	r1, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b90:	2380      	movs	r3, #128	; 0x80
 8003b92:	055b      	lsls	r3, r3, #21
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d01b      	beq.n	8003bd0 <HAL_ADC_Init+0x1dc>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d017      	beq.n	8003bd0 <HAL_ADC_Init+0x1dc>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d013      	beq.n	8003bd0 <HAL_ADC_Init+0x1dc>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d00f      	beq.n	8003bd0 <HAL_ADC_Init+0x1dc>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d00b      	beq.n	8003bd0 <HAL_ADC_Init+0x1dc>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	2b05      	cmp	r3, #5
 8003bbe:	d007      	beq.n	8003bd0 <HAL_ADC_Init+0x1dc>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	2b06      	cmp	r3, #6
 8003bc6:	d003      	beq.n	8003bd0 <HAL_ADC_Init+0x1dc>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	2b07      	cmp	r3, #7
 8003bce:	d112      	bne.n	8003bf6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695a      	ldr	r2, [r3, #20]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2107      	movs	r1, #7
 8003bdc:	438a      	bics	r2, r1
 8003bde:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6959      	ldr	r1, [r3, #20]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bea:	2207      	movs	r2, #7
 8003bec:	401a      	ands	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	4a1c      	ldr	r2, [pc, #112]	; (8003c70 <HAL_ADC_Init+0x27c>)
 8003bfe:	4013      	ands	r3, r2
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d10b      	bne.n	8003c1e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	2203      	movs	r2, #3
 8003c12:	4393      	bics	r3, r2
 8003c14:	2201      	movs	r2, #1
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003c1c:	e01c      	b.n	8003c58 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c22:	2212      	movs	r2, #18
 8003c24:	4393      	bics	r3, r2
 8003c26:	2210      	movs	r2, #16
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c32:	2201      	movs	r2, #1
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003c3a:	230f      	movs	r3, #15
 8003c3c:	18fb      	adds	r3, r7, r3
 8003c3e:	2201      	movs	r2, #1
 8003c40:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003c42:	e009      	b.n	8003c58 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	2210      	movs	r2, #16
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003c50:	230f      	movs	r3, #15
 8003c52:	18fb      	adds	r3, r7, r3
 8003c54:	2201      	movs	r2, #1
 8003c56:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003c58:	230f      	movs	r3, #15
 8003c5a:	18fb      	adds	r3, r7, r3
 8003c5c:	781b      	ldrb	r3, [r3, #0]
}
 8003c5e:	0018      	movs	r0, r3
 8003c60:	46bd      	mov	sp, r7
 8003c62:	b004      	add	sp, #16
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	fffffefd 	.word	0xfffffefd
 8003c6c:	fffe0219 	.word	0xfffe0219
 8003c70:	833fffe7 	.word	0x833fffe7

08003c74 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c7e:	230f      	movs	r3, #15
 8003c80:	18fb      	adds	r3, r7, r3
 8003c82:	2200      	movs	r2, #0
 8003c84:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8e:	2380      	movs	r3, #128	; 0x80
 8003c90:	055b      	lsls	r3, r3, #21
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d011      	beq.n	8003cba <HAL_ADC_ConfigChannel+0x46>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d00d      	beq.n	8003cba <HAL_ADC_ConfigChannel+0x46>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d009      	beq.n	8003cba <HAL_ADC_ConfigChannel+0x46>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d005      	beq.n	8003cba <HAL_ADC_ConfigChannel+0x46>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d001      	beq.n	8003cba <HAL_ADC_ConfigChannel+0x46>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2234      	movs	r2, #52	; 0x34
 8003cbe:	5c9b      	ldrb	r3, [r3, r2]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x54>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e0d0      	b.n	8003e6a <HAL_ADC_ConfigChannel+0x1f6>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2234      	movs	r2, #52	; 0x34
 8003ccc:	2101      	movs	r1, #1
 8003cce:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	2204      	movs	r2, #4
 8003cd8:	4013      	ands	r3, r2
 8003cda:	d000      	beq.n	8003cde <HAL_ADC_ConfigChannel+0x6a>
 8003cdc:	e0b4      	b.n	8003e48 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	4a64      	ldr	r2, [pc, #400]	; (8003e74 <HAL_ADC_ConfigChannel+0x200>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d100      	bne.n	8003cea <HAL_ADC_ConfigChannel+0x76>
 8003ce8:	e082      	b.n	8003df0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	409a      	lsls	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d04:	2380      	movs	r3, #128	; 0x80
 8003d06:	055b      	lsls	r3, r3, #21
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d037      	beq.n	8003d7c <HAL_ADC_ConfigChannel+0x108>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d033      	beq.n	8003d7c <HAL_ADC_ConfigChannel+0x108>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d02f      	beq.n	8003d7c <HAL_ADC_ConfigChannel+0x108>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	2b03      	cmp	r3, #3
 8003d22:	d02b      	beq.n	8003d7c <HAL_ADC_ConfigChannel+0x108>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d027      	beq.n	8003d7c <HAL_ADC_ConfigChannel+0x108>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	2b05      	cmp	r3, #5
 8003d32:	d023      	beq.n	8003d7c <HAL_ADC_ConfigChannel+0x108>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	2b06      	cmp	r3, #6
 8003d3a:	d01f      	beq.n	8003d7c <HAL_ADC_ConfigChannel+0x108>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d40:	2b07      	cmp	r3, #7
 8003d42:	d01b      	beq.n	8003d7c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	2107      	movs	r1, #7
 8003d50:	400b      	ands	r3, r1
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d012      	beq.n	8003d7c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695a      	ldr	r2, [r3, #20]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2107      	movs	r1, #7
 8003d62:	438a      	bics	r2, r1
 8003d64:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6959      	ldr	r1, [r3, #20]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	2207      	movs	r2, #7
 8003d72:	401a      	ands	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b10      	cmp	r3, #16
 8003d82:	d007      	beq.n	8003d94 <HAL_ADC_ConfigChannel+0x120>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b11      	cmp	r3, #17
 8003d8a:	d003      	beq.n	8003d94 <HAL_ADC_ConfigChannel+0x120>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b12      	cmp	r3, #18
 8003d92:	d163      	bne.n	8003e5c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003d94:	4b38      	ldr	r3, [pc, #224]	; (8003e78 <HAL_ADC_ConfigChannel+0x204>)
 8003d96:	6819      	ldr	r1, [r3, #0]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b10      	cmp	r3, #16
 8003d9e:	d009      	beq.n	8003db4 <HAL_ADC_ConfigChannel+0x140>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b11      	cmp	r3, #17
 8003da6:	d102      	bne.n	8003dae <HAL_ADC_ConfigChannel+0x13a>
 8003da8:	2380      	movs	r3, #128	; 0x80
 8003daa:	03db      	lsls	r3, r3, #15
 8003dac:	e004      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x144>
 8003dae:	2380      	movs	r3, #128	; 0x80
 8003db0:	045b      	lsls	r3, r3, #17
 8003db2:	e001      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x144>
 8003db4:	2380      	movs	r3, #128	; 0x80
 8003db6:	041b      	lsls	r3, r3, #16
 8003db8:	4a2f      	ldr	r2, [pc, #188]	; (8003e78 <HAL_ADC_ConfigChannel+0x204>)
 8003dba:	430b      	orrs	r3, r1
 8003dbc:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b10      	cmp	r3, #16
 8003dc4:	d14a      	bne.n	8003e5c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003dc6:	4b2d      	ldr	r3, [pc, #180]	; (8003e7c <HAL_ADC_ConfigChannel+0x208>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	492d      	ldr	r1, [pc, #180]	; (8003e80 <HAL_ADC_ConfigChannel+0x20c>)
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f7fc f9a5 	bl	800011c <__udivsi3>
 8003dd2:	0003      	movs	r3, r0
 8003dd4:	001a      	movs	r2, r3
 8003dd6:	0013      	movs	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	189b      	adds	r3, r3, r2
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003de0:	e002      	b.n	8003de8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	3b01      	subs	r3, #1
 8003de6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f9      	bne.n	8003de2 <HAL_ADC_ConfigChannel+0x16e>
 8003dee:	e035      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	4099      	lsls	r1, r3
 8003dfe:	000b      	movs	r3, r1
 8003e00:	43d9      	mvns	r1, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	400a      	ands	r2, r1
 8003e08:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b10      	cmp	r3, #16
 8003e10:	d007      	beq.n	8003e22 <HAL_ADC_ConfigChannel+0x1ae>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2b11      	cmp	r3, #17
 8003e18:	d003      	beq.n	8003e22 <HAL_ADC_ConfigChannel+0x1ae>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b12      	cmp	r3, #18
 8003e20:	d11c      	bne.n	8003e5c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003e22:	4b15      	ldr	r3, [pc, #84]	; (8003e78 <HAL_ADC_ConfigChannel+0x204>)
 8003e24:	6819      	ldr	r1, [r3, #0]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b10      	cmp	r3, #16
 8003e2c:	d007      	beq.n	8003e3e <HAL_ADC_ConfigChannel+0x1ca>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b11      	cmp	r3, #17
 8003e34:	d101      	bne.n	8003e3a <HAL_ADC_ConfigChannel+0x1c6>
 8003e36:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <HAL_ADC_ConfigChannel+0x210>)
 8003e38:	e002      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x1cc>
 8003e3a:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <HAL_ADC_ConfigChannel+0x214>)
 8003e3c:	e000      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x1cc>
 8003e3e:	4b13      	ldr	r3, [pc, #76]	; (8003e8c <HAL_ADC_ConfigChannel+0x218>)
 8003e40:	4a0d      	ldr	r2, [pc, #52]	; (8003e78 <HAL_ADC_ConfigChannel+0x204>)
 8003e42:	400b      	ands	r3, r1
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	e009      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003e54:	230f      	movs	r3, #15
 8003e56:	18fb      	adds	r3, r7, r3
 8003e58:	2201      	movs	r2, #1
 8003e5a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2234      	movs	r2, #52	; 0x34
 8003e60:	2100      	movs	r1, #0
 8003e62:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003e64:	230f      	movs	r3, #15
 8003e66:	18fb      	adds	r3, r7, r3
 8003e68:	781b      	ldrb	r3, [r3, #0]
}
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	b004      	add	sp, #16
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	00001001 	.word	0x00001001
 8003e78:	40012708 	.word	0x40012708
 8003e7c:	20000004 	.word	0x20000004
 8003e80:	000f4240 	.word	0x000f4240
 8003e84:	ffbfffff 	.word	0xffbfffff
 8003e88:	feffffff 	.word	0xfeffffff
 8003e8c:	ff7fffff 	.word	0xff7fffff

08003e90 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e0f0      	b.n	8004084 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	5c9b      	ldrb	r3, [r3, r2]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d103      	bne.n	8003eb6 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f7fe fdc9 	bl	8002a48 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2102      	movs	r1, #2
 8003ec2:	438a      	bics	r2, r1
 8003ec4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ec6:	f7ff fd8b 	bl	80039e0 <HAL_GetTick>
 8003eca:	0003      	movs	r3, r0
 8003ecc:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ece:	e013      	b.n	8003ef8 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ed0:	f7ff fd86 	bl	80039e0 <HAL_GetTick>
 8003ed4:	0002      	movs	r2, r0
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b0a      	cmp	r3, #10
 8003edc:	d90c      	bls.n	8003ef8 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	2280      	movs	r2, #128	; 0x80
 8003ee4:	0292      	lsls	r2, r2, #10
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	2105      	movs	r1, #5
 8003ef2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0c5      	b.n	8004084 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	4013      	ands	r3, r2
 8003f02:	d1e5      	bne.n	8003ed0 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2101      	movs	r1, #1
 8003f10:	430a      	orrs	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f14:	f7ff fd64 	bl	80039e0 <HAL_GetTick>
 8003f18:	0003      	movs	r3, r0
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f1c:	e013      	b.n	8003f46 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f1e:	f7ff fd5f 	bl	80039e0 <HAL_GetTick>
 8003f22:	0002      	movs	r2, r0
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b0a      	cmp	r3, #10
 8003f2a:	d90c      	bls.n	8003f46 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	2280      	movs	r2, #128	; 0x80
 8003f32:	0292      	lsls	r2, r2, #10
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	2105      	movs	r1, #5
 8003f40:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e09e      	b.n	8004084 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	4013      	ands	r3, r2
 8003f50:	d0e5      	beq.n	8003f1e <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	7e1b      	ldrb	r3, [r3, #24]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d108      	bne.n	8003f6c <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2180      	movs	r1, #128	; 0x80
 8003f66:	430a      	orrs	r2, r1
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	e007      	b.n	8003f7c <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2180      	movs	r1, #128	; 0x80
 8003f78:	438a      	bics	r2, r1
 8003f7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	7e5b      	ldrb	r3, [r3, #25]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d108      	bne.n	8003f96 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2140      	movs	r1, #64	; 0x40
 8003f90:	430a      	orrs	r2, r1
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	e007      	b.n	8003fa6 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2140      	movs	r1, #64	; 0x40
 8003fa2:	438a      	bics	r2, r1
 8003fa4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	7e9b      	ldrb	r3, [r3, #26]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d108      	bne.n	8003fc0 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2120      	movs	r1, #32
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	e007      	b.n	8003fd0 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2120      	movs	r1, #32
 8003fcc:	438a      	bics	r2, r1
 8003fce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	7edb      	ldrb	r3, [r3, #27]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d108      	bne.n	8003fea <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2110      	movs	r1, #16
 8003fe4:	438a      	bics	r2, r1
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	e007      	b.n	8003ffa <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2110      	movs	r1, #16
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	7f1b      	ldrb	r3, [r3, #28]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d108      	bne.n	8004014 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2108      	movs	r1, #8
 800400e:	430a      	orrs	r2, r1
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	e007      	b.n	8004024 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2108      	movs	r1, #8
 8004020:	438a      	bics	r2, r1
 8004022:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	7f5b      	ldrb	r3, [r3, #29]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d108      	bne.n	800403e <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2104      	movs	r1, #4
 8004038:	430a      	orrs	r2, r1
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	e007      	b.n	800404e <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2104      	movs	r1, #4
 800404a:	438a      	bics	r2, r1
 800404c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	431a      	orrs	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	431a      	orrs	r2, r3
 8004064:	0011      	movs	r1, r2
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	1e5a      	subs	r2, r3, #1
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2220      	movs	r2, #32
 800407e:	2101      	movs	r1, #1
 8004080:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	0018      	movs	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	b004      	add	sp, #16
 800408a:	bd80      	pop	{r7, pc}

0800408c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	0002      	movs	r2, r0
 8004094:	1dfb      	adds	r3, r7, #7
 8004096:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004098:	1dfb      	adds	r3, r7, #7
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2b7f      	cmp	r3, #127	; 0x7f
 800409e:	d809      	bhi.n	80040b4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040a0:	1dfb      	adds	r3, r7, #7
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	001a      	movs	r2, r3
 80040a6:	231f      	movs	r3, #31
 80040a8:	401a      	ands	r2, r3
 80040aa:	4b04      	ldr	r3, [pc, #16]	; (80040bc <__NVIC_EnableIRQ+0x30>)
 80040ac:	2101      	movs	r1, #1
 80040ae:	4091      	lsls	r1, r2
 80040b0:	000a      	movs	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]
  }
}
 80040b4:	46c0      	nop			; (mov r8, r8)
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b002      	add	sp, #8
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	e000e100 	.word	0xe000e100

080040c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040c0:	b590      	push	{r4, r7, lr}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	0002      	movs	r2, r0
 80040c8:	6039      	str	r1, [r7, #0]
 80040ca:	1dfb      	adds	r3, r7, #7
 80040cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80040ce:	1dfb      	adds	r3, r7, #7
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2b7f      	cmp	r3, #127	; 0x7f
 80040d4:	d828      	bhi.n	8004128 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040d6:	4a2f      	ldr	r2, [pc, #188]	; (8004194 <__NVIC_SetPriority+0xd4>)
 80040d8:	1dfb      	adds	r3, r7, #7
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	b25b      	sxtb	r3, r3
 80040de:	089b      	lsrs	r3, r3, #2
 80040e0:	33c0      	adds	r3, #192	; 0xc0
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	589b      	ldr	r3, [r3, r2]
 80040e6:	1dfa      	adds	r2, r7, #7
 80040e8:	7812      	ldrb	r2, [r2, #0]
 80040ea:	0011      	movs	r1, r2
 80040ec:	2203      	movs	r2, #3
 80040ee:	400a      	ands	r2, r1
 80040f0:	00d2      	lsls	r2, r2, #3
 80040f2:	21ff      	movs	r1, #255	; 0xff
 80040f4:	4091      	lsls	r1, r2
 80040f6:	000a      	movs	r2, r1
 80040f8:	43d2      	mvns	r2, r2
 80040fa:	401a      	ands	r2, r3
 80040fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	019b      	lsls	r3, r3, #6
 8004102:	22ff      	movs	r2, #255	; 0xff
 8004104:	401a      	ands	r2, r3
 8004106:	1dfb      	adds	r3, r7, #7
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	0018      	movs	r0, r3
 800410c:	2303      	movs	r3, #3
 800410e:	4003      	ands	r3, r0
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004114:	481f      	ldr	r0, [pc, #124]	; (8004194 <__NVIC_SetPriority+0xd4>)
 8004116:	1dfb      	adds	r3, r7, #7
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	b25b      	sxtb	r3, r3
 800411c:	089b      	lsrs	r3, r3, #2
 800411e:	430a      	orrs	r2, r1
 8004120:	33c0      	adds	r3, #192	; 0xc0
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004126:	e031      	b.n	800418c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004128:	4a1b      	ldr	r2, [pc, #108]	; (8004198 <__NVIC_SetPriority+0xd8>)
 800412a:	1dfb      	adds	r3, r7, #7
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	0019      	movs	r1, r3
 8004130:	230f      	movs	r3, #15
 8004132:	400b      	ands	r3, r1
 8004134:	3b08      	subs	r3, #8
 8004136:	089b      	lsrs	r3, r3, #2
 8004138:	3306      	adds	r3, #6
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	18d3      	adds	r3, r2, r3
 800413e:	3304      	adds	r3, #4
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	1dfa      	adds	r2, r7, #7
 8004144:	7812      	ldrb	r2, [r2, #0]
 8004146:	0011      	movs	r1, r2
 8004148:	2203      	movs	r2, #3
 800414a:	400a      	ands	r2, r1
 800414c:	00d2      	lsls	r2, r2, #3
 800414e:	21ff      	movs	r1, #255	; 0xff
 8004150:	4091      	lsls	r1, r2
 8004152:	000a      	movs	r2, r1
 8004154:	43d2      	mvns	r2, r2
 8004156:	401a      	ands	r2, r3
 8004158:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	019b      	lsls	r3, r3, #6
 800415e:	22ff      	movs	r2, #255	; 0xff
 8004160:	401a      	ands	r2, r3
 8004162:	1dfb      	adds	r3, r7, #7
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	0018      	movs	r0, r3
 8004168:	2303      	movs	r3, #3
 800416a:	4003      	ands	r3, r0
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004170:	4809      	ldr	r0, [pc, #36]	; (8004198 <__NVIC_SetPriority+0xd8>)
 8004172:	1dfb      	adds	r3, r7, #7
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	001c      	movs	r4, r3
 8004178:	230f      	movs	r3, #15
 800417a:	4023      	ands	r3, r4
 800417c:	3b08      	subs	r3, #8
 800417e:	089b      	lsrs	r3, r3, #2
 8004180:	430a      	orrs	r2, r1
 8004182:	3306      	adds	r3, #6
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	18c3      	adds	r3, r0, r3
 8004188:	3304      	adds	r3, #4
 800418a:	601a      	str	r2, [r3, #0]
}
 800418c:	46c0      	nop			; (mov r8, r8)
 800418e:	46bd      	mov	sp, r7
 8004190:	b003      	add	sp, #12
 8004192:	bd90      	pop	{r4, r7, pc}
 8004194:	e000e100 	.word	0xe000e100
 8004198:	e000ed00 	.word	0xe000ed00

0800419c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60b9      	str	r1, [r7, #8]
 80041a4:	607a      	str	r2, [r7, #4]
 80041a6:	210f      	movs	r1, #15
 80041a8:	187b      	adds	r3, r7, r1
 80041aa:	1c02      	adds	r2, r0, #0
 80041ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	187b      	adds	r3, r7, r1
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	b25b      	sxtb	r3, r3
 80041b6:	0011      	movs	r1, r2
 80041b8:	0018      	movs	r0, r3
 80041ba:	f7ff ff81 	bl	80040c0 <__NVIC_SetPriority>
}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	46bd      	mov	sp, r7
 80041c2:	b004      	add	sp, #16
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b082      	sub	sp, #8
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	0002      	movs	r2, r0
 80041ce:	1dfb      	adds	r3, r7, #7
 80041d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041d2:	1dfb      	adds	r3, r7, #7
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	b25b      	sxtb	r3, r3
 80041d8:	0018      	movs	r0, r3
 80041da:	f7ff ff57 	bl	800408c <__NVIC_EnableIRQ>
}
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	46bd      	mov	sp, r7
 80041e2:	b002      	add	sp, #8
 80041e4:	bd80      	pop	{r7, pc}
	...

080041e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e036      	b.n	800426c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2221      	movs	r2, #33	; 0x21
 8004202:	2102      	movs	r1, #2
 8004204:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4a18      	ldr	r2, [pc, #96]	; (8004274 <HAL_DMA_Init+0x8c>)
 8004212:	4013      	ands	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800421e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800422a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004236:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4313      	orrs	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	0018      	movs	r0, r3
 8004250:	f000 f8b4 	bl	80043bc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2221      	movs	r2, #33	; 0x21
 800425e:	2101      	movs	r1, #1
 8004260:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2220      	movs	r2, #32
 8004266:	2100      	movs	r1, #0
 8004268:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}  
 800426c:	0018      	movs	r0, r3
 800426e:	46bd      	mov	sp, r7
 8004270:	b004      	add	sp, #16
 8004272:	bd80      	pop	{r7, pc}
 8004274:	ffffc00f 	.word	0xffffc00f

08004278 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	2204      	movs	r2, #4
 8004296:	409a      	lsls	r2, r3
 8004298:	0013      	movs	r3, r2
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4013      	ands	r3, r2
 800429e:	d024      	beq.n	80042ea <HAL_DMA_IRQHandler+0x72>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2204      	movs	r2, #4
 80042a4:	4013      	ands	r3, r2
 80042a6:	d020      	beq.n	80042ea <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2220      	movs	r2, #32
 80042b0:	4013      	ands	r3, r2
 80042b2:	d107      	bne.n	80042c4 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2104      	movs	r1, #4
 80042c0:	438a      	bics	r2, r1
 80042c2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042cc:	2104      	movs	r1, #4
 80042ce:	4091      	lsls	r1, r2
 80042d0:	000a      	movs	r2, r1
 80042d2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d100      	bne.n	80042de <HAL_DMA_IRQHandler+0x66>
 80042dc:	e06a      	b.n	80043b4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	0010      	movs	r0, r2
 80042e6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80042e8:	e064      	b.n	80043b4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	2202      	movs	r2, #2
 80042f0:	409a      	lsls	r2, r3
 80042f2:	0013      	movs	r3, r2
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	4013      	ands	r3, r2
 80042f8:	d02b      	beq.n	8004352 <HAL_DMA_IRQHandler+0xda>
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2202      	movs	r2, #2
 80042fe:	4013      	ands	r3, r2
 8004300:	d027      	beq.n	8004352 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2220      	movs	r2, #32
 800430a:	4013      	ands	r3, r2
 800430c:	d10b      	bne.n	8004326 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	210a      	movs	r1, #10
 800431a:	438a      	bics	r2, r1
 800431c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2221      	movs	r2, #33	; 0x21
 8004322:	2101      	movs	r1, #1
 8004324:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432e:	2102      	movs	r1, #2
 8004330:	4091      	lsls	r1, r2
 8004332:	000a      	movs	r2, r1
 8004334:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2220      	movs	r2, #32
 800433a:	2100      	movs	r1, #0
 800433c:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004342:	2b00      	cmp	r3, #0
 8004344:	d036      	beq.n	80043b4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	0010      	movs	r0, r2
 800434e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004350:	e030      	b.n	80043b4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	2208      	movs	r2, #8
 8004358:	409a      	lsls	r2, r3
 800435a:	0013      	movs	r3, r2
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	4013      	ands	r3, r2
 8004360:	d028      	beq.n	80043b4 <HAL_DMA_IRQHandler+0x13c>
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2208      	movs	r2, #8
 8004366:	4013      	ands	r3, r2
 8004368:	d024      	beq.n	80043b4 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	210e      	movs	r1, #14
 8004376:	438a      	bics	r2, r1
 8004378:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004382:	2101      	movs	r1, #1
 8004384:	4091      	lsls	r1, r2
 8004386:	000a      	movs	r2, r1
 8004388:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2221      	movs	r2, #33	; 0x21
 8004394:	2101      	movs	r1, #1
 8004396:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2220      	movs	r2, #32
 800439c:	2100      	movs	r1, #0
 800439e:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d005      	beq.n	80043b4 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	0010      	movs	r0, r2
 80043b0:	4798      	blx	r3
    }
   }
}  
 80043b2:	e7ff      	b.n	80043b4 <HAL_DMA_IRQHandler+0x13c>
 80043b4:	46c0      	nop			; (mov r8, r8)
 80043b6:	46bd      	mov	sp, r7
 80043b8:	b004      	add	sp, #16
 80043ba:	bd80      	pop	{r7, pc}

080043bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a08      	ldr	r2, [pc, #32]	; (80043ec <DMA_CalcBaseAndBitshift+0x30>)
 80043ca:	4694      	mov	ip, r2
 80043cc:	4463      	add	r3, ip
 80043ce:	2114      	movs	r1, #20
 80043d0:	0018      	movs	r0, r3
 80043d2:	f7fb fea3 	bl	800011c <__udivsi3>
 80043d6:	0003      	movs	r3, r0
 80043d8:	009a      	lsls	r2, r3, #2
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a03      	ldr	r2, [pc, #12]	; (80043f0 <DMA_CalcBaseAndBitshift+0x34>)
 80043e2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80043e4:	46c0      	nop			; (mov r8, r8)
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b002      	add	sp, #8
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	bffdfff8 	.word	0xbffdfff8
 80043f0:	40020000 	.word	0x40020000

080043f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004402:	e149      	b.n	8004698 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2101      	movs	r1, #1
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	4091      	lsls	r1, r2
 800440e:	000a      	movs	r2, r1
 8004410:	4013      	ands	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d100      	bne.n	800441c <HAL_GPIO_Init+0x28>
 800441a:	e13a      	b.n	8004692 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2b02      	cmp	r3, #2
 8004422:	d003      	beq.n	800442c <HAL_GPIO_Init+0x38>
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b12      	cmp	r3, #18
 800442a:	d123      	bne.n	8004474 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	08da      	lsrs	r2, r3, #3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3208      	adds	r2, #8
 8004434:	0092      	lsls	r2, r2, #2
 8004436:	58d3      	ldr	r3, [r2, r3]
 8004438:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2207      	movs	r2, #7
 800443e:	4013      	ands	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	220f      	movs	r2, #15
 8004444:	409a      	lsls	r2, r3
 8004446:	0013      	movs	r3, r2
 8004448:	43da      	mvns	r2, r3
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	4013      	ands	r3, r2
 800444e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	691a      	ldr	r2, [r3, #16]
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	2107      	movs	r1, #7
 8004458:	400b      	ands	r3, r1
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	409a      	lsls	r2, r3
 800445e:	0013      	movs	r3, r2
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	4313      	orrs	r3, r2
 8004464:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	08da      	lsrs	r2, r3, #3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3208      	adds	r2, #8
 800446e:	0092      	lsls	r2, r2, #2
 8004470:	6939      	ldr	r1, [r7, #16]
 8004472:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	2203      	movs	r2, #3
 8004480:	409a      	lsls	r2, r3
 8004482:	0013      	movs	r3, r2
 8004484:	43da      	mvns	r2, r3
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4013      	ands	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2203      	movs	r2, #3
 8004492:	401a      	ands	r2, r3
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	409a      	lsls	r2, r3
 800449a:	0013      	movs	r3, r2
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d00b      	beq.n	80044c8 <HAL_GPIO_Init+0xd4>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d007      	beq.n	80044c8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044bc:	2b11      	cmp	r3, #17
 80044be:	d003      	beq.n	80044c8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2b12      	cmp	r3, #18
 80044c6:	d130      	bne.n	800452a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	2203      	movs	r2, #3
 80044d4:	409a      	lsls	r2, r3
 80044d6:	0013      	movs	r3, r2
 80044d8:	43da      	mvns	r2, r3
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	4013      	ands	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	409a      	lsls	r2, r3
 80044ea:	0013      	movs	r3, r2
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044fe:	2201      	movs	r2, #1
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	409a      	lsls	r2, r3
 8004504:	0013      	movs	r3, r2
 8004506:	43da      	mvns	r2, r3
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	4013      	ands	r3, r2
 800450c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	091b      	lsrs	r3, r3, #4
 8004514:	2201      	movs	r2, #1
 8004516:	401a      	ands	r2, r3
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	409a      	lsls	r2, r3
 800451c:	0013      	movs	r3, r2
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	4313      	orrs	r3, r2
 8004522:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	2203      	movs	r2, #3
 8004536:	409a      	lsls	r2, r3
 8004538:	0013      	movs	r3, r2
 800453a:	43da      	mvns	r2, r3
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	4013      	ands	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	689a      	ldr	r2, [r3, #8]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	409a      	lsls	r2, r3
 800454c:	0013      	movs	r3, r2
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	2380      	movs	r3, #128	; 0x80
 8004560:	055b      	lsls	r3, r3, #21
 8004562:	4013      	ands	r3, r2
 8004564:	d100      	bne.n	8004568 <HAL_GPIO_Init+0x174>
 8004566:	e094      	b.n	8004692 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004568:	4b51      	ldr	r3, [pc, #324]	; (80046b0 <HAL_GPIO_Init+0x2bc>)
 800456a:	699a      	ldr	r2, [r3, #24]
 800456c:	4b50      	ldr	r3, [pc, #320]	; (80046b0 <HAL_GPIO_Init+0x2bc>)
 800456e:	2101      	movs	r1, #1
 8004570:	430a      	orrs	r2, r1
 8004572:	619a      	str	r2, [r3, #24]
 8004574:	4b4e      	ldr	r3, [pc, #312]	; (80046b0 <HAL_GPIO_Init+0x2bc>)
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	2201      	movs	r2, #1
 800457a:	4013      	ands	r3, r2
 800457c:	60bb      	str	r3, [r7, #8]
 800457e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004580:	4a4c      	ldr	r2, [pc, #304]	; (80046b4 <HAL_GPIO_Init+0x2c0>)
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	089b      	lsrs	r3, r3, #2
 8004586:	3302      	adds	r3, #2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	589b      	ldr	r3, [r3, r2]
 800458c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2203      	movs	r2, #3
 8004592:	4013      	ands	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	220f      	movs	r2, #15
 8004598:	409a      	lsls	r2, r3
 800459a:	0013      	movs	r3, r2
 800459c:	43da      	mvns	r2, r3
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	4013      	ands	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	2390      	movs	r3, #144	; 0x90
 80045a8:	05db      	lsls	r3, r3, #23
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d00d      	beq.n	80045ca <HAL_GPIO_Init+0x1d6>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a41      	ldr	r2, [pc, #260]	; (80046b8 <HAL_GPIO_Init+0x2c4>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d007      	beq.n	80045c6 <HAL_GPIO_Init+0x1d2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a40      	ldr	r2, [pc, #256]	; (80046bc <HAL_GPIO_Init+0x2c8>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d101      	bne.n	80045c2 <HAL_GPIO_Init+0x1ce>
 80045be:	2302      	movs	r3, #2
 80045c0:	e004      	b.n	80045cc <HAL_GPIO_Init+0x1d8>
 80045c2:	2305      	movs	r3, #5
 80045c4:	e002      	b.n	80045cc <HAL_GPIO_Init+0x1d8>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <HAL_GPIO_Init+0x1d8>
 80045ca:	2300      	movs	r3, #0
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	2103      	movs	r1, #3
 80045d0:	400a      	ands	r2, r1
 80045d2:	0092      	lsls	r2, r2, #2
 80045d4:	4093      	lsls	r3, r2
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	4313      	orrs	r3, r2
 80045da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80045dc:	4935      	ldr	r1, [pc, #212]	; (80046b4 <HAL_GPIO_Init+0x2c0>)
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	089b      	lsrs	r3, r3, #2
 80045e2:	3302      	adds	r3, #2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045ea:	4b35      	ldr	r3, [pc, #212]	; (80046c0 <HAL_GPIO_Init+0x2cc>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	43da      	mvns	r2, r3
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	4013      	ands	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	2380      	movs	r3, #128	; 0x80
 8004600:	025b      	lsls	r3, r3, #9
 8004602:	4013      	ands	r3, r2
 8004604:	d003      	beq.n	800460e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4313      	orrs	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800460e:	4b2c      	ldr	r3, [pc, #176]	; (80046c0 <HAL_GPIO_Init+0x2cc>)
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004614:	4b2a      	ldr	r3, [pc, #168]	; (80046c0 <HAL_GPIO_Init+0x2cc>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	43da      	mvns	r2, r3
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	4013      	ands	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	2380      	movs	r3, #128	; 0x80
 800462a:	029b      	lsls	r3, r3, #10
 800462c:	4013      	ands	r3, r2
 800462e:	d003      	beq.n	8004638 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4313      	orrs	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004638:	4b21      	ldr	r3, [pc, #132]	; (80046c0 <HAL_GPIO_Init+0x2cc>)
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800463e:	4b20      	ldr	r3, [pc, #128]	; (80046c0 <HAL_GPIO_Init+0x2cc>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	43da      	mvns	r2, r3
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	4013      	ands	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	2380      	movs	r3, #128	; 0x80
 8004654:	035b      	lsls	r3, r3, #13
 8004656:	4013      	ands	r3, r2
 8004658:	d003      	beq.n	8004662 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4313      	orrs	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004662:	4b17      	ldr	r3, [pc, #92]	; (80046c0 <HAL_GPIO_Init+0x2cc>)
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004668:	4b15      	ldr	r3, [pc, #84]	; (80046c0 <HAL_GPIO_Init+0x2cc>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	43da      	mvns	r2, r3
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	4013      	ands	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	2380      	movs	r3, #128	; 0x80
 800467e:	039b      	lsls	r3, r3, #14
 8004680:	4013      	ands	r3, r2
 8004682:	d003      	beq.n	800468c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4313      	orrs	r3, r2
 800468a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800468c:	4b0c      	ldr	r3, [pc, #48]	; (80046c0 <HAL_GPIO_Init+0x2cc>)
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	3301      	adds	r3, #1
 8004696:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	40da      	lsrs	r2, r3
 80046a0:	1e13      	subs	r3, r2, #0
 80046a2:	d000      	beq.n	80046a6 <HAL_GPIO_Init+0x2b2>
 80046a4:	e6ae      	b.n	8004404 <HAL_GPIO_Init+0x10>
  } 
}
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	46bd      	mov	sp, r7
 80046aa:	b006      	add	sp, #24
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	40021000 	.word	0x40021000
 80046b4:	40010000 	.word	0x40010000
 80046b8:	48000400 	.word	0x48000400
 80046bc:	48000800 	.word	0x48000800
 80046c0:	40010400 	.word	0x40010400

080046c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	0008      	movs	r0, r1
 80046ce:	0011      	movs	r1, r2
 80046d0:	1cbb      	adds	r3, r7, #2
 80046d2:	1c02      	adds	r2, r0, #0
 80046d4:	801a      	strh	r2, [r3, #0]
 80046d6:	1c7b      	adds	r3, r7, #1
 80046d8:	1c0a      	adds	r2, r1, #0
 80046da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046dc:	1c7b      	adds	r3, r7, #1
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d004      	beq.n	80046ee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046e4:	1cbb      	adds	r3, r7, #2
 80046e6:	881a      	ldrh	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046ec:	e003      	b.n	80046f6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046ee:	1cbb      	adds	r3, r7, #2
 80046f0:	881a      	ldrh	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	46bd      	mov	sp, r7
 80046fa:	b002      	add	sp, #8
 80046fc:	bd80      	pop	{r7, pc}
	...

08004700 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b088      	sub	sp, #32
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d102      	bne.n	8004714 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	f000 fb76 	bl	8004e00 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2201      	movs	r2, #1
 800471a:	4013      	ands	r3, r2
 800471c:	d100      	bne.n	8004720 <HAL_RCC_OscConfig+0x20>
 800471e:	e08e      	b.n	800483e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004720:	4bc5      	ldr	r3, [pc, #788]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	220c      	movs	r2, #12
 8004726:	4013      	ands	r3, r2
 8004728:	2b04      	cmp	r3, #4
 800472a:	d00e      	beq.n	800474a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800472c:	4bc2      	ldr	r3, [pc, #776]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	220c      	movs	r2, #12
 8004732:	4013      	ands	r3, r2
 8004734:	2b08      	cmp	r3, #8
 8004736:	d117      	bne.n	8004768 <HAL_RCC_OscConfig+0x68>
 8004738:	4bbf      	ldr	r3, [pc, #764]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	23c0      	movs	r3, #192	; 0xc0
 800473e:	025b      	lsls	r3, r3, #9
 8004740:	401a      	ands	r2, r3
 8004742:	2380      	movs	r3, #128	; 0x80
 8004744:	025b      	lsls	r3, r3, #9
 8004746:	429a      	cmp	r2, r3
 8004748:	d10e      	bne.n	8004768 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800474a:	4bbb      	ldr	r3, [pc, #748]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	2380      	movs	r3, #128	; 0x80
 8004750:	029b      	lsls	r3, r3, #10
 8004752:	4013      	ands	r3, r2
 8004754:	d100      	bne.n	8004758 <HAL_RCC_OscConfig+0x58>
 8004756:	e071      	b.n	800483c <HAL_RCC_OscConfig+0x13c>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d000      	beq.n	8004762 <HAL_RCC_OscConfig+0x62>
 8004760:	e06c      	b.n	800483c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	f000 fb4c 	bl	8004e00 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d107      	bne.n	8004780 <HAL_RCC_OscConfig+0x80>
 8004770:	4bb1      	ldr	r3, [pc, #708]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	4bb0      	ldr	r3, [pc, #704]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 8004776:	2180      	movs	r1, #128	; 0x80
 8004778:	0249      	lsls	r1, r1, #9
 800477a:	430a      	orrs	r2, r1
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	e02f      	b.n	80047e0 <HAL_RCC_OscConfig+0xe0>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10c      	bne.n	80047a2 <HAL_RCC_OscConfig+0xa2>
 8004788:	4bab      	ldr	r3, [pc, #684]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	4baa      	ldr	r3, [pc, #680]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 800478e:	49ab      	ldr	r1, [pc, #684]	; (8004a3c <HAL_RCC_OscConfig+0x33c>)
 8004790:	400a      	ands	r2, r1
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	4ba8      	ldr	r3, [pc, #672]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	4ba7      	ldr	r3, [pc, #668]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 800479a:	49a9      	ldr	r1, [pc, #676]	; (8004a40 <HAL_RCC_OscConfig+0x340>)
 800479c:	400a      	ands	r2, r1
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	e01e      	b.n	80047e0 <HAL_RCC_OscConfig+0xe0>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2b05      	cmp	r3, #5
 80047a8:	d10e      	bne.n	80047c8 <HAL_RCC_OscConfig+0xc8>
 80047aa:	4ba3      	ldr	r3, [pc, #652]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	4ba2      	ldr	r3, [pc, #648]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 80047b0:	2180      	movs	r1, #128	; 0x80
 80047b2:	02c9      	lsls	r1, r1, #11
 80047b4:	430a      	orrs	r2, r1
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	4b9f      	ldr	r3, [pc, #636]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	4b9e      	ldr	r3, [pc, #632]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 80047be:	2180      	movs	r1, #128	; 0x80
 80047c0:	0249      	lsls	r1, r1, #9
 80047c2:	430a      	orrs	r2, r1
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	e00b      	b.n	80047e0 <HAL_RCC_OscConfig+0xe0>
 80047c8:	4b9b      	ldr	r3, [pc, #620]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	4b9a      	ldr	r3, [pc, #616]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 80047ce:	499b      	ldr	r1, [pc, #620]	; (8004a3c <HAL_RCC_OscConfig+0x33c>)
 80047d0:	400a      	ands	r2, r1
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	4b98      	ldr	r3, [pc, #608]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	4b97      	ldr	r3, [pc, #604]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 80047da:	4999      	ldr	r1, [pc, #612]	; (8004a40 <HAL_RCC_OscConfig+0x340>)
 80047dc:	400a      	ands	r2, r1
 80047de:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d014      	beq.n	8004812 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e8:	f7ff f8fa 	bl	80039e0 <HAL_GetTick>
 80047ec:	0003      	movs	r3, r0
 80047ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f0:	e008      	b.n	8004804 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047f2:	f7ff f8f5 	bl	80039e0 <HAL_GetTick>
 80047f6:	0002      	movs	r2, r0
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b64      	cmp	r3, #100	; 0x64
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e2fd      	b.n	8004e00 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004804:	4b8c      	ldr	r3, [pc, #560]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	2380      	movs	r3, #128	; 0x80
 800480a:	029b      	lsls	r3, r3, #10
 800480c:	4013      	ands	r3, r2
 800480e:	d0f0      	beq.n	80047f2 <HAL_RCC_OscConfig+0xf2>
 8004810:	e015      	b.n	800483e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004812:	f7ff f8e5 	bl	80039e0 <HAL_GetTick>
 8004816:	0003      	movs	r3, r0
 8004818:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800481c:	f7ff f8e0 	bl	80039e0 <HAL_GetTick>
 8004820:	0002      	movs	r2, r0
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b64      	cmp	r3, #100	; 0x64
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e2e8      	b.n	8004e00 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800482e:	4b82      	ldr	r3, [pc, #520]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	2380      	movs	r3, #128	; 0x80
 8004834:	029b      	lsls	r3, r3, #10
 8004836:	4013      	ands	r3, r2
 8004838:	d1f0      	bne.n	800481c <HAL_RCC_OscConfig+0x11c>
 800483a:	e000      	b.n	800483e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800483c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2202      	movs	r2, #2
 8004844:	4013      	ands	r3, r2
 8004846:	d100      	bne.n	800484a <HAL_RCC_OscConfig+0x14a>
 8004848:	e06c      	b.n	8004924 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800484a:	4b7b      	ldr	r3, [pc, #492]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	220c      	movs	r2, #12
 8004850:	4013      	ands	r3, r2
 8004852:	d00e      	beq.n	8004872 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004854:	4b78      	ldr	r3, [pc, #480]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	220c      	movs	r2, #12
 800485a:	4013      	ands	r3, r2
 800485c:	2b08      	cmp	r3, #8
 800485e:	d11f      	bne.n	80048a0 <HAL_RCC_OscConfig+0x1a0>
 8004860:	4b75      	ldr	r3, [pc, #468]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	23c0      	movs	r3, #192	; 0xc0
 8004866:	025b      	lsls	r3, r3, #9
 8004868:	401a      	ands	r2, r3
 800486a:	2380      	movs	r3, #128	; 0x80
 800486c:	021b      	lsls	r3, r3, #8
 800486e:	429a      	cmp	r2, r3
 8004870:	d116      	bne.n	80048a0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004872:	4b71      	ldr	r3, [pc, #452]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2202      	movs	r2, #2
 8004878:	4013      	ands	r3, r2
 800487a:	d005      	beq.n	8004888 <HAL_RCC_OscConfig+0x188>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d001      	beq.n	8004888 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e2bb      	b.n	8004e00 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004888:	4b6b      	ldr	r3, [pc, #428]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	22f8      	movs	r2, #248	; 0xf8
 800488e:	4393      	bics	r3, r2
 8004890:	0019      	movs	r1, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	00da      	lsls	r2, r3, #3
 8004898:	4b67      	ldr	r3, [pc, #412]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 800489a:	430a      	orrs	r2, r1
 800489c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800489e:	e041      	b.n	8004924 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d024      	beq.n	80048f2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048a8:	4b63      	ldr	r3, [pc, #396]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	4b62      	ldr	r3, [pc, #392]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 80048ae:	2101      	movs	r1, #1
 80048b0:	430a      	orrs	r2, r1
 80048b2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b4:	f7ff f894 	bl	80039e0 <HAL_GetTick>
 80048b8:	0003      	movs	r3, r0
 80048ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048be:	f7ff f88f 	bl	80039e0 <HAL_GetTick>
 80048c2:	0002      	movs	r2, r0
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e297      	b.n	8004e00 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d0:	4b59      	ldr	r3, [pc, #356]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2202      	movs	r2, #2
 80048d6:	4013      	ands	r3, r2
 80048d8:	d0f1      	beq.n	80048be <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048da:	4b57      	ldr	r3, [pc, #348]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	22f8      	movs	r2, #248	; 0xf8
 80048e0:	4393      	bics	r3, r2
 80048e2:	0019      	movs	r1, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	00da      	lsls	r2, r3, #3
 80048ea:	4b53      	ldr	r3, [pc, #332]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 80048ec:	430a      	orrs	r2, r1
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	e018      	b.n	8004924 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048f2:	4b51      	ldr	r3, [pc, #324]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	4b50      	ldr	r3, [pc, #320]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 80048f8:	2101      	movs	r1, #1
 80048fa:	438a      	bics	r2, r1
 80048fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fe:	f7ff f86f 	bl	80039e0 <HAL_GetTick>
 8004902:	0003      	movs	r3, r0
 8004904:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004906:	e008      	b.n	800491a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004908:	f7ff f86a 	bl	80039e0 <HAL_GetTick>
 800490c:	0002      	movs	r2, r0
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e272      	b.n	8004e00 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800491a:	4b47      	ldr	r3, [pc, #284]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2202      	movs	r2, #2
 8004920:	4013      	ands	r3, r2
 8004922:	d1f1      	bne.n	8004908 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2208      	movs	r2, #8
 800492a:	4013      	ands	r3, r2
 800492c:	d036      	beq.n	800499c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d019      	beq.n	800496a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004936:	4b40      	ldr	r3, [pc, #256]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 8004938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800493a:	4b3f      	ldr	r3, [pc, #252]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 800493c:	2101      	movs	r1, #1
 800493e:	430a      	orrs	r2, r1
 8004940:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004942:	f7ff f84d 	bl	80039e0 <HAL_GetTick>
 8004946:	0003      	movs	r3, r0
 8004948:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800494c:	f7ff f848 	bl	80039e0 <HAL_GetTick>
 8004950:	0002      	movs	r2, r0
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e250      	b.n	8004e00 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800495e:	4b36      	ldr	r3, [pc, #216]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	2202      	movs	r2, #2
 8004964:	4013      	ands	r3, r2
 8004966:	d0f1      	beq.n	800494c <HAL_RCC_OscConfig+0x24c>
 8004968:	e018      	b.n	800499c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800496a:	4b33      	ldr	r3, [pc, #204]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 800496c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800496e:	4b32      	ldr	r3, [pc, #200]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 8004970:	2101      	movs	r1, #1
 8004972:	438a      	bics	r2, r1
 8004974:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004976:	f7ff f833 	bl	80039e0 <HAL_GetTick>
 800497a:	0003      	movs	r3, r0
 800497c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004980:	f7ff f82e 	bl	80039e0 <HAL_GetTick>
 8004984:	0002      	movs	r2, r0
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e236      	b.n	8004e00 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004992:	4b29      	ldr	r3, [pc, #164]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	2202      	movs	r2, #2
 8004998:	4013      	ands	r3, r2
 800499a:	d1f1      	bne.n	8004980 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2204      	movs	r2, #4
 80049a2:	4013      	ands	r3, r2
 80049a4:	d100      	bne.n	80049a8 <HAL_RCC_OscConfig+0x2a8>
 80049a6:	e0b5      	b.n	8004b14 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049a8:	231f      	movs	r3, #31
 80049aa:	18fb      	adds	r3, r7, r3
 80049ac:	2200      	movs	r2, #0
 80049ae:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049b0:	4b21      	ldr	r3, [pc, #132]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 80049b2:	69da      	ldr	r2, [r3, #28]
 80049b4:	2380      	movs	r3, #128	; 0x80
 80049b6:	055b      	lsls	r3, r3, #21
 80049b8:	4013      	ands	r3, r2
 80049ba:	d111      	bne.n	80049e0 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049bc:	4b1e      	ldr	r3, [pc, #120]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 80049be:	69da      	ldr	r2, [r3, #28]
 80049c0:	4b1d      	ldr	r3, [pc, #116]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 80049c2:	2180      	movs	r1, #128	; 0x80
 80049c4:	0549      	lsls	r1, r1, #21
 80049c6:	430a      	orrs	r2, r1
 80049c8:	61da      	str	r2, [r3, #28]
 80049ca:	4b1b      	ldr	r3, [pc, #108]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 80049cc:	69da      	ldr	r2, [r3, #28]
 80049ce:	2380      	movs	r3, #128	; 0x80
 80049d0:	055b      	lsls	r3, r3, #21
 80049d2:	4013      	ands	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80049d8:	231f      	movs	r3, #31
 80049da:	18fb      	adds	r3, r7, r3
 80049dc:	2201      	movs	r2, #1
 80049de:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e0:	4b18      	ldr	r3, [pc, #96]	; (8004a44 <HAL_RCC_OscConfig+0x344>)
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	2380      	movs	r3, #128	; 0x80
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	4013      	ands	r3, r2
 80049ea:	d11a      	bne.n	8004a22 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ec:	4b15      	ldr	r3, [pc, #84]	; (8004a44 <HAL_RCC_OscConfig+0x344>)
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	4b14      	ldr	r3, [pc, #80]	; (8004a44 <HAL_RCC_OscConfig+0x344>)
 80049f2:	2180      	movs	r1, #128	; 0x80
 80049f4:	0049      	lsls	r1, r1, #1
 80049f6:	430a      	orrs	r2, r1
 80049f8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049fa:	f7fe fff1 	bl	80039e0 <HAL_GetTick>
 80049fe:	0003      	movs	r3, r0
 8004a00:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a04:	f7fe ffec 	bl	80039e0 <HAL_GetTick>
 8004a08:	0002      	movs	r2, r0
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b64      	cmp	r3, #100	; 0x64
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e1f4      	b.n	8004e00 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a16:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <HAL_RCC_OscConfig+0x344>)
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	2380      	movs	r3, #128	; 0x80
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	4013      	ands	r3, r2
 8004a20:	d0f0      	beq.n	8004a04 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d10e      	bne.n	8004a48 <HAL_RCC_OscConfig+0x348>
 8004a2a:	4b03      	ldr	r3, [pc, #12]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 8004a2c:	6a1a      	ldr	r2, [r3, #32]
 8004a2e:	4b02      	ldr	r3, [pc, #8]	; (8004a38 <HAL_RCC_OscConfig+0x338>)
 8004a30:	2101      	movs	r1, #1
 8004a32:	430a      	orrs	r2, r1
 8004a34:	621a      	str	r2, [r3, #32]
 8004a36:	e035      	b.n	8004aa4 <HAL_RCC_OscConfig+0x3a4>
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	fffeffff 	.word	0xfffeffff
 8004a40:	fffbffff 	.word	0xfffbffff
 8004a44:	40007000 	.word	0x40007000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10c      	bne.n	8004a6a <HAL_RCC_OscConfig+0x36a>
 8004a50:	4bca      	ldr	r3, [pc, #808]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004a52:	6a1a      	ldr	r2, [r3, #32]
 8004a54:	4bc9      	ldr	r3, [pc, #804]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004a56:	2101      	movs	r1, #1
 8004a58:	438a      	bics	r2, r1
 8004a5a:	621a      	str	r2, [r3, #32]
 8004a5c:	4bc7      	ldr	r3, [pc, #796]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004a5e:	6a1a      	ldr	r2, [r3, #32]
 8004a60:	4bc6      	ldr	r3, [pc, #792]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004a62:	2104      	movs	r1, #4
 8004a64:	438a      	bics	r2, r1
 8004a66:	621a      	str	r2, [r3, #32]
 8004a68:	e01c      	b.n	8004aa4 <HAL_RCC_OscConfig+0x3a4>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	2b05      	cmp	r3, #5
 8004a70:	d10c      	bne.n	8004a8c <HAL_RCC_OscConfig+0x38c>
 8004a72:	4bc2      	ldr	r3, [pc, #776]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004a74:	6a1a      	ldr	r2, [r3, #32]
 8004a76:	4bc1      	ldr	r3, [pc, #772]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004a78:	2104      	movs	r1, #4
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	621a      	str	r2, [r3, #32]
 8004a7e:	4bbf      	ldr	r3, [pc, #764]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004a80:	6a1a      	ldr	r2, [r3, #32]
 8004a82:	4bbe      	ldr	r3, [pc, #760]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004a84:	2101      	movs	r1, #1
 8004a86:	430a      	orrs	r2, r1
 8004a88:	621a      	str	r2, [r3, #32]
 8004a8a:	e00b      	b.n	8004aa4 <HAL_RCC_OscConfig+0x3a4>
 8004a8c:	4bbb      	ldr	r3, [pc, #748]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004a8e:	6a1a      	ldr	r2, [r3, #32]
 8004a90:	4bba      	ldr	r3, [pc, #744]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004a92:	2101      	movs	r1, #1
 8004a94:	438a      	bics	r2, r1
 8004a96:	621a      	str	r2, [r3, #32]
 8004a98:	4bb8      	ldr	r3, [pc, #736]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004a9a:	6a1a      	ldr	r2, [r3, #32]
 8004a9c:	4bb7      	ldr	r3, [pc, #732]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004a9e:	2104      	movs	r1, #4
 8004aa0:	438a      	bics	r2, r1
 8004aa2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d014      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aac:	f7fe ff98 	bl	80039e0 <HAL_GetTick>
 8004ab0:	0003      	movs	r3, r0
 8004ab2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab4:	e009      	b.n	8004aca <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ab6:	f7fe ff93 	bl	80039e0 <HAL_GetTick>
 8004aba:	0002      	movs	r2, r0
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	4aaf      	ldr	r2, [pc, #700]	; (8004d80 <HAL_RCC_OscConfig+0x680>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e19a      	b.n	8004e00 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aca:	4bac      	ldr	r3, [pc, #688]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	d0f0      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x3b6>
 8004ad4:	e013      	b.n	8004afe <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad6:	f7fe ff83 	bl	80039e0 <HAL_GetTick>
 8004ada:	0003      	movs	r3, r0
 8004adc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ade:	e009      	b.n	8004af4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ae0:	f7fe ff7e 	bl	80039e0 <HAL_GetTick>
 8004ae4:	0002      	movs	r2, r0
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	4aa5      	ldr	r2, [pc, #660]	; (8004d80 <HAL_RCC_OscConfig+0x680>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e185      	b.n	8004e00 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af4:	4ba1      	ldr	r3, [pc, #644]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	2202      	movs	r2, #2
 8004afa:	4013      	ands	r3, r2
 8004afc:	d1f0      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004afe:	231f      	movs	r3, #31
 8004b00:	18fb      	adds	r3, r7, r3
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d105      	bne.n	8004b14 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b08:	4b9c      	ldr	r3, [pc, #624]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004b0a:	69da      	ldr	r2, [r3, #28]
 8004b0c:	4b9b      	ldr	r3, [pc, #620]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004b0e:	499d      	ldr	r1, [pc, #628]	; (8004d84 <HAL_RCC_OscConfig+0x684>)
 8004b10:	400a      	ands	r2, r1
 8004b12:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2210      	movs	r2, #16
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d063      	beq.n	8004be6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d12a      	bne.n	8004b7c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004b26:	4b95      	ldr	r3, [pc, #596]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004b28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b2a:	4b94      	ldr	r3, [pc, #592]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004b2c:	2104      	movs	r1, #4
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004b32:	4b92      	ldr	r3, [pc, #584]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004b34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b36:	4b91      	ldr	r3, [pc, #580]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004b38:	2101      	movs	r1, #1
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b3e:	f7fe ff4f 	bl	80039e0 <HAL_GetTick>
 8004b42:	0003      	movs	r3, r0
 8004b44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004b48:	f7fe ff4a 	bl	80039e0 <HAL_GetTick>
 8004b4c:	0002      	movs	r2, r0
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e152      	b.n	8004e00 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004b5a:	4b88      	ldr	r3, [pc, #544]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5e:	2202      	movs	r2, #2
 8004b60:	4013      	ands	r3, r2
 8004b62:	d0f1      	beq.n	8004b48 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004b64:	4b85      	ldr	r3, [pc, #532]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b68:	22f8      	movs	r2, #248	; 0xf8
 8004b6a:	4393      	bics	r3, r2
 8004b6c:	0019      	movs	r1, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	00da      	lsls	r2, r3, #3
 8004b74:	4b81      	ldr	r3, [pc, #516]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004b76:	430a      	orrs	r2, r1
 8004b78:	635a      	str	r2, [r3, #52]	; 0x34
 8004b7a:	e034      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	3305      	adds	r3, #5
 8004b82:	d111      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004b84:	4b7d      	ldr	r3, [pc, #500]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b88:	4b7c      	ldr	r3, [pc, #496]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004b8a:	2104      	movs	r1, #4
 8004b8c:	438a      	bics	r2, r1
 8004b8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004b90:	4b7a      	ldr	r3, [pc, #488]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b94:	22f8      	movs	r2, #248	; 0xf8
 8004b96:	4393      	bics	r3, r2
 8004b98:	0019      	movs	r1, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	00da      	lsls	r2, r3, #3
 8004ba0:	4b76      	ldr	r3, [pc, #472]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	635a      	str	r2, [r3, #52]	; 0x34
 8004ba6:	e01e      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004ba8:	4b74      	ldr	r3, [pc, #464]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bac:	4b73      	ldr	r3, [pc, #460]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004bae:	2104      	movs	r1, #4
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004bb4:	4b71      	ldr	r3, [pc, #452]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bb8:	4b70      	ldr	r3, [pc, #448]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004bba:	2101      	movs	r1, #1
 8004bbc:	438a      	bics	r2, r1
 8004bbe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bc0:	f7fe ff0e 	bl	80039e0 <HAL_GetTick>
 8004bc4:	0003      	movs	r3, r0
 8004bc6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004bca:	f7fe ff09 	bl	80039e0 <HAL_GetTick>
 8004bce:	0002      	movs	r2, r0
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e111      	b.n	8004e00 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004bdc:	4b67      	ldr	r3, [pc, #412]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be0:	2202      	movs	r2, #2
 8004be2:	4013      	ands	r3, r2
 8004be4:	d1f1      	bne.n	8004bca <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2220      	movs	r2, #32
 8004bec:	4013      	ands	r3, r2
 8004bee:	d05c      	beq.n	8004caa <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004bf0:	4b62      	ldr	r3, [pc, #392]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	220c      	movs	r2, #12
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	2b0c      	cmp	r3, #12
 8004bfa:	d00e      	beq.n	8004c1a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004bfc:	4b5f      	ldr	r3, [pc, #380]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	220c      	movs	r2, #12
 8004c02:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	d114      	bne.n	8004c32 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004c08:	4b5c      	ldr	r3, [pc, #368]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	23c0      	movs	r3, #192	; 0xc0
 8004c0e:	025b      	lsls	r3, r3, #9
 8004c10:	401a      	ands	r2, r3
 8004c12:	23c0      	movs	r3, #192	; 0xc0
 8004c14:	025b      	lsls	r3, r3, #9
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d10b      	bne.n	8004c32 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004c1a:	4b58      	ldr	r3, [pc, #352]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c1e:	2380      	movs	r3, #128	; 0x80
 8004c20:	025b      	lsls	r3, r3, #9
 8004c22:	4013      	ands	r3, r2
 8004c24:	d040      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x5a8>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d03c      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e0e6      	b.n	8004e00 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d01b      	beq.n	8004c72 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004c3a:	4b50      	ldr	r3, [pc, #320]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c3e:	4b4f      	ldr	r3, [pc, #316]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004c40:	2180      	movs	r1, #128	; 0x80
 8004c42:	0249      	lsls	r1, r1, #9
 8004c44:	430a      	orrs	r2, r1
 8004c46:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c48:	f7fe feca 	bl	80039e0 <HAL_GetTick>
 8004c4c:	0003      	movs	r3, r0
 8004c4e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c52:	f7fe fec5 	bl	80039e0 <HAL_GetTick>
 8004c56:	0002      	movs	r2, r0
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e0cd      	b.n	8004e00 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004c64:	4b45      	ldr	r3, [pc, #276]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004c66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c68:	2380      	movs	r3, #128	; 0x80
 8004c6a:	025b      	lsls	r3, r3, #9
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	d0f0      	beq.n	8004c52 <HAL_RCC_OscConfig+0x552>
 8004c70:	e01b      	b.n	8004caa <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004c72:	4b42      	ldr	r3, [pc, #264]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c76:	4b41      	ldr	r3, [pc, #260]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004c78:	4943      	ldr	r1, [pc, #268]	; (8004d88 <HAL_RCC_OscConfig+0x688>)
 8004c7a:	400a      	ands	r2, r1
 8004c7c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c7e:	f7fe feaf 	bl	80039e0 <HAL_GetTick>
 8004c82:	0003      	movs	r3, r0
 8004c84:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c88:	f7fe feaa 	bl	80039e0 <HAL_GetTick>
 8004c8c:	0002      	movs	r2, r0
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e0b2      	b.n	8004e00 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004c9a:	4b38      	ldr	r3, [pc, #224]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c9e:	2380      	movs	r3, #128	; 0x80
 8004ca0:	025b      	lsls	r3, r3, #9
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0x588>
 8004ca6:	e000      	b.n	8004caa <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004ca8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d100      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x5b4>
 8004cb2:	e0a4      	b.n	8004dfe <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cb4:	4b31      	ldr	r3, [pc, #196]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	220c      	movs	r2, #12
 8004cba:	4013      	ands	r3, r2
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d100      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x5c2>
 8004cc0:	e078      	b.n	8004db4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d14c      	bne.n	8004d64 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cca:	4b2c      	ldr	r3, [pc, #176]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	4b2b      	ldr	r3, [pc, #172]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004cd0:	492e      	ldr	r1, [pc, #184]	; (8004d8c <HAL_RCC_OscConfig+0x68c>)
 8004cd2:	400a      	ands	r2, r1
 8004cd4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd6:	f7fe fe83 	bl	80039e0 <HAL_GetTick>
 8004cda:	0003      	movs	r3, r0
 8004cdc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce0:	f7fe fe7e 	bl	80039e0 <HAL_GetTick>
 8004ce4:	0002      	movs	r2, r0
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e086      	b.n	8004e00 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cf2:	4b22      	ldr	r3, [pc, #136]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	2380      	movs	r3, #128	; 0x80
 8004cf8:	049b      	lsls	r3, r3, #18
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	d1f0      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cfe:	4b1f      	ldr	r3, [pc, #124]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d02:	220f      	movs	r2, #15
 8004d04:	4393      	bics	r3, r2
 8004d06:	0019      	movs	r1, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d0c:	4b1b      	ldr	r3, [pc, #108]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d12:	4b1a      	ldr	r3, [pc, #104]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	4a1e      	ldr	r2, [pc, #120]	; (8004d90 <HAL_RCC_OscConfig+0x690>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	0019      	movs	r1, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d24:	431a      	orrs	r2, r3
 8004d26:	4b15      	ldr	r3, [pc, #84]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d2c:	4b13      	ldr	r3, [pc, #76]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	4b12      	ldr	r3, [pc, #72]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004d32:	2180      	movs	r1, #128	; 0x80
 8004d34:	0449      	lsls	r1, r1, #17
 8004d36:	430a      	orrs	r2, r1
 8004d38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3a:	f7fe fe51 	bl	80039e0 <HAL_GetTick>
 8004d3e:	0003      	movs	r3, r0
 8004d40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d44:	f7fe fe4c 	bl	80039e0 <HAL_GetTick>
 8004d48:	0002      	movs	r2, r0
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e054      	b.n	8004e00 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d56:	4b09      	ldr	r3, [pc, #36]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	2380      	movs	r3, #128	; 0x80
 8004d5c:	049b      	lsls	r3, r3, #18
 8004d5e:	4013      	ands	r3, r2
 8004d60:	d0f0      	beq.n	8004d44 <HAL_RCC_OscConfig+0x644>
 8004d62:	e04c      	b.n	8004dfe <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d64:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	4b04      	ldr	r3, [pc, #16]	; (8004d7c <HAL_RCC_OscConfig+0x67c>)
 8004d6a:	4908      	ldr	r1, [pc, #32]	; (8004d8c <HAL_RCC_OscConfig+0x68c>)
 8004d6c:	400a      	ands	r2, r1
 8004d6e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d70:	f7fe fe36 	bl	80039e0 <HAL_GetTick>
 8004d74:	0003      	movs	r3, r0
 8004d76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d78:	e015      	b.n	8004da6 <HAL_RCC_OscConfig+0x6a6>
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	00001388 	.word	0x00001388
 8004d84:	efffffff 	.word	0xefffffff
 8004d88:	fffeffff 	.word	0xfffeffff
 8004d8c:	feffffff 	.word	0xfeffffff
 8004d90:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d94:	f7fe fe24 	bl	80039e0 <HAL_GetTick>
 8004d98:	0002      	movs	r2, r0
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e02c      	b.n	8004e00 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004da6:	4b18      	ldr	r3, [pc, #96]	; (8004e08 <HAL_RCC_OscConfig+0x708>)
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	2380      	movs	r3, #128	; 0x80
 8004dac:	049b      	lsls	r3, r3, #18
 8004dae:	4013      	ands	r3, r2
 8004db0:	d1f0      	bne.n	8004d94 <HAL_RCC_OscConfig+0x694>
 8004db2:	e024      	b.n	8004dfe <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d101      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e01f      	b.n	8004e00 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004dc0:	4b11      	ldr	r3, [pc, #68]	; (8004e08 <HAL_RCC_OscConfig+0x708>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004dc6:	4b10      	ldr	r3, [pc, #64]	; (8004e08 <HAL_RCC_OscConfig+0x708>)
 8004dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dca:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	23c0      	movs	r3, #192	; 0xc0
 8004dd0:	025b      	lsls	r3, r3, #9
 8004dd2:	401a      	ands	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d10e      	bne.n	8004dfa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	220f      	movs	r2, #15
 8004de0:	401a      	ands	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d107      	bne.n	8004dfa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	23f0      	movs	r3, #240	; 0xf0
 8004dee:	039b      	lsls	r3, r3, #14
 8004df0:	401a      	ands	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d001      	beq.n	8004dfe <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e000      	b.n	8004e00 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	0018      	movs	r0, r3
 8004e02:	46bd      	mov	sp, r7
 8004e04:	b008      	add	sp, #32
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	40021000 	.word	0x40021000

08004e0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e0bf      	b.n	8004fa0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e20:	4b61      	ldr	r3, [pc, #388]	; (8004fa8 <HAL_RCC_ClockConfig+0x19c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2201      	movs	r2, #1
 8004e26:	4013      	ands	r3, r2
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d911      	bls.n	8004e52 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2e:	4b5e      	ldr	r3, [pc, #376]	; (8004fa8 <HAL_RCC_ClockConfig+0x19c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2201      	movs	r2, #1
 8004e34:	4393      	bics	r3, r2
 8004e36:	0019      	movs	r1, r3
 8004e38:	4b5b      	ldr	r3, [pc, #364]	; (8004fa8 <HAL_RCC_ClockConfig+0x19c>)
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e40:	4b59      	ldr	r3, [pc, #356]	; (8004fa8 <HAL_RCC_ClockConfig+0x19c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2201      	movs	r2, #1
 8004e46:	4013      	ands	r3, r2
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d001      	beq.n	8004e52 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e0a6      	b.n	8004fa0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2202      	movs	r2, #2
 8004e58:	4013      	ands	r3, r2
 8004e5a:	d015      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2204      	movs	r2, #4
 8004e62:	4013      	ands	r3, r2
 8004e64:	d006      	beq.n	8004e74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004e66:	4b51      	ldr	r3, [pc, #324]	; (8004fac <HAL_RCC_ClockConfig+0x1a0>)
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	4b50      	ldr	r3, [pc, #320]	; (8004fac <HAL_RCC_ClockConfig+0x1a0>)
 8004e6c:	21e0      	movs	r1, #224	; 0xe0
 8004e6e:	00c9      	lsls	r1, r1, #3
 8004e70:	430a      	orrs	r2, r1
 8004e72:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e74:	4b4d      	ldr	r3, [pc, #308]	; (8004fac <HAL_RCC_ClockConfig+0x1a0>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	22f0      	movs	r2, #240	; 0xf0
 8004e7a:	4393      	bics	r3, r2
 8004e7c:	0019      	movs	r1, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	4b4a      	ldr	r3, [pc, #296]	; (8004fac <HAL_RCC_ClockConfig+0x1a0>)
 8004e84:	430a      	orrs	r2, r1
 8004e86:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	4013      	ands	r3, r2
 8004e90:	d04c      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d107      	bne.n	8004eaa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e9a:	4b44      	ldr	r3, [pc, #272]	; (8004fac <HAL_RCC_ClockConfig+0x1a0>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	2380      	movs	r3, #128	; 0x80
 8004ea0:	029b      	lsls	r3, r3, #10
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	d120      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e07a      	b.n	8004fa0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d107      	bne.n	8004ec2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eb2:	4b3e      	ldr	r3, [pc, #248]	; (8004fac <HAL_RCC_ClockConfig+0x1a0>)
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	2380      	movs	r3, #128	; 0x80
 8004eb8:	049b      	lsls	r3, r3, #18
 8004eba:	4013      	ands	r3, r2
 8004ebc:	d114      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e06e      	b.n	8004fa0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	2b03      	cmp	r3, #3
 8004ec8:	d107      	bne.n	8004eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004eca:	4b38      	ldr	r3, [pc, #224]	; (8004fac <HAL_RCC_ClockConfig+0x1a0>)
 8004ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ece:	2380      	movs	r3, #128	; 0x80
 8004ed0:	025b      	lsls	r3, r3, #9
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	d108      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e062      	b.n	8004fa0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eda:	4b34      	ldr	r3, [pc, #208]	; (8004fac <HAL_RCC_ClockConfig+0x1a0>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	d101      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e05b      	b.n	8004fa0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ee8:	4b30      	ldr	r3, [pc, #192]	; (8004fac <HAL_RCC_ClockConfig+0x1a0>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2203      	movs	r2, #3
 8004eee:	4393      	bics	r3, r2
 8004ef0:	0019      	movs	r1, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	4b2d      	ldr	r3, [pc, #180]	; (8004fac <HAL_RCC_ClockConfig+0x1a0>)
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004efc:	f7fe fd70 	bl	80039e0 <HAL_GetTick>
 8004f00:	0003      	movs	r3, r0
 8004f02:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f04:	e009      	b.n	8004f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f06:	f7fe fd6b 	bl	80039e0 <HAL_GetTick>
 8004f0a:	0002      	movs	r2, r0
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	4a27      	ldr	r2, [pc, #156]	; (8004fb0 <HAL_RCC_ClockConfig+0x1a4>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e042      	b.n	8004fa0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f1a:	4b24      	ldr	r3, [pc, #144]	; (8004fac <HAL_RCC_ClockConfig+0x1a0>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	220c      	movs	r2, #12
 8004f20:	401a      	ands	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d1ec      	bne.n	8004f06 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f2c:	4b1e      	ldr	r3, [pc, #120]	; (8004fa8 <HAL_RCC_ClockConfig+0x19c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2201      	movs	r2, #1
 8004f32:	4013      	ands	r3, r2
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d211      	bcs.n	8004f5e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f3a:	4b1b      	ldr	r3, [pc, #108]	; (8004fa8 <HAL_RCC_ClockConfig+0x19c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	4393      	bics	r3, r2
 8004f42:	0019      	movs	r1, r3
 8004f44:	4b18      	ldr	r3, [pc, #96]	; (8004fa8 <HAL_RCC_ClockConfig+0x19c>)
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f4c:	4b16      	ldr	r3, [pc, #88]	; (8004fa8 <HAL_RCC_ClockConfig+0x19c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2201      	movs	r2, #1
 8004f52:	4013      	ands	r3, r2
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d001      	beq.n	8004f5e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e020      	b.n	8004fa0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2204      	movs	r2, #4
 8004f64:	4013      	ands	r3, r2
 8004f66:	d009      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004f68:	4b10      	ldr	r3, [pc, #64]	; (8004fac <HAL_RCC_ClockConfig+0x1a0>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	4a11      	ldr	r2, [pc, #68]	; (8004fb4 <HAL_RCC_ClockConfig+0x1a8>)
 8004f6e:	4013      	ands	r3, r2
 8004f70:	0019      	movs	r1, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	4b0d      	ldr	r3, [pc, #52]	; (8004fac <HAL_RCC_ClockConfig+0x1a0>)
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004f7c:	f000 f820 	bl	8004fc0 <HAL_RCC_GetSysClockFreq>
 8004f80:	0001      	movs	r1, r0
 8004f82:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <HAL_RCC_ClockConfig+0x1a0>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	091b      	lsrs	r3, r3, #4
 8004f88:	220f      	movs	r2, #15
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	4a0a      	ldr	r2, [pc, #40]	; (8004fb8 <HAL_RCC_ClockConfig+0x1ac>)
 8004f8e:	5cd3      	ldrb	r3, [r2, r3]
 8004f90:	000a      	movs	r2, r1
 8004f92:	40da      	lsrs	r2, r3
 8004f94:	4b09      	ldr	r3, [pc, #36]	; (8004fbc <HAL_RCC_ClockConfig+0x1b0>)
 8004f96:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004f98:	2000      	movs	r0, #0
 8004f9a:	f7fe f9dd 	bl	8003358 <HAL_InitTick>
  
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	b004      	add	sp, #16
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40022000 	.word	0x40022000
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	00001388 	.word	0x00001388
 8004fb4:	fffff8ff 	.word	0xfffff8ff
 8004fb8:	08007b30 	.word	0x08007b30
 8004fbc:	20000004 	.word	0x20000004

08004fc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fc0:	b590      	push	{r4, r7, lr}
 8004fc2:	b08f      	sub	sp, #60	; 0x3c
 8004fc4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004fc6:	2314      	movs	r3, #20
 8004fc8:	18fb      	adds	r3, r7, r3
 8004fca:	4a37      	ldr	r2, [pc, #220]	; (80050a8 <HAL_RCC_GetSysClockFreq+0xe8>)
 8004fcc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004fce:	c313      	stmia	r3!, {r0, r1, r4}
 8004fd0:	6812      	ldr	r2, [r2, #0]
 8004fd2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004fd4:	1d3b      	adds	r3, r7, #4
 8004fd6:	4a35      	ldr	r2, [pc, #212]	; (80050ac <HAL_RCC_GetSysClockFreq+0xec>)
 8004fd8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004fda:	c313      	stmia	r3!, {r0, r1, r4}
 8004fdc:	6812      	ldr	r2, [r2, #0]
 8004fde:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fe8:	2300      	movs	r3, #0
 8004fea:	637b      	str	r3, [r7, #52]	; 0x34
 8004fec:	2300      	movs	r3, #0
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004ff4:	4b2e      	ldr	r3, [pc, #184]	; (80050b0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffc:	220c      	movs	r2, #12
 8004ffe:	4013      	ands	r3, r2
 8005000:	2b08      	cmp	r3, #8
 8005002:	d006      	beq.n	8005012 <HAL_RCC_GetSysClockFreq+0x52>
 8005004:	2b0c      	cmp	r3, #12
 8005006:	d043      	beq.n	8005090 <HAL_RCC_GetSysClockFreq+0xd0>
 8005008:	2b04      	cmp	r3, #4
 800500a:	d144      	bne.n	8005096 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800500c:	4b29      	ldr	r3, [pc, #164]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 800500e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005010:	e044      	b.n	800509c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005014:	0c9b      	lsrs	r3, r3, #18
 8005016:	220f      	movs	r2, #15
 8005018:	4013      	ands	r3, r2
 800501a:	2214      	movs	r2, #20
 800501c:	18ba      	adds	r2, r7, r2
 800501e:	5cd3      	ldrb	r3, [r2, r3]
 8005020:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005022:	4b23      	ldr	r3, [pc, #140]	; (80050b0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8005024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005026:	220f      	movs	r2, #15
 8005028:	4013      	ands	r3, r2
 800502a:	1d3a      	adds	r2, r7, #4
 800502c:	5cd3      	ldrb	r3, [r2, r3]
 800502e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005032:	23c0      	movs	r3, #192	; 0xc0
 8005034:	025b      	lsls	r3, r3, #9
 8005036:	401a      	ands	r2, r3
 8005038:	2380      	movs	r3, #128	; 0x80
 800503a:	025b      	lsls	r3, r3, #9
 800503c:	429a      	cmp	r2, r3
 800503e:	d109      	bne.n	8005054 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005040:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005042:	481c      	ldr	r0, [pc, #112]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005044:	f7fb f86a 	bl	800011c <__udivsi3>
 8005048:	0003      	movs	r3, r0
 800504a:	001a      	movs	r2, r3
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	4353      	muls	r3, r2
 8005050:	637b      	str	r3, [r7, #52]	; 0x34
 8005052:	e01a      	b.n	800508a <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005056:	23c0      	movs	r3, #192	; 0xc0
 8005058:	025b      	lsls	r3, r3, #9
 800505a:	401a      	ands	r2, r3
 800505c:	23c0      	movs	r3, #192	; 0xc0
 800505e:	025b      	lsls	r3, r3, #9
 8005060:	429a      	cmp	r2, r3
 8005062:	d109      	bne.n	8005078 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005064:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005066:	4814      	ldr	r0, [pc, #80]	; (80050b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005068:	f7fb f858 	bl	800011c <__udivsi3>
 800506c:	0003      	movs	r3, r0
 800506e:	001a      	movs	r2, r3
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	4353      	muls	r3, r2
 8005074:	637b      	str	r3, [r7, #52]	; 0x34
 8005076:	e008      	b.n	800508a <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005078:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800507a:	480e      	ldr	r0, [pc, #56]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 800507c:	f7fb f84e 	bl	800011c <__udivsi3>
 8005080:	0003      	movs	r3, r0
 8005082:	001a      	movs	r2, r3
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	4353      	muls	r3, r2
 8005088:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800508a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800508e:	e005      	b.n	800509c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005090:	4b09      	ldr	r3, [pc, #36]	; (80050b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005092:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005094:	e002      	b.n	800509c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005096:	4b07      	ldr	r3, [pc, #28]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005098:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800509a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800509c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800509e:	0018      	movs	r0, r3
 80050a0:	46bd      	mov	sp, r7
 80050a2:	b00f      	add	sp, #60	; 0x3c
 80050a4:	bd90      	pop	{r4, r7, pc}
 80050a6:	46c0      	nop			; (mov r8, r8)
 80050a8:	08007a08 	.word	0x08007a08
 80050ac:	08007a18 	.word	0x08007a18
 80050b0:	40021000 	.word	0x40021000
 80050b4:	007a1200 	.word	0x007a1200
 80050b8:	02dc6c00 	.word	0x02dc6c00

080050bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050c0:	4b02      	ldr	r3, [pc, #8]	; (80050cc <HAL_RCC_GetHCLKFreq+0x10>)
 80050c2:	681b      	ldr	r3, [r3, #0]
}
 80050c4:	0018      	movs	r0, r3
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	46c0      	nop			; (mov r8, r8)
 80050cc:	20000004 	.word	0x20000004

080050d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80050d4:	f7ff fff2 	bl	80050bc <HAL_RCC_GetHCLKFreq>
 80050d8:	0001      	movs	r1, r0
 80050da:	4b06      	ldr	r3, [pc, #24]	; (80050f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	0a1b      	lsrs	r3, r3, #8
 80050e0:	2207      	movs	r2, #7
 80050e2:	4013      	ands	r3, r2
 80050e4:	4a04      	ldr	r2, [pc, #16]	; (80050f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80050e6:	5cd3      	ldrb	r3, [r2, r3]
 80050e8:	40d9      	lsrs	r1, r3
 80050ea:	000b      	movs	r3, r1
}    
 80050ec:	0018      	movs	r0, r3
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	46c0      	nop			; (mov r8, r8)
 80050f4:	40021000 	.word	0x40021000
 80050f8:	08007b40 	.word	0x08007b40

080050fc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2207      	movs	r2, #7
 800510a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800510c:	4b0e      	ldr	r3, [pc, #56]	; (8005148 <HAL_RCC_GetClockConfig+0x4c>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2203      	movs	r2, #3
 8005112:	401a      	ands	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005118:	4b0b      	ldr	r3, [pc, #44]	; (8005148 <HAL_RCC_GetClockConfig+0x4c>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	22f0      	movs	r2, #240	; 0xf0
 800511e:	401a      	ands	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8005124:	4b08      	ldr	r3, [pc, #32]	; (8005148 <HAL_RCC_GetClockConfig+0x4c>)
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	23e0      	movs	r3, #224	; 0xe0
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	401a      	ands	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8005132:	4b06      	ldr	r3, [pc, #24]	; (800514c <HAL_RCC_GetClockConfig+0x50>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2201      	movs	r2, #1
 8005138:	401a      	ands	r2, r3
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	601a      	str	r2, [r3, #0]
}
 800513e:	46c0      	nop			; (mov r8, r8)
 8005140:	46bd      	mov	sp, r7
 8005142:	b002      	add	sp, #8
 8005144:	bd80      	pop	{r7, pc}
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	40021000 	.word	0x40021000
 800514c:	40022000 	.word	0x40022000

08005150 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e01e      	b.n	80051a0 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	223d      	movs	r2, #61	; 0x3d
 8005166:	5c9b      	ldrb	r3, [r3, r2]
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d107      	bne.n	800517e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	223c      	movs	r2, #60	; 0x3c
 8005172:	2100      	movs	r1, #0
 8005174:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	0018      	movs	r0, r3
 800517a:	f7fe faa5 	bl	80036c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	223d      	movs	r2, #61	; 0x3d
 8005182:	2102      	movs	r1, #2
 8005184:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	3304      	adds	r3, #4
 800518e:	0019      	movs	r1, r3
 8005190:	0010      	movs	r0, r2
 8005192:	f000 fc1d 	bl	80059d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	223d      	movs	r2, #61	; 0x3d
 800519a:	2101      	movs	r1, #1
 800519c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	0018      	movs	r0, r3
 80051a2:	46bd      	mov	sp, r7
 80051a4:	b002      	add	sp, #8
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2101      	movs	r1, #1
 80051bc:	430a      	orrs	r2, r1
 80051be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	2207      	movs	r2, #7
 80051c8:	4013      	ands	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2b06      	cmp	r3, #6
 80051d0:	d007      	beq.n	80051e2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2101      	movs	r1, #1
 80051de:	430a      	orrs	r2, r1
 80051e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	0018      	movs	r0, r3
 80051e6:	46bd      	mov	sp, r7
 80051e8:	b004      	add	sp, #16
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e01e      	b.n	800523c <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	223d      	movs	r2, #61	; 0x3d
 8005202:	5c9b      	ldrb	r3, [r3, r2]
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d107      	bne.n	800521a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	223c      	movs	r2, #60	; 0x3c
 800520e:	2100      	movs	r1, #0
 8005210:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	0018      	movs	r0, r3
 8005216:	f000 f815 	bl	8005244 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	223d      	movs	r2, #61	; 0x3d
 800521e:	2102      	movs	r1, #2
 8005220:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3304      	adds	r3, #4
 800522a:	0019      	movs	r1, r3
 800522c:	0010      	movs	r0, r2
 800522e:	f000 fbcf 	bl	80059d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	223d      	movs	r2, #61	; 0x3d
 8005236:	2101      	movs	r1, #1
 8005238:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	0018      	movs	r0, r3
 800523e:	46bd      	mov	sp, r7
 8005240:	b002      	add	sp, #8
 8005242:	bd80      	pop	{r7, pc}

08005244 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800524c:	46c0      	nop			; (mov r8, r8)
 800524e:	46bd      	mov	sp, r7
 8005250:	b002      	add	sp, #8
 8005252:	bd80      	pop	{r7, pc}

08005254 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6839      	ldr	r1, [r7, #0]
 8005264:	2201      	movs	r2, #1
 8005266:	0018      	movs	r0, r3
 8005268:	f000 fea2 	bl	8005fb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a18      	ldr	r2, [pc, #96]	; (80052d4 <HAL_TIM_PWM_Start+0x80>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d009      	beq.n	800528a <HAL_TIM_PWM_Start+0x36>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a17      	ldr	r2, [pc, #92]	; (80052d8 <HAL_TIM_PWM_Start+0x84>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d004      	beq.n	800528a <HAL_TIM_PWM_Start+0x36>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a15      	ldr	r2, [pc, #84]	; (80052dc <HAL_TIM_PWM_Start+0x88>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d101      	bne.n	800528e <HAL_TIM_PWM_Start+0x3a>
 800528a:	2301      	movs	r3, #1
 800528c:	e000      	b.n	8005290 <HAL_TIM_PWM_Start+0x3c>
 800528e:	2300      	movs	r3, #0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d008      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x52>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2180      	movs	r1, #128	; 0x80
 80052a0:	0209      	lsls	r1, r1, #8
 80052a2:	430a      	orrs	r2, r1
 80052a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	2207      	movs	r2, #7
 80052ae:	4013      	ands	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b06      	cmp	r3, #6
 80052b6:	d007      	beq.n	80052c8 <HAL_TIM_PWM_Start+0x74>
  {
    __HAL_TIM_ENABLE(htim);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2101      	movs	r1, #1
 80052c4:	430a      	orrs	r2, r1
 80052c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	0018      	movs	r0, r3
 80052cc:	46bd      	mov	sp, r7
 80052ce:	b004      	add	sp, #16
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	46c0      	nop			; (mov r8, r8)
 80052d4:	40012c00 	.word	0x40012c00
 80052d8:	40014400 	.word	0x40014400
 80052dc:	40014800 	.word	0x40014800

080052e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e07c      	b.n	80053ee <HAL_TIM_Encoder_Init+0x10e>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	223d      	movs	r2, #61	; 0x3d
 80052f8:	5c9b      	ldrb	r3, [r3, r2]
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d107      	bne.n	8005310 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	223c      	movs	r2, #60	; 0x3c
 8005304:	2100      	movs	r1, #0
 8005306:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	0018      	movs	r0, r3
 800530c:	f7fe f992 	bl	8003634 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	223d      	movs	r2, #61	; 0x3d
 8005314:	2102      	movs	r1, #2
 8005316:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689a      	ldr	r2, [r3, #8]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4935      	ldr	r1, [pc, #212]	; (80053f8 <HAL_TIM_Encoder_Init+0x118>)
 8005324:	400a      	ands	r2, r1
 8005326:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3304      	adds	r3, #4
 8005330:	0019      	movs	r1, r3
 8005332:	0010      	movs	r0, r2
 8005334:	f000 fb4c 	bl	80059d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	4313      	orrs	r3, r2
 8005358:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	4a27      	ldr	r2, [pc, #156]	; (80053fc <HAL_TIM_Encoder_Init+0x11c>)
 800535e:	4013      	ands	r3, r2
 8005360:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	689a      	ldr	r2, [r3, #8]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	021b      	lsls	r3, r3, #8
 800536c:	4313      	orrs	r3, r2
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4313      	orrs	r3, r2
 8005372:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	4a22      	ldr	r2, [pc, #136]	; (8005400 <HAL_TIM_Encoder_Init+0x120>)
 8005378:	4013      	ands	r3, r2
 800537a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	4a21      	ldr	r2, [pc, #132]	; (8005404 <HAL_TIM_Encoder_Init+0x124>)
 8005380:	4013      	ands	r3, r2
 8005382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	021b      	lsls	r3, r3, #8
 800538e:	4313      	orrs	r3, r2
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	4313      	orrs	r3, r2
 8005394:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	011a      	lsls	r2, r3, #4
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	031b      	lsls	r3, r3, #12
 80053a2:	4313      	orrs	r3, r2
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2222      	movs	r2, #34	; 0x22
 80053ae:	4393      	bics	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2288      	movs	r2, #136	; 0x88
 80053b6:	4393      	bics	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	4313      	orrs	r3, r2
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	223d      	movs	r2, #61	; 0x3d
 80053e8:	2101      	movs	r1, #1
 80053ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	0018      	movs	r0, r3
 80053f0:	46bd      	mov	sp, r7
 80053f2:	b006      	add	sp, #24
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	46c0      	nop			; (mov r8, r8)
 80053f8:	ffffbff8 	.word	0xffffbff8
 80053fc:	fffffcfc 	.word	0xfffffcfc
 8005400:	fffff3f3 	.word	0xfffff3f3
 8005404:	ffff0f0f 	.word	0xffff0f0f

08005408 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <HAL_TIM_Encoder_Start+0x16>
 8005418:	2b04      	cmp	r3, #4
 800541a:	d008      	beq.n	800542e <HAL_TIM_Encoder_Start+0x26>
 800541c:	e00f      	b.n	800543e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2201      	movs	r2, #1
 8005424:	2100      	movs	r1, #0
 8005426:	0018      	movs	r0, r3
 8005428:	f000 fdc2 	bl	8005fb0 <TIM_CCxChannelCmd>
      break;
 800542c:	e016      	b.n	800545c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2201      	movs	r2, #1
 8005434:	2104      	movs	r1, #4
 8005436:	0018      	movs	r0, r3
 8005438:	f000 fdba 	bl	8005fb0 <TIM_CCxChannelCmd>
      break;
 800543c:	e00e      	b.n	800545c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2201      	movs	r2, #1
 8005444:	2100      	movs	r1, #0
 8005446:	0018      	movs	r0, r3
 8005448:	f000 fdb2 	bl	8005fb0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2201      	movs	r2, #1
 8005452:	2104      	movs	r1, #4
 8005454:	0018      	movs	r0, r3
 8005456:	f000 fdab 	bl	8005fb0 <TIM_CCxChannelCmd>
      break;
 800545a:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2101      	movs	r1, #1
 8005468:	430a      	orrs	r2, r1
 800546a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	0018      	movs	r0, r3
 8005470:	46bd      	mov	sp, r7
 8005472:	b002      	add	sp, #8
 8005474:	bd80      	pop	{r7, pc}

08005476 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b082      	sub	sp, #8
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	2202      	movs	r2, #2
 8005486:	4013      	ands	r3, r2
 8005488:	2b02      	cmp	r3, #2
 800548a:	d124      	bne.n	80054d6 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	2202      	movs	r2, #2
 8005494:	4013      	ands	r3, r2
 8005496:	2b02      	cmp	r3, #2
 8005498:	d11d      	bne.n	80054d6 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2203      	movs	r2, #3
 80054a0:	4252      	negs	r2, r2
 80054a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	2203      	movs	r2, #3
 80054b2:	4013      	ands	r3, r2
 80054b4:	d004      	beq.n	80054c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	0018      	movs	r0, r3
 80054ba:	f000 fa71 	bl	80059a0 <HAL_TIM_IC_CaptureCallback>
 80054be:	e007      	b.n	80054d0 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	0018      	movs	r0, r3
 80054c4:	f000 fa64 	bl	8005990 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	0018      	movs	r0, r3
 80054cc:	f000 fa70 	bl	80059b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	2204      	movs	r2, #4
 80054de:	4013      	ands	r3, r2
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d125      	bne.n	8005530 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	2204      	movs	r2, #4
 80054ec:	4013      	ands	r3, r2
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d11e      	bne.n	8005530 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2205      	movs	r2, #5
 80054f8:	4252      	negs	r2, r2
 80054fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	699a      	ldr	r2, [r3, #24]
 8005508:	23c0      	movs	r3, #192	; 0xc0
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4013      	ands	r3, r2
 800550e:	d004      	beq.n	800551a <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	0018      	movs	r0, r3
 8005514:	f000 fa44 	bl	80059a0 <HAL_TIM_IC_CaptureCallback>
 8005518:	e007      	b.n	800552a <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	0018      	movs	r0, r3
 800551e:	f000 fa37 	bl	8005990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	0018      	movs	r0, r3
 8005526:	f000 fa43 	bl	80059b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	2208      	movs	r2, #8
 8005538:	4013      	ands	r3, r2
 800553a:	2b08      	cmp	r3, #8
 800553c:	d124      	bne.n	8005588 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	2208      	movs	r2, #8
 8005546:	4013      	ands	r3, r2
 8005548:	2b08      	cmp	r3, #8
 800554a:	d11d      	bne.n	8005588 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2209      	movs	r2, #9
 8005552:	4252      	negs	r2, r2
 8005554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2204      	movs	r2, #4
 800555a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	2203      	movs	r2, #3
 8005564:	4013      	ands	r3, r2
 8005566:	d004      	beq.n	8005572 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	0018      	movs	r0, r3
 800556c:	f000 fa18 	bl	80059a0 <HAL_TIM_IC_CaptureCallback>
 8005570:	e007      	b.n	8005582 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	0018      	movs	r0, r3
 8005576:	f000 fa0b 	bl	8005990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	0018      	movs	r0, r3
 800557e:	f000 fa17 	bl	80059b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	2210      	movs	r2, #16
 8005590:	4013      	ands	r3, r2
 8005592:	2b10      	cmp	r3, #16
 8005594:	d125      	bne.n	80055e2 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	2210      	movs	r2, #16
 800559e:	4013      	ands	r3, r2
 80055a0:	2b10      	cmp	r3, #16
 80055a2:	d11e      	bne.n	80055e2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2211      	movs	r2, #17
 80055aa:	4252      	negs	r2, r2
 80055ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2208      	movs	r2, #8
 80055b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	69da      	ldr	r2, [r3, #28]
 80055ba:	23c0      	movs	r3, #192	; 0xc0
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4013      	ands	r3, r2
 80055c0:	d004      	beq.n	80055cc <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	0018      	movs	r0, r3
 80055c6:	f000 f9eb 	bl	80059a0 <HAL_TIM_IC_CaptureCallback>
 80055ca:	e007      	b.n	80055dc <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	0018      	movs	r0, r3
 80055d0:	f000 f9de 	bl	8005990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	0018      	movs	r0, r3
 80055d8:	f000 f9ea 	bl	80059b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	2201      	movs	r2, #1
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d10f      	bne.n	8005610 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	2201      	movs	r2, #1
 80055f8:	4013      	ands	r3, r2
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d108      	bne.n	8005610 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2202      	movs	r2, #2
 8005604:	4252      	negs	r2, r2
 8005606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	0018      	movs	r0, r3
 800560c:	f7fd fe62 	bl	80032d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	2280      	movs	r2, #128	; 0x80
 8005618:	4013      	ands	r3, r2
 800561a:	2b80      	cmp	r3, #128	; 0x80
 800561c:	d10f      	bne.n	800563e <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	2280      	movs	r2, #128	; 0x80
 8005626:	4013      	ands	r3, r2
 8005628:	2b80      	cmp	r3, #128	; 0x80
 800562a:	d108      	bne.n	800563e <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2281      	movs	r2, #129	; 0x81
 8005632:	4252      	negs	r2, r2
 8005634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	0018      	movs	r0, r3
 800563a:	f000 fd3d 	bl	80060b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	2240      	movs	r2, #64	; 0x40
 8005646:	4013      	ands	r3, r2
 8005648:	2b40      	cmp	r3, #64	; 0x40
 800564a:	d10f      	bne.n	800566c <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	2240      	movs	r2, #64	; 0x40
 8005654:	4013      	ands	r3, r2
 8005656:	2b40      	cmp	r3, #64	; 0x40
 8005658:	d108      	bne.n	800566c <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2241      	movs	r2, #65	; 0x41
 8005660:	4252      	negs	r2, r2
 8005662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	0018      	movs	r0, r3
 8005668:	f000 f9aa 	bl	80059c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	2220      	movs	r2, #32
 8005674:	4013      	ands	r3, r2
 8005676:	2b20      	cmp	r3, #32
 8005678:	d10f      	bne.n	800569a <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	2220      	movs	r2, #32
 8005682:	4013      	ands	r3, r2
 8005684:	2b20      	cmp	r3, #32
 8005686:	d108      	bne.n	800569a <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2221      	movs	r2, #33	; 0x21
 800568e:	4252      	negs	r2, r2
 8005690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	0018      	movs	r0, r3
 8005696:	f000 fd07 	bl	80060a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800569a:	46c0      	nop			; (mov r8, r8)
 800569c:	46bd      	mov	sp, r7
 800569e:	b002      	add	sp, #8
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	223c      	movs	r2, #60	; 0x3c
 80056b4:	5c9b      	ldrb	r3, [r3, r2]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d101      	bne.n	80056be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80056ba:	2302      	movs	r3, #2
 80056bc:	e0a4      	b.n	8005808 <HAL_TIM_PWM_ConfigChannel+0x164>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	223c      	movs	r2, #60	; 0x3c
 80056c2:	2101      	movs	r1, #1
 80056c4:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	223d      	movs	r2, #61	; 0x3d
 80056ca:	2102      	movs	r1, #2
 80056cc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	d029      	beq.n	8005728 <HAL_TIM_PWM_ConfigChannel+0x84>
 80056d4:	d802      	bhi.n	80056dc <HAL_TIM_PWM_ConfigChannel+0x38>
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d005      	beq.n	80056e6 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 80056da:	e08c      	b.n	80057f6 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d046      	beq.n	800576e <HAL_TIM_PWM_ConfigChannel+0xca>
 80056e0:	2b0c      	cmp	r3, #12
 80056e2:	d065      	beq.n	80057b0 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 80056e4:	e087      	b.n	80057f6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	0011      	movs	r1, r2
 80056ee:	0018      	movs	r0, r3
 80056f0:	f000 f9e4 	bl	8005abc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	699a      	ldr	r2, [r3, #24]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2108      	movs	r1, #8
 8005700:	430a      	orrs	r2, r1
 8005702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699a      	ldr	r2, [r3, #24]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2104      	movs	r1, #4
 8005710:	438a      	bics	r2, r1
 8005712:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6999      	ldr	r1, [r3, #24]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	691a      	ldr	r2, [r3, #16]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	619a      	str	r2, [r3, #24]
      break;
 8005726:	e066      	b.n	80057f6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	0011      	movs	r1, r2
 8005730:	0018      	movs	r0, r3
 8005732:	f000 fa41 	bl	8005bb8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	699a      	ldr	r2, [r3, #24]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2180      	movs	r1, #128	; 0x80
 8005742:	0109      	lsls	r1, r1, #4
 8005744:	430a      	orrs	r2, r1
 8005746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	699a      	ldr	r2, [r3, #24]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	492f      	ldr	r1, [pc, #188]	; (8005810 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8005754:	400a      	ands	r2, r1
 8005756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6999      	ldr	r1, [r3, #24]
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	021a      	lsls	r2, r3, #8
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	619a      	str	r2, [r3, #24]
      break;
 800576c:	e043      	b.n	80057f6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	0011      	movs	r1, r2
 8005776:	0018      	movs	r0, r3
 8005778:	f000 fa9c 	bl	8005cb4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	69da      	ldr	r2, [r3, #28]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2108      	movs	r1, #8
 8005788:	430a      	orrs	r2, r1
 800578a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	69da      	ldr	r2, [r3, #28]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2104      	movs	r1, #4
 8005798:	438a      	bics	r2, r1
 800579a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	69d9      	ldr	r1, [r3, #28]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	691a      	ldr	r2, [r3, #16]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	61da      	str	r2, [r3, #28]
      break;
 80057ae:	e022      	b.n	80057f6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	0011      	movs	r1, r2
 80057b8:	0018      	movs	r0, r3
 80057ba:	f000 fafb 	bl	8005db4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69da      	ldr	r2, [r3, #28]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2180      	movs	r1, #128	; 0x80
 80057ca:	0109      	lsls	r1, r1, #4
 80057cc:	430a      	orrs	r2, r1
 80057ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	69da      	ldr	r2, [r3, #28]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	490d      	ldr	r1, [pc, #52]	; (8005810 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80057dc:	400a      	ands	r2, r1
 80057de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	69d9      	ldr	r1, [r3, #28]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	021a      	lsls	r2, r3, #8
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	61da      	str	r2, [r3, #28]
      break;
 80057f4:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	223d      	movs	r2, #61	; 0x3d
 80057fa:	2101      	movs	r1, #1
 80057fc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	223c      	movs	r2, #60	; 0x3c
 8005802:	2100      	movs	r1, #0
 8005804:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	0018      	movs	r0, r3
 800580a:	46bd      	mov	sp, r7
 800580c:	b004      	add	sp, #16
 800580e:	bd80      	pop	{r7, pc}
 8005810:	fffffbff 	.word	0xfffffbff

08005814 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	223c      	movs	r2, #60	; 0x3c
 8005822:	5c9b      	ldrb	r3, [r3, r2]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_TIM_ConfigClockSource+0x18>
 8005828:	2302      	movs	r3, #2
 800582a:	e0ab      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x170>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	223c      	movs	r2, #60	; 0x3c
 8005830:	2101      	movs	r1, #1
 8005832:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	223d      	movs	r2, #61	; 0x3d
 8005838:	2102      	movs	r1, #2
 800583a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2277      	movs	r2, #119	; 0x77
 8005848:	4393      	bics	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4a4f      	ldr	r2, [pc, #316]	; (800598c <HAL_TIM_ConfigClockSource+0x178>)
 8005850:	4013      	ands	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b40      	cmp	r3, #64	; 0x40
 8005862:	d100      	bne.n	8005866 <HAL_TIM_ConfigClockSource+0x52>
 8005864:	e06b      	b.n	800593e <HAL_TIM_ConfigClockSource+0x12a>
 8005866:	d80e      	bhi.n	8005886 <HAL_TIM_ConfigClockSource+0x72>
 8005868:	2b10      	cmp	r3, #16
 800586a:	d100      	bne.n	800586e <HAL_TIM_ConfigClockSource+0x5a>
 800586c:	e077      	b.n	800595e <HAL_TIM_ConfigClockSource+0x14a>
 800586e:	d803      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x64>
 8005870:	2b00      	cmp	r3, #0
 8005872:	d100      	bne.n	8005876 <HAL_TIM_ConfigClockSource+0x62>
 8005874:	e073      	b.n	800595e <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005876:	e07c      	b.n	8005972 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8005878:	2b20      	cmp	r3, #32
 800587a:	d100      	bne.n	800587e <HAL_TIM_ConfigClockSource+0x6a>
 800587c:	e06f      	b.n	800595e <HAL_TIM_ConfigClockSource+0x14a>
 800587e:	2b30      	cmp	r3, #48	; 0x30
 8005880:	d100      	bne.n	8005884 <HAL_TIM_ConfigClockSource+0x70>
 8005882:	e06c      	b.n	800595e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8005884:	e075      	b.n	8005972 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8005886:	2b70      	cmp	r3, #112	; 0x70
 8005888:	d00e      	beq.n	80058a8 <HAL_TIM_ConfigClockSource+0x94>
 800588a:	d804      	bhi.n	8005896 <HAL_TIM_ConfigClockSource+0x82>
 800588c:	2b50      	cmp	r3, #80	; 0x50
 800588e:	d036      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0xea>
 8005890:	2b60      	cmp	r3, #96	; 0x60
 8005892:	d044      	beq.n	800591e <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8005894:	e06d      	b.n	8005972 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8005896:	2280      	movs	r2, #128	; 0x80
 8005898:	0152      	lsls	r2, r2, #5
 800589a:	4293      	cmp	r3, r2
 800589c:	d068      	beq.n	8005970 <HAL_TIM_ConfigClockSource+0x15c>
 800589e:	2280      	movs	r2, #128	; 0x80
 80058a0:	0192      	lsls	r2, r2, #6
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d017      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80058a6:	e064      	b.n	8005972 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6818      	ldr	r0, [r3, #0]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	6899      	ldr	r1, [r3, #8]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f000 fb5a 	bl	8005f70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2277      	movs	r2, #119	; 0x77
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	609a      	str	r2, [r3, #8]
      break;
 80058d4:	e04d      	b.n	8005972 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6818      	ldr	r0, [r3, #0]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	6899      	ldr	r1, [r3, #8]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	f000 fb43 	bl	8005f70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2180      	movs	r1, #128	; 0x80
 80058f6:	01c9      	lsls	r1, r1, #7
 80058f8:	430a      	orrs	r2, r1
 80058fa:	609a      	str	r2, [r3, #8]
      break;
 80058fc:	e039      	b.n	8005972 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6818      	ldr	r0, [r3, #0]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	6859      	ldr	r1, [r3, #4]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	001a      	movs	r2, r3
 800590c:	f000 fab6 	bl	8005e7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2150      	movs	r1, #80	; 0x50
 8005916:	0018      	movs	r0, r3
 8005918:	f000 fb10 	bl	8005f3c <TIM_ITRx_SetConfig>
      break;
 800591c:	e029      	b.n	8005972 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6818      	ldr	r0, [r3, #0]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	6859      	ldr	r1, [r3, #4]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	001a      	movs	r2, r3
 800592c:	f000 fad4 	bl	8005ed8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2160      	movs	r1, #96	; 0x60
 8005936:	0018      	movs	r0, r3
 8005938:	f000 fb00 	bl	8005f3c <TIM_ITRx_SetConfig>
      break;
 800593c:	e019      	b.n	8005972 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6818      	ldr	r0, [r3, #0]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	6859      	ldr	r1, [r3, #4]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	001a      	movs	r2, r3
 800594c:	f000 fa96 	bl	8005e7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2140      	movs	r1, #64	; 0x40
 8005956:	0018      	movs	r0, r3
 8005958:	f000 faf0 	bl	8005f3c <TIM_ITRx_SetConfig>
      break;
 800595c:	e009      	b.n	8005972 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	0019      	movs	r1, r3
 8005968:	0010      	movs	r0, r2
 800596a:	f000 fae7 	bl	8005f3c <TIM_ITRx_SetConfig>
      break;
 800596e:	e000      	b.n	8005972 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8005970:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	223d      	movs	r2, #61	; 0x3d
 8005976:	2101      	movs	r1, #1
 8005978:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	223c      	movs	r2, #60	; 0x3c
 800597e:	2100      	movs	r1, #0
 8005980:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	0018      	movs	r0, r3
 8005986:	46bd      	mov	sp, r7
 8005988:	b004      	add	sp, #16
 800598a:	bd80      	pop	{r7, pc}
 800598c:	ffff00ff 	.word	0xffff00ff

08005990 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005998:	46c0      	nop			; (mov r8, r8)
 800599a:	46bd      	mov	sp, r7
 800599c:	b002      	add	sp, #8
 800599e:	bd80      	pop	{r7, pc}

080059a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059a8:	46c0      	nop			; (mov r8, r8)
 80059aa:	46bd      	mov	sp, r7
 80059ac:	b002      	add	sp, #8
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059b8:	46c0      	nop			; (mov r8, r8)
 80059ba:	46bd      	mov	sp, r7
 80059bc:	b002      	add	sp, #8
 80059be:	bd80      	pop	{r7, pc}

080059c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059c8:	46c0      	nop			; (mov r8, r8)
 80059ca:	46bd      	mov	sp, r7
 80059cc:	b002      	add	sp, #8
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a30      	ldr	r2, [pc, #192]	; (8005aa4 <TIM_Base_SetConfig+0xd4>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d008      	beq.n	80059fa <TIM_Base_SetConfig+0x2a>
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	2380      	movs	r3, #128	; 0x80
 80059ec:	05db      	lsls	r3, r3, #23
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d003      	beq.n	80059fa <TIM_Base_SetConfig+0x2a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a2c      	ldr	r2, [pc, #176]	; (8005aa8 <TIM_Base_SetConfig+0xd8>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d108      	bne.n	8005a0c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2270      	movs	r2, #112	; 0x70
 80059fe:	4393      	bics	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a25      	ldr	r2, [pc, #148]	; (8005aa4 <TIM_Base_SetConfig+0xd4>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d014      	beq.n	8005a3e <TIM_Base_SetConfig+0x6e>
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	2380      	movs	r3, #128	; 0x80
 8005a18:	05db      	lsls	r3, r3, #23
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d00f      	beq.n	8005a3e <TIM_Base_SetConfig+0x6e>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a21      	ldr	r2, [pc, #132]	; (8005aa8 <TIM_Base_SetConfig+0xd8>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d00b      	beq.n	8005a3e <TIM_Base_SetConfig+0x6e>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a20      	ldr	r2, [pc, #128]	; (8005aac <TIM_Base_SetConfig+0xdc>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d007      	beq.n	8005a3e <TIM_Base_SetConfig+0x6e>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a1f      	ldr	r2, [pc, #124]	; (8005ab0 <TIM_Base_SetConfig+0xe0>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d003      	beq.n	8005a3e <TIM_Base_SetConfig+0x6e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a1e      	ldr	r2, [pc, #120]	; (8005ab4 <TIM_Base_SetConfig+0xe4>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d108      	bne.n	8005a50 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	4a1d      	ldr	r2, [pc, #116]	; (8005ab8 <TIM_Base_SetConfig+0xe8>)
 8005a42:	4013      	ands	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2280      	movs	r2, #128	; 0x80
 8005a54:	4393      	bics	r3, r2
 8005a56:	001a      	movs	r2, r3
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	689a      	ldr	r2, [r3, #8]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a0a      	ldr	r2, [pc, #40]	; (8005aa4 <TIM_Base_SetConfig+0xd4>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d007      	beq.n	8005a8e <TIM_Base_SetConfig+0xbe>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a0b      	ldr	r2, [pc, #44]	; (8005ab0 <TIM_Base_SetConfig+0xe0>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d003      	beq.n	8005a8e <TIM_Base_SetConfig+0xbe>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a0a      	ldr	r2, [pc, #40]	; (8005ab4 <TIM_Base_SetConfig+0xe4>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d103      	bne.n	8005a96 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	691a      	ldr	r2, [r3, #16]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	615a      	str	r2, [r3, #20]
}
 8005a9c:	46c0      	nop			; (mov r8, r8)
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	b004      	add	sp, #16
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	40012c00 	.word	0x40012c00
 8005aa8:	40000400 	.word	0x40000400
 8005aac:	40002000 	.word	0x40002000
 8005ab0:	40014400 	.word	0x40014400
 8005ab4:	40014800 	.word	0x40014800
 8005ab8:	fffffcff 	.word	0xfffffcff

08005abc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	2201      	movs	r2, #1
 8005acc:	4393      	bics	r3, r2
 8005ace:	001a      	movs	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2270      	movs	r2, #112	; 0x70
 8005aea:	4393      	bics	r3, r2
 8005aec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2203      	movs	r2, #3
 8005af2:	4393      	bics	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	2202      	movs	r2, #2
 8005b04:	4393      	bics	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a23      	ldr	r2, [pc, #140]	; (8005ba4 <TIM_OC1_SetConfig+0xe8>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d007      	beq.n	8005b2a <TIM_OC1_SetConfig+0x6e>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a22      	ldr	r2, [pc, #136]	; (8005ba8 <TIM_OC1_SetConfig+0xec>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d003      	beq.n	8005b2a <TIM_OC1_SetConfig+0x6e>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a21      	ldr	r2, [pc, #132]	; (8005bac <TIM_OC1_SetConfig+0xf0>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d10c      	bne.n	8005b44 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2208      	movs	r2, #8
 8005b2e:	4393      	bics	r3, r2
 8005b30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2204      	movs	r2, #4
 8005b40:	4393      	bics	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a17      	ldr	r2, [pc, #92]	; (8005ba4 <TIM_OC1_SetConfig+0xe8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d007      	beq.n	8005b5c <TIM_OC1_SetConfig+0xa0>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a16      	ldr	r2, [pc, #88]	; (8005ba8 <TIM_OC1_SetConfig+0xec>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d003      	beq.n	8005b5c <TIM_OC1_SetConfig+0xa0>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a15      	ldr	r2, [pc, #84]	; (8005bac <TIM_OC1_SetConfig+0xf0>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d111      	bne.n	8005b80 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	4a14      	ldr	r2, [pc, #80]	; (8005bb0 <TIM_OC1_SetConfig+0xf4>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	4a13      	ldr	r2, [pc, #76]	; (8005bb4 <TIM_OC1_SetConfig+0xf8>)
 8005b68:	4013      	ands	r3, r2
 8005b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	621a      	str	r2, [r3, #32]
}
 8005b9a:	46c0      	nop			; (mov r8, r8)
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	b006      	add	sp, #24
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	46c0      	nop			; (mov r8, r8)
 8005ba4:	40012c00 	.word	0x40012c00
 8005ba8:	40014400 	.word	0x40014400
 8005bac:	40014800 	.word	0x40014800
 8005bb0:	fffffeff 	.word	0xfffffeff
 8005bb4:	fffffdff 	.word	0xfffffdff

08005bb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	2210      	movs	r2, #16
 8005bc8:	4393      	bics	r3, r2
 8005bca:	001a      	movs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4a2c      	ldr	r2, [pc, #176]	; (8005c98 <TIM_OC2_SetConfig+0xe0>)
 8005be6:	4013      	ands	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	4a2b      	ldr	r2, [pc, #172]	; (8005c9c <TIM_OC2_SetConfig+0xe4>)
 8005bee:	4013      	ands	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	021b      	lsls	r3, r3, #8
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2220      	movs	r2, #32
 8005c02:	4393      	bics	r3, r2
 8005c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	011b      	lsls	r3, r3, #4
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a22      	ldr	r2, [pc, #136]	; (8005ca0 <TIM_OC2_SetConfig+0xe8>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d10d      	bne.n	8005c36 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	2280      	movs	r2, #128	; 0x80
 8005c1e:	4393      	bics	r3, r2
 8005c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	011b      	lsls	r3, r3, #4
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2240      	movs	r2, #64	; 0x40
 8005c32:	4393      	bics	r3, r2
 8005c34:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a19      	ldr	r2, [pc, #100]	; (8005ca0 <TIM_OC2_SetConfig+0xe8>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d007      	beq.n	8005c4e <TIM_OC2_SetConfig+0x96>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a18      	ldr	r2, [pc, #96]	; (8005ca4 <TIM_OC2_SetConfig+0xec>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d003      	beq.n	8005c4e <TIM_OC2_SetConfig+0x96>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a17      	ldr	r2, [pc, #92]	; (8005ca8 <TIM_OC2_SetConfig+0xf0>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d113      	bne.n	8005c76 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	4a16      	ldr	r2, [pc, #88]	; (8005cac <TIM_OC2_SetConfig+0xf4>)
 8005c52:	4013      	ands	r3, r2
 8005c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	4a15      	ldr	r2, [pc, #84]	; (8005cb0 <TIM_OC2_SetConfig+0xf8>)
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	621a      	str	r2, [r3, #32]
}
 8005c90:	46c0      	nop			; (mov r8, r8)
 8005c92:	46bd      	mov	sp, r7
 8005c94:	b006      	add	sp, #24
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	ffff8fff 	.word	0xffff8fff
 8005c9c:	fffffcff 	.word	0xfffffcff
 8005ca0:	40012c00 	.word	0x40012c00
 8005ca4:	40014400 	.word	0x40014400
 8005ca8:	40014800 	.word	0x40014800
 8005cac:	fffffbff 	.word	0xfffffbff
 8005cb0:	fffff7ff 	.word	0xfffff7ff

08005cb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	4a33      	ldr	r2, [pc, #204]	; (8005d90 <TIM_OC3_SetConfig+0xdc>)
 8005cc4:	401a      	ands	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2270      	movs	r2, #112	; 0x70
 8005ce0:	4393      	bics	r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2203      	movs	r2, #3
 8005ce8:	4393      	bics	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	4a26      	ldr	r2, [pc, #152]	; (8005d94 <TIM_OC3_SetConfig+0xe0>)
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	021b      	lsls	r3, r3, #8
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a22      	ldr	r2, [pc, #136]	; (8005d98 <TIM_OC3_SetConfig+0xe4>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d10d      	bne.n	8005d2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	4a21      	ldr	r2, [pc, #132]	; (8005d9c <TIM_OC3_SetConfig+0xe8>)
 8005d16:	4013      	ands	r3, r2
 8005d18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	021b      	lsls	r3, r3, #8
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	4a1d      	ldr	r2, [pc, #116]	; (8005da0 <TIM_OC3_SetConfig+0xec>)
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a19      	ldr	r2, [pc, #100]	; (8005d98 <TIM_OC3_SetConfig+0xe4>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d007      	beq.n	8005d46 <TIM_OC3_SetConfig+0x92>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a1a      	ldr	r2, [pc, #104]	; (8005da4 <TIM_OC3_SetConfig+0xf0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d003      	beq.n	8005d46 <TIM_OC3_SetConfig+0x92>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a19      	ldr	r2, [pc, #100]	; (8005da8 <TIM_OC3_SetConfig+0xf4>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d113      	bne.n	8005d6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	4a18      	ldr	r2, [pc, #96]	; (8005dac <TIM_OC3_SetConfig+0xf8>)
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	4a17      	ldr	r2, [pc, #92]	; (8005db0 <TIM_OC3_SetConfig+0xfc>)
 8005d52:	4013      	ands	r3, r2
 8005d54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	011b      	lsls	r3, r3, #4
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	011b      	lsls	r3, r3, #4
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	621a      	str	r2, [r3, #32]
}
 8005d88:	46c0      	nop			; (mov r8, r8)
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	b006      	add	sp, #24
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	fffffeff 	.word	0xfffffeff
 8005d94:	fffffdff 	.word	0xfffffdff
 8005d98:	40012c00 	.word	0x40012c00
 8005d9c:	fffff7ff 	.word	0xfffff7ff
 8005da0:	fffffbff 	.word	0xfffffbff
 8005da4:	40014400 	.word	0x40014400
 8005da8:	40014800 	.word	0x40014800
 8005dac:	ffffefff 	.word	0xffffefff
 8005db0:	ffffdfff 	.word	0xffffdfff

08005db4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	4a26      	ldr	r2, [pc, #152]	; (8005e5c <TIM_OC4_SetConfig+0xa8>)
 8005dc4:	401a      	ands	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4a20      	ldr	r2, [pc, #128]	; (8005e60 <TIM_OC4_SetConfig+0xac>)
 8005de0:	4013      	ands	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4a1f      	ldr	r2, [pc, #124]	; (8005e64 <TIM_OC4_SetConfig+0xb0>)
 8005de8:	4013      	ands	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	021b      	lsls	r3, r3, #8
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	4a1b      	ldr	r2, [pc, #108]	; (8005e68 <TIM_OC4_SetConfig+0xb4>)
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	031b      	lsls	r3, r3, #12
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a17      	ldr	r2, [pc, #92]	; (8005e6c <TIM_OC4_SetConfig+0xb8>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d007      	beq.n	8005e24 <TIM_OC4_SetConfig+0x70>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a16      	ldr	r2, [pc, #88]	; (8005e70 <TIM_OC4_SetConfig+0xbc>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d003      	beq.n	8005e24 <TIM_OC4_SetConfig+0x70>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a15      	ldr	r2, [pc, #84]	; (8005e74 <TIM_OC4_SetConfig+0xc0>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d109      	bne.n	8005e38 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	4a14      	ldr	r2, [pc, #80]	; (8005e78 <TIM_OC4_SetConfig+0xc4>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	019b      	lsls	r3, r3, #6
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	621a      	str	r2, [r3, #32]
}
 8005e52:	46c0      	nop			; (mov r8, r8)
 8005e54:	46bd      	mov	sp, r7
 8005e56:	b006      	add	sp, #24
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	46c0      	nop			; (mov r8, r8)
 8005e5c:	ffffefff 	.word	0xffffefff
 8005e60:	ffff8fff 	.word	0xffff8fff
 8005e64:	fffffcff 	.word	0xfffffcff
 8005e68:	ffffdfff 	.word	0xffffdfff
 8005e6c:	40012c00 	.word	0x40012c00
 8005e70:	40014400 	.word	0x40014400
 8005e74:	40014800 	.word	0x40014800
 8005e78:	ffffbfff 	.word	0xffffbfff

08005e7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	2201      	movs	r2, #1
 8005e94:	4393      	bics	r3, r2
 8005e96:	001a      	movs	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	22f0      	movs	r2, #240	; 0xf0
 8005ea6:	4393      	bics	r3, r2
 8005ea8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	220a      	movs	r2, #10
 8005eb8:	4393      	bics	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	621a      	str	r2, [r3, #32]
}
 8005ed0:	46c0      	nop			; (mov r8, r8)
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	b006      	add	sp, #24
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	2210      	movs	r2, #16
 8005eea:	4393      	bics	r3, r2
 8005eec:	001a      	movs	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	4a0d      	ldr	r2, [pc, #52]	; (8005f38 <TIM_TI2_ConfigInputStage+0x60>)
 8005f02:	4013      	ands	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	031b      	lsls	r3, r3, #12
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	22a0      	movs	r2, #160	; 0xa0
 8005f14:	4393      	bics	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	011b      	lsls	r3, r3, #4
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	621a      	str	r2, [r3, #32]
}
 8005f2e:	46c0      	nop			; (mov r8, r8)
 8005f30:	46bd      	mov	sp, r7
 8005f32:	b006      	add	sp, #24
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	46c0      	nop			; (mov r8, r8)
 8005f38:	ffff0fff 	.word	0xffff0fff

08005f3c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2270      	movs	r2, #112	; 0x70
 8005f50:	4393      	bics	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	2207      	movs	r2, #7
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	609a      	str	r2, [r3, #8]
}
 8005f66:	46c0      	nop			; (mov r8, r8)
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	b004      	add	sp, #16
 8005f6c:	bd80      	pop	{r7, pc}
	...

08005f70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	4a09      	ldr	r2, [pc, #36]	; (8005fac <TIM_ETR_SetConfig+0x3c>)
 8005f88:	4013      	ands	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	021a      	lsls	r2, r3, #8
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	431a      	orrs	r2, r3
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	609a      	str	r2, [r3, #8]
}
 8005fa4:	46c0      	nop			; (mov r8, r8)
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	b006      	add	sp, #24
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	ffff00ff 	.word	0xffff00ff

08005fb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	221f      	movs	r2, #31
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	409a      	lsls	r2, r3
 8005fc6:	0013      	movs	r3, r2
 8005fc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	43d2      	mvns	r2, r2
 8005fd2:	401a      	ands	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6a1a      	ldr	r2, [r3, #32]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	211f      	movs	r1, #31
 8005fe0:	400b      	ands	r3, r1
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	4099      	lsls	r1, r3
 8005fe6:	000b      	movs	r3, r1
 8005fe8:	431a      	orrs	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	621a      	str	r2, [r3, #32]
}
 8005fee:	46c0      	nop			; (mov r8, r8)
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	b006      	add	sp, #24
 8005ff4:	bd80      	pop	{r7, pc}
	...

08005ff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	223c      	movs	r2, #60	; 0x3c
 8006006:	5c9b      	ldrb	r3, [r3, r2]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d101      	bne.n	8006010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800600c:	2302      	movs	r3, #2
 800600e:	e042      	b.n	8006096 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	223c      	movs	r2, #60	; 0x3c
 8006014:	2101      	movs	r1, #1
 8006016:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	223d      	movs	r2, #61	; 0x3d
 800601c:	2102      	movs	r1, #2
 800601e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2270      	movs	r2, #112	; 0x70
 8006034:	4393      	bics	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	4313      	orrs	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a14      	ldr	r2, [pc, #80]	; (80060a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d00a      	beq.n	800606a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	2380      	movs	r3, #128	; 0x80
 800605a:	05db      	lsls	r3, r3, #23
 800605c:	429a      	cmp	r2, r3
 800605e:	d004      	beq.n	800606a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a0f      	ldr	r2, [pc, #60]	; (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d10c      	bne.n	8006084 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	2280      	movs	r2, #128	; 0x80
 800606e:	4393      	bics	r3, r2
 8006070:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	4313      	orrs	r3, r2
 800607a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	223d      	movs	r2, #61	; 0x3d
 8006088:	2101      	movs	r1, #1
 800608a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	223c      	movs	r2, #60	; 0x3c
 8006090:	2100      	movs	r1, #0
 8006092:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	0018      	movs	r0, r3
 8006098:	46bd      	mov	sp, r7
 800609a:	b004      	add	sp, #16
 800609c:	bd80      	pop	{r7, pc}
 800609e:	46c0      	nop			; (mov r8, r8)
 80060a0:	40012c00 	.word	0x40012c00
 80060a4:	40000400 	.word	0x40000400

080060a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060b0:	46c0      	nop			; (mov r8, r8)
 80060b2:	46bd      	mov	sp, r7
 80060b4:	b002      	add	sp, #8
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060c0:	46c0      	nop			; (mov r8, r8)
 80060c2:	46bd      	mov	sp, r7
 80060c4:	b002      	add	sp, #8
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	0002      	movs	r2, r0
 80060d0:	1dbb      	adds	r3, r7, #6
 80060d2:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80060d4:	2300      	movs	r3, #0
 80060d6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80060d8:	1dbb      	adds	r3, r7, #6
 80060da:	2200      	movs	r2, #0
 80060dc:	5e9b      	ldrsh	r3, [r3, r2]
 80060de:	2b84      	cmp	r3, #132	; 0x84
 80060e0:	d006      	beq.n	80060f0 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80060e2:	1dbb      	adds	r3, r7, #6
 80060e4:	2200      	movs	r2, #0
 80060e6:	5e9a      	ldrsh	r2, [r3, r2]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	18d3      	adds	r3, r2, r3
 80060ec:	3303      	adds	r3, #3
 80060ee:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80060f0:	68fb      	ldr	r3, [r7, #12]
}
 80060f2:	0018      	movs	r0, r3
 80060f4:	46bd      	mov	sp, r7
 80060f6:	b004      	add	sp, #16
 80060f8:	bd80      	pop	{r7, pc}

080060fa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80060fe:	f000 fa4d 	bl	800659c <vTaskStartScheduler>
  
  return osOK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	0018      	movs	r0, r3
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800610a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800610c:	b089      	sub	sp, #36	; 0x24
 800610e:	af04      	add	r7, sp, #16
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685c      	ldr	r4, [r3, #4]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681d      	ldr	r5, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	691e      	ldr	r6, [r3, #16]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2208      	movs	r2, #8
 8006124:	5e9b      	ldrsh	r3, [r3, r2]
 8006126:	0018      	movs	r0, r3
 8006128:	f7ff ffce 	bl	80060c8 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	695a      	ldr	r2, [r3, #20]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006134:	6839      	ldr	r1, [r7, #0]
 8006136:	9302      	str	r3, [sp, #8]
 8006138:	9201      	str	r2, [sp, #4]
 800613a:	9000      	str	r0, [sp, #0]
 800613c:	000b      	movs	r3, r1
 800613e:	0032      	movs	r2, r6
 8006140:	0029      	movs	r1, r5
 8006142:	0020      	movs	r0, r4
 8006144:	f000 f8b0 	bl	80062a8 <xTaskCreateStatic>
 8006148:	0003      	movs	r3, r0
 800614a:	60fb      	str	r3, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800614c:	68fb      	ldr	r3, [r7, #12]
}
 800614e:	0018      	movs	r0, r3
 8006150:	46bd      	mov	sp, r7
 8006152:	b005      	add	sp, #20
 8006154:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006156 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b082      	sub	sp, #8
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	3308      	adds	r3, #8
 8006162:	001a      	movs	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	4252      	negs	r2, r2
 800616e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	3308      	adds	r3, #8
 8006174:	001a      	movs	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	3308      	adds	r3, #8
 800617e:	001a      	movs	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800618a:	46c0      	nop			; (mov r8, r8)
 800618c:	46bd      	mov	sp, r7
 800618e:	b002      	add	sp, #8
 8006190:	bd80      	pop	{r7, pc}

08006192 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b082      	sub	sp, #8
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80061a0:	46c0      	nop			; (mov r8, r8)
 80061a2:	46bd      	mov	sp, r7
 80061a4:	b002      	add	sp, #8
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	689a      	ldr	r2, [r3, #8]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	601a      	str	r2, [r3, #0]
}
 80061e4:	46c0      	nop			; (mov r8, r8)
 80061e6:	46bd      	mov	sp, r7
 80061e8:	b004      	add	sp, #16
 80061ea:	bd80      	pop	{r7, pc}

080061ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	3301      	adds	r3, #1
 8006200:	d103      	bne.n	800620a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	e00c      	b.n	8006224 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	3308      	adds	r3, #8
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	e002      	b.n	8006218 <vListInsert+0x2c>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	60fb      	str	r3, [r7, #12]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	429a      	cmp	r2, r3
 8006222:	d2f6      	bcs.n	8006212 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	683a      	ldr	r2, [r7, #0]
 8006232:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	1c5a      	adds	r2, r3, #1
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	601a      	str	r2, [r3, #0]
}
 8006250:	46c0      	nop			; (mov r8, r8)
 8006252:	46bd      	mov	sp, r7
 8006254:	b004      	add	sp, #16
 8006256:	bd80      	pop	{r7, pc}

08006258 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	6892      	ldr	r2, [r2, #8]
 800626e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	6852      	ldr	r2, [r2, #4]
 8006278:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	429a      	cmp	r2, r3
 8006282:	d103      	bne.n	800628c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	1e5a      	subs	r2, r3, #1
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
}
 80062a0:	0018      	movs	r0, r3
 80062a2:	46bd      	mov	sp, r7
 80062a4:	b004      	add	sp, #16
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80062a8:	b590      	push	{r4, r7, lr}
 80062aa:	b08d      	sub	sp, #52	; 0x34
 80062ac:	af04      	add	r7, sp, #16
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
 80062b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80062b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <xTaskCreateStatic+0x18>
 80062bc:	b672      	cpsid	i
 80062be:	e7fe      	b.n	80062be <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80062c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <xTaskCreateStatic+0x22>
 80062c6:	b672      	cpsid	i
 80062c8:	e7fe      	b.n	80062c8 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80062ca:	2350      	movs	r3, #80	; 0x50
 80062cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	2b50      	cmp	r3, #80	; 0x50
 80062d2:	d001      	beq.n	80062d8 <xTaskCreateStatic+0x30>
 80062d4:	b672      	cpsid	i
 80062d6:	e7fe      	b.n	80062d6 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80062d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d01c      	beq.n	8006318 <xTaskCreateStatic+0x70>
 80062de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d019      	beq.n	8006318 <xTaskCreateStatic+0x70>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e6:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062ec:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80062ee:	683c      	ldr	r4, [r7, #0]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	68b9      	ldr	r1, [r7, #8]
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	2300      	movs	r3, #0
 80062f8:	9303      	str	r3, [sp, #12]
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	9302      	str	r3, [sp, #8]
 80062fe:	2318      	movs	r3, #24
 8006300:	18fb      	adds	r3, r7, r3
 8006302:	9301      	str	r3, [sp, #4]
 8006304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	0023      	movs	r3, r4
 800630a:	f000 f80d 	bl	8006328 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	0018      	movs	r0, r3
 8006312:	f000 f883 	bl	800641c <prvAddNewTaskToReadyList>
 8006316:	e001      	b.n	800631c <xTaskCreateStatic+0x74>
		}
		else
		{
			xReturn = NULL;
 8006318:	2300      	movs	r3, #0
 800631a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800631c:	69bb      	ldr	r3, [r7, #24]
	}
 800631e:	0018      	movs	r0, r3
 8006320:	46bd      	mov	sp, r7
 8006322:	b009      	add	sp, #36	; 0x24
 8006324:	bd90      	pop	{r4, r7, pc}
	...

08006328 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4936      	ldr	r1, [pc, #216]	; (8006418 <prvInitialiseNewTask+0xf0>)
 800633e:	468c      	mov	ip, r1
 8006340:	4463      	add	r3, ip
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	18d3      	adds	r3, r2, r3
 8006346:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	2207      	movs	r2, #7
 800634c:	4393      	bics	r3, r2
 800634e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	2207      	movs	r2, #7
 8006354:	4013      	ands	r3, r2
 8006356:	d001      	beq.n	800635c <prvInitialiseNewTask+0x34>
 8006358:	b672      	cpsid	i
 800635a:	e7fe      	b.n	800635a <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800635c:	2300      	movs	r3, #0
 800635e:	617b      	str	r3, [r7, #20]
 8006360:	e013      	b.n	800638a <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	18d3      	adds	r3, r2, r3
 8006368:	7818      	ldrb	r0, [r3, #0]
 800636a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800636c:	2134      	movs	r1, #52	; 0x34
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	18d3      	adds	r3, r2, r3
 8006372:	185b      	adds	r3, r3, r1
 8006374:	1c02      	adds	r2, r0, #0
 8006376:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	18d3      	adds	r3, r2, r3
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d006      	beq.n	8006392 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	3301      	adds	r3, #1
 8006388:	617b      	str	r3, [r7, #20]
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2b0b      	cmp	r3, #11
 800638e:	d9e8      	bls.n	8006362 <prvInitialiseNewTask+0x3a>
 8006390:	e000      	b.n	8006394 <prvInitialiseNewTask+0x6c>
		{
			break;
 8006392:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006396:	223f      	movs	r2, #63	; 0x3f
 8006398:	2100      	movs	r1, #0
 800639a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	2b06      	cmp	r3, #6
 80063a0:	d901      	bls.n	80063a6 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80063a2:	2306      	movs	r3, #6
 80063a4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80063a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a8:	6a3a      	ldr	r2, [r7, #32]
 80063aa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80063ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ae:	6a3a      	ldr	r2, [r7, #32]
 80063b0:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 80063b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b4:	2200      	movs	r2, #0
 80063b6:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80063b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ba:	3304      	adds	r3, #4
 80063bc:	0018      	movs	r0, r3
 80063be:	f7ff fee8 	bl	8006192 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80063c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c4:	3318      	adds	r3, #24
 80063c6:	0018      	movs	r0, r3
 80063c8:	f7ff fee3 	bl	8006192 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80063cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	2207      	movs	r2, #7
 80063d6:	1ad2      	subs	r2, r2, r3
 80063d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80063dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063e0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80063e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e4:	2200      	movs	r2, #0
 80063e6:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ea:	224c      	movs	r2, #76	; 0x4c
 80063ec:	2100      	movs	r1, #0
 80063ee:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	68f9      	ldr	r1, [r7, #12]
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	0018      	movs	r0, r3
 80063f8:	f000 fb80 	bl	8006afc <pxPortInitialiseStack>
 80063fc:	0002      	movs	r2, r0
 80063fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006400:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800640c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800640e:	46c0      	nop			; (mov r8, r8)
 8006410:	46bd      	mov	sp, r7
 8006412:	b006      	add	sp, #24
 8006414:	bd80      	pop	{r7, pc}
 8006416:	46c0      	nop			; (mov r8, r8)
 8006418:	3fffffff 	.word	0x3fffffff

0800641c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006424:	f000 fc04 	bl	8006c30 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006428:	4b28      	ldr	r3, [pc, #160]	; (80064cc <prvAddNewTaskToReadyList+0xb0>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	1c5a      	adds	r2, r3, #1
 800642e:	4b27      	ldr	r3, [pc, #156]	; (80064cc <prvAddNewTaskToReadyList+0xb0>)
 8006430:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8006432:	4b27      	ldr	r3, [pc, #156]	; (80064d0 <prvAddNewTaskToReadyList+0xb4>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d109      	bne.n	800644e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800643a:	4b25      	ldr	r3, [pc, #148]	; (80064d0 <prvAddNewTaskToReadyList+0xb4>)
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006440:	4b22      	ldr	r3, [pc, #136]	; (80064cc <prvAddNewTaskToReadyList+0xb0>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d110      	bne.n	800646a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006448:	f000 fab2 	bl	80069b0 <prvInitialiseTaskLists>
 800644c:	e00d      	b.n	800646a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800644e:	4b21      	ldr	r3, [pc, #132]	; (80064d4 <prvAddNewTaskToReadyList+0xb8>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d109      	bne.n	800646a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006456:	4b1e      	ldr	r3, [pc, #120]	; (80064d0 <prvAddNewTaskToReadyList+0xb4>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006460:	429a      	cmp	r2, r3
 8006462:	d802      	bhi.n	800646a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006464:	4b1a      	ldr	r3, [pc, #104]	; (80064d0 <prvAddNewTaskToReadyList+0xb4>)
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800646a:	4b1b      	ldr	r3, [pc, #108]	; (80064d8 <prvAddNewTaskToReadyList+0xbc>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	1c5a      	adds	r2, r3, #1
 8006470:	4b19      	ldr	r3, [pc, #100]	; (80064d8 <prvAddNewTaskToReadyList+0xbc>)
 8006472:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006478:	4b18      	ldr	r3, [pc, #96]	; (80064dc <prvAddNewTaskToReadyList+0xc0>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	429a      	cmp	r2, r3
 800647e:	d903      	bls.n	8006488 <prvAddNewTaskToReadyList+0x6c>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006484:	4b15      	ldr	r3, [pc, #84]	; (80064dc <prvAddNewTaskToReadyList+0xc0>)
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648c:	0013      	movs	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	189b      	adds	r3, r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4a12      	ldr	r2, [pc, #72]	; (80064e0 <prvAddNewTaskToReadyList+0xc4>)
 8006496:	189a      	adds	r2, r3, r2
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	3304      	adds	r3, #4
 800649c:	0019      	movs	r1, r3
 800649e:	0010      	movs	r0, r2
 80064a0:	f7ff fe82 	bl	80061a8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80064a4:	f000 fbd6 	bl	8006c54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80064a8:	4b0a      	ldr	r3, [pc, #40]	; (80064d4 <prvAddNewTaskToReadyList+0xb8>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d008      	beq.n	80064c2 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064b0:	4b07      	ldr	r3, [pc, #28]	; (80064d0 <prvAddNewTaskToReadyList+0xb4>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d201      	bcs.n	80064c2 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80064be:	f000 fba7 	bl	8006c10 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064c2:	46c0      	nop			; (mov r8, r8)
 80064c4:	46bd      	mov	sp, r7
 80064c6:	b002      	add	sp, #8
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	46c0      	nop			; (mov r8, r8)
 80064cc:	20000370 	.word	0x20000370
 80064d0:	2000029c 	.word	0x2000029c
 80064d4:	2000037c 	.word	0x2000037c
 80064d8:	2000038c 	.word	0x2000038c
 80064dc:	20000378 	.word	0x20000378
 80064e0:	200002a0 	.word	0x200002a0

080064e4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80064ee:	2300      	movs	r3, #0
 80064f0:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <vTaskDelayUntil+0x18>
 80064f8:	b672      	cpsid	i
 80064fa:	e7fe      	b.n	80064fa <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <vTaskDelayUntil+0x22>
 8006502:	b672      	cpsid	i
 8006504:	e7fe      	b.n	8006504 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
 8006506:	4b23      	ldr	r3, [pc, #140]	; (8006594 <vTaskDelayUntil+0xb0>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <vTaskDelayUntil+0x2e>
 800650e:	b672      	cpsid	i
 8006510:	e7fe      	b.n	8006510 <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
 8006512:	f000 f891 	bl	8006638 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006516:	4b20      	ldr	r3, [pc, #128]	; (8006598 <vTaskDelayUntil+0xb4>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	18d3      	adds	r3, r2, r3
 8006524:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	429a      	cmp	r2, r3
 800652e:	d20b      	bcs.n	8006548 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	429a      	cmp	r2, r3
 8006538:	d211      	bcs.n	800655e <vTaskDelayUntil+0x7a>
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	429a      	cmp	r2, r3
 8006540:	d90d      	bls.n	800655e <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
 8006542:	2301      	movs	r3, #1
 8006544:	617b      	str	r3, [r7, #20]
 8006546:	e00a      	b.n	800655e <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	429a      	cmp	r2, r3
 8006550:	d303      	bcc.n	800655a <vTaskDelayUntil+0x76>
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	429a      	cmp	r2, r3
 8006558:	d901      	bls.n	800655e <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
 800655a:	2301      	movs	r3, #1
 800655c:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d006      	beq.n	8006578 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	2100      	movs	r1, #0
 8006572:	0018      	movs	r0, r3
 8006574:	f000 fa7e 	bl	8006a74 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006578:	f000 f86a 	bl	8006650 <xTaskResumeAll>
 800657c:	0003      	movs	r3, r0
 800657e:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d101      	bne.n	800658a <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
 8006586:	f000 fb43 	bl	8006c10 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800658a:	46c0      	nop			; (mov r8, r8)
 800658c:	46bd      	mov	sp, r7
 800658e:	b006      	add	sp, #24
 8006590:	bd80      	pop	{r7, pc}
 8006592:	46c0      	nop			; (mov r8, r8)
 8006594:	20000398 	.word	0x20000398
 8006598:	20000374 	.word	0x20000374

0800659c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800659c:	b590      	push	{r4, r7, lr}
 800659e:	b089      	sub	sp, #36	; 0x24
 80065a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80065a2:	2300      	movs	r3, #0
 80065a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80065a6:	2300      	movs	r3, #0
 80065a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80065aa:	003a      	movs	r2, r7
 80065ac:	1d39      	adds	r1, r7, #4
 80065ae:	2308      	movs	r3, #8
 80065b0:	18fb      	adds	r3, r7, r3
 80065b2:	0018      	movs	r0, r3
 80065b4:	f7fc fc98 	bl	8002ee8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80065b8:	683c      	ldr	r4, [r7, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	4918      	ldr	r1, [pc, #96]	; (8006620 <vTaskStartScheduler+0x84>)
 80065c0:	4818      	ldr	r0, [pc, #96]	; (8006624 <vTaskStartScheduler+0x88>)
 80065c2:	9202      	str	r2, [sp, #8]
 80065c4:	9301      	str	r3, [sp, #4]
 80065c6:	2300      	movs	r3, #0
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	2300      	movs	r3, #0
 80065cc:	0022      	movs	r2, r4
 80065ce:	f7ff fe6b 	bl	80062a8 <xTaskCreateStatic>
 80065d2:	0002      	movs	r2, r0
 80065d4:	4b14      	ldr	r3, [pc, #80]	; (8006628 <vTaskStartScheduler+0x8c>)
 80065d6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80065d8:	4b13      	ldr	r3, [pc, #76]	; (8006628 <vTaskStartScheduler+0x8c>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d002      	beq.n	80065e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80065e0:	2301      	movs	r3, #1
 80065e2:	60fb      	str	r3, [r7, #12]
 80065e4:	e001      	b.n	80065ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d10d      	bne.n	800660c <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80065f0:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80065f2:	4b0e      	ldr	r3, [pc, #56]	; (800662c <vTaskStartScheduler+0x90>)
 80065f4:	2201      	movs	r2, #1
 80065f6:	4252      	negs	r2, r2
 80065f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065fa:	4b0d      	ldr	r3, [pc, #52]	; (8006630 <vTaskStartScheduler+0x94>)
 80065fc:	2201      	movs	r2, #1
 80065fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006600:	4b0c      	ldr	r3, [pc, #48]	; (8006634 <vTaskStartScheduler+0x98>)
 8006602:	2200      	movs	r2, #0
 8006604:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006606:	f000 fadf 	bl	8006bc8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800660a:	e004      	b.n	8006616 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3301      	adds	r3, #1
 8006610:	d101      	bne.n	8006616 <vTaskStartScheduler+0x7a>
 8006612:	b672      	cpsid	i
 8006614:	e7fe      	b.n	8006614 <vTaskStartScheduler+0x78>
}
 8006616:	46c0      	nop			; (mov r8, r8)
 8006618:	46bd      	mov	sp, r7
 800661a:	b005      	add	sp, #20
 800661c:	bd90      	pop	{r4, r7, pc}
 800661e:	46c0      	nop			; (mov r8, r8)
 8006620:	08007a28 	.word	0x08007a28
 8006624:	08006991 	.word	0x08006991
 8006628:	20000394 	.word	0x20000394
 800662c:	20000390 	.word	0x20000390
 8006630:	2000037c 	.word	0x2000037c
 8006634:	20000374 	.word	0x20000374

08006638 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800663c:	4b03      	ldr	r3, [pc, #12]	; (800664c <vTaskSuspendAll+0x14>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	4b02      	ldr	r3, [pc, #8]	; (800664c <vTaskSuspendAll+0x14>)
 8006644:	601a      	str	r2, [r3, #0]
}
 8006646:	46c0      	nop			; (mov r8, r8)
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	20000398 	.word	0x20000398

08006650 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006656:	2300      	movs	r3, #0
 8006658:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800665a:	2300      	movs	r3, #0
 800665c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800665e:	4b3a      	ldr	r3, [pc, #232]	; (8006748 <xTaskResumeAll+0xf8>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <xTaskResumeAll+0x1a>
 8006666:	b672      	cpsid	i
 8006668:	e7fe      	b.n	8006668 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800666a:	f000 fae1 	bl	8006c30 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800666e:	4b36      	ldr	r3, [pc, #216]	; (8006748 <xTaskResumeAll+0xf8>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	1e5a      	subs	r2, r3, #1
 8006674:	4b34      	ldr	r3, [pc, #208]	; (8006748 <xTaskResumeAll+0xf8>)
 8006676:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006678:	4b33      	ldr	r3, [pc, #204]	; (8006748 <xTaskResumeAll+0xf8>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d15b      	bne.n	8006738 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006680:	4b32      	ldr	r3, [pc, #200]	; (800674c <xTaskResumeAll+0xfc>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d057      	beq.n	8006738 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006688:	e02f      	b.n	80066ea <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800668a:	4b31      	ldr	r3, [pc, #196]	; (8006750 <xTaskResumeAll+0x100>)
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3318      	adds	r3, #24
 8006696:	0018      	movs	r0, r3
 8006698:	f7ff fdde 	bl	8006258 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	3304      	adds	r3, #4
 80066a0:	0018      	movs	r0, r3
 80066a2:	f7ff fdd9 	bl	8006258 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066aa:	4b2a      	ldr	r3, [pc, #168]	; (8006754 <xTaskResumeAll+0x104>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d903      	bls.n	80066ba <xTaskResumeAll+0x6a>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b6:	4b27      	ldr	r3, [pc, #156]	; (8006754 <xTaskResumeAll+0x104>)
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066be:	0013      	movs	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	189b      	adds	r3, r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4a24      	ldr	r2, [pc, #144]	; (8006758 <xTaskResumeAll+0x108>)
 80066c8:	189a      	adds	r2, r3, r2
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	3304      	adds	r3, #4
 80066ce:	0019      	movs	r1, r3
 80066d0:	0010      	movs	r0, r2
 80066d2:	f7ff fd69 	bl	80061a8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066da:	4b20      	ldr	r3, [pc, #128]	; (800675c <xTaskResumeAll+0x10c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d302      	bcc.n	80066ea <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80066e4:	4b1e      	ldr	r3, [pc, #120]	; (8006760 <xTaskResumeAll+0x110>)
 80066e6:	2201      	movs	r2, #1
 80066e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066ea:	4b19      	ldr	r3, [pc, #100]	; (8006750 <xTaskResumeAll+0x100>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1cb      	bne.n	800668a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d001      	beq.n	80066fc <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066f8:	f000 f998 	bl	8006a2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80066fc:	4b19      	ldr	r3, [pc, #100]	; (8006764 <xTaskResumeAll+0x114>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00f      	beq.n	8006728 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006708:	f000 f83c 	bl	8006784 <xTaskIncrementTick>
 800670c:	1e03      	subs	r3, r0, #0
 800670e:	d002      	beq.n	8006716 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8006710:	4b13      	ldr	r3, [pc, #76]	; (8006760 <xTaskResumeAll+0x110>)
 8006712:	2201      	movs	r2, #1
 8006714:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	3b01      	subs	r3, #1
 800671a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1f2      	bne.n	8006708 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8006722:	4b10      	ldr	r3, [pc, #64]	; (8006764 <xTaskResumeAll+0x114>)
 8006724:	2200      	movs	r2, #0
 8006726:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006728:	4b0d      	ldr	r3, [pc, #52]	; (8006760 <xTaskResumeAll+0x110>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006730:	2301      	movs	r3, #1
 8006732:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006734:	f000 fa6c 	bl	8006c10 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006738:	f000 fa8c 	bl	8006c54 <vPortExitCritical>

	return xAlreadyYielded;
 800673c:	68bb      	ldr	r3, [r7, #8]
}
 800673e:	0018      	movs	r0, r3
 8006740:	46bd      	mov	sp, r7
 8006742:	b004      	add	sp, #16
 8006744:	bd80      	pop	{r7, pc}
 8006746:	46c0      	nop			; (mov r8, r8)
 8006748:	20000398 	.word	0x20000398
 800674c:	20000370 	.word	0x20000370
 8006750:	2000035c 	.word	0x2000035c
 8006754:	20000378 	.word	0x20000378
 8006758:	200002a0 	.word	0x200002a0
 800675c:	2000029c 	.word	0x2000029c
 8006760:	20000384 	.word	0x20000384
 8006764:	20000380 	.word	0x20000380

08006768 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800676e:	4b04      	ldr	r3, [pc, #16]	; (8006780 <xTaskGetTickCount+0x18>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006774:	687b      	ldr	r3, [r7, #4]
}
 8006776:	0018      	movs	r0, r3
 8006778:	46bd      	mov	sp, r7
 800677a:	b002      	add	sp, #8
 800677c:	bd80      	pop	{r7, pc}
 800677e:	46c0      	nop			; (mov r8, r8)
 8006780:	20000374 	.word	0x20000374

08006784 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b086      	sub	sp, #24
 8006788:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800678a:	2300      	movs	r3, #0
 800678c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800678e:	4b4c      	ldr	r3, [pc, #304]	; (80068c0 <xTaskIncrementTick+0x13c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d000      	beq.n	8006798 <xTaskIncrementTick+0x14>
 8006796:	e083      	b.n	80068a0 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006798:	4b4a      	ldr	r3, [pc, #296]	; (80068c4 <xTaskIncrementTick+0x140>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3301      	adds	r3, #1
 800679e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80067a0:	4b48      	ldr	r3, [pc, #288]	; (80068c4 <xTaskIncrementTick+0x140>)
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d117      	bne.n	80067dc <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80067ac:	4b46      	ldr	r3, [pc, #280]	; (80068c8 <xTaskIncrementTick+0x144>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <xTaskIncrementTick+0x36>
 80067b6:	b672      	cpsid	i
 80067b8:	e7fe      	b.n	80067b8 <xTaskIncrementTick+0x34>
 80067ba:	4b43      	ldr	r3, [pc, #268]	; (80068c8 <xTaskIncrementTick+0x144>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	4b42      	ldr	r3, [pc, #264]	; (80068cc <xTaskIncrementTick+0x148>)
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	4b40      	ldr	r3, [pc, #256]	; (80068c8 <xTaskIncrementTick+0x144>)
 80067c6:	601a      	str	r2, [r3, #0]
 80067c8:	4b40      	ldr	r3, [pc, #256]	; (80068cc <xTaskIncrementTick+0x148>)
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	4b40      	ldr	r3, [pc, #256]	; (80068d0 <xTaskIncrementTick+0x14c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	1c5a      	adds	r2, r3, #1
 80067d4:	4b3e      	ldr	r3, [pc, #248]	; (80068d0 <xTaskIncrementTick+0x14c>)
 80067d6:	601a      	str	r2, [r3, #0]
 80067d8:	f000 f928 	bl	8006a2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067dc:	4b3d      	ldr	r3, [pc, #244]	; (80068d4 <xTaskIncrementTick+0x150>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d34e      	bcc.n	8006884 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067e6:	4b38      	ldr	r3, [pc, #224]	; (80068c8 <xTaskIncrementTick+0x144>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <xTaskIncrementTick+0x70>
 80067f0:	2301      	movs	r3, #1
 80067f2:	e000      	b.n	80067f6 <xTaskIncrementTick+0x72>
 80067f4:	2300      	movs	r3, #0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d004      	beq.n	8006804 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067fa:	4b36      	ldr	r3, [pc, #216]	; (80068d4 <xTaskIncrementTick+0x150>)
 80067fc:	2201      	movs	r2, #1
 80067fe:	4252      	negs	r2, r2
 8006800:	601a      	str	r2, [r3, #0]
					break;
 8006802:	e03f      	b.n	8006884 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006804:	4b30      	ldr	r3, [pc, #192]	; (80068c8 <xTaskIncrementTick+0x144>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	429a      	cmp	r2, r3
 800681a:	d203      	bcs.n	8006824 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800681c:	4b2d      	ldr	r3, [pc, #180]	; (80068d4 <xTaskIncrementTick+0x150>)
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	601a      	str	r2, [r3, #0]
						break;
 8006822:	e02f      	b.n	8006884 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	3304      	adds	r3, #4
 8006828:	0018      	movs	r0, r3
 800682a:	f7ff fd15 	bl	8006258 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006832:	2b00      	cmp	r3, #0
 8006834:	d004      	beq.n	8006840 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	3318      	adds	r3, #24
 800683a:	0018      	movs	r0, r3
 800683c:	f7ff fd0c 	bl	8006258 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006844:	4b24      	ldr	r3, [pc, #144]	; (80068d8 <xTaskIncrementTick+0x154>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	429a      	cmp	r2, r3
 800684a:	d903      	bls.n	8006854 <xTaskIncrementTick+0xd0>
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006850:	4b21      	ldr	r3, [pc, #132]	; (80068d8 <xTaskIncrementTick+0x154>)
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006858:	0013      	movs	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	189b      	adds	r3, r3, r2
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4a1e      	ldr	r2, [pc, #120]	; (80068dc <xTaskIncrementTick+0x158>)
 8006862:	189a      	adds	r2, r3, r2
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	3304      	adds	r3, #4
 8006868:	0019      	movs	r1, r3
 800686a:	0010      	movs	r0, r2
 800686c:	f7ff fc9c 	bl	80061a8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006874:	4b1a      	ldr	r3, [pc, #104]	; (80068e0 <xTaskIncrementTick+0x15c>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687a:	429a      	cmp	r2, r3
 800687c:	d3b3      	bcc.n	80067e6 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800687e:	2301      	movs	r3, #1
 8006880:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006882:	e7b0      	b.n	80067e6 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006884:	4b16      	ldr	r3, [pc, #88]	; (80068e0 <xTaskIncrementTick+0x15c>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800688a:	4914      	ldr	r1, [pc, #80]	; (80068dc <xTaskIncrementTick+0x158>)
 800688c:	0013      	movs	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	189b      	adds	r3, r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	585b      	ldr	r3, [r3, r1]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d907      	bls.n	80068aa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800689a:	2301      	movs	r3, #1
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	e004      	b.n	80068aa <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80068a0:	4b10      	ldr	r3, [pc, #64]	; (80068e4 <xTaskIncrementTick+0x160>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	1c5a      	adds	r2, r3, #1
 80068a6:	4b0f      	ldr	r3, [pc, #60]	; (80068e4 <xTaskIncrementTick+0x160>)
 80068a8:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80068aa:	4b0f      	ldr	r3, [pc, #60]	; (80068e8 <xTaskIncrementTick+0x164>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d001      	beq.n	80068b6 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 80068b2:	2301      	movs	r3, #1
 80068b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80068b6:	697b      	ldr	r3, [r7, #20]
}
 80068b8:	0018      	movs	r0, r3
 80068ba:	46bd      	mov	sp, r7
 80068bc:	b006      	add	sp, #24
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	20000398 	.word	0x20000398
 80068c4:	20000374 	.word	0x20000374
 80068c8:	20000354 	.word	0x20000354
 80068cc:	20000358 	.word	0x20000358
 80068d0:	20000388 	.word	0x20000388
 80068d4:	20000390 	.word	0x20000390
 80068d8:	20000378 	.word	0x20000378
 80068dc:	200002a0 	.word	0x200002a0
 80068e0:	2000029c 	.word	0x2000029c
 80068e4:	20000380 	.word	0x20000380
 80068e8:	20000384 	.word	0x20000384

080068ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068f2:	4b22      	ldr	r3, [pc, #136]	; (800697c <vTaskSwitchContext+0x90>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068fa:	4b21      	ldr	r3, [pc, #132]	; (8006980 <vTaskSwitchContext+0x94>)
 80068fc:	2201      	movs	r2, #1
 80068fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006900:	e037      	b.n	8006972 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8006902:	4b1f      	ldr	r3, [pc, #124]	; (8006980 <vTaskSwitchContext+0x94>)
 8006904:	2200      	movs	r2, #0
 8006906:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006908:	4b1e      	ldr	r3, [pc, #120]	; (8006984 <vTaskSwitchContext+0x98>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	607b      	str	r3, [r7, #4]
 800690e:	e007      	b.n	8006920 <vTaskSwitchContext+0x34>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <vTaskSwitchContext+0x2e>
 8006916:	b672      	cpsid	i
 8006918:	e7fe      	b.n	8006918 <vTaskSwitchContext+0x2c>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	3b01      	subs	r3, #1
 800691e:	607b      	str	r3, [r7, #4]
 8006920:	4919      	ldr	r1, [pc, #100]	; (8006988 <vTaskSwitchContext+0x9c>)
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	0013      	movs	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	189b      	adds	r3, r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	585b      	ldr	r3, [r3, r1]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d0ee      	beq.n	8006910 <vTaskSwitchContext+0x24>
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	0013      	movs	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	189b      	adds	r3, r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4a12      	ldr	r2, [pc, #72]	; (8006988 <vTaskSwitchContext+0x9c>)
 800693e:	189b      	adds	r3, r3, r2
 8006940:	603b      	str	r3, [r7, #0]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	605a      	str	r2, [r3, #4]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	3308      	adds	r3, #8
 8006954:	429a      	cmp	r2, r3
 8006956:	d104      	bne.n	8006962 <vTaskSwitchContext+0x76>
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	605a      	str	r2, [r3, #4]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	68da      	ldr	r2, [r3, #12]
 8006968:	4b08      	ldr	r3, [pc, #32]	; (800698c <vTaskSwitchContext+0xa0>)
 800696a:	601a      	str	r2, [r3, #0]
 800696c:	4b05      	ldr	r3, [pc, #20]	; (8006984 <vTaskSwitchContext+0x98>)
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	601a      	str	r2, [r3, #0]
}
 8006972:	46c0      	nop			; (mov r8, r8)
 8006974:	46bd      	mov	sp, r7
 8006976:	b002      	add	sp, #8
 8006978:	bd80      	pop	{r7, pc}
 800697a:	46c0      	nop			; (mov r8, r8)
 800697c:	20000398 	.word	0x20000398
 8006980:	20000384 	.word	0x20000384
 8006984:	20000378 	.word	0x20000378
 8006988:	200002a0 	.word	0x200002a0
 800698c:	2000029c 	.word	0x2000029c

08006990 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006998:	f000 f842 	bl	8006a20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800699c:	4b03      	ldr	r3, [pc, #12]	; (80069ac <prvIdleTask+0x1c>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d9f9      	bls.n	8006998 <prvIdleTask+0x8>
			{
				taskYIELD();
 80069a4:	f000 f934 	bl	8006c10 <vPortYield>
		prvCheckTasksWaitingTermination();
 80069a8:	e7f6      	b.n	8006998 <prvIdleTask+0x8>
 80069aa:	46c0      	nop			; (mov r8, r8)
 80069ac:	200002a0 	.word	0x200002a0

080069b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069b6:	2300      	movs	r3, #0
 80069b8:	607b      	str	r3, [r7, #4]
 80069ba:	e00c      	b.n	80069d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	0013      	movs	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	189b      	adds	r3, r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4a10      	ldr	r2, [pc, #64]	; (8006a08 <prvInitialiseTaskLists+0x58>)
 80069c8:	189b      	adds	r3, r3, r2
 80069ca:	0018      	movs	r0, r3
 80069cc:	f7ff fbc3 	bl	8006156 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	3301      	adds	r3, #1
 80069d4:	607b      	str	r3, [r7, #4]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b06      	cmp	r3, #6
 80069da:	d9ef      	bls.n	80069bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80069dc:	4b0b      	ldr	r3, [pc, #44]	; (8006a0c <prvInitialiseTaskLists+0x5c>)
 80069de:	0018      	movs	r0, r3
 80069e0:	f7ff fbb9 	bl	8006156 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80069e4:	4b0a      	ldr	r3, [pc, #40]	; (8006a10 <prvInitialiseTaskLists+0x60>)
 80069e6:	0018      	movs	r0, r3
 80069e8:	f7ff fbb5 	bl	8006156 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80069ec:	4b09      	ldr	r3, [pc, #36]	; (8006a14 <prvInitialiseTaskLists+0x64>)
 80069ee:	0018      	movs	r0, r3
 80069f0:	f7ff fbb1 	bl	8006156 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80069f4:	4b08      	ldr	r3, [pc, #32]	; (8006a18 <prvInitialiseTaskLists+0x68>)
 80069f6:	4a05      	ldr	r2, [pc, #20]	; (8006a0c <prvInitialiseTaskLists+0x5c>)
 80069f8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80069fa:	4b08      	ldr	r3, [pc, #32]	; (8006a1c <prvInitialiseTaskLists+0x6c>)
 80069fc:	4a04      	ldr	r2, [pc, #16]	; (8006a10 <prvInitialiseTaskLists+0x60>)
 80069fe:	601a      	str	r2, [r3, #0]
}
 8006a00:	46c0      	nop			; (mov r8, r8)
 8006a02:	46bd      	mov	sp, r7
 8006a04:	b002      	add	sp, #8
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	200002a0 	.word	0x200002a0
 8006a0c:	2000032c 	.word	0x2000032c
 8006a10:	20000340 	.word	0x20000340
 8006a14:	2000035c 	.word	0x2000035c
 8006a18:	20000354 	.word	0x20000354
 8006a1c:	20000358 	.word	0x20000358

08006a20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a24:	46c0      	nop			; (mov r8, r8)
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a32:	4b0e      	ldr	r3, [pc, #56]	; (8006a6c <prvResetNextTaskUnblockTime+0x40>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d101      	bne.n	8006a40 <prvResetNextTaskUnblockTime+0x14>
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e000      	b.n	8006a42 <prvResetNextTaskUnblockTime+0x16>
 8006a40:	2300      	movs	r3, #0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d004      	beq.n	8006a50 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a46:	4b0a      	ldr	r3, [pc, #40]	; (8006a70 <prvResetNextTaskUnblockTime+0x44>)
 8006a48:	2201      	movs	r2, #1
 8006a4a:	4252      	negs	r2, r2
 8006a4c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a4e:	e008      	b.n	8006a62 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a50:	4b06      	ldr	r3, [pc, #24]	; (8006a6c <prvResetNextTaskUnblockTime+0x40>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	4b04      	ldr	r3, [pc, #16]	; (8006a70 <prvResetNextTaskUnblockTime+0x44>)
 8006a60:	601a      	str	r2, [r3, #0]
}
 8006a62:	46c0      	nop			; (mov r8, r8)
 8006a64:	46bd      	mov	sp, r7
 8006a66:	b002      	add	sp, #8
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	46c0      	nop			; (mov r8, r8)
 8006a6c:	20000354 	.word	0x20000354
 8006a70:	20000390 	.word	0x20000390

08006a74 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a7e:	4b1a      	ldr	r3, [pc, #104]	; (8006ae8 <prvAddCurrentTaskToDelayedList+0x74>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a84:	4b19      	ldr	r3, [pc, #100]	; (8006aec <prvAddCurrentTaskToDelayedList+0x78>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3304      	adds	r3, #4
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	f7ff fbe4 	bl	8006258 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	18d3      	adds	r3, r2, r3
 8006a96:	60bb      	str	r3, [r7, #8]

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a98:	4b14      	ldr	r3, [pc, #80]	; (8006aec <prvAddCurrentTaskToDelayedList+0x78>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	605a      	str	r2, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 8006aa0:	68ba      	ldr	r2, [r7, #8]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d209      	bcs.n	8006abc <prvAddCurrentTaskToDelayedList+0x48>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aa8:	4b11      	ldr	r3, [pc, #68]	; (8006af0 <prvAddCurrentTaskToDelayedList+0x7c>)
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	4b0f      	ldr	r3, [pc, #60]	; (8006aec <prvAddCurrentTaskToDelayedList+0x78>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	0019      	movs	r1, r3
 8006ab4:	0010      	movs	r0, r2
 8006ab6:	f7ff fb99 	bl	80061ec <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006aba:	e010      	b.n	8006ade <prvAddCurrentTaskToDelayedList+0x6a>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006abc:	4b0d      	ldr	r3, [pc, #52]	; (8006af4 <prvAddCurrentTaskToDelayedList+0x80>)
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	4b0a      	ldr	r3, [pc, #40]	; (8006aec <prvAddCurrentTaskToDelayedList+0x78>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	0019      	movs	r1, r3
 8006ac8:	0010      	movs	r0, r2
 8006aca:	f7ff fb8f 	bl	80061ec <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 8006ace:	4b0a      	ldr	r3, [pc, #40]	; (8006af8 <prvAddCurrentTaskToDelayedList+0x84>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d202      	bcs.n	8006ade <prvAddCurrentTaskToDelayedList+0x6a>
				xNextTaskUnblockTime = xTimeToWake;
 8006ad8:	4b07      	ldr	r3, [pc, #28]	; (8006af8 <prvAddCurrentTaskToDelayedList+0x84>)
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	601a      	str	r2, [r3, #0]
}
 8006ade:	46c0      	nop			; (mov r8, r8)
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	b004      	add	sp, #16
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	46c0      	nop			; (mov r8, r8)
 8006ae8:	20000374 	.word	0x20000374
 8006aec:	2000029c 	.word	0x2000029c
 8006af0:	20000358 	.word	0x20000358
 8006af4:	20000354 	.word	0x20000354
 8006af8:	20000390 	.word	0x20000390

08006afc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	3b04      	subs	r3, #4
 8006b0c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2280      	movs	r2, #128	; 0x80
 8006b12:	0452      	lsls	r2, r2, #17
 8006b14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	3b04      	subs	r3, #4
 8006b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	3b04      	subs	r3, #4
 8006b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b28:	4a08      	ldr	r2, [pc, #32]	; (8006b4c <pxPortInitialiseStack+0x50>)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	3b14      	subs	r3, #20
 8006b32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	3b20      	subs	r3, #32
 8006b3e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b40:	68fb      	ldr	r3, [r7, #12]
}
 8006b42:	0018      	movs	r0, r3
 8006b44:	46bd      	mov	sp, r7
 8006b46:	b004      	add	sp, #16
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	46c0      	nop			; (mov r8, r8)
 8006b4c:	08006b51 	.word	0x08006b51

08006b50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006b56:	2300      	movs	r3, #0
 8006b58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b5a:	4b07      	ldr	r3, [pc, #28]	; (8006b78 <prvTaskExitError+0x28>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	d001      	beq.n	8006b66 <prvTaskExitError+0x16>
 8006b62:	b672      	cpsid	i
 8006b64:	e7fe      	b.n	8006b64 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8006b66:	b672      	cpsid	i
	while( ulDummy == 0 )
 8006b68:	46c0      	nop			; (mov r8, r8)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d0fc      	beq.n	8006b6a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b70:	46c0      	nop			; (mov r8, r8)
 8006b72:	46bd      	mov	sp, r7
 8006b74:	b002      	add	sp, #8
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	2000000c 	.word	0x2000000c

08006b7c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8006b80:	46c0      	nop			; (mov r8, r8)
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
	...

08006b90 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8006b90:	4a0b      	ldr	r2, [pc, #44]	; (8006bc0 <pxCurrentTCBConst2>)
 8006b92:	6813      	ldr	r3, [r2, #0]
 8006b94:	6818      	ldr	r0, [r3, #0]
 8006b96:	3020      	adds	r0, #32
 8006b98:	f380 8809 	msr	PSP, r0
 8006b9c:	2002      	movs	r0, #2
 8006b9e:	f380 8814 	msr	CONTROL, r0
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8006ba8:	46ae      	mov	lr, r5
 8006baa:	bc08      	pop	{r3}
 8006bac:	bc04      	pop	{r2}
 8006bae:	b662      	cpsie	i
 8006bb0:	4718      	bx	r3
 8006bb2:	46c0      	nop			; (mov r8, r8)
 8006bb4:	46c0      	nop			; (mov r8, r8)
 8006bb6:	46c0      	nop			; (mov r8, r8)
 8006bb8:	46c0      	nop			; (mov r8, r8)
 8006bba:	46c0      	nop			; (mov r8, r8)
 8006bbc:	46c0      	nop			; (mov r8, r8)
 8006bbe:	46c0      	nop			; (mov r8, r8)

08006bc0 <pxCurrentTCBConst2>:
 8006bc0:	2000029c 	.word	0x2000029c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8006bc4:	46c0      	nop			; (mov r8, r8)
 8006bc6:	46c0      	nop			; (mov r8, r8)

08006bc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8006bcc:	4b0e      	ldr	r3, [pc, #56]	; (8006c08 <xPortStartScheduler+0x40>)
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	4b0d      	ldr	r3, [pc, #52]	; (8006c08 <xPortStartScheduler+0x40>)
 8006bd2:	21ff      	movs	r1, #255	; 0xff
 8006bd4:	0409      	lsls	r1, r1, #16
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8006bda:	4b0b      	ldr	r3, [pc, #44]	; (8006c08 <xPortStartScheduler+0x40>)
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	4b0a      	ldr	r3, [pc, #40]	; (8006c08 <xPortStartScheduler+0x40>)
 8006be0:	21ff      	movs	r1, #255	; 0xff
 8006be2:	0609      	lsls	r1, r1, #24
 8006be4:	430a      	orrs	r2, r1
 8006be6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8006be8:	f000 f898 	bl	8006d1c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006bec:	4b07      	ldr	r3, [pc, #28]	; (8006c0c <xPortStartScheduler+0x44>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8006bf2:	f7ff ffcd 	bl	8006b90 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006bf6:	f7ff fe79 	bl	80068ec <vTaskSwitchContext>
	prvTaskExitError();
 8006bfa:	f7ff ffa9 	bl	8006b50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	0018      	movs	r0, r3
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	46c0      	nop			; (mov r8, r8)
 8006c08:	e000ed20 	.word	0xe000ed20
 8006c0c:	2000000c 	.word	0x2000000c

08006c10 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8006c14:	4b05      	ldr	r3, [pc, #20]	; (8006c2c <vPortYield+0x1c>)
 8006c16:	2280      	movs	r2, #128	; 0x80
 8006c18:	0552      	lsls	r2, r2, #21
 8006c1a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8006c1c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006c20:	f3bf 8f6f 	isb	sy
}
 8006c24:	46c0      	nop			; (mov r8, r8)
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	46c0      	nop			; (mov r8, r8)
 8006c2c:	e000ed04 	.word	0xe000ed04

08006c30 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8006c34:	b672      	cpsid	i
    uxCriticalNesting++;
 8006c36:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <vPortEnterCritical+0x20>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	1c5a      	adds	r2, r3, #1
 8006c3c:	4b04      	ldr	r3, [pc, #16]	; (8006c50 <vPortEnterCritical+0x20>)
 8006c3e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8006c40:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006c44:	f3bf 8f6f 	isb	sy
}
 8006c48:	46c0      	nop			; (mov r8, r8)
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	46c0      	nop			; (mov r8, r8)
 8006c50:	2000000c 	.word	0x2000000c

08006c54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c58:	4b09      	ldr	r3, [pc, #36]	; (8006c80 <vPortExitCritical+0x2c>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <vPortExitCritical+0x10>
 8006c60:	b672      	cpsid	i
 8006c62:	e7fe      	b.n	8006c62 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8006c64:	4b06      	ldr	r3, [pc, #24]	; (8006c80 <vPortExitCritical+0x2c>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	1e5a      	subs	r2, r3, #1
 8006c6a:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <vPortExitCritical+0x2c>)
 8006c6c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8006c6e:	4b04      	ldr	r3, [pc, #16]	; (8006c80 <vPortExitCritical+0x2c>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d100      	bne.n	8006c78 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8006c76:	b662      	cpsie	i
    }
}
 8006c78:	46c0      	nop			; (mov r8, r8)
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	46c0      	nop			; (mov r8, r8)
 8006c80:	2000000c 	.word	0x2000000c

08006c84 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8006c84:	f3ef 8010 	mrs	r0, PRIMASK
 8006c88:	b672      	cpsid	i
 8006c8a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8006c8c:	46c0      	nop			; (mov r8, r8)
 8006c8e:	0018      	movs	r0, r3

08006c90 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8006c90:	f380 8810 	msr	PRIMASK, r0
 8006c94:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8006c96:	46c0      	nop			; (mov r8, r8)
	...

08006ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ca0:	f3ef 8009 	mrs	r0, PSP
 8006ca4:	4b0e      	ldr	r3, [pc, #56]	; (8006ce0 <pxCurrentTCBConst>)
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	3820      	subs	r0, #32
 8006caa:	6010      	str	r0, [r2, #0]
 8006cac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006cae:	4644      	mov	r4, r8
 8006cb0:	464d      	mov	r5, r9
 8006cb2:	4656      	mov	r6, sl
 8006cb4:	465f      	mov	r7, fp
 8006cb6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006cb8:	b508      	push	{r3, lr}
 8006cba:	b672      	cpsid	i
 8006cbc:	f7ff fe16 	bl	80068ec <vTaskSwitchContext>
 8006cc0:	b662      	cpsie	i
 8006cc2:	bc0c      	pop	{r2, r3}
 8006cc4:	6811      	ldr	r1, [r2, #0]
 8006cc6:	6808      	ldr	r0, [r1, #0]
 8006cc8:	3010      	adds	r0, #16
 8006cca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006ccc:	46a0      	mov	r8, r4
 8006cce:	46a9      	mov	r9, r5
 8006cd0:	46b2      	mov	sl, r6
 8006cd2:	46bb      	mov	fp, r7
 8006cd4:	f380 8809 	msr	PSP, r0
 8006cd8:	3820      	subs	r0, #32
 8006cda:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006cdc:	4718      	bx	r3
 8006cde:	46c0      	nop			; (mov r8, r8)

08006ce0 <pxCurrentTCBConst>:
 8006ce0:	2000029c 	.word	0x2000029c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8006ce4:	46c0      	nop			; (mov r8, r8)
 8006ce6:	46c0      	nop			; (mov r8, r8)

08006ce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8006cee:	f7ff ffc9 	bl	8006c84 <ulSetInterruptMaskFromISR>
 8006cf2:	0003      	movs	r3, r0
 8006cf4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006cf6:	f7ff fd45 	bl	8006784 <xTaskIncrementTick>
 8006cfa:	1e03      	subs	r3, r0, #0
 8006cfc:	d003      	beq.n	8006d06 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8006cfe:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <SysTick_Handler+0x30>)
 8006d00:	2280      	movs	r2, #128	; 0x80
 8006d02:	0552      	lsls	r2, r2, #21
 8006d04:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	0018      	movs	r0, r3
 8006d0a:	f7ff ffc1 	bl	8006c90 <vClearInterruptMaskFromISR>
}
 8006d0e:	46c0      	nop			; (mov r8, r8)
 8006d10:	46bd      	mov	sp, r7
 8006d12:	b002      	add	sp, #8
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	46c0      	nop			; (mov r8, r8)
 8006d18:	e000ed04 	.word	0xe000ed04

08006d1c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8006d20:	4b0b      	ldr	r3, [pc, #44]	; (8006d50 <prvSetupTimerInterrupt+0x34>)
 8006d22:	2200      	movs	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8006d26:	4b0b      	ldr	r3, [pc, #44]	; (8006d54 <prvSetupTimerInterrupt+0x38>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d2c:	4b0a      	ldr	r3, [pc, #40]	; (8006d58 <prvSetupTimerInterrupt+0x3c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	490a      	ldr	r1, [pc, #40]	; (8006d5c <prvSetupTimerInterrupt+0x40>)
 8006d32:	0018      	movs	r0, r3
 8006d34:	f7f9 f9f2 	bl	800011c <__udivsi3>
 8006d38:	0003      	movs	r3, r0
 8006d3a:	001a      	movs	r2, r3
 8006d3c:	4b08      	ldr	r3, [pc, #32]	; (8006d60 <prvSetupTimerInterrupt+0x44>)
 8006d3e:	3a01      	subs	r2, #1
 8006d40:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8006d42:	4b03      	ldr	r3, [pc, #12]	; (8006d50 <prvSetupTimerInterrupt+0x34>)
 8006d44:	2207      	movs	r2, #7
 8006d46:	601a      	str	r2, [r3, #0]
}
 8006d48:	46c0      	nop			; (mov r8, r8)
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	46c0      	nop			; (mov r8, r8)
 8006d50:	e000e010 	.word	0xe000e010
 8006d54:	e000e018 	.word	0xe000e018
 8006d58:	20000004 	.word	0x20000004
 8006d5c:	00002710 	.word	0x00002710
 8006d60:	e000e014 	.word	0xe000e014

08006d64 <abs>:
 8006d64:	17c3      	asrs	r3, r0, #31
 8006d66:	18c0      	adds	r0, r0, r3
 8006d68:	4058      	eors	r0, r3
 8006d6a:	4770      	bx	lr

08006d6c <__libc_init_array>:
 8006d6c:	b570      	push	{r4, r5, r6, lr}
 8006d6e:	2600      	movs	r6, #0
 8006d70:	4d0c      	ldr	r5, [pc, #48]	; (8006da4 <__libc_init_array+0x38>)
 8006d72:	4c0d      	ldr	r4, [pc, #52]	; (8006da8 <__libc_init_array+0x3c>)
 8006d74:	1b64      	subs	r4, r4, r5
 8006d76:	10a4      	asrs	r4, r4, #2
 8006d78:	42a6      	cmp	r6, r4
 8006d7a:	d109      	bne.n	8006d90 <__libc_init_array+0x24>
 8006d7c:	2600      	movs	r6, #0
 8006d7e:	f000 fe11 	bl	80079a4 <_init>
 8006d82:	4d0a      	ldr	r5, [pc, #40]	; (8006dac <__libc_init_array+0x40>)
 8006d84:	4c0a      	ldr	r4, [pc, #40]	; (8006db0 <__libc_init_array+0x44>)
 8006d86:	1b64      	subs	r4, r4, r5
 8006d88:	10a4      	asrs	r4, r4, #2
 8006d8a:	42a6      	cmp	r6, r4
 8006d8c:	d105      	bne.n	8006d9a <__libc_init_array+0x2e>
 8006d8e:	bd70      	pop	{r4, r5, r6, pc}
 8006d90:	00b3      	lsls	r3, r6, #2
 8006d92:	58eb      	ldr	r3, [r5, r3]
 8006d94:	4798      	blx	r3
 8006d96:	3601      	adds	r6, #1
 8006d98:	e7ee      	b.n	8006d78 <__libc_init_array+0xc>
 8006d9a:	00b3      	lsls	r3, r6, #2
 8006d9c:	58eb      	ldr	r3, [r5, r3]
 8006d9e:	4798      	blx	r3
 8006da0:	3601      	adds	r6, #1
 8006da2:	e7f2      	b.n	8006d8a <__libc_init_array+0x1e>
 8006da4:	08007f18 	.word	0x08007f18
 8006da8:	08007f18 	.word	0x08007f18
 8006dac:	08007f18 	.word	0x08007f18
 8006db0:	08007f1c 	.word	0x08007f1c

08006db4 <memset>:
 8006db4:	0003      	movs	r3, r0
 8006db6:	1812      	adds	r2, r2, r0
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d100      	bne.n	8006dbe <memset+0xa>
 8006dbc:	4770      	bx	lr
 8006dbe:	7019      	strb	r1, [r3, #0]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	e7f9      	b.n	8006db8 <memset+0x4>

08006dc4 <sinf>:
 8006dc4:	b507      	push	{r0, r1, r2, lr}
 8006dc6:	4a19      	ldr	r2, [pc, #100]	; (8006e2c <sinf+0x68>)
 8006dc8:	0043      	lsls	r3, r0, #1
 8006dca:	085b      	lsrs	r3, r3, #1
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	dc04      	bgt.n	8006dda <sinf+0x16>
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	f000 fcd6 	bl	8007784 <__kernel_sinf>
 8006dd8:	e005      	b.n	8006de6 <sinf+0x22>
 8006dda:	4a15      	ldr	r2, [pc, #84]	; (8006e30 <sinf+0x6c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	dd03      	ble.n	8006de8 <sinf+0x24>
 8006de0:	1c01      	adds	r1, r0, #0
 8006de2:	f7f9 ff61 	bl	8000ca8 <__aeabi_fsub>
 8006de6:	bd0e      	pop	{r1, r2, r3, pc}
 8006de8:	4669      	mov	r1, sp
 8006dea:	f000 f823 	bl	8006e34 <__ieee754_rem_pio2f>
 8006dee:	2303      	movs	r3, #3
 8006df0:	4018      	ands	r0, r3
 8006df2:	2801      	cmp	r0, #1
 8006df4:	d007      	beq.n	8006e06 <sinf+0x42>
 8006df6:	2802      	cmp	r0, #2
 8006df8:	d00a      	beq.n	8006e10 <sinf+0x4c>
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	d111      	bne.n	8006e22 <sinf+0x5e>
 8006dfe:	2201      	movs	r2, #1
 8006e00:	9901      	ldr	r1, [sp, #4]
 8006e02:	9800      	ldr	r0, [sp, #0]
 8006e04:	e7e6      	b.n	8006dd4 <sinf+0x10>
 8006e06:	9901      	ldr	r1, [sp, #4]
 8006e08:	9800      	ldr	r0, [sp, #0]
 8006e0a:	f000 f971 	bl	80070f0 <__kernel_cosf>
 8006e0e:	e7ea      	b.n	8006de6 <sinf+0x22>
 8006e10:	2201      	movs	r2, #1
 8006e12:	9901      	ldr	r1, [sp, #4]
 8006e14:	9800      	ldr	r0, [sp, #0]
 8006e16:	f000 fcb5 	bl	8007784 <__kernel_sinf>
 8006e1a:	2380      	movs	r3, #128	; 0x80
 8006e1c:	061b      	lsls	r3, r3, #24
 8006e1e:	18c0      	adds	r0, r0, r3
 8006e20:	e7e1      	b.n	8006de6 <sinf+0x22>
 8006e22:	9901      	ldr	r1, [sp, #4]
 8006e24:	9800      	ldr	r0, [sp, #0]
 8006e26:	f000 f963 	bl	80070f0 <__kernel_cosf>
 8006e2a:	e7f6      	b.n	8006e1a <sinf+0x56>
 8006e2c:	3f490fd8 	.word	0x3f490fd8
 8006e30:	7f7fffff 	.word	0x7f7fffff

08006e34 <__ieee754_rem_pio2f>:
 8006e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e36:	4ba0      	ldr	r3, [pc, #640]	; (80070b8 <__ieee754_rem_pio2f+0x284>)
 8006e38:	b08d      	sub	sp, #52	; 0x34
 8006e3a:	0045      	lsls	r5, r0, #1
 8006e3c:	000c      	movs	r4, r1
 8006e3e:	9007      	str	r0, [sp, #28]
 8006e40:	086d      	lsrs	r5, r5, #1
 8006e42:	429d      	cmp	r5, r3
 8006e44:	dc04      	bgt.n	8006e50 <__ieee754_rem_pio2f+0x1c>
 8006e46:	2300      	movs	r3, #0
 8006e48:	6008      	str	r0, [r1, #0]
 8006e4a:	604b      	str	r3, [r1, #4]
 8006e4c:	2700      	movs	r7, #0
 8006e4e:	e01a      	b.n	8006e86 <__ieee754_rem_pio2f+0x52>
 8006e50:	4b9a      	ldr	r3, [pc, #616]	; (80070bc <__ieee754_rem_pio2f+0x288>)
 8006e52:	429d      	cmp	r5, r3
 8006e54:	dc4a      	bgt.n	8006eec <__ieee754_rem_pio2f+0xb8>
 8006e56:	230f      	movs	r3, #15
 8006e58:	4e99      	ldr	r6, [pc, #612]	; (80070c0 <__ieee754_rem_pio2f+0x28c>)
 8006e5a:	439d      	bics	r5, r3
 8006e5c:	4999      	ldr	r1, [pc, #612]	; (80070c4 <__ieee754_rem_pio2f+0x290>)
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	dd22      	ble.n	8006ea8 <__ieee754_rem_pio2f+0x74>
 8006e62:	f7f9 ff21 	bl	8000ca8 <__aeabi_fsub>
 8006e66:	1c07      	adds	r7, r0, #0
 8006e68:	42b5      	cmp	r5, r6
 8006e6a:	d00f      	beq.n	8006e8c <__ieee754_rem_pio2f+0x58>
 8006e6c:	4996      	ldr	r1, [pc, #600]	; (80070c8 <__ieee754_rem_pio2f+0x294>)
 8006e6e:	f7f9 ff1b 	bl	8000ca8 <__aeabi_fsub>
 8006e72:	1c01      	adds	r1, r0, #0
 8006e74:	6020      	str	r0, [r4, #0]
 8006e76:	1c38      	adds	r0, r7, #0
 8006e78:	f7f9 ff16 	bl	8000ca8 <__aeabi_fsub>
 8006e7c:	4992      	ldr	r1, [pc, #584]	; (80070c8 <__ieee754_rem_pio2f+0x294>)
 8006e7e:	f7f9 ff13 	bl	8000ca8 <__aeabi_fsub>
 8006e82:	2701      	movs	r7, #1
 8006e84:	6060      	str	r0, [r4, #4]
 8006e86:	0038      	movs	r0, r7
 8006e88:	b00d      	add	sp, #52	; 0x34
 8006e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e8c:	498f      	ldr	r1, [pc, #572]	; (80070cc <__ieee754_rem_pio2f+0x298>)
 8006e8e:	f7f9 ff0b 	bl	8000ca8 <__aeabi_fsub>
 8006e92:	498f      	ldr	r1, [pc, #572]	; (80070d0 <__ieee754_rem_pio2f+0x29c>)
 8006e94:	1c05      	adds	r5, r0, #0
 8006e96:	f7f9 ff07 	bl	8000ca8 <__aeabi_fsub>
 8006e9a:	1c01      	adds	r1, r0, #0
 8006e9c:	6020      	str	r0, [r4, #0]
 8006e9e:	1c28      	adds	r0, r5, #0
 8006ea0:	f7f9 ff02 	bl	8000ca8 <__aeabi_fsub>
 8006ea4:	498a      	ldr	r1, [pc, #552]	; (80070d0 <__ieee754_rem_pio2f+0x29c>)
 8006ea6:	e7ea      	b.n	8006e7e <__ieee754_rem_pio2f+0x4a>
 8006ea8:	f7f9 fa5a 	bl	8000360 <__aeabi_fadd>
 8006eac:	1c07      	adds	r7, r0, #0
 8006eae:	42b5      	cmp	r5, r6
 8006eb0:	d00e      	beq.n	8006ed0 <__ieee754_rem_pio2f+0x9c>
 8006eb2:	4985      	ldr	r1, [pc, #532]	; (80070c8 <__ieee754_rem_pio2f+0x294>)
 8006eb4:	f7f9 fa54 	bl	8000360 <__aeabi_fadd>
 8006eb8:	1c01      	adds	r1, r0, #0
 8006eba:	6020      	str	r0, [r4, #0]
 8006ebc:	1c38      	adds	r0, r7, #0
 8006ebe:	f7f9 fef3 	bl	8000ca8 <__aeabi_fsub>
 8006ec2:	4981      	ldr	r1, [pc, #516]	; (80070c8 <__ieee754_rem_pio2f+0x294>)
 8006ec4:	f7f9 fa4c 	bl	8000360 <__aeabi_fadd>
 8006ec8:	2701      	movs	r7, #1
 8006eca:	6060      	str	r0, [r4, #4]
 8006ecc:	427f      	negs	r7, r7
 8006ece:	e7da      	b.n	8006e86 <__ieee754_rem_pio2f+0x52>
 8006ed0:	497e      	ldr	r1, [pc, #504]	; (80070cc <__ieee754_rem_pio2f+0x298>)
 8006ed2:	f7f9 fa45 	bl	8000360 <__aeabi_fadd>
 8006ed6:	497e      	ldr	r1, [pc, #504]	; (80070d0 <__ieee754_rem_pio2f+0x29c>)
 8006ed8:	1c05      	adds	r5, r0, #0
 8006eda:	f7f9 fa41 	bl	8000360 <__aeabi_fadd>
 8006ede:	1c01      	adds	r1, r0, #0
 8006ee0:	6020      	str	r0, [r4, #0]
 8006ee2:	1c28      	adds	r0, r5, #0
 8006ee4:	f7f9 fee0 	bl	8000ca8 <__aeabi_fsub>
 8006ee8:	4979      	ldr	r1, [pc, #484]	; (80070d0 <__ieee754_rem_pio2f+0x29c>)
 8006eea:	e7eb      	b.n	8006ec4 <__ieee754_rem_pio2f+0x90>
 8006eec:	4b79      	ldr	r3, [pc, #484]	; (80070d4 <__ieee754_rem_pio2f+0x2a0>)
 8006eee:	429d      	cmp	r5, r3
 8006ef0:	dd00      	ble.n	8006ef4 <__ieee754_rem_pio2f+0xc0>
 8006ef2:	e091      	b.n	8007018 <__ieee754_rem_pio2f+0x1e4>
 8006ef4:	f000 fcbc 	bl	8007870 <fabsf>
 8006ef8:	4977      	ldr	r1, [pc, #476]	; (80070d8 <__ieee754_rem_pio2f+0x2a4>)
 8006efa:	1c06      	adds	r6, r0, #0
 8006efc:	f7f9 fda2 	bl	8000a44 <__aeabi_fmul>
 8006f00:	21fc      	movs	r1, #252	; 0xfc
 8006f02:	0589      	lsls	r1, r1, #22
 8006f04:	f7f9 fa2c 	bl	8000360 <__aeabi_fadd>
 8006f08:	f7fa f892 	bl	8001030 <__aeabi_f2iz>
 8006f0c:	0007      	movs	r7, r0
 8006f0e:	f7fa f8af 	bl	8001070 <__aeabi_i2f>
 8006f12:	496c      	ldr	r1, [pc, #432]	; (80070c4 <__ieee754_rem_pio2f+0x290>)
 8006f14:	9004      	str	r0, [sp, #16]
 8006f16:	f7f9 fd95 	bl	8000a44 <__aeabi_fmul>
 8006f1a:	1c01      	adds	r1, r0, #0
 8006f1c:	1c30      	adds	r0, r6, #0
 8006f1e:	f7f9 fec3 	bl	8000ca8 <__aeabi_fsub>
 8006f22:	4969      	ldr	r1, [pc, #420]	; (80070c8 <__ieee754_rem_pio2f+0x294>)
 8006f24:	1c06      	adds	r6, r0, #0
 8006f26:	9804      	ldr	r0, [sp, #16]
 8006f28:	f7f9 fd8c 	bl	8000a44 <__aeabi_fmul>
 8006f2c:	9003      	str	r0, [sp, #12]
 8006f2e:	2f1f      	cmp	r7, #31
 8006f30:	dc0d      	bgt.n	8006f4e <__ieee754_rem_pio2f+0x11a>
 8006f32:	23ff      	movs	r3, #255	; 0xff
 8006f34:	002a      	movs	r2, r5
 8006f36:	4969      	ldr	r1, [pc, #420]	; (80070dc <__ieee754_rem_pio2f+0x2a8>)
 8006f38:	439a      	bics	r2, r3
 8006f3a:	1e7b      	subs	r3, r7, #1
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	585b      	ldr	r3, [r3, r1]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d004      	beq.n	8006f4e <__ieee754_rem_pio2f+0x11a>
 8006f44:	1c01      	adds	r1, r0, #0
 8006f46:	1c30      	adds	r0, r6, #0
 8006f48:	f7f9 feae 	bl	8000ca8 <__aeabi_fsub>
 8006f4c:	e00c      	b.n	8006f68 <__ieee754_rem_pio2f+0x134>
 8006f4e:	9903      	ldr	r1, [sp, #12]
 8006f50:	1c30      	adds	r0, r6, #0
 8006f52:	f7f9 fea9 	bl	8000ca8 <__aeabi_fsub>
 8006f56:	22ff      	movs	r2, #255	; 0xff
 8006f58:	15eb      	asrs	r3, r5, #23
 8006f5a:	9306      	str	r3, [sp, #24]
 8006f5c:	0dc3      	lsrs	r3, r0, #23
 8006f5e:	4013      	ands	r3, r2
 8006f60:	9a06      	ldr	r2, [sp, #24]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	2b08      	cmp	r3, #8
 8006f66:	dc01      	bgt.n	8006f6c <__ieee754_rem_pio2f+0x138>
 8006f68:	6020      	str	r0, [r4, #0]
 8006f6a:	e026      	b.n	8006fba <__ieee754_rem_pio2f+0x186>
 8006f6c:	4957      	ldr	r1, [pc, #348]	; (80070cc <__ieee754_rem_pio2f+0x298>)
 8006f6e:	9804      	ldr	r0, [sp, #16]
 8006f70:	f7f9 fd68 	bl	8000a44 <__aeabi_fmul>
 8006f74:	1c05      	adds	r5, r0, #0
 8006f76:	1c01      	adds	r1, r0, #0
 8006f78:	1c30      	adds	r0, r6, #0
 8006f7a:	f7f9 fe95 	bl	8000ca8 <__aeabi_fsub>
 8006f7e:	1c01      	adds	r1, r0, #0
 8006f80:	9005      	str	r0, [sp, #20]
 8006f82:	1c30      	adds	r0, r6, #0
 8006f84:	f7f9 fe90 	bl	8000ca8 <__aeabi_fsub>
 8006f88:	1c29      	adds	r1, r5, #0
 8006f8a:	f7f9 fe8d 	bl	8000ca8 <__aeabi_fsub>
 8006f8e:	4950      	ldr	r1, [pc, #320]	; (80070d0 <__ieee754_rem_pio2f+0x29c>)
 8006f90:	1c05      	adds	r5, r0, #0
 8006f92:	9804      	ldr	r0, [sp, #16]
 8006f94:	f7f9 fd56 	bl	8000a44 <__aeabi_fmul>
 8006f98:	1c29      	adds	r1, r5, #0
 8006f9a:	f7f9 fe85 	bl	8000ca8 <__aeabi_fsub>
 8006f9e:	9003      	str	r0, [sp, #12]
 8006fa0:	1c01      	adds	r1, r0, #0
 8006fa2:	9805      	ldr	r0, [sp, #20]
 8006fa4:	f7f9 fe80 	bl	8000ca8 <__aeabi_fsub>
 8006fa8:	23ff      	movs	r3, #255	; 0xff
 8006faa:	0dc5      	lsrs	r5, r0, #23
 8006fac:	401d      	ands	r5, r3
 8006fae:	9b06      	ldr	r3, [sp, #24]
 8006fb0:	1b5d      	subs	r5, r3, r5
 8006fb2:	2d19      	cmp	r5, #25
 8006fb4:	dc15      	bgt.n	8006fe2 <__ieee754_rem_pio2f+0x1ae>
 8006fb6:	9e05      	ldr	r6, [sp, #20]
 8006fb8:	6020      	str	r0, [r4, #0]
 8006fba:	6825      	ldr	r5, [r4, #0]
 8006fbc:	1c30      	adds	r0, r6, #0
 8006fbe:	1c29      	adds	r1, r5, #0
 8006fc0:	f7f9 fe72 	bl	8000ca8 <__aeabi_fsub>
 8006fc4:	9903      	ldr	r1, [sp, #12]
 8006fc6:	f7f9 fe6f 	bl	8000ca8 <__aeabi_fsub>
 8006fca:	9b07      	ldr	r3, [sp, #28]
 8006fcc:	6060      	str	r0, [r4, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	db00      	blt.n	8006fd4 <__ieee754_rem_pio2f+0x1a0>
 8006fd2:	e758      	b.n	8006e86 <__ieee754_rem_pio2f+0x52>
 8006fd4:	2380      	movs	r3, #128	; 0x80
 8006fd6:	061b      	lsls	r3, r3, #24
 8006fd8:	18ed      	adds	r5, r5, r3
 8006fda:	18c0      	adds	r0, r0, r3
 8006fdc:	6025      	str	r5, [r4, #0]
 8006fde:	6060      	str	r0, [r4, #4]
 8006fe0:	e774      	b.n	8006ecc <__ieee754_rem_pio2f+0x98>
 8006fe2:	493f      	ldr	r1, [pc, #252]	; (80070e0 <__ieee754_rem_pio2f+0x2ac>)
 8006fe4:	9804      	ldr	r0, [sp, #16]
 8006fe6:	f7f9 fd2d 	bl	8000a44 <__aeabi_fmul>
 8006fea:	1c05      	adds	r5, r0, #0
 8006fec:	1c01      	adds	r1, r0, #0
 8006fee:	9805      	ldr	r0, [sp, #20]
 8006ff0:	f7f9 fe5a 	bl	8000ca8 <__aeabi_fsub>
 8006ff4:	1c01      	adds	r1, r0, #0
 8006ff6:	1c06      	adds	r6, r0, #0
 8006ff8:	9805      	ldr	r0, [sp, #20]
 8006ffa:	f7f9 fe55 	bl	8000ca8 <__aeabi_fsub>
 8006ffe:	1c29      	adds	r1, r5, #0
 8007000:	f7f9 fe52 	bl	8000ca8 <__aeabi_fsub>
 8007004:	4937      	ldr	r1, [pc, #220]	; (80070e4 <__ieee754_rem_pio2f+0x2b0>)
 8007006:	1c05      	adds	r5, r0, #0
 8007008:	9804      	ldr	r0, [sp, #16]
 800700a:	f7f9 fd1b 	bl	8000a44 <__aeabi_fmul>
 800700e:	1c29      	adds	r1, r5, #0
 8007010:	f7f9 fe4a 	bl	8000ca8 <__aeabi_fsub>
 8007014:	9003      	str	r0, [sp, #12]
 8007016:	e795      	b.n	8006f44 <__ieee754_rem_pio2f+0x110>
 8007018:	4b33      	ldr	r3, [pc, #204]	; (80070e8 <__ieee754_rem_pio2f+0x2b4>)
 800701a:	429d      	cmp	r5, r3
 800701c:	dd05      	ble.n	800702a <__ieee754_rem_pio2f+0x1f6>
 800701e:	1c01      	adds	r1, r0, #0
 8007020:	f7f9 fe42 	bl	8000ca8 <__aeabi_fsub>
 8007024:	6060      	str	r0, [r4, #4]
 8007026:	6020      	str	r0, [r4, #0]
 8007028:	e710      	b.n	8006e4c <__ieee754_rem_pio2f+0x18>
 800702a:	15ee      	asrs	r6, r5, #23
 800702c:	3e86      	subs	r6, #134	; 0x86
 800702e:	05f3      	lsls	r3, r6, #23
 8007030:	1aed      	subs	r5, r5, r3
 8007032:	1c28      	adds	r0, r5, #0
 8007034:	f7f9 fffc 	bl	8001030 <__aeabi_f2iz>
 8007038:	f7fa f81a 	bl	8001070 <__aeabi_i2f>
 800703c:	1c01      	adds	r1, r0, #0
 800703e:	9009      	str	r0, [sp, #36]	; 0x24
 8007040:	1c28      	adds	r0, r5, #0
 8007042:	f7f9 fe31 	bl	8000ca8 <__aeabi_fsub>
 8007046:	2187      	movs	r1, #135	; 0x87
 8007048:	05c9      	lsls	r1, r1, #23
 800704a:	f7f9 fcfb 	bl	8000a44 <__aeabi_fmul>
 800704e:	1c07      	adds	r7, r0, #0
 8007050:	f7f9 ffee 	bl	8001030 <__aeabi_f2iz>
 8007054:	f7fa f80c 	bl	8001070 <__aeabi_i2f>
 8007058:	1c01      	adds	r1, r0, #0
 800705a:	900a      	str	r0, [sp, #40]	; 0x28
 800705c:	1c05      	adds	r5, r0, #0
 800705e:	1c38      	adds	r0, r7, #0
 8007060:	f7f9 fe22 	bl	8000ca8 <__aeabi_fsub>
 8007064:	2187      	movs	r1, #135	; 0x87
 8007066:	05c9      	lsls	r1, r1, #23
 8007068:	f7f9 fcec 	bl	8000a44 <__aeabi_fmul>
 800706c:	2100      	movs	r1, #0
 800706e:	900b      	str	r0, [sp, #44]	; 0x2c
 8007070:	f7f9 f92a 	bl	80002c8 <__aeabi_fcmpeq>
 8007074:	2303      	movs	r3, #3
 8007076:	2800      	cmp	r0, #0
 8007078:	d006      	beq.n	8007088 <__ieee754_rem_pio2f+0x254>
 800707a:	2100      	movs	r1, #0
 800707c:	1c28      	adds	r0, r5, #0
 800707e:	f7f9 f923 	bl	80002c8 <__aeabi_fcmpeq>
 8007082:	4243      	negs	r3, r0
 8007084:	4143      	adcs	r3, r0
 8007086:	3301      	adds	r3, #1
 8007088:	4a18      	ldr	r2, [pc, #96]	; (80070ec <__ieee754_rem_pio2f+0x2b8>)
 800708a:	0021      	movs	r1, r4
 800708c:	9201      	str	r2, [sp, #4]
 800708e:	2202      	movs	r2, #2
 8007090:	a809      	add	r0, sp, #36	; 0x24
 8007092:	9200      	str	r2, [sp, #0]
 8007094:	0032      	movs	r2, r6
 8007096:	f000 f8ad 	bl	80071f4 <__kernel_rem_pio2f>
 800709a:	9b07      	ldr	r3, [sp, #28]
 800709c:	0007      	movs	r7, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	db00      	blt.n	80070a4 <__ieee754_rem_pio2f+0x270>
 80070a2:	e6f0      	b.n	8006e86 <__ieee754_rem_pio2f+0x52>
 80070a4:	2280      	movs	r2, #128	; 0x80
 80070a6:	6823      	ldr	r3, [r4, #0]
 80070a8:	0612      	lsls	r2, r2, #24
 80070aa:	189b      	adds	r3, r3, r2
 80070ac:	6023      	str	r3, [r4, #0]
 80070ae:	6863      	ldr	r3, [r4, #4]
 80070b0:	189b      	adds	r3, r3, r2
 80070b2:	6063      	str	r3, [r4, #4]
 80070b4:	e70a      	b.n	8006ecc <__ieee754_rem_pio2f+0x98>
 80070b6:	46c0      	nop			; (mov r8, r8)
 80070b8:	3f490fd8 	.word	0x3f490fd8
 80070bc:	4016cbe3 	.word	0x4016cbe3
 80070c0:	3fc90fd0 	.word	0x3fc90fd0
 80070c4:	3fc90f80 	.word	0x3fc90f80
 80070c8:	37354443 	.word	0x37354443
 80070cc:	37354400 	.word	0x37354400
 80070d0:	2e85a308 	.word	0x2e85a308
 80070d4:	43490f80 	.word	0x43490f80
 80070d8:	3f22f984 	.word	0x3f22f984
 80070dc:	08007b48 	.word	0x08007b48
 80070e0:	2e85a300 	.word	0x2e85a300
 80070e4:	248d3132 	.word	0x248d3132
 80070e8:	7f7fffff 	.word	0x7f7fffff
 80070ec:	08007bc8 	.word	0x08007bc8

080070f0 <__kernel_cosf>:
 80070f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070f2:	4b36      	ldr	r3, [pc, #216]	; (80071cc <__kernel_cosf+0xdc>)
 80070f4:	0044      	lsls	r4, r0, #1
 80070f6:	1c06      	adds	r6, r0, #0
 80070f8:	9101      	str	r1, [sp, #4]
 80070fa:	0864      	lsrs	r4, r4, #1
 80070fc:	429c      	cmp	r4, r3
 80070fe:	dc03      	bgt.n	8007108 <__kernel_cosf+0x18>
 8007100:	f7f9 ff96 	bl	8001030 <__aeabi_f2iz>
 8007104:	2800      	cmp	r0, #0
 8007106:	d05d      	beq.n	80071c4 <__kernel_cosf+0xd4>
 8007108:	1c31      	adds	r1, r6, #0
 800710a:	1c30      	adds	r0, r6, #0
 800710c:	f7f9 fc9a 	bl	8000a44 <__aeabi_fmul>
 8007110:	21fc      	movs	r1, #252	; 0xfc
 8007112:	0589      	lsls	r1, r1, #22
 8007114:	1c05      	adds	r5, r0, #0
 8007116:	f7f9 fc95 	bl	8000a44 <__aeabi_fmul>
 800711a:	492d      	ldr	r1, [pc, #180]	; (80071d0 <__kernel_cosf+0xe0>)
 800711c:	1c07      	adds	r7, r0, #0
 800711e:	1c28      	adds	r0, r5, #0
 8007120:	f7f9 fc90 	bl	8000a44 <__aeabi_fmul>
 8007124:	492b      	ldr	r1, [pc, #172]	; (80071d4 <__kernel_cosf+0xe4>)
 8007126:	f7f9 f91b 	bl	8000360 <__aeabi_fadd>
 800712a:	1c29      	adds	r1, r5, #0
 800712c:	f7f9 fc8a 	bl	8000a44 <__aeabi_fmul>
 8007130:	4929      	ldr	r1, [pc, #164]	; (80071d8 <__kernel_cosf+0xe8>)
 8007132:	f7f9 fdb9 	bl	8000ca8 <__aeabi_fsub>
 8007136:	1c29      	adds	r1, r5, #0
 8007138:	f7f9 fc84 	bl	8000a44 <__aeabi_fmul>
 800713c:	4927      	ldr	r1, [pc, #156]	; (80071dc <__kernel_cosf+0xec>)
 800713e:	f7f9 f90f 	bl	8000360 <__aeabi_fadd>
 8007142:	1c29      	adds	r1, r5, #0
 8007144:	f7f9 fc7e 	bl	8000a44 <__aeabi_fmul>
 8007148:	4925      	ldr	r1, [pc, #148]	; (80071e0 <__kernel_cosf+0xf0>)
 800714a:	f7f9 fdad 	bl	8000ca8 <__aeabi_fsub>
 800714e:	1c29      	adds	r1, r5, #0
 8007150:	f7f9 fc78 	bl	8000a44 <__aeabi_fmul>
 8007154:	4923      	ldr	r1, [pc, #140]	; (80071e4 <__kernel_cosf+0xf4>)
 8007156:	f7f9 f903 	bl	8000360 <__aeabi_fadd>
 800715a:	1c29      	adds	r1, r5, #0
 800715c:	f7f9 fc72 	bl	8000a44 <__aeabi_fmul>
 8007160:	1c29      	adds	r1, r5, #0
 8007162:	f7f9 fc6f 	bl	8000a44 <__aeabi_fmul>
 8007166:	9901      	ldr	r1, [sp, #4]
 8007168:	1c05      	adds	r5, r0, #0
 800716a:	1c30      	adds	r0, r6, #0
 800716c:	f7f9 fc6a 	bl	8000a44 <__aeabi_fmul>
 8007170:	1c01      	adds	r1, r0, #0
 8007172:	1c28      	adds	r0, r5, #0
 8007174:	f7f9 fd98 	bl	8000ca8 <__aeabi_fsub>
 8007178:	4b1b      	ldr	r3, [pc, #108]	; (80071e8 <__kernel_cosf+0xf8>)
 800717a:	1c05      	adds	r5, r0, #0
 800717c:	429c      	cmp	r4, r3
 800717e:	dc09      	bgt.n	8007194 <__kernel_cosf+0xa4>
 8007180:	1c01      	adds	r1, r0, #0
 8007182:	1c38      	adds	r0, r7, #0
 8007184:	f7f9 fd90 	bl	8000ca8 <__aeabi_fsub>
 8007188:	1c01      	adds	r1, r0, #0
 800718a:	20fe      	movs	r0, #254	; 0xfe
 800718c:	0580      	lsls	r0, r0, #22
 800718e:	f7f9 fd8b 	bl	8000ca8 <__aeabi_fsub>
 8007192:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007194:	4b15      	ldr	r3, [pc, #84]	; (80071ec <__kernel_cosf+0xfc>)
 8007196:	429c      	cmp	r4, r3
 8007198:	dc12      	bgt.n	80071c0 <__kernel_cosf+0xd0>
 800719a:	23ff      	movs	r3, #255	; 0xff
 800719c:	061b      	lsls	r3, r3, #24
 800719e:	18e4      	adds	r4, r4, r3
 80071a0:	20fe      	movs	r0, #254	; 0xfe
 80071a2:	1c21      	adds	r1, r4, #0
 80071a4:	0580      	lsls	r0, r0, #22
 80071a6:	f7f9 fd7f 	bl	8000ca8 <__aeabi_fsub>
 80071aa:	1c21      	adds	r1, r4, #0
 80071ac:	1c06      	adds	r6, r0, #0
 80071ae:	1c38      	adds	r0, r7, #0
 80071b0:	f7f9 fd7a 	bl	8000ca8 <__aeabi_fsub>
 80071b4:	1c29      	adds	r1, r5, #0
 80071b6:	f7f9 fd77 	bl	8000ca8 <__aeabi_fsub>
 80071ba:	1c01      	adds	r1, r0, #0
 80071bc:	1c30      	adds	r0, r6, #0
 80071be:	e7e6      	b.n	800718e <__kernel_cosf+0x9e>
 80071c0:	4c0b      	ldr	r4, [pc, #44]	; (80071f0 <__kernel_cosf+0x100>)
 80071c2:	e7ed      	b.n	80071a0 <__kernel_cosf+0xb0>
 80071c4:	20fe      	movs	r0, #254	; 0xfe
 80071c6:	0580      	lsls	r0, r0, #22
 80071c8:	e7e3      	b.n	8007192 <__kernel_cosf+0xa2>
 80071ca:	46c0      	nop			; (mov r8, r8)
 80071cc:	31ffffff 	.word	0x31ffffff
 80071d0:	ad47d74e 	.word	0xad47d74e
 80071d4:	310f74f6 	.word	0x310f74f6
 80071d8:	3493f27c 	.word	0x3493f27c
 80071dc:	37d00d01 	.word	0x37d00d01
 80071e0:	3ab60b61 	.word	0x3ab60b61
 80071e4:	3d2aaaab 	.word	0x3d2aaaab
 80071e8:	3e999999 	.word	0x3e999999
 80071ec:	3f480000 	.word	0x3f480000
 80071f0:	3e900000 	.word	0x3e900000

080071f4 <__kernel_rem_pio2f>:
 80071f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071f6:	b0df      	sub	sp, #380	; 0x17c
 80071f8:	9009      	str	r0, [sp, #36]	; 0x24
 80071fa:	2007      	movs	r0, #7
 80071fc:	9308      	str	r3, [sp, #32]
 80071fe:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8007200:	9103      	str	r1, [sp, #12]
 8007202:	0099      	lsls	r1, r3, #2
 8007204:	4bd7      	ldr	r3, [pc, #860]	; (8007564 <__kernel_rem_pio2f+0x370>)
 8007206:	2400      	movs	r4, #0
 8007208:	58cb      	ldr	r3, [r1, r3]
 800720a:	1ed1      	subs	r1, r2, #3
 800720c:	9306      	str	r3, [sp, #24]
 800720e:	9b08      	ldr	r3, [sp, #32]
 8007210:	af22      	add	r7, sp, #136	; 0x88
 8007212:	3b01      	subs	r3, #1
 8007214:	9307      	str	r3, [sp, #28]
 8007216:	17cb      	asrs	r3, r1, #31
 8007218:	4003      	ands	r3, r0
 800721a:	185b      	adds	r3, r3, r1
 800721c:	10db      	asrs	r3, r3, #3
 800721e:	9304      	str	r3, [sp, #16]
 8007220:	43db      	mvns	r3, r3
 8007222:	9904      	ldr	r1, [sp, #16]
 8007224:	17db      	asrs	r3, r3, #31
 8007226:	4019      	ands	r1, r3
 8007228:	000b      	movs	r3, r1
 800722a:	3301      	adds	r3, #1
 800722c:	00db      	lsls	r3, r3, #3
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	9a07      	ldr	r2, [sp, #28]
 8007232:	9301      	str	r3, [sp, #4]
 8007234:	4694      	mov	ip, r2
 8007236:	9b06      	ldr	r3, [sp, #24]
 8007238:	1a8e      	subs	r6, r1, r2
 800723a:	4463      	add	r3, ip
 800723c:	9302      	str	r3, [sp, #8]
 800723e:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8007240:	00b5      	lsls	r5, r6, #2
 8007242:	9104      	str	r1, [sp, #16]
 8007244:	195d      	adds	r5, r3, r5
 8007246:	9b02      	ldr	r3, [sp, #8]
 8007248:	429c      	cmp	r4, r3
 800724a:	dd7f      	ble.n	800734c <__kernel_rem_pio2f+0x158>
 800724c:	2500      	movs	r5, #0
 800724e:	9b08      	ldr	r3, [sp, #32]
 8007250:	009c      	lsls	r4, r3, #2
 8007252:	ab22      	add	r3, sp, #136	; 0x88
 8007254:	191c      	adds	r4, r3, r4
 8007256:	9b06      	ldr	r3, [sp, #24]
 8007258:	429d      	cmp	r5, r3
 800725a:	dc00      	bgt.n	800725e <__kernel_rem_pio2f+0x6a>
 800725c:	e09a      	b.n	8007394 <__kernel_rem_pio2f+0x1a0>
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	aa0e      	add	r2, sp, #56	; 0x38
 8007262:	189b      	adds	r3, r3, r2
 8007264:	9f06      	ldr	r7, [sp, #24]
 8007266:	930c      	str	r3, [sp, #48]	; 0x30
 8007268:	003e      	movs	r6, r7
 800726a:	00bb      	lsls	r3, r7, #2
 800726c:	ad4a      	add	r5, sp, #296	; 0x128
 800726e:	aa0e      	add	r2, sp, #56	; 0x38
 8007270:	930d      	str	r3, [sp, #52]	; 0x34
 8007272:	595c      	ldr	r4, [r3, r5]
 8007274:	189b      	adds	r3, r3, r2
 8007276:	9302      	str	r3, [sp, #8]
 8007278:	950a      	str	r5, [sp, #40]	; 0x28
 800727a:	2e00      	cmp	r6, #0
 800727c:	dd00      	ble.n	8007280 <__kernel_rem_pio2f+0x8c>
 800727e:	e08c      	b.n	800739a <__kernel_rem_pio2f+0x1a6>
 8007280:	9901      	ldr	r1, [sp, #4]
 8007282:	1c20      	adds	r0, r4, #0
 8007284:	f000 fb36 	bl	80078f4 <scalbnf>
 8007288:	21f8      	movs	r1, #248	; 0xf8
 800728a:	0589      	lsls	r1, r1, #22
 800728c:	1c04      	adds	r4, r0, #0
 800728e:	f7f9 fbd9 	bl	8000a44 <__aeabi_fmul>
 8007292:	f000 faf1 	bl	8007878 <floorf>
 8007296:	2182      	movs	r1, #130	; 0x82
 8007298:	05c9      	lsls	r1, r1, #23
 800729a:	f7f9 fbd3 	bl	8000a44 <__aeabi_fmul>
 800729e:	1c01      	adds	r1, r0, #0
 80072a0:	1c20      	adds	r0, r4, #0
 80072a2:	f7f9 fd01 	bl	8000ca8 <__aeabi_fsub>
 80072a6:	1c04      	adds	r4, r0, #0
 80072a8:	f7f9 fec2 	bl	8001030 <__aeabi_f2iz>
 80072ac:	9005      	str	r0, [sp, #20]
 80072ae:	f7f9 fedf 	bl	8001070 <__aeabi_i2f>
 80072b2:	1c01      	adds	r1, r0, #0
 80072b4:	1c20      	adds	r0, r4, #0
 80072b6:	f7f9 fcf7 	bl	8000ca8 <__aeabi_fsub>
 80072ba:	9b01      	ldr	r3, [sp, #4]
 80072bc:	1c04      	adds	r4, r0, #0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	dc00      	bgt.n	80072c4 <__kernel_rem_pio2f+0xd0>
 80072c2:	e08d      	b.n	80073e0 <__kernel_rem_pio2f+0x1ec>
 80072c4:	2108      	movs	r1, #8
 80072c6:	1e7b      	subs	r3, r7, #1
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	aa0e      	add	r2, sp, #56	; 0x38
 80072cc:	589a      	ldr	r2, [r3, r2]
 80072ce:	9801      	ldr	r0, [sp, #4]
 80072d0:	9d05      	ldr	r5, [sp, #20]
 80072d2:	1a09      	subs	r1, r1, r0
 80072d4:	0010      	movs	r0, r2
 80072d6:	4108      	asrs	r0, r1
 80072d8:	182d      	adds	r5, r5, r0
 80072da:	4088      	lsls	r0, r1
 80072dc:	1a10      	subs	r0, r2, r0
 80072de:	aa0e      	add	r2, sp, #56	; 0x38
 80072e0:	5098      	str	r0, [r3, r2]
 80072e2:	2307      	movs	r3, #7
 80072e4:	9a01      	ldr	r2, [sp, #4]
 80072e6:	9505      	str	r5, [sp, #20]
 80072e8:	1a9b      	subs	r3, r3, r2
 80072ea:	4118      	asrs	r0, r3
 80072ec:	9002      	str	r0, [sp, #8]
 80072ee:	9b02      	ldr	r3, [sp, #8]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	dc00      	bgt.n	80072f6 <__kernel_rem_pio2f+0x102>
 80072f4:	e085      	b.n	8007402 <__kernel_rem_pio2f+0x20e>
 80072f6:	9b05      	ldr	r3, [sp, #20]
 80072f8:	2200      	movs	r2, #0
 80072fa:	3301      	adds	r3, #1
 80072fc:	9305      	str	r3, [sp, #20]
 80072fe:	2301      	movs	r3, #1
 8007300:	2680      	movs	r6, #128	; 0x80
 8007302:	0015      	movs	r5, r2
 8007304:	469c      	mov	ip, r3
 8007306:	0076      	lsls	r6, r6, #1
 8007308:	4297      	cmp	r7, r2
 800730a:	dd00      	ble.n	800730e <__kernel_rem_pio2f+0x11a>
 800730c:	e0b6      	b.n	800747c <__kernel_rem_pio2f+0x288>
 800730e:	9b01      	ldr	r3, [sp, #4]
 8007310:	2b00      	cmp	r3, #0
 8007312:	dd05      	ble.n	8007320 <__kernel_rem_pio2f+0x12c>
 8007314:	2b01      	cmp	r3, #1
 8007316:	d100      	bne.n	800731a <__kernel_rem_pio2f+0x126>
 8007318:	e0c4      	b.n	80074a4 <__kernel_rem_pio2f+0x2b0>
 800731a:	2b02      	cmp	r3, #2
 800731c:	d100      	bne.n	8007320 <__kernel_rem_pio2f+0x12c>
 800731e:	e0cc      	b.n	80074ba <__kernel_rem_pio2f+0x2c6>
 8007320:	9b02      	ldr	r3, [sp, #8]
 8007322:	2b02      	cmp	r3, #2
 8007324:	d16d      	bne.n	8007402 <__kernel_rem_pio2f+0x20e>
 8007326:	20fe      	movs	r0, #254	; 0xfe
 8007328:	1c21      	adds	r1, r4, #0
 800732a:	0580      	lsls	r0, r0, #22
 800732c:	f7f9 fcbc 	bl	8000ca8 <__aeabi_fsub>
 8007330:	1c04      	adds	r4, r0, #0
 8007332:	2d00      	cmp	r5, #0
 8007334:	d065      	beq.n	8007402 <__kernel_rem_pio2f+0x20e>
 8007336:	20fe      	movs	r0, #254	; 0xfe
 8007338:	9901      	ldr	r1, [sp, #4]
 800733a:	0580      	lsls	r0, r0, #22
 800733c:	f000 fada 	bl	80078f4 <scalbnf>
 8007340:	1c01      	adds	r1, r0, #0
 8007342:	1c20      	adds	r0, r4, #0
 8007344:	f7f9 fcb0 	bl	8000ca8 <__aeabi_fsub>
 8007348:	1c04      	adds	r4, r0, #0
 800734a:	e05a      	b.n	8007402 <__kernel_rem_pio2f+0x20e>
 800734c:	2000      	movs	r0, #0
 800734e:	42e6      	cmn	r6, r4
 8007350:	d403      	bmi.n	800735a <__kernel_rem_pio2f+0x166>
 8007352:	00a3      	lsls	r3, r4, #2
 8007354:	58e8      	ldr	r0, [r5, r3]
 8007356:	f7f9 fe8b 	bl	8001070 <__aeabi_i2f>
 800735a:	00a3      	lsls	r3, r4, #2
 800735c:	51d8      	str	r0, [r3, r7]
 800735e:	3401      	adds	r4, #1
 8007360:	e771      	b.n	8007246 <__kernel_rem_pio2f+0x52>
 8007362:	00b2      	lsls	r2, r6, #2
 8007364:	1aa3      	subs	r3, r4, r2
 8007366:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007368:	3b04      	subs	r3, #4
 800736a:	5889      	ldr	r1, [r1, r2]
 800736c:	6818      	ldr	r0, [r3, #0]
 800736e:	f7f9 fb69 	bl	8000a44 <__aeabi_fmul>
 8007372:	1c01      	adds	r1, r0, #0
 8007374:	1c38      	adds	r0, r7, #0
 8007376:	f7f8 fff3 	bl	8000360 <__aeabi_fadd>
 800737a:	3601      	adds	r6, #1
 800737c:	1c07      	adds	r7, r0, #0
 800737e:	9b07      	ldr	r3, [sp, #28]
 8007380:	429e      	cmp	r6, r3
 8007382:	ddee      	ble.n	8007362 <__kernel_rem_pio2f+0x16e>
 8007384:	21f0      	movs	r1, #240	; 0xf0
 8007386:	aa0e      	add	r2, sp, #56	; 0x38
 8007388:	00ab      	lsls	r3, r5, #2
 800738a:	1852      	adds	r2, r2, r1
 800738c:	50d7      	str	r7, [r2, r3]
 800738e:	3501      	adds	r5, #1
 8007390:	3404      	adds	r4, #4
 8007392:	e760      	b.n	8007256 <__kernel_rem_pio2f+0x62>
 8007394:	2700      	movs	r7, #0
 8007396:	2600      	movs	r6, #0
 8007398:	e7f1      	b.n	800737e <__kernel_rem_pio2f+0x18a>
 800739a:	21ee      	movs	r1, #238	; 0xee
 800739c:	1c20      	adds	r0, r4, #0
 800739e:	0589      	lsls	r1, r1, #22
 80073a0:	f7f9 fb50 	bl	8000a44 <__aeabi_fmul>
 80073a4:	f7f9 fe44 	bl	8001030 <__aeabi_f2iz>
 80073a8:	f7f9 fe62 	bl	8001070 <__aeabi_i2f>
 80073ac:	2187      	movs	r1, #135	; 0x87
 80073ae:	00b3      	lsls	r3, r6, #2
 80073b0:	425b      	negs	r3, r3
 80073b2:	05c9      	lsls	r1, r1, #23
 80073b4:	9305      	str	r3, [sp, #20]
 80073b6:	1c05      	adds	r5, r0, #0
 80073b8:	f7f9 fb44 	bl	8000a44 <__aeabi_fmul>
 80073bc:	1c01      	adds	r1, r0, #0
 80073be:	1c20      	adds	r0, r4, #0
 80073c0:	f7f9 fc72 	bl	8000ca8 <__aeabi_fsub>
 80073c4:	f7f9 fe34 	bl	8001030 <__aeabi_f2iz>
 80073c8:	9b02      	ldr	r3, [sp, #8]
 80073ca:	9a05      	ldr	r2, [sp, #20]
 80073cc:	3e01      	subs	r6, #1
 80073ce:	5098      	str	r0, [r3, r2]
 80073d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073d2:	00b3      	lsls	r3, r6, #2
 80073d4:	5899      	ldr	r1, [r3, r2]
 80073d6:	1c28      	adds	r0, r5, #0
 80073d8:	f7f8 ffc2 	bl	8000360 <__aeabi_fadd>
 80073dc:	1c04      	adds	r4, r0, #0
 80073de:	e74c      	b.n	800727a <__kernel_rem_pio2f+0x86>
 80073e0:	9b01      	ldr	r3, [sp, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d106      	bne.n	80073f4 <__kernel_rem_pio2f+0x200>
 80073e6:	1e7b      	subs	r3, r7, #1
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	aa0e      	add	r2, sp, #56	; 0x38
 80073ec:	5898      	ldr	r0, [r3, r2]
 80073ee:	1203      	asrs	r3, r0, #8
 80073f0:	9302      	str	r3, [sp, #8]
 80073f2:	e77c      	b.n	80072ee <__kernel_rem_pio2f+0xfa>
 80073f4:	21fc      	movs	r1, #252	; 0xfc
 80073f6:	0589      	lsls	r1, r1, #22
 80073f8:	f7f8 ff8a 	bl	8000310 <__aeabi_fcmpge>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	d13a      	bne.n	8007476 <__kernel_rem_pio2f+0x282>
 8007400:	9002      	str	r0, [sp, #8]
 8007402:	2100      	movs	r1, #0
 8007404:	1c20      	adds	r0, r4, #0
 8007406:	f7f8 ff5f 	bl	80002c8 <__aeabi_fcmpeq>
 800740a:	2800      	cmp	r0, #0
 800740c:	d100      	bne.n	8007410 <__kernel_rem_pio2f+0x21c>
 800740e:	e0ab      	b.n	8007568 <__kernel_rem_pio2f+0x374>
 8007410:	003b      	movs	r3, r7
 8007412:	2200      	movs	r2, #0
 8007414:	1e79      	subs	r1, r7, #1
 8007416:	9806      	ldr	r0, [sp, #24]
 8007418:	3b01      	subs	r3, #1
 800741a:	4298      	cmp	r0, r3
 800741c:	dd54      	ble.n	80074c8 <__kernel_rem_pio2f+0x2d4>
 800741e:	2a00      	cmp	r2, #0
 8007420:	d100      	bne.n	8007424 <__kernel_rem_pio2f+0x230>
 8007422:	e089      	b.n	8007538 <__kernel_rem_pio2f+0x344>
 8007424:	000f      	movs	r7, r1
 8007426:	9b01      	ldr	r3, [sp, #4]
 8007428:	3b08      	subs	r3, #8
 800742a:	9301      	str	r3, [sp, #4]
 800742c:	00bb      	lsls	r3, r7, #2
 800742e:	aa0e      	add	r2, sp, #56	; 0x38
 8007430:	589b      	ldr	r3, [r3, r2]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d100      	bne.n	8007438 <__kernel_rem_pio2f+0x244>
 8007436:	e090      	b.n	800755a <__kernel_rem_pio2f+0x366>
 8007438:	20fe      	movs	r0, #254	; 0xfe
 800743a:	9901      	ldr	r1, [sp, #4]
 800743c:	0580      	lsls	r0, r0, #22
 800743e:	f000 fa59 	bl	80078f4 <scalbnf>
 8007442:	00bb      	lsls	r3, r7, #2
 8007444:	001d      	movs	r5, r3
 8007446:	003e      	movs	r6, r7
 8007448:	1c04      	adds	r4, r0, #0
 800744a:	9301      	str	r3, [sp, #4]
 800744c:	2e00      	cmp	r6, #0
 800744e:	db00      	blt.n	8007452 <__kernel_rem_pio2f+0x25e>
 8007450:	e0bf      	b.n	80075d2 <__kernel_rem_pio2f+0x3de>
 8007452:	2500      	movs	r5, #0
 8007454:	9a01      	ldr	r2, [sp, #4]
 8007456:	ab4a      	add	r3, sp, #296	; 0x128
 8007458:	189c      	adds	r4, r3, r2
 800745a:	1b7b      	subs	r3, r7, r5
 800745c:	d400      	bmi.n	8007460 <__kernel_rem_pio2f+0x26c>
 800745e:	e0e6      	b.n	800762e <__kernel_rem_pio2f+0x43a>
 8007460:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8007462:	2b03      	cmp	r3, #3
 8007464:	d900      	bls.n	8007468 <__kernel_rem_pio2f+0x274>
 8007466:	e0f5      	b.n	8007654 <__kernel_rem_pio2f+0x460>
 8007468:	0018      	movs	r0, r3
 800746a:	f7f8 fe4d 	bl	8000108 <__gnu_thumb1_case_uhi>
 800746e:	00f9      	.short	0x00f9
 8007470:	011d011d 	.word	0x011d011d
 8007474:	015b      	.short	0x015b
 8007476:	2302      	movs	r3, #2
 8007478:	9302      	str	r3, [sp, #8]
 800747a:	e73c      	b.n	80072f6 <__kernel_rem_pio2f+0x102>
 800747c:	0091      	lsls	r1, r2, #2
 800747e:	ab0e      	add	r3, sp, #56	; 0x38
 8007480:	58cb      	ldr	r3, [r1, r3]
 8007482:	2d00      	cmp	r5, #0
 8007484:	d108      	bne.n	8007498 <__kernel_rem_pio2f+0x2a4>
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <__kernel_rem_pio2f+0x29e>
 800748a:	1af3      	subs	r3, r6, r3
 800748c:	ad0e      	add	r5, sp, #56	; 0x38
 800748e:	514b      	str	r3, [r1, r5]
 8007490:	4663      	mov	r3, ip
 8007492:	3201      	adds	r2, #1
 8007494:	001d      	movs	r5, r3
 8007496:	e737      	b.n	8007308 <__kernel_rem_pio2f+0x114>
 8007498:	20ff      	movs	r0, #255	; 0xff
 800749a:	1ac3      	subs	r3, r0, r3
 800749c:	a80e      	add	r0, sp, #56	; 0x38
 800749e:	500b      	str	r3, [r1, r0]
 80074a0:	002b      	movs	r3, r5
 80074a2:	e7f6      	b.n	8007492 <__kernel_rem_pio2f+0x29e>
 80074a4:	1e7b      	subs	r3, r7, #1
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	aa0e      	add	r2, sp, #56	; 0x38
 80074aa:	589a      	ldr	r2, [r3, r2]
 80074ac:	920a      	str	r2, [sp, #40]	; 0x28
 80074ae:	227f      	movs	r2, #127	; 0x7f
 80074b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80074b2:	400a      	ands	r2, r1
 80074b4:	a90e      	add	r1, sp, #56	; 0x38
 80074b6:	505a      	str	r2, [r3, r1]
 80074b8:	e732      	b.n	8007320 <__kernel_rem_pio2f+0x12c>
 80074ba:	1e7b      	subs	r3, r7, #1
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	aa0e      	add	r2, sp, #56	; 0x38
 80074c0:	589a      	ldr	r2, [r3, r2]
 80074c2:	920a      	str	r2, [sp, #40]	; 0x28
 80074c4:	223f      	movs	r2, #63	; 0x3f
 80074c6:	e7f3      	b.n	80074b0 <__kernel_rem_pio2f+0x2bc>
 80074c8:	0098      	lsls	r0, r3, #2
 80074ca:	ac0e      	add	r4, sp, #56	; 0x38
 80074cc:	5900      	ldr	r0, [r0, r4]
 80074ce:	4302      	orrs	r2, r0
 80074d0:	e7a1      	b.n	8007416 <__kernel_rem_pio2f+0x222>
 80074d2:	3301      	adds	r3, #1
 80074d4:	009a      	lsls	r2, r3, #2
 80074d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80074d8:	4252      	negs	r2, r2
 80074da:	588a      	ldr	r2, [r1, r2]
 80074dc:	2a00      	cmp	r2, #0
 80074de:	d0f8      	beq.n	80074d2 <__kernel_rem_pio2f+0x2de>
 80074e0:	2400      	movs	r4, #0
 80074e2:	1c7a      	adds	r2, r7, #1
 80074e4:	9202      	str	r2, [sp, #8]
 80074e6:	9a04      	ldr	r2, [sp, #16]
 80074e8:	a922      	add	r1, sp, #136	; 0x88
 80074ea:	19d2      	adds	r2, r2, r7
 80074ec:	0092      	lsls	r2, r2, #2
 80074ee:	920a      	str	r2, [sp, #40]	; 0x28
 80074f0:	9a08      	ldr	r2, [sp, #32]
 80074f2:	18ba      	adds	r2, r7, r2
 80074f4:	0092      	lsls	r2, r2, #2
 80074f6:	188a      	adds	r2, r1, r2
 80074f8:	9205      	str	r2, [sp, #20]
 80074fa:	18ff      	adds	r7, r7, r3
 80074fc:	9b02      	ldr	r3, [sp, #8]
 80074fe:	429f      	cmp	r7, r3
 8007500:	da00      	bge.n	8007504 <__kernel_rem_pio2f+0x310>
 8007502:	e6b1      	b.n	8007268 <__kernel_rem_pio2f+0x74>
 8007504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007506:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8007508:	18e3      	adds	r3, r4, r3
 800750a:	18d3      	adds	r3, r2, r3
 800750c:	6858      	ldr	r0, [r3, #4]
 800750e:	f7f9 fdaf 	bl	8001070 <__aeabi_i2f>
 8007512:	2500      	movs	r5, #0
 8007514:	2600      	movs	r6, #0
 8007516:	9b05      	ldr	r3, [sp, #20]
 8007518:	5118      	str	r0, [r3, r4]
 800751a:	191b      	adds	r3, r3, r4
 800751c:	930b      	str	r3, [sp, #44]	; 0x2c
 800751e:	9b07      	ldr	r3, [sp, #28]
 8007520:	429d      	cmp	r5, r3
 8007522:	dd0b      	ble.n	800753c <__kernel_rem_pio2f+0x348>
 8007524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007526:	aa4a      	add	r2, sp, #296	; 0x128
 8007528:	18e3      	adds	r3, r4, r3
 800752a:	18d3      	adds	r3, r2, r3
 800752c:	605e      	str	r6, [r3, #4]
 800752e:	9b02      	ldr	r3, [sp, #8]
 8007530:	3404      	adds	r4, #4
 8007532:	3301      	adds	r3, #1
 8007534:	9302      	str	r3, [sp, #8]
 8007536:	e7e1      	b.n	80074fc <__kernel_rem_pio2f+0x308>
 8007538:	2301      	movs	r3, #1
 800753a:	e7cb      	b.n	80074d4 <__kernel_rem_pio2f+0x2e0>
 800753c:	00ab      	lsls	r3, r5, #2
 800753e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007540:	425a      	negs	r2, r3
 8007542:	5889      	ldr	r1, [r1, r2]
 8007544:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007546:	3501      	adds	r5, #1
 8007548:	58d0      	ldr	r0, [r2, r3]
 800754a:	f7f9 fa7b 	bl	8000a44 <__aeabi_fmul>
 800754e:	1c01      	adds	r1, r0, #0
 8007550:	1c30      	adds	r0, r6, #0
 8007552:	f7f8 ff05 	bl	8000360 <__aeabi_fadd>
 8007556:	1c06      	adds	r6, r0, #0
 8007558:	e7e1      	b.n	800751e <__kernel_rem_pio2f+0x32a>
 800755a:	9b01      	ldr	r3, [sp, #4]
 800755c:	3f01      	subs	r7, #1
 800755e:	3b08      	subs	r3, #8
 8007560:	9301      	str	r3, [sp, #4]
 8007562:	e763      	b.n	800742c <__kernel_rem_pio2f+0x238>
 8007564:	08007f0c 	.word	0x08007f0c
 8007568:	9b01      	ldr	r3, [sp, #4]
 800756a:	1c20      	adds	r0, r4, #0
 800756c:	4259      	negs	r1, r3
 800756e:	f000 f9c1 	bl	80078f4 <scalbnf>
 8007572:	2187      	movs	r1, #135	; 0x87
 8007574:	05c9      	lsls	r1, r1, #23
 8007576:	1c04      	adds	r4, r0, #0
 8007578:	f7f8 feca 	bl	8000310 <__aeabi_fcmpge>
 800757c:	2800      	cmp	r0, #0
 800757e:	d021      	beq.n	80075c4 <__kernel_rem_pio2f+0x3d0>
 8007580:	21ee      	movs	r1, #238	; 0xee
 8007582:	1c20      	adds	r0, r4, #0
 8007584:	0589      	lsls	r1, r1, #22
 8007586:	f7f9 fa5d 	bl	8000a44 <__aeabi_fmul>
 800758a:	f7f9 fd51 	bl	8001030 <__aeabi_f2iz>
 800758e:	f7f9 fd6f 	bl	8001070 <__aeabi_i2f>
 8007592:	2187      	movs	r1, #135	; 0x87
 8007594:	05c9      	lsls	r1, r1, #23
 8007596:	1c05      	adds	r5, r0, #0
 8007598:	f7f9 fa54 	bl	8000a44 <__aeabi_fmul>
 800759c:	1c01      	adds	r1, r0, #0
 800759e:	1c20      	adds	r0, r4, #0
 80075a0:	f7f9 fb82 	bl	8000ca8 <__aeabi_fsub>
 80075a4:	f7f9 fd44 	bl	8001030 <__aeabi_f2iz>
 80075a8:	00be      	lsls	r6, r7, #2
 80075aa:	ab0e      	add	r3, sp, #56	; 0x38
 80075ac:	50f0      	str	r0, [r6, r3]
 80075ae:	9b01      	ldr	r3, [sp, #4]
 80075b0:	1c28      	adds	r0, r5, #0
 80075b2:	3308      	adds	r3, #8
 80075b4:	9301      	str	r3, [sp, #4]
 80075b6:	f7f9 fd3b 	bl	8001030 <__aeabi_f2iz>
 80075ba:	3701      	adds	r7, #1
 80075bc:	00bc      	lsls	r4, r7, #2
 80075be:	ab0e      	add	r3, sp, #56	; 0x38
 80075c0:	50e0      	str	r0, [r4, r3]
 80075c2:	e739      	b.n	8007438 <__kernel_rem_pio2f+0x244>
 80075c4:	1c20      	adds	r0, r4, #0
 80075c6:	f7f9 fd33 	bl	8001030 <__aeabi_f2iz>
 80075ca:	00bd      	lsls	r5, r7, #2
 80075cc:	ab0e      	add	r3, sp, #56	; 0x38
 80075ce:	50e8      	str	r0, [r5, r3]
 80075d0:	e732      	b.n	8007438 <__kernel_rem_pio2f+0x244>
 80075d2:	ab0e      	add	r3, sp, #56	; 0x38
 80075d4:	58e8      	ldr	r0, [r5, r3]
 80075d6:	f7f9 fd4b 	bl	8001070 <__aeabi_i2f>
 80075da:	1c21      	adds	r1, r4, #0
 80075dc:	f7f9 fa32 	bl	8000a44 <__aeabi_fmul>
 80075e0:	22f0      	movs	r2, #240	; 0xf0
 80075e2:	21ee      	movs	r1, #238	; 0xee
 80075e4:	ab0e      	add	r3, sp, #56	; 0x38
 80075e6:	189b      	adds	r3, r3, r2
 80075e8:	5158      	str	r0, [r3, r5]
 80075ea:	0589      	lsls	r1, r1, #22
 80075ec:	1c20      	adds	r0, r4, #0
 80075ee:	f7f9 fa29 	bl	8000a44 <__aeabi_fmul>
 80075f2:	3e01      	subs	r6, #1
 80075f4:	1c04      	adds	r4, r0, #0
 80075f6:	3d04      	subs	r5, #4
 80075f8:	e728      	b.n	800744c <__kernel_rem_pio2f+0x258>
 80075fa:	4a61      	ldr	r2, [pc, #388]	; (8007780 <__kernel_rem_pio2f+0x58c>)
 80075fc:	00b3      	lsls	r3, r6, #2
 80075fe:	58e1      	ldr	r1, [r4, r3]
 8007600:	5898      	ldr	r0, [r3, r2]
 8007602:	f7f9 fa1f 	bl	8000a44 <__aeabi_fmul>
 8007606:	1c01      	adds	r1, r0, #0
 8007608:	9804      	ldr	r0, [sp, #16]
 800760a:	f7f8 fea9 	bl	8000360 <__aeabi_fadd>
 800760e:	3601      	adds	r6, #1
 8007610:	9004      	str	r0, [sp, #16]
 8007612:	9b06      	ldr	r3, [sp, #24]
 8007614:	429e      	cmp	r6, r3
 8007616:	dc01      	bgt.n	800761c <__kernel_rem_pio2f+0x428>
 8007618:	42b5      	cmp	r5, r6
 800761a:	daee      	bge.n	80075fa <__kernel_rem_pio2f+0x406>
 800761c:	21a0      	movs	r1, #160	; 0xa0
 800761e:	aa0e      	add	r2, sp, #56	; 0x38
 8007620:	1852      	adds	r2, r2, r1
 8007622:	9904      	ldr	r1, [sp, #16]
 8007624:	00ab      	lsls	r3, r5, #2
 8007626:	50d1      	str	r1, [r2, r3]
 8007628:	3501      	adds	r5, #1
 800762a:	3c04      	subs	r4, #4
 800762c:	e715      	b.n	800745a <__kernel_rem_pio2f+0x266>
 800762e:	2300      	movs	r3, #0
 8007630:	2600      	movs	r6, #0
 8007632:	9304      	str	r3, [sp, #16]
 8007634:	e7ed      	b.n	8007612 <__kernel_rem_pio2f+0x41e>
 8007636:	00bb      	lsls	r3, r7, #2
 8007638:	5919      	ldr	r1, [r3, r4]
 800763a:	f7f8 fe91 	bl	8000360 <__aeabi_fadd>
 800763e:	3f01      	subs	r7, #1
 8007640:	2f00      	cmp	r7, #0
 8007642:	daf8      	bge.n	8007636 <__kernel_rem_pio2f+0x442>
 8007644:	9b02      	ldr	r3, [sp, #8]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d002      	beq.n	8007650 <__kernel_rem_pio2f+0x45c>
 800764a:	2380      	movs	r3, #128	; 0x80
 800764c:	061b      	lsls	r3, r3, #24
 800764e:	18c0      	adds	r0, r0, r3
 8007650:	9b03      	ldr	r3, [sp, #12]
 8007652:	6018      	str	r0, [r3, #0]
 8007654:	2007      	movs	r0, #7
 8007656:	9b05      	ldr	r3, [sp, #20]
 8007658:	4003      	ands	r3, r0
 800765a:	0018      	movs	r0, r3
 800765c:	b05f      	add	sp, #380	; 0x17c
 800765e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007660:	2000      	movs	r0, #0
 8007662:	ac36      	add	r4, sp, #216	; 0xd8
 8007664:	e7ec      	b.n	8007640 <__kernel_rem_pio2f+0x44c>
 8007666:	00a3      	lsls	r3, r4, #2
 8007668:	5959      	ldr	r1, [r3, r5]
 800766a:	f7f8 fe79 	bl	8000360 <__aeabi_fadd>
 800766e:	3c01      	subs	r4, #1
 8007670:	2c00      	cmp	r4, #0
 8007672:	daf8      	bge.n	8007666 <__kernel_rem_pio2f+0x472>
 8007674:	9a02      	ldr	r2, [sp, #8]
 8007676:	1c03      	adds	r3, r0, #0
 8007678:	2a00      	cmp	r2, #0
 800767a:	d002      	beq.n	8007682 <__kernel_rem_pio2f+0x48e>
 800767c:	2380      	movs	r3, #128	; 0x80
 800767e:	061b      	lsls	r3, r3, #24
 8007680:	18c3      	adds	r3, r0, r3
 8007682:	9a03      	ldr	r2, [sp, #12]
 8007684:	1c01      	adds	r1, r0, #0
 8007686:	6013      	str	r3, [r2, #0]
 8007688:	9836      	ldr	r0, [sp, #216]	; 0xd8
 800768a:	f7f9 fb0d 	bl	8000ca8 <__aeabi_fsub>
 800768e:	2401      	movs	r4, #1
 8007690:	ad36      	add	r5, sp, #216	; 0xd8
 8007692:	42a7      	cmp	r7, r4
 8007694:	da0c      	bge.n	80076b0 <__kernel_rem_pio2f+0x4bc>
 8007696:	9b02      	ldr	r3, [sp, #8]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d002      	beq.n	80076a2 <__kernel_rem_pio2f+0x4ae>
 800769c:	2380      	movs	r3, #128	; 0x80
 800769e:	061b      	lsls	r3, r3, #24
 80076a0:	18c0      	adds	r0, r0, r3
 80076a2:	9b03      	ldr	r3, [sp, #12]
 80076a4:	6058      	str	r0, [r3, #4]
 80076a6:	e7d5      	b.n	8007654 <__kernel_rem_pio2f+0x460>
 80076a8:	003c      	movs	r4, r7
 80076aa:	2000      	movs	r0, #0
 80076ac:	ad36      	add	r5, sp, #216	; 0xd8
 80076ae:	e7df      	b.n	8007670 <__kernel_rem_pio2f+0x47c>
 80076b0:	00a3      	lsls	r3, r4, #2
 80076b2:	5959      	ldr	r1, [r3, r5]
 80076b4:	f7f8 fe54 	bl	8000360 <__aeabi_fadd>
 80076b8:	3401      	adds	r4, #1
 80076ba:	e7ea      	b.n	8007692 <__kernel_rem_pio2f+0x49e>
 80076bc:	23a0      	movs	r3, #160	; 0xa0
 80076be:	aa0e      	add	r2, sp, #56	; 0x38
 80076c0:	18d2      	adds	r2, r2, r3
 80076c2:	5992      	ldr	r2, [r2, r6]
 80076c4:	3d01      	subs	r5, #1
 80076c6:	9204      	str	r2, [sp, #16]
 80076c8:	aa36      	add	r2, sp, #216	; 0xd8
 80076ca:	1994      	adds	r4, r2, r6
 80076cc:	6862      	ldr	r2, [r4, #4]
 80076ce:	9804      	ldr	r0, [sp, #16]
 80076d0:	1c11      	adds	r1, r2, #0
 80076d2:	9206      	str	r2, [sp, #24]
 80076d4:	f7f8 fe44 	bl	8000360 <__aeabi_fadd>
 80076d8:	1c01      	adds	r1, r0, #0
 80076da:	9007      	str	r0, [sp, #28]
 80076dc:	9804      	ldr	r0, [sp, #16]
 80076de:	f7f9 fae3 	bl	8000ca8 <__aeabi_fsub>
 80076e2:	9906      	ldr	r1, [sp, #24]
 80076e4:	f7f8 fe3c 	bl	8000360 <__aeabi_fadd>
 80076e8:	23a0      	movs	r3, #160	; 0xa0
 80076ea:	aa0e      	add	r2, sp, #56	; 0x38
 80076ec:	18d3      	adds	r3, r2, r3
 80076ee:	9a07      	ldr	r2, [sp, #28]
 80076f0:	6060      	str	r0, [r4, #4]
 80076f2:	519a      	str	r2, [r3, r6]
 80076f4:	3e04      	subs	r6, #4
 80076f6:	2d00      	cmp	r5, #0
 80076f8:	dce0      	bgt.n	80076bc <__kernel_rem_pio2f+0x4c8>
 80076fa:	003d      	movs	r5, r7
 80076fc:	ac36      	add	r4, sp, #216	; 0xd8
 80076fe:	9b01      	ldr	r3, [sp, #4]
 8007700:	3b04      	subs	r3, #4
 8007702:	9301      	str	r3, [sp, #4]
 8007704:	2d01      	cmp	r5, #1
 8007706:	dc10      	bgt.n	800772a <__kernel_rem_pio2f+0x536>
 8007708:	2000      	movs	r0, #0
 800770a:	2f01      	cmp	r7, #1
 800770c:	dc26      	bgt.n	800775c <__kernel_rem_pio2f+0x568>
 800770e:	9902      	ldr	r1, [sp, #8]
 8007710:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8007712:	6863      	ldr	r3, [r4, #4]
 8007714:	2900      	cmp	r1, #0
 8007716:	d127      	bne.n	8007768 <__kernel_rem_pio2f+0x574>
 8007718:	9903      	ldr	r1, [sp, #12]
 800771a:	604b      	str	r3, [r1, #4]
 800771c:	000b      	movs	r3, r1
 800771e:	600a      	str	r2, [r1, #0]
 8007720:	6098      	str	r0, [r3, #8]
 8007722:	e797      	b.n	8007654 <__kernel_rem_pio2f+0x460>
 8007724:	9e01      	ldr	r6, [sp, #4]
 8007726:	003d      	movs	r5, r7
 8007728:	e7e4      	b.n	80076f4 <__kernel_rem_pio2f+0x500>
 800772a:	9b01      	ldr	r3, [sp, #4]
 800772c:	3d01      	subs	r5, #1
 800772e:	58e3      	ldr	r3, [r4, r3]
 8007730:	9304      	str	r3, [sp, #16]
 8007732:	9b01      	ldr	r3, [sp, #4]
 8007734:	9804      	ldr	r0, [sp, #16]
 8007736:	18e6      	adds	r6, r4, r3
 8007738:	6873      	ldr	r3, [r6, #4]
 800773a:	1c19      	adds	r1, r3, #0
 800773c:	9306      	str	r3, [sp, #24]
 800773e:	f7f8 fe0f 	bl	8000360 <__aeabi_fadd>
 8007742:	1c01      	adds	r1, r0, #0
 8007744:	9007      	str	r0, [sp, #28]
 8007746:	9804      	ldr	r0, [sp, #16]
 8007748:	f7f9 faae 	bl	8000ca8 <__aeabi_fsub>
 800774c:	9906      	ldr	r1, [sp, #24]
 800774e:	f7f8 fe07 	bl	8000360 <__aeabi_fadd>
 8007752:	9b01      	ldr	r3, [sp, #4]
 8007754:	9a07      	ldr	r2, [sp, #28]
 8007756:	6070      	str	r0, [r6, #4]
 8007758:	50e2      	str	r2, [r4, r3]
 800775a:	e7d0      	b.n	80076fe <__kernel_rem_pio2f+0x50a>
 800775c:	00bb      	lsls	r3, r7, #2
 800775e:	58e1      	ldr	r1, [r4, r3]
 8007760:	f7f8 fdfe 	bl	8000360 <__aeabi_fadd>
 8007764:	3f01      	subs	r7, #1
 8007766:	e7d0      	b.n	800770a <__kernel_rem_pio2f+0x516>
 8007768:	2180      	movs	r1, #128	; 0x80
 800776a:	9c03      	ldr	r4, [sp, #12]
 800776c:	0609      	lsls	r1, r1, #24
 800776e:	1852      	adds	r2, r2, r1
 8007770:	6022      	str	r2, [r4, #0]
 8007772:	000a      	movs	r2, r1
 8007774:	185b      	adds	r3, r3, r1
 8007776:	6063      	str	r3, [r4, #4]
 8007778:	1880      	adds	r0, r0, r2
 800777a:	0023      	movs	r3, r4
 800777c:	e7d0      	b.n	8007720 <__kernel_rem_pio2f+0x52c>
 800777e:	46c0      	nop			; (mov r8, r8)
 8007780:	08007ee0 	.word	0x08007ee0

08007784 <__kernel_sinf>:
 8007784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007786:	9201      	str	r2, [sp, #4]
 8007788:	4a32      	ldr	r2, [pc, #200]	; (8007854 <__kernel_sinf+0xd0>)
 800778a:	0043      	lsls	r3, r0, #1
 800778c:	1c04      	adds	r4, r0, #0
 800778e:	9100      	str	r1, [sp, #0]
 8007790:	085b      	lsrs	r3, r3, #1
 8007792:	4293      	cmp	r3, r2
 8007794:	dc03      	bgt.n	800779e <__kernel_sinf+0x1a>
 8007796:	f7f9 fc4b 	bl	8001030 <__aeabi_f2iz>
 800779a:	2800      	cmp	r0, #0
 800779c:	d035      	beq.n	800780a <__kernel_sinf+0x86>
 800779e:	1c21      	adds	r1, r4, #0
 80077a0:	1c20      	adds	r0, r4, #0
 80077a2:	f7f9 f94f 	bl	8000a44 <__aeabi_fmul>
 80077a6:	1c05      	adds	r5, r0, #0
 80077a8:	1c01      	adds	r1, r0, #0
 80077aa:	1c20      	adds	r0, r4, #0
 80077ac:	f7f9 f94a 	bl	8000a44 <__aeabi_fmul>
 80077b0:	4929      	ldr	r1, [pc, #164]	; (8007858 <__kernel_sinf+0xd4>)
 80077b2:	1c06      	adds	r6, r0, #0
 80077b4:	1c28      	adds	r0, r5, #0
 80077b6:	f7f9 f945 	bl	8000a44 <__aeabi_fmul>
 80077ba:	4928      	ldr	r1, [pc, #160]	; (800785c <__kernel_sinf+0xd8>)
 80077bc:	f7f9 fa74 	bl	8000ca8 <__aeabi_fsub>
 80077c0:	1c29      	adds	r1, r5, #0
 80077c2:	f7f9 f93f 	bl	8000a44 <__aeabi_fmul>
 80077c6:	4926      	ldr	r1, [pc, #152]	; (8007860 <__kernel_sinf+0xdc>)
 80077c8:	f7f8 fdca 	bl	8000360 <__aeabi_fadd>
 80077cc:	1c29      	adds	r1, r5, #0
 80077ce:	f7f9 f939 	bl	8000a44 <__aeabi_fmul>
 80077d2:	4924      	ldr	r1, [pc, #144]	; (8007864 <__kernel_sinf+0xe0>)
 80077d4:	f7f9 fa68 	bl	8000ca8 <__aeabi_fsub>
 80077d8:	1c29      	adds	r1, r5, #0
 80077da:	f7f9 f933 	bl	8000a44 <__aeabi_fmul>
 80077de:	4922      	ldr	r1, [pc, #136]	; (8007868 <__kernel_sinf+0xe4>)
 80077e0:	f7f8 fdbe 	bl	8000360 <__aeabi_fadd>
 80077e4:	9b01      	ldr	r3, [sp, #4]
 80077e6:	1c07      	adds	r7, r0, #0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d110      	bne.n	800780e <__kernel_sinf+0x8a>
 80077ec:	1c01      	adds	r1, r0, #0
 80077ee:	1c28      	adds	r0, r5, #0
 80077f0:	f7f9 f928 	bl	8000a44 <__aeabi_fmul>
 80077f4:	491d      	ldr	r1, [pc, #116]	; (800786c <__kernel_sinf+0xe8>)
 80077f6:	f7f9 fa57 	bl	8000ca8 <__aeabi_fsub>
 80077fa:	1c31      	adds	r1, r6, #0
 80077fc:	f7f9 f922 	bl	8000a44 <__aeabi_fmul>
 8007800:	1c01      	adds	r1, r0, #0
 8007802:	1c20      	adds	r0, r4, #0
 8007804:	f7f8 fdac 	bl	8000360 <__aeabi_fadd>
 8007808:	1c04      	adds	r4, r0, #0
 800780a:	1c20      	adds	r0, r4, #0
 800780c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800780e:	21fc      	movs	r1, #252	; 0xfc
 8007810:	9800      	ldr	r0, [sp, #0]
 8007812:	0589      	lsls	r1, r1, #22
 8007814:	f7f9 f916 	bl	8000a44 <__aeabi_fmul>
 8007818:	1c39      	adds	r1, r7, #0
 800781a:	9001      	str	r0, [sp, #4]
 800781c:	1c30      	adds	r0, r6, #0
 800781e:	f7f9 f911 	bl	8000a44 <__aeabi_fmul>
 8007822:	1c01      	adds	r1, r0, #0
 8007824:	9801      	ldr	r0, [sp, #4]
 8007826:	f7f9 fa3f 	bl	8000ca8 <__aeabi_fsub>
 800782a:	1c29      	adds	r1, r5, #0
 800782c:	f7f9 f90a 	bl	8000a44 <__aeabi_fmul>
 8007830:	9900      	ldr	r1, [sp, #0]
 8007832:	f7f9 fa39 	bl	8000ca8 <__aeabi_fsub>
 8007836:	490d      	ldr	r1, [pc, #52]	; (800786c <__kernel_sinf+0xe8>)
 8007838:	1c05      	adds	r5, r0, #0
 800783a:	1c30      	adds	r0, r6, #0
 800783c:	f7f9 f902 	bl	8000a44 <__aeabi_fmul>
 8007840:	1c01      	adds	r1, r0, #0
 8007842:	1c28      	adds	r0, r5, #0
 8007844:	f7f8 fd8c 	bl	8000360 <__aeabi_fadd>
 8007848:	1c01      	adds	r1, r0, #0
 800784a:	1c20      	adds	r0, r4, #0
 800784c:	f7f9 fa2c 	bl	8000ca8 <__aeabi_fsub>
 8007850:	e7da      	b.n	8007808 <__kernel_sinf+0x84>
 8007852:	46c0      	nop			; (mov r8, r8)
 8007854:	31ffffff 	.word	0x31ffffff
 8007858:	2f2ec9d3 	.word	0x2f2ec9d3
 800785c:	32d72f34 	.word	0x32d72f34
 8007860:	3638ef1b 	.word	0x3638ef1b
 8007864:	39500d01 	.word	0x39500d01
 8007868:	3c088889 	.word	0x3c088889
 800786c:	3e2aaaab 	.word	0x3e2aaaab

08007870 <fabsf>:
 8007870:	0040      	lsls	r0, r0, #1
 8007872:	0840      	lsrs	r0, r0, #1
 8007874:	4770      	bx	lr
	...

08007878 <floorf>:
 8007878:	b570      	push	{r4, r5, r6, lr}
 800787a:	0045      	lsls	r5, r0, #1
 800787c:	086e      	lsrs	r6, r5, #1
 800787e:	0e2d      	lsrs	r5, r5, #24
 8007880:	3d7f      	subs	r5, #127	; 0x7f
 8007882:	0004      	movs	r4, r0
 8007884:	2d16      	cmp	r5, #22
 8007886:	dc24      	bgt.n	80078d2 <floorf+0x5a>
 8007888:	2d00      	cmp	r5, #0
 800788a:	da0e      	bge.n	80078aa <floorf+0x32>
 800788c:	4915      	ldr	r1, [pc, #84]	; (80078e4 <floorf+0x6c>)
 800788e:	f7f8 fd67 	bl	8000360 <__aeabi_fadd>
 8007892:	2100      	movs	r1, #0
 8007894:	f7f8 fd32 	bl	80002fc <__aeabi_fcmpgt>
 8007898:	2800      	cmp	r0, #0
 800789a:	d004      	beq.n	80078a6 <floorf+0x2e>
 800789c:	2c00      	cmp	r4, #0
 800789e:	da1f      	bge.n	80078e0 <floorf+0x68>
 80078a0:	2e00      	cmp	r6, #0
 80078a2:	d000      	beq.n	80078a6 <floorf+0x2e>
 80078a4:	4c10      	ldr	r4, [pc, #64]	; (80078e8 <floorf+0x70>)
 80078a6:	1c20      	adds	r0, r4, #0
 80078a8:	e019      	b.n	80078de <floorf+0x66>
 80078aa:	4e10      	ldr	r6, [pc, #64]	; (80078ec <floorf+0x74>)
 80078ac:	412e      	asrs	r6, r5
 80078ae:	4206      	tst	r6, r0
 80078b0:	d015      	beq.n	80078de <floorf+0x66>
 80078b2:	490c      	ldr	r1, [pc, #48]	; (80078e4 <floorf+0x6c>)
 80078b4:	f7f8 fd54 	bl	8000360 <__aeabi_fadd>
 80078b8:	2100      	movs	r1, #0
 80078ba:	f7f8 fd1f 	bl	80002fc <__aeabi_fcmpgt>
 80078be:	2800      	cmp	r0, #0
 80078c0:	d0f1      	beq.n	80078a6 <floorf+0x2e>
 80078c2:	2c00      	cmp	r4, #0
 80078c4:	da03      	bge.n	80078ce <floorf+0x56>
 80078c6:	2380      	movs	r3, #128	; 0x80
 80078c8:	041b      	lsls	r3, r3, #16
 80078ca:	412b      	asrs	r3, r5
 80078cc:	18e4      	adds	r4, r4, r3
 80078ce:	43b4      	bics	r4, r6
 80078d0:	e7e9      	b.n	80078a6 <floorf+0x2e>
 80078d2:	4b07      	ldr	r3, [pc, #28]	; (80078f0 <floorf+0x78>)
 80078d4:	429e      	cmp	r6, r3
 80078d6:	d902      	bls.n	80078de <floorf+0x66>
 80078d8:	1c01      	adds	r1, r0, #0
 80078da:	f7f8 fd41 	bl	8000360 <__aeabi_fadd>
 80078de:	bd70      	pop	{r4, r5, r6, pc}
 80078e0:	2400      	movs	r4, #0
 80078e2:	e7e0      	b.n	80078a6 <floorf+0x2e>
 80078e4:	7149f2ca 	.word	0x7149f2ca
 80078e8:	bf800000 	.word	0xbf800000
 80078ec:	007fffff 	.word	0x007fffff
 80078f0:	7f7fffff 	.word	0x7f7fffff

080078f4 <scalbnf>:
 80078f4:	0043      	lsls	r3, r0, #1
 80078f6:	b570      	push	{r4, r5, r6, lr}
 80078f8:	0002      	movs	r2, r0
 80078fa:	000c      	movs	r4, r1
 80078fc:	0859      	lsrs	r1, r3, #1
 80078fe:	d005      	beq.n	800790c <scalbnf+0x18>
 8007900:	4d1e      	ldr	r5, [pc, #120]	; (800797c <scalbnf+0x88>)
 8007902:	42a9      	cmp	r1, r5
 8007904:	d903      	bls.n	800790e <scalbnf+0x1a>
 8007906:	1c01      	adds	r1, r0, #0
 8007908:	f7f8 fd2a 	bl	8000360 <__aeabi_fadd>
 800790c:	bd70      	pop	{r4, r5, r6, pc}
 800790e:	4d1c      	ldr	r5, [pc, #112]	; (8007980 <scalbnf+0x8c>)
 8007910:	42a9      	cmp	r1, r5
 8007912:	d815      	bhi.n	8007940 <scalbnf+0x4c>
 8007914:	2198      	movs	r1, #152	; 0x98
 8007916:	05c9      	lsls	r1, r1, #23
 8007918:	f7f9 f894 	bl	8000a44 <__aeabi_fmul>
 800791c:	4b19      	ldr	r3, [pc, #100]	; (8007984 <scalbnf+0x90>)
 800791e:	429c      	cmp	r4, r3
 8007920:	db21      	blt.n	8007966 <scalbnf+0x72>
 8007922:	0002      	movs	r2, r0
 8007924:	15c3      	asrs	r3, r0, #23
 8007926:	b2db      	uxtb	r3, r3
 8007928:	3b19      	subs	r3, #25
 800792a:	191b      	adds	r3, r3, r4
 800792c:	1c01      	adds	r1, r0, #0
 800792e:	2bfe      	cmp	r3, #254	; 0xfe
 8007930:	dc0f      	bgt.n	8007952 <scalbnf+0x5e>
 8007932:	2b00      	cmp	r3, #0
 8007934:	dd06      	ble.n	8007944 <scalbnf+0x50>
 8007936:	4814      	ldr	r0, [pc, #80]	; (8007988 <scalbnf+0x94>)
 8007938:	05db      	lsls	r3, r3, #23
 800793a:	4010      	ands	r0, r2
 800793c:	4318      	orrs	r0, r3
 800793e:	e7e5      	b.n	800790c <scalbnf+0x18>
 8007940:	0e1b      	lsrs	r3, r3, #24
 8007942:	e7f2      	b.n	800792a <scalbnf+0x36>
 8007944:	0019      	movs	r1, r3
 8007946:	3116      	adds	r1, #22
 8007948:	da0f      	bge.n	800796a <scalbnf+0x76>
 800794a:	4b10      	ldr	r3, [pc, #64]	; (800798c <scalbnf+0x98>)
 800794c:	1c01      	adds	r1, r0, #0
 800794e:	429c      	cmp	r4, r3
 8007950:	dd06      	ble.n	8007960 <scalbnf+0x6c>
 8007952:	480f      	ldr	r0, [pc, #60]	; (8007990 <scalbnf+0x9c>)
 8007954:	f000 f820 	bl	8007998 <copysignf>
 8007958:	490d      	ldr	r1, [pc, #52]	; (8007990 <scalbnf+0x9c>)
 800795a:	f7f9 f873 	bl	8000a44 <__aeabi_fmul>
 800795e:	e7d5      	b.n	800790c <scalbnf+0x18>
 8007960:	480c      	ldr	r0, [pc, #48]	; (8007994 <scalbnf+0xa0>)
 8007962:	f000 f819 	bl	8007998 <copysignf>
 8007966:	490b      	ldr	r1, [pc, #44]	; (8007994 <scalbnf+0xa0>)
 8007968:	e7f7      	b.n	800795a <scalbnf+0x66>
 800796a:	21cc      	movs	r1, #204	; 0xcc
 800796c:	4806      	ldr	r0, [pc, #24]	; (8007988 <scalbnf+0x94>)
 800796e:	3319      	adds	r3, #25
 8007970:	05db      	lsls	r3, r3, #23
 8007972:	4010      	ands	r0, r2
 8007974:	4318      	orrs	r0, r3
 8007976:	0589      	lsls	r1, r1, #22
 8007978:	e7ef      	b.n	800795a <scalbnf+0x66>
 800797a:	46c0      	nop			; (mov r8, r8)
 800797c:	7f7fffff 	.word	0x7f7fffff
 8007980:	007fffff 	.word	0x007fffff
 8007984:	ffff3cb0 	.word	0xffff3cb0
 8007988:	807fffff 	.word	0x807fffff
 800798c:	0000c350 	.word	0x0000c350
 8007990:	7149f2ca 	.word	0x7149f2ca
 8007994:	0da24260 	.word	0x0da24260

08007998 <copysignf>:
 8007998:	0040      	lsls	r0, r0, #1
 800799a:	0fc9      	lsrs	r1, r1, #31
 800799c:	07c9      	lsls	r1, r1, #31
 800799e:	0840      	lsrs	r0, r0, #1
 80079a0:	4308      	orrs	r0, r1
 80079a2:	4770      	bx	lr

080079a4 <_init>:
 80079a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079a6:	46c0      	nop			; (mov r8, r8)
 80079a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079aa:	bc08      	pop	{r3}
 80079ac:	469e      	mov	lr, r3
 80079ae:	4770      	bx	lr

080079b0 <_fini>:
 80079b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b2:	46c0      	nop			; (mov r8, r8)
 80079b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079b6:	bc08      	pop	{r3}
 80079b8:	469e      	mov	lr, r3
 80079ba:	4770      	bx	lr
