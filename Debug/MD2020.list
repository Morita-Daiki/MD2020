
MD2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004224  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080042e4  080042e4  000142e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004378  08004378  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004378  08004378  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004378  08004378  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004378  08004378  00014378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800437c  0800437c  0001437c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000880  2000000c  0800438c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000088c  0800438c  0002088c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a5d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c5f  00000000  00000000  00030a91  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001090  00000000  00000000  000336f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f08  00000000  00000000  00034780  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000170a7  00000000  00000000  00035688  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e1c7  00000000  00000000  0004c72f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080265  00000000  00000000  0005a8f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dab5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003980  00000000  00000000  000dabd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080042cc 	.word	0x080042cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080042cc 	.word	0x080042cc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	0018      	movs	r0, r3
 80003fe:	230c      	movs	r3, #12
 8000400:	001a      	movs	r2, r3
 8000402:	2100      	movs	r1, #0
 8000404:	f003 ff5a 	bl	80042bc <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000408:	4b33      	ldr	r3, [pc, #204]	; (80004d8 <MX_ADC_Init+0xe4>)
 800040a:	4a34      	ldr	r2, [pc, #208]	; (80004dc <MX_ADC_Init+0xe8>)
 800040c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800040e:	4b32      	ldr	r3, [pc, #200]	; (80004d8 <MX_ADC_Init+0xe4>)
 8000410:	2200      	movs	r2, #0
 8000412:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000414:	4b30      	ldr	r3, [pc, #192]	; (80004d8 <MX_ADC_Init+0xe4>)
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800041a:	4b2f      	ldr	r3, [pc, #188]	; (80004d8 <MX_ADC_Init+0xe4>)
 800041c:	2200      	movs	r2, #0
 800041e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000420:	4b2d      	ldr	r3, [pc, #180]	; (80004d8 <MX_ADC_Init+0xe4>)
 8000422:	2201      	movs	r2, #1
 8000424:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000426:	4b2c      	ldr	r3, [pc, #176]	; (80004d8 <MX_ADC_Init+0xe4>)
 8000428:	2204      	movs	r2, #4
 800042a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800042c:	4b2a      	ldr	r3, [pc, #168]	; (80004d8 <MX_ADC_Init+0xe4>)
 800042e:	2200      	movs	r2, #0
 8000430:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000432:	4b29      	ldr	r3, [pc, #164]	; (80004d8 <MX_ADC_Init+0xe4>)
 8000434:	2200      	movs	r2, #0
 8000436:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000438:	4b27      	ldr	r3, [pc, #156]	; (80004d8 <MX_ADC_Init+0xe4>)
 800043a:	2201      	movs	r2, #1
 800043c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800043e:	4b26      	ldr	r3, [pc, #152]	; (80004d8 <MX_ADC_Init+0xe4>)
 8000440:	2200      	movs	r2, #0
 8000442:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000444:	4b24      	ldr	r3, [pc, #144]	; (80004d8 <MX_ADC_Init+0xe4>)
 8000446:	22c2      	movs	r2, #194	; 0xc2
 8000448:	32ff      	adds	r2, #255	; 0xff
 800044a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800044c:	4b22      	ldr	r3, [pc, #136]	; (80004d8 <MX_ADC_Init+0xe4>)
 800044e:	2200      	movs	r2, #0
 8000450:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000452:	4b21      	ldr	r3, [pc, #132]	; (80004d8 <MX_ADC_Init+0xe4>)
 8000454:	2224      	movs	r2, #36	; 0x24
 8000456:	2101      	movs	r1, #1
 8000458:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800045a:	4b1f      	ldr	r3, [pc, #124]	; (80004d8 <MX_ADC_Init+0xe4>)
 800045c:	2201      	movs	r2, #1
 800045e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000460:	4b1d      	ldr	r3, [pc, #116]	; (80004d8 <MX_ADC_Init+0xe4>)
 8000462:	0018      	movs	r0, r3
 8000464:	f000 fe8e 	bl	8001184 <HAL_ADC_Init>
 8000468:	1e03      	subs	r3, r0, #0
 800046a:	d001      	beq.n	8000470 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800046c:	f000 fb74 	bl	8000b58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2203      	movs	r2, #3
 8000474:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	2280      	movs	r2, #128	; 0x80
 800047a:	0152      	lsls	r2, r2, #5
 800047c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	2280      	movs	r2, #128	; 0x80
 8000482:	0552      	lsls	r2, r2, #21
 8000484:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000486:	1d3a      	adds	r2, r7, #4
 8000488:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <MX_ADC_Init+0xe4>)
 800048a:	0011      	movs	r1, r2
 800048c:	0018      	movs	r0, r3
 800048e:	f000 ffb9 	bl	8001404 <HAL_ADC_ConfigChannel>
 8000492:	1e03      	subs	r3, r0, #0
 8000494:	d001      	beq.n	800049a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000496:	f000 fb5f 	bl	8000b58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	2204      	movs	r2, #4
 800049e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004a0:	1d3a      	adds	r2, r7, #4
 80004a2:	4b0d      	ldr	r3, [pc, #52]	; (80004d8 <MX_ADC_Init+0xe4>)
 80004a4:	0011      	movs	r1, r2
 80004a6:	0018      	movs	r0, r3
 80004a8:	f000 ffac 	bl	8001404 <HAL_ADC_ConfigChannel>
 80004ac:	1e03      	subs	r3, r0, #0
 80004ae:	d001      	beq.n	80004b4 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80004b0:	f000 fb52 	bl	8000b58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2205      	movs	r2, #5
 80004b8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004ba:	1d3a      	adds	r2, r7, #4
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <MX_ADC_Init+0xe4>)
 80004be:	0011      	movs	r1, r2
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 ff9f 	bl	8001404 <HAL_ADC_ConfigChannel>
 80004c6:	1e03      	subs	r3, r0, #0
 80004c8:	d001      	beq.n	80004ce <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80004ca:	f000 fb45 	bl	8000b58 <Error_Handler>
  }

}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b004      	add	sp, #16
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	20000398 	.word	0x20000398
 80004dc:	40012400 	.word	0x40012400

080004e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08a      	sub	sp, #40	; 0x28
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e8:	2314      	movs	r3, #20
 80004ea:	18fb      	adds	r3, r7, r3
 80004ec:	0018      	movs	r0, r3
 80004ee:	2314      	movs	r3, #20
 80004f0:	001a      	movs	r2, r3
 80004f2:	2100      	movs	r1, #0
 80004f4:	f003 fee2 	bl	80042bc <memset>
  if(adcHandle->Instance==ADC1)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a2d      	ldr	r2, [pc, #180]	; (80005b4 <HAL_ADC_MspInit+0xd4>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d154      	bne.n	80005ac <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000502:	4b2d      	ldr	r3, [pc, #180]	; (80005b8 <HAL_ADC_MspInit+0xd8>)
 8000504:	699a      	ldr	r2, [r3, #24]
 8000506:	4b2c      	ldr	r3, [pc, #176]	; (80005b8 <HAL_ADC_MspInit+0xd8>)
 8000508:	2180      	movs	r1, #128	; 0x80
 800050a:	0089      	lsls	r1, r1, #2
 800050c:	430a      	orrs	r2, r1
 800050e:	619a      	str	r2, [r3, #24]
 8000510:	4b29      	ldr	r3, [pc, #164]	; (80005b8 <HAL_ADC_MspInit+0xd8>)
 8000512:	699a      	ldr	r2, [r3, #24]
 8000514:	2380      	movs	r3, #128	; 0x80
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	4013      	ands	r3, r2
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	4b26      	ldr	r3, [pc, #152]	; (80005b8 <HAL_ADC_MspInit+0xd8>)
 8000520:	695a      	ldr	r2, [r3, #20]
 8000522:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <HAL_ADC_MspInit+0xd8>)
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	0289      	lsls	r1, r1, #10
 8000528:	430a      	orrs	r2, r1
 800052a:	615a      	str	r2, [r3, #20]
 800052c:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <HAL_ADC_MspInit+0xd8>)
 800052e:	695a      	ldr	r2, [r3, #20]
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	029b      	lsls	r3, r3, #10
 8000534:	4013      	ands	r3, r2
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5 
    */
    GPIO_InitStruct.Pin = INA199_REF_Pin|INA199_OUT_Pin|BATT_VOLT_Pin;
 800053a:	2114      	movs	r1, #20
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2238      	movs	r2, #56	; 0x38
 8000540:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2203      	movs	r2, #3
 8000546:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054e:	187a      	adds	r2, r7, r1
 8000550:	2390      	movs	r3, #144	; 0x90
 8000552:	05db      	lsls	r3, r3, #23
 8000554:	0011      	movs	r1, r2
 8000556:	0018      	movs	r0, r3
 8000558:	f001 fb14 	bl	8001b84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800055c:	4b17      	ldr	r3, [pc, #92]	; (80005bc <HAL_ADC_MspInit+0xdc>)
 800055e:	4a18      	ldr	r2, [pc, #96]	; (80005c0 <HAL_ADC_MspInit+0xe0>)
 8000560:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000562:	4b16      	ldr	r3, [pc, #88]	; (80005bc <HAL_ADC_MspInit+0xdc>)
 8000564:	2200      	movs	r2, #0
 8000566:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000568:	4b14      	ldr	r3, [pc, #80]	; (80005bc <HAL_ADC_MspInit+0xdc>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800056e:	4b13      	ldr	r3, [pc, #76]	; (80005bc <HAL_ADC_MspInit+0xdc>)
 8000570:	2280      	movs	r2, #128	; 0x80
 8000572:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000574:	4b11      	ldr	r3, [pc, #68]	; (80005bc <HAL_ADC_MspInit+0xdc>)
 8000576:	2280      	movs	r2, #128	; 0x80
 8000578:	0052      	lsls	r2, r2, #1
 800057a:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <HAL_ADC_MspInit+0xdc>)
 800057e:	2280      	movs	r2, #128	; 0x80
 8000580:	00d2      	lsls	r2, r2, #3
 8000582:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000584:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <HAL_ADC_MspInit+0xdc>)
 8000586:	2220      	movs	r2, #32
 8000588:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <HAL_ADC_MspInit+0xdc>)
 800058c:	2200      	movs	r2, #0
 800058e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000590:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <HAL_ADC_MspInit+0xdc>)
 8000592:	0018      	movs	r0, r3
 8000594:	f001 f9f0 	bl	8001978 <HAL_DMA_Init>
 8000598:	1e03      	subs	r3, r0, #0
 800059a:	d001      	beq.n	80005a0 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 800059c:	f000 fadc 	bl	8000b58 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4a06      	ldr	r2, [pc, #24]	; (80005bc <HAL_ADC_MspInit+0xdc>)
 80005a4:	631a      	str	r2, [r3, #48]	; 0x30
 80005a6:	4b05      	ldr	r3, [pc, #20]	; (80005bc <HAL_ADC_MspInit+0xdc>)
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005ac:	46c0      	nop			; (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	b00a      	add	sp, #40	; 0x28
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40012400 	.word	0x40012400
 80005b8:	40021000 	.word	0x40021000
 80005bc:	20000354 	.word	0x20000354
 80005c0:	40020008 	.word	0x40020008

080005c4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0

  hcan.Instance = CAN;
 80005c8:	4b18      	ldr	r3, [pc, #96]	; (800062c <MX_CAN_Init+0x68>)
 80005ca:	4a19      	ldr	r2, [pc, #100]	; (8000630 <MX_CAN_Init+0x6c>)
 80005cc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 80005ce:	4b17      	ldr	r3, [pc, #92]	; (800062c <MX_CAN_Init+0x68>)
 80005d0:	2203      	movs	r2, #3
 80005d2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80005d4:	4b15      	ldr	r3, [pc, #84]	; (800062c <MX_CAN_Init+0x68>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <MX_CAN_Init+0x68>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_CAN_Init+0x68>)
 80005e2:	22c0      	movs	r2, #192	; 0xc0
 80005e4:	0312      	lsls	r2, r2, #12
 80005e6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005e8:	4b10      	ldr	r3, [pc, #64]	; (800062c <MX_CAN_Init+0x68>)
 80005ea:	2280      	movs	r2, #128	; 0x80
 80005ec:	0352      	lsls	r2, r2, #13
 80005ee:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005f0:	4b0e      	ldr	r3, [pc, #56]	; (800062c <MX_CAN_Init+0x68>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80005f6:	4b0d      	ldr	r3, [pc, #52]	; (800062c <MX_CAN_Init+0x68>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80005fc:	4b0b      	ldr	r3, [pc, #44]	; (800062c <MX_CAN_Init+0x68>)
 80005fe:	2200      	movs	r2, #0
 8000600:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <MX_CAN_Init+0x68>)
 8000604:	2200      	movs	r2, #0
 8000606:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <MX_CAN_Init+0x68>)
 800060a:	2200      	movs	r2, #0
 800060c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800060e:	4b07      	ldr	r3, [pc, #28]	; (800062c <MX_CAN_Init+0x68>)
 8000610:	2200      	movs	r2, #0
 8000612:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <MX_CAN_Init+0x68>)
 8000616:	0018      	movs	r0, r3
 8000618:	f001 f802 	bl	8001620 <HAL_CAN_Init>
 800061c:	1e03      	subs	r3, r0, #0
 800061e:	d001      	beq.n	8000624 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000620:	f000 fa9a 	bl	8000b58 <Error_Handler>
  }

}
 8000624:	46c0      	nop			; (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	200003d8 	.word	0x200003d8
 8000630:	40006400 	.word	0x40006400

08000634 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08a      	sub	sp, #40	; 0x28
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063c:	2314      	movs	r3, #20
 800063e:	18fb      	adds	r3, r7, r3
 8000640:	0018      	movs	r0, r3
 8000642:	2314      	movs	r3, #20
 8000644:	001a      	movs	r2, r3
 8000646:	2100      	movs	r1, #0
 8000648:	f003 fe38 	bl	80042bc <memset>
  if(canHandle->Instance==CAN)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a1d      	ldr	r2, [pc, #116]	; (80006c8 <HAL_CAN_MspInit+0x94>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d133      	bne.n	80006be <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000656:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <HAL_CAN_MspInit+0x98>)
 8000658:	69da      	ldr	r2, [r3, #28]
 800065a:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <HAL_CAN_MspInit+0x98>)
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	0489      	lsls	r1, r1, #18
 8000660:	430a      	orrs	r2, r1
 8000662:	61da      	str	r2, [r3, #28]
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <HAL_CAN_MspInit+0x98>)
 8000666:	69da      	ldr	r2, [r3, #28]
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	049b      	lsls	r3, r3, #18
 800066c:	4013      	ands	r3, r2
 800066e:	613b      	str	r3, [r7, #16]
 8000670:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b16      	ldr	r3, [pc, #88]	; (80006cc <HAL_CAN_MspInit+0x98>)
 8000674:	695a      	ldr	r2, [r3, #20]
 8000676:	4b15      	ldr	r3, [pc, #84]	; (80006cc <HAL_CAN_MspInit+0x98>)
 8000678:	2180      	movs	r1, #128	; 0x80
 800067a:	0289      	lsls	r1, r1, #10
 800067c:	430a      	orrs	r2, r1
 800067e:	615a      	str	r2, [r3, #20]
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <HAL_CAN_MspInit+0x98>)
 8000682:	695a      	ldr	r2, [r3, #20]
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	029b      	lsls	r3, r3, #10
 8000688:	4013      	ands	r3, r2
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800068e:	2114      	movs	r1, #20
 8000690:	187b      	adds	r3, r7, r1
 8000692:	22c0      	movs	r2, #192	; 0xc0
 8000694:	0152      	lsls	r2, r2, #5
 8000696:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2202      	movs	r2, #2
 800069c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2203      	movs	r2, #3
 80006a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2204      	movs	r2, #4
 80006ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	187a      	adds	r2, r7, r1
 80006b2:	2390      	movs	r3, #144	; 0x90
 80006b4:	05db      	lsls	r3, r3, #23
 80006b6:	0011      	movs	r1, r2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f001 fa63 	bl	8001b84 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b00a      	add	sp, #40	; 0x28
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	40006400 	.word	0x40006400
 80006cc:	40021000 	.word	0x40021000

080006d0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_DMA_Init+0x38>)
 80006d8:	695a      	ldr	r2, [r3, #20]
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_DMA_Init+0x38>)
 80006dc:	2101      	movs	r1, #1
 80006de:	430a      	orrs	r2, r1
 80006e0:	615a      	str	r2, [r3, #20]
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_DMA_Init+0x38>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	2201      	movs	r2, #1
 80006e8:	4013      	ands	r3, r2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2103      	movs	r1, #3
 80006f2:	2009      	movs	r0, #9
 80006f4:	f001 f91a 	bl	800192c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006f8:	2009      	movs	r0, #9
 80006fa:	f001 f92c 	bl	8001956 <HAL_NVIC_EnableIRQ>

}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	b002      	add	sp, #8
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	40021000 	.word	0x40021000

0800070c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	4a06      	ldr	r2, [pc, #24]	; (8000734 <vApplicationGetIdleTaskMemory+0x28>)
 800071c:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	4a05      	ldr	r2, [pc, #20]	; (8000738 <vApplicationGetIdleTaskMemory+0x2c>)
 8000722:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2264      	movs	r2, #100	; 0x64
 8000728:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	b004      	add	sp, #16
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	2000002c 	.word	0x2000002c
 8000738:	2000007c 	.word	0x2000007c

0800073c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800073c:	b5b0      	push	{r4, r5, r7, lr}
 800073e:	b08e      	sub	sp, #56	; 0x38
 8000740:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 100, defaultTaskBuffer, &defaultTaskControlBlock);
 8000742:	211c      	movs	r1, #28
 8000744:	187b      	adds	r3, r7, r1
 8000746:	4a11      	ldr	r2, [pc, #68]	; (800078c <MX_FREERTOS_Init+0x50>)
 8000748:	ca31      	ldmia	r2!, {r0, r4, r5}
 800074a:	c331      	stmia	r3!, {r0, r4, r5}
 800074c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800074e:	c331      	stmia	r3!, {r0, r4, r5}
 8000750:	6812      	ldr	r2, [r2, #0]
 8000752:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2100      	movs	r1, #0
 8000758:	0018      	movs	r0, r3
 800075a:	f002 ff60 	bl	800361e <osThreadCreate>
 800075e:	0002      	movs	r2, r0
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_FREERTOS_Init+0x54>)
 8000762:	601a      	str	r2, [r3, #0]

  /* definition and creation of Control */
  osThreadStaticDef(Control, StartControl, osPriorityRealtime, 0, 100, myTask02Buffer, &myTask02ControlBlock);
 8000764:	003b      	movs	r3, r7
 8000766:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <MX_FREERTOS_Init+0x58>)
 8000768:	ca13      	ldmia	r2!, {r0, r1, r4}
 800076a:	c313      	stmia	r3!, {r0, r1, r4}
 800076c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800076e:	c313      	stmia	r3!, {r0, r1, r4}
 8000770:	6812      	ldr	r2, [r2, #0]
 8000772:	601a      	str	r2, [r3, #0]
  ControlHandle = osThreadCreate(osThread(Control), NULL);
 8000774:	003b      	movs	r3, r7
 8000776:	2100      	movs	r1, #0
 8000778:	0018      	movs	r0, r3
 800077a:	f002 ff50 	bl	800361e <osThreadCreate>
 800077e:	0002      	movs	r2, r0
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <MX_FREERTOS_Init+0x5c>)
 8000782:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b00e      	add	sp, #56	; 0x38
 800078a:	bdb0      	pop	{r4, r5, r7, pc}
 800078c:	080042f0 	.word	0x080042f0
 8000790:	20000450 	.word	0x20000450
 8000794:	08004314 	.word	0x08004314
 8000798:	20000454 	.word	0x20000454

0800079c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	TickType_t xPreviousWakeTime = xTaskGetTickCount();
 80007a4:	f003 fa6a 	bl	8003c7c <xTaskGetTickCount>
 80007a8:	0003      	movs	r3, r0
 80007aa:	60bb      	str	r3, [r7, #8]
	int counter=0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {
		vTaskDelayUntil(&xPreviousWakeTime, 1000);
 80007b0:	23fa      	movs	r3, #250	; 0xfa
 80007b2:	009a      	lsls	r2, r3, #2
 80007b4:	2308      	movs	r3, #8
 80007b6:	18fb      	adds	r3, r7, r3
 80007b8:	0011      	movs	r1, r2
 80007ba:	0018      	movs	r0, r3
 80007bc:	f003 f91c 	bl	80039f8 <vTaskDelayUntil>
		LED_Go2Go(counter%11-5);
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	210b      	movs	r1, #11
 80007c4:	0018      	movs	r0, r3
 80007c6:	f7ff fe0f 	bl	80003e8 <__aeabi_idivmod>
 80007ca:	000b      	movs	r3, r1
 80007cc:	3b05      	subs	r3, #5
 80007ce:	0018      	movs	r0, r3
 80007d0:	f000 f8a8 	bl	8000924 <LED_Go2Go>
		counter++;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	3301      	adds	r3, #1
 80007d8:	60fb      	str	r3, [r7, #12]
		vTaskDelayUntil(&xPreviousWakeTime, 1000);
 80007da:	e7e9      	b.n	80007b0 <StartDefaultTask+0x14>

080007dc <StartControl>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControl */
void StartControl(void const * argument)
{
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b087      	sub	sp, #28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControl */
	TickType_t pxPreviousWakeTime = xTaskGetTickCount();
 80007e4:	f003 fa4a 	bl	8003c7c <xTaskGetTickCount>
 80007e8:	0003      	movs	r3, r0
 80007ea:	617b      	str	r3, [r7, #20]
	Enc_Start(); //init encoder
 80007ec:	f000 fc44 	bl	8001078 <Enc_Start>
	/* Infinite loop */
	for (;;) {
		vTaskDelayUntil(&pxPreviousWakeTime, 1);
 80007f0:	2314      	movs	r3, #20
 80007f2:	18fb      	adds	r3, r7, r3
 80007f4:	2101      	movs	r1, #1
 80007f6:	0018      	movs	r0, r3
 80007f8:	f003 f8fe 	bl	80039f8 <vTaskDelayUntil>
		enc_cnt = Enc_Read();
 80007fc:	f000 fc48 	bl	8001090 <Enc_Read>
 8000800:	0002      	movs	r2, r0
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <StartControl+0x4c>)
 8000804:	601a      	str	r2, [r3, #0]
		uint16_t duty[4]={2399,2399,2000,2000};
 8000806:	210c      	movs	r1, #12
 8000808:	187b      	adds	r3, r7, r1
 800080a:	4a08      	ldr	r2, [pc, #32]	; (800082c <StartControl+0x50>)
 800080c:	ca11      	ldmia	r2!, {r0, r4}
 800080e:	c311      	stmia	r3!, {r0, r4}
		PWM_4_Out(duty);
 8000810:	187b      	adds	r3, r7, r1
 8000812:	0018      	movs	r0, r3
 8000814:	f000 fbfa 	bl	800100c <PWM_4_Out>
		HAL_GPIO_TogglePin(PA15_GPIO_Port, PA15_Pin|PA2_Pin);
 8000818:	4a05      	ldr	r2, [pc, #20]	; (8000830 <StartControl+0x54>)
 800081a:	2390      	movs	r3, #144	; 0x90
 800081c:	05db      	lsls	r3, r3, #23
 800081e:	0011      	movs	r1, r2
 8000820:	0018      	movs	r0, r3
 8000822:	f001 fb34 	bl	8001e8e <HAL_GPIO_TogglePin>
	for (;;) {
 8000826:	e7e3      	b.n	80007f0 <StartControl+0x14>
 8000828:	20000028 	.word	0x20000028
 800082c:	08004330 	.word	0x08004330
 8000830:	00008004 	.word	0x00008004

08000834 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b089      	sub	sp, #36	; 0x24
 8000838:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	240c      	movs	r4, #12
 800083c:	193b      	adds	r3, r7, r4
 800083e:	0018      	movs	r0, r3
 8000840:	2314      	movs	r3, #20
 8000842:	001a      	movs	r2, r3
 8000844:	2100      	movs	r1, #0
 8000846:	f003 fd39 	bl	80042bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	4b33      	ldr	r3, [pc, #204]	; (8000918 <MX_GPIO_Init+0xe4>)
 800084c:	695a      	ldr	r2, [r3, #20]
 800084e:	4b32      	ldr	r3, [pc, #200]	; (8000918 <MX_GPIO_Init+0xe4>)
 8000850:	2180      	movs	r1, #128	; 0x80
 8000852:	0289      	lsls	r1, r1, #10
 8000854:	430a      	orrs	r2, r1
 8000856:	615a      	str	r2, [r3, #20]
 8000858:	4b2f      	ldr	r3, [pc, #188]	; (8000918 <MX_GPIO_Init+0xe4>)
 800085a:	695a      	ldr	r2, [r3, #20]
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	029b      	lsls	r3, r3, #10
 8000860:	4013      	ands	r3, r2
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	4b2c      	ldr	r3, [pc, #176]	; (8000918 <MX_GPIO_Init+0xe4>)
 8000868:	695a      	ldr	r2, [r3, #20]
 800086a:	4b2b      	ldr	r3, [pc, #172]	; (8000918 <MX_GPIO_Init+0xe4>)
 800086c:	2180      	movs	r1, #128	; 0x80
 800086e:	02c9      	lsls	r1, r1, #11
 8000870:	430a      	orrs	r2, r1
 8000872:	615a      	str	r2, [r3, #20]
 8000874:	4b28      	ldr	r3, [pc, #160]	; (8000918 <MX_GPIO_Init+0xe4>)
 8000876:	695a      	ldr	r2, [r3, #20]
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	02db      	lsls	r3, r3, #11
 800087c:	4013      	ands	r3, r2
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA2_Pin|PA15_Pin, GPIO_PIN_RESET);
 8000882:	4926      	ldr	r1, [pc, #152]	; (800091c <MX_GPIO_Init+0xe8>)
 8000884:	2390      	movs	r3, #144	; 0x90
 8000886:	05db      	lsls	r3, r3, #23
 8000888:	2200      	movs	r2, #0
 800088a:	0018      	movs	r0, r3
 800088c:	f001 fae2 	bl	8001e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RA_BK_Pin|LD5_11_Pin|LD4_10_Pin|LD3_9_Pin 
 8000890:	23fc      	movs	r3, #252	; 0xfc
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	4822      	ldr	r0, [pc, #136]	; (8000920 <MX_GPIO_Init+0xec>)
 8000896:	2200      	movs	r2, #0
 8000898:	0019      	movs	r1, r3
 800089a:	f001 fadb 	bl	8001e54 <HAL_GPIO_WritePin>
                          |LD2_8_Pin|LD1_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = PA2_Pin|PA15_Pin;
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	4a1e      	ldr	r2, [pc, #120]	; (800091c <MX_GPIO_Init+0xe8>)
 80008a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	2201      	movs	r2, #1
 80008a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	193a      	adds	r2, r7, r4
 80008b8:	2390      	movs	r3, #144	; 0x90
 80008ba:	05db      	lsls	r3, r3, #23
 80008bc:	0011      	movs	r1, r2
 80008be:	0018      	movs	r0, r3
 80008c0:	f001 f960 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW4_Pin|SW3_Pin|SW2_Pin;
 80008c4:	193b      	adds	r3, r7, r4
 80008c6:	22e0      	movs	r2, #224	; 0xe0
 80008c8:	00d2      	lsls	r2, r2, #3
 80008ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	2200      	movs	r2, #0
 80008d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	2201      	movs	r2, #1
 80008d6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	193a      	adds	r2, r7, r4
 80008da:	2390      	movs	r3, #144	; 0x90
 80008dc:	05db      	lsls	r3, r3, #23
 80008de:	0011      	movs	r1, r2
 80008e0:	0018      	movs	r0, r3
 80008e2:	f001 f94f 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin */
  GPIO_InitStruct.Pin = RA_BK_Pin|LD5_11_Pin|LD4_10_Pin|LD3_9_Pin 
 80008e6:	0021      	movs	r1, r4
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	22fc      	movs	r2, #252	; 0xfc
 80008ec:	0052      	lsls	r2, r2, #1
 80008ee:	601a      	str	r2, [r3, #0]
                          |LD2_8_Pin|LD1_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2201      	movs	r2, #1
 80008f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000902:	187b      	adds	r3, r7, r1
 8000904:	4a06      	ldr	r2, [pc, #24]	; (8000920 <MX_GPIO_Init+0xec>)
 8000906:	0019      	movs	r1, r3
 8000908:	0010      	movs	r0, r2
 800090a:	f001 f93b 	bl	8001b84 <HAL_GPIO_Init>

}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	b009      	add	sp, #36	; 0x24
 8000914:	bd90      	pop	{r4, r7, pc}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	40021000 	.word	0x40021000
 800091c:	00008004 	.word	0x00008004
 8000920:	48000400 	.word	0x48000400

08000924 <LED_Go2Go>:

/* USER CODE BEGIN 2 */
void LED_Go2Go(int x) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RA_BK_GPIO_Port, RA_BK_Pin, x > 0);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	17da      	asrs	r2, r3, #31
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	0fdb      	lsrs	r3, r3, #31
 8000934:	b2db      	uxtb	r3, r3
 8000936:	001a      	movs	r2, r3
 8000938:	4b49      	ldr	r3, [pc, #292]	; (8000a60 <LED_Go2Go+0x13c>)
 800093a:	2108      	movs	r1, #8
 800093c:	0018      	movs	r0, r3
 800093e:	f001 fa89 	bl	8001e54 <HAL_GPIO_WritePin>
	if (x > 0) {
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2b00      	cmp	r3, #0
 8000946:	dd44      	ble.n	80009d2 <LED_Go2Go+0xae>
		HAL_GPIO_WritePin(LD1_7_GPIO_Port, LD1_7_Pin, x < 5);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2204      	movs	r2, #4
 800094c:	0fd8      	lsrs	r0, r3, #31
 800094e:	17d1      	asrs	r1, r2, #31
 8000950:	429a      	cmp	r2, r3
 8000952:	4148      	adcs	r0, r1
 8000954:	0003      	movs	r3, r0
 8000956:	b2db      	uxtb	r3, r3
 8000958:	001a      	movs	r2, r3
 800095a:	2380      	movs	r3, #128	; 0x80
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	4840      	ldr	r0, [pc, #256]	; (8000a60 <LED_Go2Go+0x13c>)
 8000960:	0019      	movs	r1, r3
 8000962:	f001 fa77 	bl	8001e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_8_GPIO_Port, LD2_8_Pin, x < 4);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2203      	movs	r2, #3
 800096a:	0fd8      	lsrs	r0, r3, #31
 800096c:	17d1      	asrs	r1, r2, #31
 800096e:	429a      	cmp	r2, r3
 8000970:	4148      	adcs	r0, r1
 8000972:	0003      	movs	r3, r0
 8000974:	b2db      	uxtb	r3, r3
 8000976:	001a      	movs	r2, r3
 8000978:	4b39      	ldr	r3, [pc, #228]	; (8000a60 <LED_Go2Go+0x13c>)
 800097a:	2180      	movs	r1, #128	; 0x80
 800097c:	0018      	movs	r0, r3
 800097e:	f001 fa69 	bl	8001e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_9_GPIO_Port, LD3_9_Pin, x < 3);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2202      	movs	r2, #2
 8000986:	0fd8      	lsrs	r0, r3, #31
 8000988:	17d1      	asrs	r1, r2, #31
 800098a:	429a      	cmp	r2, r3
 800098c:	4148      	adcs	r0, r1
 800098e:	0003      	movs	r3, r0
 8000990:	b2db      	uxtb	r3, r3
 8000992:	001a      	movs	r2, r3
 8000994:	4b32      	ldr	r3, [pc, #200]	; (8000a60 <LED_Go2Go+0x13c>)
 8000996:	2140      	movs	r1, #64	; 0x40
 8000998:	0018      	movs	r0, r3
 800099a:	f001 fa5b 	bl	8001e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_10_GPIO_Port, LD4_10_Pin, x < 2);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2201      	movs	r2, #1
 80009a2:	0fd8      	lsrs	r0, r3, #31
 80009a4:	17d1      	asrs	r1, r2, #31
 80009a6:	429a      	cmp	r2, r3
 80009a8:	4148      	adcs	r0, r1
 80009aa:	0003      	movs	r3, r0
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	001a      	movs	r2, r3
 80009b0:	4b2b      	ldr	r3, [pc, #172]	; (8000a60 <LED_Go2Go+0x13c>)
 80009b2:	2120      	movs	r1, #32
 80009b4:	0018      	movs	r0, r3
 80009b6:	f001 fa4d 	bl	8001e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_11_GPIO_Port, LD5_11_Pin, x < 1);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	1e5a      	subs	r2, r3, #1
 80009be:	4313      	orrs	r3, r2
 80009c0:	0fdb      	lsrs	r3, r3, #31
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	001a      	movs	r2, r3
 80009c6:	4b26      	ldr	r3, [pc, #152]	; (8000a60 <LED_Go2Go+0x13c>)
 80009c8:	2110      	movs	r1, #16
 80009ca:	0018      	movs	r0, r3
 80009cc:	f001 fa42 	bl	8001e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_8_GPIO_Port, LD2_8_Pin, x < -1);
		HAL_GPIO_WritePin(LD3_9_GPIO_Port, LD3_9_Pin, x < -2);
		HAL_GPIO_WritePin(LD4_10_GPIO_Port, LD4_10_Pin, x < -3);
		HAL_GPIO_WritePin(LD5_11_GPIO_Port, LD5_11_Pin, x < -4);
	}
}
 80009d0:	e041      	b.n	8000a56 <LED_Go2Go+0x132>
		HAL_GPIO_WritePin(LD1_7_GPIO_Port, LD1_7_Pin, x < 0);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	0fdb      	lsrs	r3, r3, #31
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	001a      	movs	r2, r3
 80009da:	2380      	movs	r3, #128	; 0x80
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4820      	ldr	r0, [pc, #128]	; (8000a60 <LED_Go2Go+0x13c>)
 80009e0:	0019      	movs	r1, r3
 80009e2:	f001 fa37 	bl	8001e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_8_GPIO_Port, LD2_8_Pin, x < -1);
 80009e6:	2301      	movs	r3, #1
 80009e8:	1c1a      	adds	r2, r3, #0
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3301      	adds	r3, #1
 80009ee:	db01      	blt.n	80009f4 <LED_Go2Go+0xd0>
 80009f0:	2300      	movs	r3, #0
 80009f2:	1c1a      	adds	r2, r3, #0
 80009f4:	b2d3      	uxtb	r3, r2
 80009f6:	001a      	movs	r2, r3
 80009f8:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <LED_Go2Go+0x13c>)
 80009fa:	2180      	movs	r1, #128	; 0x80
 80009fc:	0018      	movs	r0, r3
 80009fe:	f001 fa29 	bl	8001e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_9_GPIO_Port, LD3_9_Pin, x < -2);
 8000a02:	2301      	movs	r3, #1
 8000a04:	1c1a      	adds	r2, r3, #0
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	3302      	adds	r3, #2
 8000a0a:	db01      	blt.n	8000a10 <LED_Go2Go+0xec>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	1c1a      	adds	r2, r3, #0
 8000a10:	b2d3      	uxtb	r3, r2
 8000a12:	001a      	movs	r2, r3
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <LED_Go2Go+0x13c>)
 8000a16:	2140      	movs	r1, #64	; 0x40
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f001 fa1b 	bl	8001e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_10_GPIO_Port, LD4_10_Pin, x < -3);
 8000a1e:	2301      	movs	r3, #1
 8000a20:	1c1a      	adds	r2, r3, #0
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	3303      	adds	r3, #3
 8000a26:	db01      	blt.n	8000a2c <LED_Go2Go+0x108>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	1c1a      	adds	r2, r3, #0
 8000a2c:	b2d3      	uxtb	r3, r2
 8000a2e:	001a      	movs	r2, r3
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <LED_Go2Go+0x13c>)
 8000a32:	2120      	movs	r1, #32
 8000a34:	0018      	movs	r0, r3
 8000a36:	f001 fa0d 	bl	8001e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_11_GPIO_Port, LD5_11_Pin, x < -4);
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	1c1a      	adds	r2, r3, #0
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	3304      	adds	r3, #4
 8000a42:	db01      	blt.n	8000a48 <LED_Go2Go+0x124>
 8000a44:	2300      	movs	r3, #0
 8000a46:	1c1a      	adds	r2, r3, #0
 8000a48:	b2d3      	uxtb	r3, r2
 8000a4a:	001a      	movs	r2, r3
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <LED_Go2Go+0x13c>)
 8000a4e:	2110      	movs	r1, #16
 8000a50:	0018      	movs	r0, r3
 8000a52:	f001 f9ff 	bl	8001e54 <HAL_GPIO_WritePin>
}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b002      	add	sp, #8
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	48000400 	.word	0x48000400

08000a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a68:	f000 fb5c 	bl	8001124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6c:	f000 f811 	bl	8000a92 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a70:	f7ff fee0 	bl	8000834 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a74:	f7ff fe2c 	bl	80006d0 <MX_DMA_Init>
  MX_ADC_Init();
 8000a78:	f7ff fcbc 	bl	80003f4 <MX_ADC_Init>
  MX_CAN_Init();
 8000a7c:	f7ff fda2 	bl	80005c4 <MX_CAN_Init>
  MX_TIM2_Init();
 8000a80:	f000 f92a 	bl	8000cd8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a84:	f000 f97c 	bl	8000d80 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000a88:	f7ff fe58 	bl	800073c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000a8c:	f002 fdbf 	bl	800360e <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000a90:	e7fe      	b.n	8000a90 <main+0x2c>

08000a92 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a92:	b590      	push	{r4, r7, lr}
 8000a94:	b093      	sub	sp, #76	; 0x4c
 8000a96:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a98:	2414      	movs	r4, #20
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	2334      	movs	r3, #52	; 0x34
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	f003 fc0a 	bl	80042bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	0018      	movs	r0, r3
 8000aac:	2310      	movs	r3, #16
 8000aae:	001a      	movs	r2, r3
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	f003 fc03 	bl	80042bc <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000ab6:	0021      	movs	r1, r4
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	2212      	movs	r2, #18
 8000abc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	2210      	movs	r2, #16
 8000ace:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	2210      	movs	r2, #16
 8000ad4:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	2202      	movs	r2, #2
 8000ada:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	0212      	lsls	r2, r2, #8
 8000ae2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2280      	movs	r2, #128	; 0x80
 8000ae8:	0352      	lsls	r2, r2, #13
 8000aea:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	2200      	movs	r2, #0
 8000af0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	0018      	movs	r0, r3
 8000af6:	f001 f9e5 	bl	8001ec4 <HAL_RCC_OscConfig>
 8000afa:	1e03      	subs	r3, r0, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000afe:	f000 f82b 	bl	8000b58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2207      	movs	r2, #7
 8000b06:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f001 fd56 	bl	80025d0 <HAL_RCC_ClockConfig>
 8000b24:	1e03      	subs	r3, r0, #0
 8000b26:	d001      	beq.n	8000b2c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b28:	f000 f816 	bl	8000b58 <Error_Handler>
  }
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b013      	add	sp, #76	; 0x4c
 8000b32:	bd90      	pop	{r4, r7, pc}

08000b34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d101      	bne.n	8000b4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b46:	f000 fb01 	bl	800114c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b002      	add	sp, #8
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	40014800 	.word	0x40014800

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_MspInit+0x50>)
 8000b6c:	699a      	ldr	r2, [r3, #24]
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <HAL_MspInit+0x50>)
 8000b70:	2101      	movs	r1, #1
 8000b72:	430a      	orrs	r2, r1
 8000b74:	619a      	str	r2, [r3, #24]
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_MspInit+0x50>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_MspInit+0x50>)
 8000b84:	69da      	ldr	r2, [r3, #28]
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <HAL_MspInit+0x50>)
 8000b88:	2180      	movs	r1, #128	; 0x80
 8000b8a:	0549      	lsls	r1, r1, #21
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	61da      	str	r2, [r3, #28]
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <HAL_MspInit+0x50>)
 8000b92:	69da      	ldr	r2, [r3, #28]
 8000b94:	2380      	movs	r3, #128	; 0x80
 8000b96:	055b      	lsls	r3, r3, #21
 8000b98:	4013      	ands	r3, r2
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	425b      	negs	r3, r3
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2103      	movs	r1, #3
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f000 fec0 	bl	800192c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b002      	add	sp, #8
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0); 
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	0019      	movs	r1, r3
 8000bce:	2016      	movs	r0, #22
 8000bd0:	f000 feac 	bl	800192c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn); 
 8000bd4:	2016      	movs	r0, #22
 8000bd6:	f000 febe 	bl	8001956 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000bda:	4b21      	ldr	r3, [pc, #132]	; (8000c60 <HAL_InitTick+0xa8>)
 8000bdc:	699a      	ldr	r2, [r3, #24]
 8000bde:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <HAL_InitTick+0xa8>)
 8000be0:	2180      	movs	r1, #128	; 0x80
 8000be2:	02c9      	lsls	r1, r1, #11
 8000be4:	430a      	orrs	r2, r1
 8000be6:	619a      	str	r2, [r3, #24]
 8000be8:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <HAL_InitTick+0xa8>)
 8000bea:	699a      	ldr	r2, [r3, #24]
 8000bec:	2380      	movs	r3, #128	; 0x80
 8000bee:	02db      	lsls	r3, r3, #11
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	18fa      	adds	r2, r7, r3
 8000bfa:	2310      	movs	r3, #16
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	0011      	movs	r1, r2
 8000c00:	0018      	movs	r0, r3
 8000c02:	f001 fe5d 	bl	80028c0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c06:	f001 fe45 	bl	8002894 <HAL_RCC_GetPCLK1Freq>
 8000c0a:	0003      	movs	r3, r0
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c10:	4914      	ldr	r1, [pc, #80]	; (8000c64 <HAL_InitTick+0xac>)
 8000c12:	0018      	movs	r0, r3
 8000c14:	f7ff fa78 	bl	8000108 <__udivsi3>
 8000c18:	0003      	movs	r3, r0
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_InitTick+0xb0>)
 8000c20:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <HAL_InitTick+0xb4>)
 8000c22:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000 / 1000) - 1;
 8000c24:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <HAL_InitTick+0xb0>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <HAL_InitTick+0xb8>)
 8000c28:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <HAL_InitTick+0xb0>)
 8000c2c:	6a3a      	ldr	r2, [r7, #32]
 8000c2e:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 8000c30:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <HAL_InitTick+0xb0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <HAL_InitTick+0xb0>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <HAL_InitTick+0xb0>)
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f001 fe68 	bl	8002914 <HAL_TIM_Base_Init>
 8000c44:	1e03      	subs	r3, r0, #0
 8000c46:	d105      	bne.n	8000c54 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000c48:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <HAL_InitTick+0xb0>)
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f001 fe96 	bl	800297c <HAL_TIM_Base_Start_IT>
 8000c50:	0003      	movs	r3, r0
 8000c52:	e000      	b.n	8000c56 <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
}
 8000c56:	0018      	movs	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b00a      	add	sp, #40	; 0x28
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	40021000 	.word	0x40021000
 8000c64:	000f4240 	.word	0x000f4240
 8000c68:	200007c8 	.word	0x200007c8
 8000c6c:	40014800 	.word	0x40014800
 8000c70:	000003e7 	.word	0x000003e7

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <HardFault_Handler+0x4>

08000c84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <DMA1_Channel1_IRQHandler+0x14>)
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f000 febc 	bl	8001a08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	20000354 	.word	0x20000354

08000c9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <TIM3_IRQHandler+0x14>)
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f001 ffc9 	bl	8002c3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ca8:	46c0      	nop			; (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	20000808 	.word	0x20000808

08000cb4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <TIM17_IRQHandler+0x14>)
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f001 ffbd 	bl	8002c3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	200007c8 	.word	0x200007c8

08000ccc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
//  TIM_Encoder_InitTypeDef sConfig = {0};
//  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim2.Instance = TIM2;
 8000cdc:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <MX_TIM2_Init+0x9c>)
 8000cde:	2280      	movs	r2, #128	; 0x80
 8000ce0:	05d2      	lsls	r2, r2, #23
 8000ce2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ce4:	4b23      	ldr	r3, [pc, #140]	; (8000d74 <MX_TIM2_Init+0x9c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cea:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <MX_TIM2_Init+0x9c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8000cf0:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <MX_TIM2_Init+0x9c>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	4252      	negs	r2, r2
 8000cf6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf8:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <MX_TIM2_Init+0x9c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <MX_TIM2_Init+0x9c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d04:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <MX_TIM2_Init+0xa0>)
 8000d06:	2203      	movs	r2, #3
 8000d08:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d0a:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <MX_TIM2_Init+0xa0>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d10:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <MX_TIM2_Init+0xa0>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <MX_TIM2_Init+0xa0>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 3;
 8000d1c:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <MX_TIM2_Init+0xa0>)
 8000d1e:	2203      	movs	r2, #3
 8000d20:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <MX_TIM2_Init+0xa0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d28:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <MX_TIM2_Init+0xa0>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d2e:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <MX_TIM2_Init+0xa0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 3;
 8000d34:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <MX_TIM2_Init+0xa0>)
 8000d36:	2203      	movs	r2, #3
 8000d38:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000d3a:	4a0f      	ldr	r2, [pc, #60]	; (8000d78 <MX_TIM2_Init+0xa0>)
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <MX_TIM2_Init+0x9c>)
 8000d3e:	0011      	movs	r1, r2
 8000d40:	0018      	movs	r0, r3
 8000d42:	f001 feaf 	bl	8002aa4 <HAL_TIM_Encoder_Init>
 8000d46:	1e03      	subs	r3, r0, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000d4a:	f7ff ff05 	bl	8000b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d5a:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <MX_TIM2_Init+0x9c>)
 8000d5e:	0011      	movs	r1, r2
 8000d60:	0018      	movs	r0, r3
 8000d62:	f002 fbd3 	bl	800350c <HAL_TIMEx_MasterConfigSynchronization>
 8000d66:	1e03      	subs	r3, r0, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000d6a:	f7ff fef5 	bl	8000b58 <Error_Handler>
  }

}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000848 	.word	0x20000848
 8000d78:	20000230 	.word	0x20000230
 8000d7c:	2000020c 	.word	0x2000020c

08000d80 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
//  TIM_MasterConfigTypeDef sMasterConfig = {0};
//  TIM_OC_InitTypeDef sConfigOC = {0};

  htim3.Instance = TIM3;
 8000d84:	4b32      	ldr	r3, [pc, #200]	; (8000e50 <MX_TIM3_Init+0xd0>)
 8000d86:	4a33      	ldr	r2, [pc, #204]	; (8000e54 <MX_TIM3_Init+0xd4>)
 8000d88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d8a:	4b31      	ldr	r3, [pc, #196]	; (8000e50 <MX_TIM3_Init+0xd0>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000d90:	4b2f      	ldr	r3, [pc, #188]	; (8000e50 <MX_TIM3_Init+0xd0>)
 8000d92:	2220      	movs	r2, #32
 8000d94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2399;
 8000d96:	4b2e      	ldr	r3, [pc, #184]	; (8000e50 <MX_TIM3_Init+0xd0>)
 8000d98:	4a2f      	ldr	r2, [pc, #188]	; (8000e58 <MX_TIM3_Init+0xd8>)
 8000d9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9c:	4b2c      	ldr	r3, [pc, #176]	; (8000e50 <MX_TIM3_Init+0xd0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000da2:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <MX_TIM3_Init+0xd0>)
 8000da4:	2280      	movs	r2, #128	; 0x80
 8000da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000da8:	4b29      	ldr	r3, [pc, #164]	; (8000e50 <MX_TIM3_Init+0xd0>)
 8000daa:	0018      	movs	r0, r3
 8000dac:	f001 fe08 	bl	80029c0 <HAL_TIM_PWM_Init>
 8000db0:	1e03      	subs	r3, r0, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM3_Init+0x38>
  {
    Error_Handler();
 8000db4:	f7ff fed0 	bl	8000b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db8:	4b28      	ldr	r3, [pc, #160]	; (8000e5c <MX_TIM3_Init+0xdc>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dbe:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <MX_TIM3_Init+0xdc>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dc4:	4a25      	ldr	r2, [pc, #148]	; (8000e5c <MX_TIM3_Init+0xdc>)
 8000dc6:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <MX_TIM3_Init+0xd0>)
 8000dc8:	0011      	movs	r1, r2
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f002 fb9e 	bl	800350c <HAL_TIMEx_MasterConfigSynchronization>
 8000dd0:	1e03      	subs	r3, r0, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000dd4:	f7ff fec0 	bl	8000b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dd8:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <MX_TIM3_Init+0xe0>)
 8000dda:	2260      	movs	r2, #96	; 0x60
 8000ddc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <MX_TIM3_Init+0xe0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de4:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <MX_TIM3_Init+0xe0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dea:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <MX_TIM3_Init+0xe0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000df0:	491b      	ldr	r1, [pc, #108]	; (8000e60 <MX_TIM3_Init+0xe0>)
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <MX_TIM3_Init+0xd0>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	0018      	movs	r0, r3
 8000df8:	f002 f836 	bl	8002e68 <HAL_TIM_PWM_ConfigChannel>
 8000dfc:	1e03      	subs	r3, r0, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e00:	f7ff feaa 	bl	8000b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e04:	4916      	ldr	r1, [pc, #88]	; (8000e60 <MX_TIM3_Init+0xe0>)
 8000e06:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <MX_TIM3_Init+0xd0>)
 8000e08:	2204      	movs	r2, #4
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f002 f82c 	bl	8002e68 <HAL_TIM_PWM_ConfigChannel>
 8000e10:	1e03      	subs	r3, r0, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000e14:	f7ff fea0 	bl	8000b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e18:	4911      	ldr	r1, [pc, #68]	; (8000e60 <MX_TIM3_Init+0xe0>)
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <MX_TIM3_Init+0xd0>)
 8000e1c:	2208      	movs	r2, #8
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f002 f822 	bl	8002e68 <HAL_TIM_PWM_ConfigChannel>
 8000e24:	1e03      	subs	r3, r0, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8000e28:	f7ff fe96 	bl	8000b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e2c:	490c      	ldr	r1, [pc, #48]	; (8000e60 <MX_TIM3_Init+0xe0>)
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <MX_TIM3_Init+0xd0>)
 8000e30:	220c      	movs	r2, #12
 8000e32:	0018      	movs	r0, r3
 8000e34:	f002 f818 	bl	8002e68 <HAL_TIM_PWM_ConfigChannel>
 8000e38:	1e03      	subs	r3, r0, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8000e3c:	f7ff fe8c 	bl	8000b58 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000e40:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <MX_TIM3_Init+0xd0>)
 8000e42:	0018      	movs	r0, r3
 8000e44:	f000 f87e 	bl	8000f44 <HAL_TIM_MspPostInit>

}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	20000808 	.word	0x20000808
 8000e54:	40000400 	.word	0x40000400
 8000e58:	0000095f 	.word	0x0000095f
 8000e5c:	2000020c 	.word	0x2000020c
 8000e60:	20000214 	.word	0x20000214

08000e64 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	2314      	movs	r3, #20
 8000e6e:	18fb      	adds	r3, r7, r3
 8000e70:	0018      	movs	r0, r3
 8000e72:	2314      	movs	r3, #20
 8000e74:	001a      	movs	r2, r3
 8000e76:	2100      	movs	r1, #0
 8000e78:	f003 fa20 	bl	80042bc <memset>
  if(tim_encoderHandle->Instance==TIM2)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	2380      	movs	r3, #128	; 0x80
 8000e82:	05db      	lsls	r3, r3, #23
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d130      	bne.n	8000eea <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e88:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <HAL_TIM_Encoder_MspInit+0x90>)
 8000e8a:	69da      	ldr	r2, [r3, #28]
 8000e8c:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <HAL_TIM_Encoder_MspInit+0x90>)
 8000e8e:	2101      	movs	r1, #1
 8000e90:	430a      	orrs	r2, r1
 8000e92:	61da      	str	r2, [r3, #28]
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <HAL_TIM_Encoder_MspInit+0x90>)
 8000e96:	69db      	ldr	r3, [r3, #28]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <HAL_TIM_Encoder_MspInit+0x90>)
 8000ea2:	695a      	ldr	r2, [r3, #20]
 8000ea4:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <HAL_TIM_Encoder_MspInit+0x90>)
 8000ea6:	2180      	movs	r1, #128	; 0x80
 8000ea8:	0289      	lsls	r1, r1, #10
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	615a      	str	r2, [r3, #20]
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <HAL_TIM_Encoder_MspInit+0x90>)
 8000eb0:	695a      	ldr	r2, [r3, #20]
 8000eb2:	2380      	movs	r3, #128	; 0x80
 8000eb4:	029b      	lsls	r3, r3, #10
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8000ebc:	2114      	movs	r1, #20
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	2202      	movs	r2, #2
 8000eda:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	187a      	adds	r2, r7, r1
 8000ede:	2390      	movs	r3, #144	; 0x90
 8000ee0:	05db      	lsls	r3, r3, #23
 8000ee2:	0011      	movs	r1, r2
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f000 fe4d 	bl	8001b84 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b00a      	add	sp, #40	; 0x28
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0d      	ldr	r2, [pc, #52]	; (8000f3c <HAL_TIM_PWM_MspInit+0x44>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d113      	bne.n	8000f32 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <HAL_TIM_PWM_MspInit+0x48>)
 8000f0c:	69da      	ldr	r2, [r3, #28]
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <HAL_TIM_PWM_MspInit+0x48>)
 8000f10:	2102      	movs	r1, #2
 8000f12:	430a      	orrs	r2, r1
 8000f14:	61da      	str	r2, [r3, #28]
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_TIM_PWM_MspInit+0x48>)
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2103      	movs	r1, #3
 8000f26:	2010      	movs	r0, #16
 8000f28:	f000 fd00 	bl	800192c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f2c:	2010      	movs	r0, #16
 8000f2e:	f000 fd12 	bl	8001956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b004      	add	sp, #16
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	40000400 	.word	0x40000400
 8000f40:	40021000 	.word	0x40021000

08000f44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b08b      	sub	sp, #44	; 0x2c
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	2314      	movs	r3, #20
 8000f4e:	18fb      	adds	r3, r7, r3
 8000f50:	0018      	movs	r0, r3
 8000f52:	2314      	movs	r3, #20
 8000f54:	001a      	movs	r2, r3
 8000f56:	2100      	movs	r1, #0
 8000f58:	f003 f9b0 	bl	80042bc <memset>
  if(timHandle->Instance==TIM3)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a27      	ldr	r2, [pc, #156]	; (8001000 <HAL_TIM_MspPostInit+0xbc>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d148      	bne.n	8000ff8 <HAL_TIM_MspPostInit+0xb4>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	4b27      	ldr	r3, [pc, #156]	; (8001004 <HAL_TIM_MspPostInit+0xc0>)
 8000f68:	695a      	ldr	r2, [r3, #20]
 8000f6a:	4b26      	ldr	r3, [pc, #152]	; (8001004 <HAL_TIM_MspPostInit+0xc0>)
 8000f6c:	2180      	movs	r1, #128	; 0x80
 8000f6e:	0289      	lsls	r1, r1, #10
 8000f70:	430a      	orrs	r2, r1
 8000f72:	615a      	str	r2, [r3, #20]
 8000f74:	4b23      	ldr	r3, [pc, #140]	; (8001004 <HAL_TIM_MspPostInit+0xc0>)
 8000f76:	695a      	ldr	r2, [r3, #20]
 8000f78:	2380      	movs	r3, #128	; 0x80
 8000f7a:	029b      	lsls	r3, r3, #10
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	4b20      	ldr	r3, [pc, #128]	; (8001004 <HAL_TIM_MspPostInit+0xc0>)
 8000f84:	695a      	ldr	r2, [r3, #20]
 8000f86:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <HAL_TIM_MspPostInit+0xc0>)
 8000f88:	2180      	movs	r1, #128	; 0x80
 8000f8a:	02c9      	lsls	r1, r1, #11
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	615a      	str	r2, [r3, #20]
 8000f90:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <HAL_TIM_MspPostInit+0xc0>)
 8000f92:	695a      	ldr	r2, [r3, #20]
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	02db      	lsls	r3, r3, #11
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f9e:	2414      	movs	r4, #20
 8000fa0:	193b      	adds	r3, r7, r4
 8000fa2:	22c0      	movs	r2, #192	; 0xc0
 8000fa4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	193b      	adds	r3, r7, r4
 8000fa8:	2202      	movs	r2, #2
 8000faa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	193b      	adds	r3, r7, r4
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	193b      	adds	r3, r7, r4
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000fb8:	193b      	adds	r3, r7, r4
 8000fba:	2201      	movs	r2, #1
 8000fbc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	193a      	adds	r2, r7, r4
 8000fc0:	2390      	movs	r3, #144	; 0x90
 8000fc2:	05db      	lsls	r3, r3, #23
 8000fc4:	0011      	movs	r1, r2
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f000 fddc 	bl	8001b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fcc:	0021      	movs	r1, r4
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	187b      	adds	r3, r7, r1
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	187b      	adds	r3, r7, r1
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000fe6:	187b      	adds	r3, r7, r1
 8000fe8:	2201      	movs	r2, #1
 8000fea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	4a06      	ldr	r2, [pc, #24]	; (8001008 <HAL_TIM_MspPostInit+0xc4>)
 8000ff0:	0019      	movs	r1, r3
 8000ff2:	0010      	movs	r0, r2
 8000ff4:	f000 fdc6 	bl	8001b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b00b      	add	sp, #44	; 0x2c
 8000ffe:	bd90      	pop	{r4, r7, pc}
 8001000:	40000400 	.word	0x40000400
 8001004:	40021000 	.word	0x40021000
 8001008:	48000400 	.word	0x48000400

0800100c <PWM_4_Out>:
  /* USER CODE END TIM3_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void PWM_4_Out(int *duty) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; ++i) {
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e022      	b.n	8001060 <PWM_4_Out+0x54>
		sConfigOC.Pulse=duty[i];
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	18d3      	adds	r3, r2, r3
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	001a      	movs	r2, r3
 8001026:	4b12      	ldr	r3, [pc, #72]	; (8001070 <PWM_4_Out+0x64>)
 8001028:	605a      	str	r2, [r3, #4]
		if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1+i*4) != HAL_OK)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	001a      	movs	r2, r3
 8001030:	490f      	ldr	r1, [pc, #60]	; (8001070 <PWM_4_Out+0x64>)
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <PWM_4_Out+0x68>)
 8001034:	0018      	movs	r0, r3
 8001036:	f001 ff17 	bl	8002e68 <HAL_TIM_PWM_ConfigChannel>
 800103a:	1e03      	subs	r3, r0, #0
 800103c:	d001      	beq.n	8001042 <PWM_4_Out+0x36>
			Error_Handler();
 800103e:	f7ff fd8b 	bl	8000b58 <Error_Handler>
		if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1+i*4) != HAL_OK)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	001a      	movs	r2, r3
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <PWM_4_Out+0x68>)
 800104a:	0011      	movs	r1, r2
 800104c:	0018      	movs	r0, r3
 800104e:	f001 fce3 	bl	8002a18 <HAL_TIM_PWM_Start>
 8001052:	1e03      	subs	r3, r0, #0
 8001054:	d001      	beq.n	800105a <PWM_4_Out+0x4e>
			Error_Handler();
 8001056:	f7ff fd7f 	bl	8000b58 <Error_Handler>
	for (int i = 0; i < 4; ++i) {
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	3301      	adds	r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2b03      	cmp	r3, #3
 8001064:	ddd9      	ble.n	800101a <PWM_4_Out+0xe>
	}
}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	46bd      	mov	sp, r7
 800106a:	b004      	add	sp, #16
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	20000214 	.word	0x20000214
 8001074:	20000808 	.word	0x20000808

08001078 <Enc_Start>:
void Enc_Start(){
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <Enc_Start+0x14>)
 800107e:	213c      	movs	r1, #60	; 0x3c
 8001080:	0018      	movs	r0, r3
 8001082:	f001 fda3 	bl	8002bcc <HAL_TIM_Encoder_Start>
}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000848 	.word	0x20000848

08001090 <Enc_Read>:
uint32_t Enc_Read(){
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	return TIM2->CNT;
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	05db      	lsls	r3, r3, #23
 8001098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800109a:	0018      	movs	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010a0:	4813      	ldr	r0, [pc, #76]	; (80010f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010a2:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80010a4:	4813      	ldr	r0, [pc, #76]	; (80010f4 <LoopForever+0x6>)
    LDR R1, [R0]
 80010a6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80010a8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80010aa:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <LoopForever+0xa>)
    CMP R1, R2
 80010ac:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80010ae:	d105      	bne.n	80010bc <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80010b0:	4812      	ldr	r0, [pc, #72]	; (80010fc <LoopForever+0xe>)
    LDR R1,=0x00000001
 80010b2:	4913      	ldr	r1, [pc, #76]	; (8001100 <LoopForever+0x12>)
    STR R1, [R0]
 80010b4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80010b6:	4813      	ldr	r0, [pc, #76]	; (8001104 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80010b8:	4913      	ldr	r1, [pc, #76]	; (8001108 <LoopForever+0x1a>)
    STR R1, [R0]
 80010ba:	6001      	str	r1, [r0, #0]

080010bc <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010bc:	4813      	ldr	r0, [pc, #76]	; (800110c <LoopForever+0x1e>)
  ldr r1, =_edata
 80010be:	4914      	ldr	r1, [pc, #80]	; (8001110 <LoopForever+0x22>)
  ldr r2, =_sidata
 80010c0:	4a14      	ldr	r2, [pc, #80]	; (8001114 <LoopForever+0x26>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c4:	e002      	b.n	80010cc <LoopCopyDataInit>

080010c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ca:	3304      	adds	r3, #4

080010cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d0:	d3f9      	bcc.n	80010c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d2:	4a11      	ldr	r2, [pc, #68]	; (8001118 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80010d4:	4c11      	ldr	r4, [pc, #68]	; (800111c <LoopForever+0x2e>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d8:	e001      	b.n	80010de <LoopFillZerobss>

080010da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010dc:	3204      	adds	r2, #4

080010de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e0:	d3fb      	bcc.n	80010da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010e2:	f7ff fdf3 	bl	8000ccc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80010e6:	f003 f8c5 	bl	8004274 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ea:	f7ff fcbb 	bl	8000a64 <main>

080010ee <LoopForever>:

LoopForever:
    b LoopForever
 80010ee:	e7fe      	b.n	80010ee <LoopForever>
  ldr   r0, =_estack
 80010f0:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80010f4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80010f8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80010fc:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001100:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001104:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001108:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800110c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001110:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001114:	08004380 	.word	0x08004380
  ldr r2, =_sbss
 8001118:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800111c:	2000088c 	.word	0x2000088c

08001120 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC1_IRQHandler>
	...

08001124 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <HAL_Init+0x24>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_Init+0x24>)
 800112e:	2110      	movs	r1, #16
 8001130:	430a      	orrs	r2, r1
 8001132:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001134:	2000      	movs	r0, #0
 8001136:	f7ff fd3f 	bl	8000bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800113a:	f7ff fd13 	bl	8000b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	0018      	movs	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	40022000 	.word	0x40022000

0800114c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_IncTick+0x1c>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	001a      	movs	r2, r3
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <HAL_IncTick+0x20>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	18d2      	adds	r2, r2, r3
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <HAL_IncTick+0x20>)
 800115e:	601a      	str	r2, [r3, #0]
}
 8001160:	46c0      	nop			; (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	20000004 	.word	0x20000004
 800116c:	20000888 	.word	0x20000888

08001170 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;
 8001174:	4b02      	ldr	r3, [pc, #8]	; (8001180 <HAL_GetTick+0x10>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	0018      	movs	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	20000888 	.word	0x20000888

08001184 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800118c:	230f      	movs	r3, #15
 800118e:	18fb      	adds	r3, r7, r3
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e125      	b.n	80013ee <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10a      	bne.n	80011c0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2234      	movs	r2, #52	; 0x34
 80011b4:	2100      	movs	r1, #0
 80011b6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	0018      	movs	r0, r3
 80011bc:	f7ff f990 	bl	80004e0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c4:	2210      	movs	r2, #16
 80011c6:	4013      	ands	r3, r2
 80011c8:	d000      	beq.n	80011cc <HAL_ADC_Init+0x48>
 80011ca:	e103      	b.n	80013d4 <HAL_ADC_Init+0x250>
 80011cc:	230f      	movs	r3, #15
 80011ce:	18fb      	adds	r3, r7, r3
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d000      	beq.n	80011d8 <HAL_ADC_Init+0x54>
 80011d6:	e0fd      	b.n	80013d4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	2204      	movs	r2, #4
 80011e0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80011e2:	d000      	beq.n	80011e6 <HAL_ADC_Init+0x62>
 80011e4:	e0f6      	b.n	80013d4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ea:	4a83      	ldr	r2, [pc, #524]	; (80013f8 <HAL_ADC_Init+0x274>)
 80011ec:	4013      	ands	r3, r2
 80011ee:	2202      	movs	r2, #2
 80011f0:	431a      	orrs	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	2203      	movs	r2, #3
 80011fe:	4013      	ands	r3, r2
 8001200:	2b01      	cmp	r3, #1
 8001202:	d112      	bne.n	800122a <HAL_ADC_Init+0xa6>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2201      	movs	r2, #1
 800120c:	4013      	ands	r3, r2
 800120e:	2b01      	cmp	r3, #1
 8001210:	d009      	beq.n	8001226 <HAL_ADC_Init+0xa2>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68da      	ldr	r2, [r3, #12]
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	401a      	ands	r2, r3
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	429a      	cmp	r2, r3
 8001224:	d101      	bne.n	800122a <HAL_ADC_Init+0xa6>
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <HAL_ADC_Init+0xa8>
 800122a:	2300      	movs	r3, #0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d116      	bne.n	800125e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	2218      	movs	r2, #24
 8001238:	4393      	bics	r3, r2
 800123a:	0019      	movs	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	430a      	orrs	r2, r1
 8001246:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	0899      	lsrs	r1, r3, #2
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	430a      	orrs	r2, r1
 800125c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68da      	ldr	r2, [r3, #12]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4964      	ldr	r1, [pc, #400]	; (80013fc <HAL_ADC_Init+0x278>)
 800126a:	400a      	ands	r2, r1
 800126c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7e1b      	ldrb	r3, [r3, #24]
 8001272:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	7e5b      	ldrb	r3, [r3, #25]
 8001278:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800127a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	7e9b      	ldrb	r3, [r3, #26]
 8001280:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001282:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001288:	2b01      	cmp	r3, #1
 800128a:	d002      	beq.n	8001292 <HAL_ADC_Init+0x10e>
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	015b      	lsls	r3, r3, #5
 8001290:	e000      	b.n	8001294 <HAL_ADC_Init+0x110>
 8001292:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001294:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800129a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d101      	bne.n	80012a8 <HAL_ADC_Init+0x124>
 80012a4:	2304      	movs	r3, #4
 80012a6:	e000      	b.n	80012aa <HAL_ADC_Init+0x126>
 80012a8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80012aa:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2124      	movs	r1, #36	; 0x24
 80012b0:	5c5b      	ldrb	r3, [r3, r1]
 80012b2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80012b4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	7edb      	ldrb	r3, [r3, #27]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d115      	bne.n	80012f0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7e9b      	ldrb	r3, [r3, #26]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d105      	bne.n	80012d8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	2280      	movs	r2, #128	; 0x80
 80012d0:	0252      	lsls	r2, r2, #9
 80012d2:	4313      	orrs	r3, r2
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	e00b      	b.n	80012f0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012dc:	2220      	movs	r2, #32
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012e8:	2201      	movs	r2, #1
 80012ea:	431a      	orrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69da      	ldr	r2, [r3, #28]
 80012f4:	23c2      	movs	r3, #194	; 0xc2
 80012f6:	33ff      	adds	r3, #255	; 0xff
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d007      	beq.n	800130c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001304:	4313      	orrs	r3, r2
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	4313      	orrs	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	68d9      	ldr	r1, [r3, #12]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	430a      	orrs	r2, r1
 800131a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001320:	2380      	movs	r3, #128	; 0x80
 8001322:	055b      	lsls	r3, r3, #21
 8001324:	429a      	cmp	r2, r3
 8001326:	d01b      	beq.n	8001360 <HAL_ADC_Init+0x1dc>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132c:	2b01      	cmp	r3, #1
 800132e:	d017      	beq.n	8001360 <HAL_ADC_Init+0x1dc>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001334:	2b02      	cmp	r3, #2
 8001336:	d013      	beq.n	8001360 <HAL_ADC_Init+0x1dc>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133c:	2b03      	cmp	r3, #3
 800133e:	d00f      	beq.n	8001360 <HAL_ADC_Init+0x1dc>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001344:	2b04      	cmp	r3, #4
 8001346:	d00b      	beq.n	8001360 <HAL_ADC_Init+0x1dc>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134c:	2b05      	cmp	r3, #5
 800134e:	d007      	beq.n	8001360 <HAL_ADC_Init+0x1dc>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001354:	2b06      	cmp	r3, #6
 8001356:	d003      	beq.n	8001360 <HAL_ADC_Init+0x1dc>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135c:	2b07      	cmp	r3, #7
 800135e:	d112      	bne.n	8001386 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	695a      	ldr	r2, [r3, #20]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2107      	movs	r1, #7
 800136c:	438a      	bics	r2, r1
 800136e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6959      	ldr	r1, [r3, #20]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137a:	2207      	movs	r2, #7
 800137c:	401a      	ands	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	430a      	orrs	r2, r1
 8001384:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	4a1c      	ldr	r2, [pc, #112]	; (8001400 <HAL_ADC_Init+0x27c>)
 800138e:	4013      	ands	r3, r2
 8001390:	68ba      	ldr	r2, [r7, #8]
 8001392:	429a      	cmp	r2, r3
 8001394:	d10b      	bne.n	80013ae <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a0:	2203      	movs	r2, #3
 80013a2:	4393      	bics	r3, r2
 80013a4:	2201      	movs	r2, #1
 80013a6:	431a      	orrs	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80013ac:	e01c      	b.n	80013e8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b2:	2212      	movs	r2, #18
 80013b4:	4393      	bics	r3, r2
 80013b6:	2210      	movs	r2, #16
 80013b8:	431a      	orrs	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013c2:	2201      	movs	r2, #1
 80013c4:	431a      	orrs	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80013ca:	230f      	movs	r3, #15
 80013cc:	18fb      	adds	r3, r7, r3
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80013d2:	e009      	b.n	80013e8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d8:	2210      	movs	r2, #16
 80013da:	431a      	orrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80013e0:	230f      	movs	r3, #15
 80013e2:	18fb      	adds	r3, r7, r3
 80013e4:	2201      	movs	r2, #1
 80013e6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013e8:	230f      	movs	r3, #15
 80013ea:	18fb      	adds	r3, r7, r3
 80013ec:	781b      	ldrb	r3, [r3, #0]
}
 80013ee:	0018      	movs	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b004      	add	sp, #16
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	fffffefd 	.word	0xfffffefd
 80013fc:	fffe0219 	.word	0xfffe0219
 8001400:	833fffe7 	.word	0x833fffe7

08001404 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800140e:	230f      	movs	r3, #15
 8001410:	18fb      	adds	r3, r7, r3
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	055b      	lsls	r3, r3, #21
 8001422:	429a      	cmp	r2, r3
 8001424:	d011      	beq.n	800144a <HAL_ADC_ConfigChannel+0x46>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142a:	2b01      	cmp	r3, #1
 800142c:	d00d      	beq.n	800144a <HAL_ADC_ConfigChannel+0x46>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001432:	2b02      	cmp	r3, #2
 8001434:	d009      	beq.n	800144a <HAL_ADC_ConfigChannel+0x46>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143a:	2b03      	cmp	r3, #3
 800143c:	d005      	beq.n	800144a <HAL_ADC_ConfigChannel+0x46>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001442:	2b04      	cmp	r3, #4
 8001444:	d001      	beq.n	800144a <HAL_ADC_ConfigChannel+0x46>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2234      	movs	r2, #52	; 0x34
 800144e:	5c9b      	ldrb	r3, [r3, r2]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d101      	bne.n	8001458 <HAL_ADC_ConfigChannel+0x54>
 8001454:	2302      	movs	r3, #2
 8001456:	e0d0      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1f6>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2234      	movs	r2, #52	; 0x34
 800145c:	2101      	movs	r1, #1
 800145e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	2204      	movs	r2, #4
 8001468:	4013      	ands	r3, r2
 800146a:	d000      	beq.n	800146e <HAL_ADC_ConfigChannel+0x6a>
 800146c:	e0b4      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	4a64      	ldr	r2, [pc, #400]	; (8001604 <HAL_ADC_ConfigChannel+0x200>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d100      	bne.n	800147a <HAL_ADC_ConfigChannel+0x76>
 8001478:	e082      	b.n	8001580 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2201      	movs	r2, #1
 8001486:	409a      	lsls	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001494:	2380      	movs	r3, #128	; 0x80
 8001496:	055b      	lsls	r3, r3, #21
 8001498:	429a      	cmp	r2, r3
 800149a:	d037      	beq.n	800150c <HAL_ADC_ConfigChannel+0x108>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d033      	beq.n	800150c <HAL_ADC_ConfigChannel+0x108>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d02f      	beq.n	800150c <HAL_ADC_ConfigChannel+0x108>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d02b      	beq.n	800150c <HAL_ADC_ConfigChannel+0x108>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b8:	2b04      	cmp	r3, #4
 80014ba:	d027      	beq.n	800150c <HAL_ADC_ConfigChannel+0x108>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c0:	2b05      	cmp	r3, #5
 80014c2:	d023      	beq.n	800150c <HAL_ADC_ConfigChannel+0x108>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c8:	2b06      	cmp	r3, #6
 80014ca:	d01f      	beq.n	800150c <HAL_ADC_ConfigChannel+0x108>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d0:	2b07      	cmp	r3, #7
 80014d2:	d01b      	beq.n	800150c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	2107      	movs	r1, #7
 80014e0:	400b      	ands	r3, r1
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d012      	beq.n	800150c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	695a      	ldr	r2, [r3, #20]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2107      	movs	r1, #7
 80014f2:	438a      	bics	r2, r1
 80014f4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6959      	ldr	r1, [r3, #20]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2207      	movs	r2, #7
 8001502:	401a      	ands	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b10      	cmp	r3, #16
 8001512:	d007      	beq.n	8001524 <HAL_ADC_ConfigChannel+0x120>
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b11      	cmp	r3, #17
 800151a:	d003      	beq.n	8001524 <HAL_ADC_ConfigChannel+0x120>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b12      	cmp	r3, #18
 8001522:	d163      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001524:	4b38      	ldr	r3, [pc, #224]	; (8001608 <HAL_ADC_ConfigChannel+0x204>)
 8001526:	6819      	ldr	r1, [r3, #0]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b10      	cmp	r3, #16
 800152e:	d009      	beq.n	8001544 <HAL_ADC_ConfigChannel+0x140>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b11      	cmp	r3, #17
 8001536:	d102      	bne.n	800153e <HAL_ADC_ConfigChannel+0x13a>
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	03db      	lsls	r3, r3, #15
 800153c:	e004      	b.n	8001548 <HAL_ADC_ConfigChannel+0x144>
 800153e:	2380      	movs	r3, #128	; 0x80
 8001540:	045b      	lsls	r3, r3, #17
 8001542:	e001      	b.n	8001548 <HAL_ADC_ConfigChannel+0x144>
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	041b      	lsls	r3, r3, #16
 8001548:	4a2f      	ldr	r2, [pc, #188]	; (8001608 <HAL_ADC_ConfigChannel+0x204>)
 800154a:	430b      	orrs	r3, r1
 800154c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b10      	cmp	r3, #16
 8001554:	d14a      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001556:	4b2d      	ldr	r3, [pc, #180]	; (800160c <HAL_ADC_ConfigChannel+0x208>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	492d      	ldr	r1, [pc, #180]	; (8001610 <HAL_ADC_ConfigChannel+0x20c>)
 800155c:	0018      	movs	r0, r3
 800155e:	f7fe fdd3 	bl	8000108 <__udivsi3>
 8001562:	0003      	movs	r3, r0
 8001564:	001a      	movs	r2, r3
 8001566:	0013      	movs	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	189b      	adds	r3, r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001570:	e002      	b.n	8001578 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	3b01      	subs	r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f9      	bne.n	8001572 <HAL_ADC_ConfigChannel+0x16e>
 800157e:	e035      	b.n	80015ec <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2101      	movs	r1, #1
 800158c:	4099      	lsls	r1, r3
 800158e:	000b      	movs	r3, r1
 8001590:	43d9      	mvns	r1, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	400a      	ands	r2, r1
 8001598:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b10      	cmp	r3, #16
 80015a0:	d007      	beq.n	80015b2 <HAL_ADC_ConfigChannel+0x1ae>
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b11      	cmp	r3, #17
 80015a8:	d003      	beq.n	80015b2 <HAL_ADC_ConfigChannel+0x1ae>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b12      	cmp	r3, #18
 80015b0:	d11c      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HAL_ADC_ConfigChannel+0x204>)
 80015b4:	6819      	ldr	r1, [r3, #0]
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b10      	cmp	r3, #16
 80015bc:	d007      	beq.n	80015ce <HAL_ADC_ConfigChannel+0x1ca>
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b11      	cmp	r3, #17
 80015c4:	d101      	bne.n	80015ca <HAL_ADC_ConfigChannel+0x1c6>
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <HAL_ADC_ConfigChannel+0x210>)
 80015c8:	e002      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x1cc>
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <HAL_ADC_ConfigChannel+0x214>)
 80015cc:	e000      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x1cc>
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <HAL_ADC_ConfigChannel+0x218>)
 80015d0:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <HAL_ADC_ConfigChannel+0x204>)
 80015d2:	400b      	ands	r3, r1
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	e009      	b.n	80015ec <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015dc:	2220      	movs	r2, #32
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80015e4:	230f      	movs	r3, #15
 80015e6:	18fb      	adds	r3, r7, r3
 80015e8:	2201      	movs	r2, #1
 80015ea:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2234      	movs	r2, #52	; 0x34
 80015f0:	2100      	movs	r1, #0
 80015f2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80015f4:	230f      	movs	r3, #15
 80015f6:	18fb      	adds	r3, r7, r3
 80015f8:	781b      	ldrb	r3, [r3, #0]
}
 80015fa:	0018      	movs	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	b004      	add	sp, #16
 8001600:	bd80      	pop	{r7, pc}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	00001001 	.word	0x00001001
 8001608:	40012708 	.word	0x40012708
 800160c:	20000000 	.word	0x20000000
 8001610:	000f4240 	.word	0x000f4240
 8001614:	ffbfffff 	.word	0xffbfffff
 8001618:	feffffff 	.word	0xfeffffff
 800161c:	ff7fffff 	.word	0xff7fffff

08001620 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e0f0      	b.n	8001814 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2220      	movs	r2, #32
 8001636:	5c9b      	ldrb	r3, [r3, r2]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d103      	bne.n	8001646 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	0018      	movs	r0, r3
 8001642:	f7fe fff7 	bl	8000634 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2102      	movs	r1, #2
 8001652:	438a      	bics	r2, r1
 8001654:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001656:	f7ff fd8b 	bl	8001170 <HAL_GetTick>
 800165a:	0003      	movs	r3, r0
 800165c:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800165e:	e013      	b.n	8001688 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001660:	f7ff fd86 	bl	8001170 <HAL_GetTick>
 8001664:	0002      	movs	r2, r0
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b0a      	cmp	r3, #10
 800166c:	d90c      	bls.n	8001688 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001672:	2280      	movs	r2, #128	; 0x80
 8001674:	0292      	lsls	r2, r2, #10
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2220      	movs	r2, #32
 8001680:	2105      	movs	r1, #5
 8001682:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e0c5      	b.n	8001814 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2202      	movs	r2, #2
 8001690:	4013      	ands	r3, r2
 8001692:	d1e5      	bne.n	8001660 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2101      	movs	r1, #1
 80016a0:	430a      	orrs	r2, r1
 80016a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016a4:	f7ff fd64 	bl	8001170 <HAL_GetTick>
 80016a8:	0003      	movs	r3, r0
 80016aa:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016ac:	e013      	b.n	80016d6 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016ae:	f7ff fd5f 	bl	8001170 <HAL_GetTick>
 80016b2:	0002      	movs	r2, r0
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b0a      	cmp	r3, #10
 80016ba:	d90c      	bls.n	80016d6 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	2280      	movs	r2, #128	; 0x80
 80016c2:	0292      	lsls	r2, r2, #10
 80016c4:	431a      	orrs	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2220      	movs	r2, #32
 80016ce:	2105      	movs	r1, #5
 80016d0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e09e      	b.n	8001814 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	4013      	ands	r3, r2
 80016e0:	d0e5      	beq.n	80016ae <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	7e1b      	ldrb	r3, [r3, #24]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d108      	bne.n	80016fc <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2180      	movs	r1, #128	; 0x80
 80016f6:	430a      	orrs	r2, r1
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	e007      	b.n	800170c <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	438a      	bics	r2, r1
 800170a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7e5b      	ldrb	r3, [r3, #25]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d108      	bne.n	8001726 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2140      	movs	r1, #64	; 0x40
 8001720:	430a      	orrs	r2, r1
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	e007      	b.n	8001736 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2140      	movs	r1, #64	; 0x40
 8001732:	438a      	bics	r2, r1
 8001734:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	7e9b      	ldrb	r3, [r3, #26]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d108      	bne.n	8001750 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2120      	movs	r1, #32
 800174a:	430a      	orrs	r2, r1
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	e007      	b.n	8001760 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2120      	movs	r1, #32
 800175c:	438a      	bics	r2, r1
 800175e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	7edb      	ldrb	r3, [r3, #27]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d108      	bne.n	800177a <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2110      	movs	r1, #16
 8001774:	438a      	bics	r2, r1
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	e007      	b.n	800178a <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2110      	movs	r1, #16
 8001786:	430a      	orrs	r2, r1
 8001788:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7f1b      	ldrb	r3, [r3, #28]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d108      	bne.n	80017a4 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2108      	movs	r1, #8
 800179e:	430a      	orrs	r2, r1
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	e007      	b.n	80017b4 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2108      	movs	r1, #8
 80017b0:	438a      	bics	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	7f5b      	ldrb	r3, [r3, #29]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d108      	bne.n	80017ce <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2104      	movs	r1, #4
 80017c8:	430a      	orrs	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	e007      	b.n	80017de <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2104      	movs	r1, #4
 80017da:	438a      	bics	r2, r1
 80017dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	431a      	orrs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	431a      	orrs	r2, r3
 80017f4:	0011      	movs	r1, r2
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	1e5a      	subs	r2, r3, #1
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2220      	movs	r2, #32
 800180e:	2101      	movs	r1, #1
 8001810:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	0018      	movs	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	b004      	add	sp, #16
 800181a:	bd80      	pop	{r7, pc}

0800181c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	0002      	movs	r2, r0
 8001824:	1dfb      	adds	r3, r7, #7
 8001826:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001828:	1dfb      	adds	r3, r7, #7
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b7f      	cmp	r3, #127	; 0x7f
 800182e:	d809      	bhi.n	8001844 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001830:	1dfb      	adds	r3, r7, #7
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	001a      	movs	r2, r3
 8001836:	231f      	movs	r3, #31
 8001838:	401a      	ands	r2, r3
 800183a:	4b04      	ldr	r3, [pc, #16]	; (800184c <__NVIC_EnableIRQ+0x30>)
 800183c:	2101      	movs	r1, #1
 800183e:	4091      	lsls	r1, r2
 8001840:	000a      	movs	r2, r1
 8001842:	601a      	str	r2, [r3, #0]
  }
}
 8001844:	46c0      	nop			; (mov r8, r8)
 8001846:	46bd      	mov	sp, r7
 8001848:	b002      	add	sp, #8
 800184a:	bd80      	pop	{r7, pc}
 800184c:	e000e100 	.word	0xe000e100

08001850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	0002      	movs	r2, r0
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	1dfb      	adds	r3, r7, #7
 800185c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800185e:	1dfb      	adds	r3, r7, #7
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b7f      	cmp	r3, #127	; 0x7f
 8001864:	d828      	bhi.n	80018b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001866:	4a2f      	ldr	r2, [pc, #188]	; (8001924 <__NVIC_SetPriority+0xd4>)
 8001868:	1dfb      	adds	r3, r7, #7
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b25b      	sxtb	r3, r3
 800186e:	089b      	lsrs	r3, r3, #2
 8001870:	33c0      	adds	r3, #192	; 0xc0
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	589b      	ldr	r3, [r3, r2]
 8001876:	1dfa      	adds	r2, r7, #7
 8001878:	7812      	ldrb	r2, [r2, #0]
 800187a:	0011      	movs	r1, r2
 800187c:	2203      	movs	r2, #3
 800187e:	400a      	ands	r2, r1
 8001880:	00d2      	lsls	r2, r2, #3
 8001882:	21ff      	movs	r1, #255	; 0xff
 8001884:	4091      	lsls	r1, r2
 8001886:	000a      	movs	r2, r1
 8001888:	43d2      	mvns	r2, r2
 800188a:	401a      	ands	r2, r3
 800188c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	019b      	lsls	r3, r3, #6
 8001892:	22ff      	movs	r2, #255	; 0xff
 8001894:	401a      	ands	r2, r3
 8001896:	1dfb      	adds	r3, r7, #7
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	0018      	movs	r0, r3
 800189c:	2303      	movs	r3, #3
 800189e:	4003      	ands	r3, r0
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018a4:	481f      	ldr	r0, [pc, #124]	; (8001924 <__NVIC_SetPriority+0xd4>)
 80018a6:	1dfb      	adds	r3, r7, #7
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	b25b      	sxtb	r3, r3
 80018ac:	089b      	lsrs	r3, r3, #2
 80018ae:	430a      	orrs	r2, r1
 80018b0:	33c0      	adds	r3, #192	; 0xc0
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018b6:	e031      	b.n	800191c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018b8:	4a1b      	ldr	r2, [pc, #108]	; (8001928 <__NVIC_SetPriority+0xd8>)
 80018ba:	1dfb      	adds	r3, r7, #7
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	0019      	movs	r1, r3
 80018c0:	230f      	movs	r3, #15
 80018c2:	400b      	ands	r3, r1
 80018c4:	3b08      	subs	r3, #8
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	3306      	adds	r3, #6
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	18d3      	adds	r3, r2, r3
 80018ce:	3304      	adds	r3, #4
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	1dfa      	adds	r2, r7, #7
 80018d4:	7812      	ldrb	r2, [r2, #0]
 80018d6:	0011      	movs	r1, r2
 80018d8:	2203      	movs	r2, #3
 80018da:	400a      	ands	r2, r1
 80018dc:	00d2      	lsls	r2, r2, #3
 80018de:	21ff      	movs	r1, #255	; 0xff
 80018e0:	4091      	lsls	r1, r2
 80018e2:	000a      	movs	r2, r1
 80018e4:	43d2      	mvns	r2, r2
 80018e6:	401a      	ands	r2, r3
 80018e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	019b      	lsls	r3, r3, #6
 80018ee:	22ff      	movs	r2, #255	; 0xff
 80018f0:	401a      	ands	r2, r3
 80018f2:	1dfb      	adds	r3, r7, #7
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	0018      	movs	r0, r3
 80018f8:	2303      	movs	r3, #3
 80018fa:	4003      	ands	r3, r0
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001900:	4809      	ldr	r0, [pc, #36]	; (8001928 <__NVIC_SetPriority+0xd8>)
 8001902:	1dfb      	adds	r3, r7, #7
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	001c      	movs	r4, r3
 8001908:	230f      	movs	r3, #15
 800190a:	4023      	ands	r3, r4
 800190c:	3b08      	subs	r3, #8
 800190e:	089b      	lsrs	r3, r3, #2
 8001910:	430a      	orrs	r2, r1
 8001912:	3306      	adds	r3, #6
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	18c3      	adds	r3, r0, r3
 8001918:	3304      	adds	r3, #4
 800191a:	601a      	str	r2, [r3, #0]
}
 800191c:	46c0      	nop			; (mov r8, r8)
 800191e:	46bd      	mov	sp, r7
 8001920:	b003      	add	sp, #12
 8001922:	bd90      	pop	{r4, r7, pc}
 8001924:	e000e100 	.word	0xe000e100
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	210f      	movs	r1, #15
 8001938:	187b      	adds	r3, r7, r1
 800193a:	1c02      	adds	r2, r0, #0
 800193c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	187b      	adds	r3, r7, r1
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	b25b      	sxtb	r3, r3
 8001946:	0011      	movs	r1, r2
 8001948:	0018      	movs	r0, r3
 800194a:	f7ff ff81 	bl	8001850 <__NVIC_SetPriority>
}
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	46bd      	mov	sp, r7
 8001952:	b004      	add	sp, #16
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	0002      	movs	r2, r0
 800195e:	1dfb      	adds	r3, r7, #7
 8001960:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001962:	1dfb      	adds	r3, r7, #7
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	b25b      	sxtb	r3, r3
 8001968:	0018      	movs	r0, r3
 800196a:	f7ff ff57 	bl	800181c <__NVIC_EnableIRQ>
}
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	46bd      	mov	sp, r7
 8001972:	b002      	add	sp, #8
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e036      	b.n	80019fc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2221      	movs	r2, #33	; 0x21
 8001992:	2102      	movs	r1, #2
 8001994:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4a18      	ldr	r2, [pc, #96]	; (8001a04 <HAL_DMA_Init+0x8c>)
 80019a2:	4013      	ands	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80019ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69db      	ldr	r3, [r3, #28]
 80019cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	0018      	movs	r0, r3
 80019e0:	f000 f8b4 	bl	8001b4c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2221      	movs	r2, #33	; 0x21
 80019ee:	2101      	movs	r1, #1
 80019f0:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2220      	movs	r2, #32
 80019f6:	2100      	movs	r1, #0
 80019f8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}  
 80019fc:	0018      	movs	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b004      	add	sp, #16
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	ffffc00f 	.word	0xffffc00f

08001a08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	2204      	movs	r2, #4
 8001a26:	409a      	lsls	r2, r3
 8001a28:	0013      	movs	r3, r2
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d024      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x72>
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	2204      	movs	r2, #4
 8001a34:	4013      	ands	r3, r2
 8001a36:	d020      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2220      	movs	r2, #32
 8001a40:	4013      	ands	r3, r2
 8001a42:	d107      	bne.n	8001a54 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2104      	movs	r1, #4
 8001a50:	438a      	bics	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5c:	2104      	movs	r1, #4
 8001a5e:	4091      	lsls	r1, r2
 8001a60:	000a      	movs	r2, r1
 8001a62:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d100      	bne.n	8001a6e <HAL_DMA_IRQHandler+0x66>
 8001a6c:	e06a      	b.n	8001b44 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	0010      	movs	r0, r2
 8001a76:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001a78:	e064      	b.n	8001b44 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	2202      	movs	r2, #2
 8001a80:	409a      	lsls	r2, r3
 8001a82:	0013      	movs	r3, r2
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	4013      	ands	r3, r2
 8001a88:	d02b      	beq.n	8001ae2 <HAL_DMA_IRQHandler+0xda>
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d027      	beq.n	8001ae2 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2220      	movs	r2, #32
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d10b      	bne.n	8001ab6 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	210a      	movs	r1, #10
 8001aaa:	438a      	bics	r2, r1
 8001aac:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2221      	movs	r2, #33	; 0x21
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001abe:	2102      	movs	r1, #2
 8001ac0:	4091      	lsls	r1, r2
 8001ac2:	000a      	movs	r2, r1
 8001ac4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2220      	movs	r2, #32
 8001aca:	2100      	movs	r1, #0
 8001acc:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d036      	beq.n	8001b44 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	0010      	movs	r0, r2
 8001ade:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001ae0:	e030      	b.n	8001b44 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	2208      	movs	r2, #8
 8001ae8:	409a      	lsls	r2, r3
 8001aea:	0013      	movs	r3, r2
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	4013      	ands	r3, r2
 8001af0:	d028      	beq.n	8001b44 <HAL_DMA_IRQHandler+0x13c>
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2208      	movs	r2, #8
 8001af6:	4013      	ands	r3, r2
 8001af8:	d024      	beq.n	8001b44 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	210e      	movs	r1, #14
 8001b06:	438a      	bics	r2, r1
 8001b08:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b12:	2101      	movs	r1, #1
 8001b14:	4091      	lsls	r1, r2
 8001b16:	000a      	movs	r2, r1
 8001b18:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2221      	movs	r2, #33	; 0x21
 8001b24:	2101      	movs	r1, #1
 8001b26:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	0010      	movs	r0, r2
 8001b40:	4798      	blx	r3
    }
   }
}  
 8001b42:	e7ff      	b.n	8001b44 <HAL_DMA_IRQHandler+0x13c>
 8001b44:	46c0      	nop			; (mov r8, r8)
 8001b46:	46bd      	mov	sp, r7
 8001b48:	b004      	add	sp, #16
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a08      	ldr	r2, [pc, #32]	; (8001b7c <DMA_CalcBaseAndBitshift+0x30>)
 8001b5a:	4694      	mov	ip, r2
 8001b5c:	4463      	add	r3, ip
 8001b5e:	2114      	movs	r1, #20
 8001b60:	0018      	movs	r0, r3
 8001b62:	f7fe fad1 	bl	8000108 <__udivsi3>
 8001b66:	0003      	movs	r3, r0
 8001b68:	009a      	lsls	r2, r3, #2
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a03      	ldr	r2, [pc, #12]	; (8001b80 <DMA_CalcBaseAndBitshift+0x34>)
 8001b72:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001b74:	46c0      	nop			; (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b002      	add	sp, #8
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	bffdfff8 	.word	0xbffdfff8
 8001b80:	40020000 	.word	0x40020000

08001b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b92:	e149      	b.n	8001e28 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2101      	movs	r1, #1
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	4091      	lsls	r1, r2
 8001b9e:	000a      	movs	r2, r1
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d100      	bne.n	8001bac <HAL_GPIO_Init+0x28>
 8001baa:	e13a      	b.n	8001e22 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d003      	beq.n	8001bbc <HAL_GPIO_Init+0x38>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b12      	cmp	r3, #18
 8001bba:	d123      	bne.n	8001c04 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	08da      	lsrs	r2, r3, #3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3208      	adds	r2, #8
 8001bc4:	0092      	lsls	r2, r2, #2
 8001bc6:	58d3      	ldr	r3, [r2, r3]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	2207      	movs	r2, #7
 8001bce:	4013      	ands	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	0013      	movs	r3, r2
 8001bd8:	43da      	mvns	r2, r3
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2107      	movs	r1, #7
 8001be8:	400b      	ands	r3, r1
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	409a      	lsls	r2, r3
 8001bee:	0013      	movs	r3, r2
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	08da      	lsrs	r2, r3, #3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3208      	adds	r2, #8
 8001bfe:	0092      	lsls	r2, r2, #2
 8001c00:	6939      	ldr	r1, [r7, #16]
 8001c02:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	2203      	movs	r2, #3
 8001c10:	409a      	lsls	r2, r3
 8001c12:	0013      	movs	r3, r2
 8001c14:	43da      	mvns	r2, r3
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2203      	movs	r2, #3
 8001c22:	401a      	ands	r2, r3
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	409a      	lsls	r2, r3
 8001c2a:	0013      	movs	r3, r2
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d00b      	beq.n	8001c58 <HAL_GPIO_Init+0xd4>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d007      	beq.n	8001c58 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c4c:	2b11      	cmp	r3, #17
 8001c4e:	d003      	beq.n	8001c58 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b12      	cmp	r3, #18
 8001c56:	d130      	bne.n	8001cba <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2203      	movs	r2, #3
 8001c64:	409a      	lsls	r2, r3
 8001c66:	0013      	movs	r3, r2
 8001c68:	43da      	mvns	r2, r3
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68da      	ldr	r2, [r3, #12]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	409a      	lsls	r2, r3
 8001c7a:	0013      	movs	r3, r2
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c8e:	2201      	movs	r2, #1
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	409a      	lsls	r2, r3
 8001c94:	0013      	movs	r3, r2
 8001c96:	43da      	mvns	r2, r3
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	091b      	lsrs	r3, r3, #4
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	409a      	lsls	r2, r3
 8001cac:	0013      	movs	r3, r2
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	0013      	movs	r3, r2
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	409a      	lsls	r2, r3
 8001cdc:	0013      	movs	r3, r2
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	055b      	lsls	r3, r3, #21
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d100      	bne.n	8001cf8 <HAL_GPIO_Init+0x174>
 8001cf6:	e094      	b.n	8001e22 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf8:	4b51      	ldr	r3, [pc, #324]	; (8001e40 <HAL_GPIO_Init+0x2bc>)
 8001cfa:	699a      	ldr	r2, [r3, #24]
 8001cfc:	4b50      	ldr	r3, [pc, #320]	; (8001e40 <HAL_GPIO_Init+0x2bc>)
 8001cfe:	2101      	movs	r1, #1
 8001d00:	430a      	orrs	r2, r1
 8001d02:	619a      	str	r2, [r3, #24]
 8001d04:	4b4e      	ldr	r3, [pc, #312]	; (8001e40 <HAL_GPIO_Init+0x2bc>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d10:	4a4c      	ldr	r2, [pc, #304]	; (8001e44 <HAL_GPIO_Init+0x2c0>)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	3302      	adds	r3, #2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	589b      	ldr	r3, [r3, r2]
 8001d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	2203      	movs	r2, #3
 8001d22:	4013      	ands	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	220f      	movs	r2, #15
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	0013      	movs	r3, r2
 8001d2c:	43da      	mvns	r2, r3
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	2390      	movs	r3, #144	; 0x90
 8001d38:	05db      	lsls	r3, r3, #23
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d00d      	beq.n	8001d5a <HAL_GPIO_Init+0x1d6>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a41      	ldr	r2, [pc, #260]	; (8001e48 <HAL_GPIO_Init+0x2c4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d007      	beq.n	8001d56 <HAL_GPIO_Init+0x1d2>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a40      	ldr	r2, [pc, #256]	; (8001e4c <HAL_GPIO_Init+0x2c8>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d101      	bne.n	8001d52 <HAL_GPIO_Init+0x1ce>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e004      	b.n	8001d5c <HAL_GPIO_Init+0x1d8>
 8001d52:	2305      	movs	r3, #5
 8001d54:	e002      	b.n	8001d5c <HAL_GPIO_Init+0x1d8>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_GPIO_Init+0x1d8>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	2103      	movs	r1, #3
 8001d60:	400a      	ands	r2, r1
 8001d62:	0092      	lsls	r2, r2, #2
 8001d64:	4093      	lsls	r3, r2
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d6c:	4935      	ldr	r1, [pc, #212]	; (8001e44 <HAL_GPIO_Init+0x2c0>)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	089b      	lsrs	r3, r3, #2
 8001d72:	3302      	adds	r3, #2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d7a:	4b35      	ldr	r3, [pc, #212]	; (8001e50 <HAL_GPIO_Init+0x2cc>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	43da      	mvns	r2, r3
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	025b      	lsls	r3, r3, #9
 8001d92:	4013      	ands	r3, r2
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d9e:	4b2c      	ldr	r3, [pc, #176]	; (8001e50 <HAL_GPIO_Init+0x2cc>)
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001da4:	4b2a      	ldr	r3, [pc, #168]	; (8001e50 <HAL_GPIO_Init+0x2cc>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	43da      	mvns	r2, r3
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4013      	ands	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	029b      	lsls	r3, r3, #10
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dc8:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <HAL_GPIO_Init+0x2cc>)
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dce:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <HAL_GPIO_Init+0x2cc>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	035b      	lsls	r3, r3, #13
 8001de6:	4013      	ands	r3, r2
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001df2:	4b17      	ldr	r3, [pc, #92]	; (8001e50 <HAL_GPIO_Init+0x2cc>)
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001df8:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <HAL_GPIO_Init+0x2cc>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	43da      	mvns	r2, r3
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	039b      	lsls	r3, r3, #14
 8001e10:	4013      	ands	r3, r2
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <HAL_GPIO_Init+0x2cc>)
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	3301      	adds	r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	40da      	lsrs	r2, r3
 8001e30:	1e13      	subs	r3, r2, #0
 8001e32:	d000      	beq.n	8001e36 <HAL_GPIO_Init+0x2b2>
 8001e34:	e6ae      	b.n	8001b94 <HAL_GPIO_Init+0x10>
  } 
}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	b006      	add	sp, #24
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40010000 	.word	0x40010000
 8001e48:	48000400 	.word	0x48000400
 8001e4c:	48000800 	.word	0x48000800
 8001e50:	40010400 	.word	0x40010400

08001e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	0008      	movs	r0, r1
 8001e5e:	0011      	movs	r1, r2
 8001e60:	1cbb      	adds	r3, r7, #2
 8001e62:	1c02      	adds	r2, r0, #0
 8001e64:	801a      	strh	r2, [r3, #0]
 8001e66:	1c7b      	adds	r3, r7, #1
 8001e68:	1c0a      	adds	r2, r1, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e6c:	1c7b      	adds	r3, r7, #1
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d004      	beq.n	8001e7e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e74:	1cbb      	adds	r3, r7, #2
 8001e76:	881a      	ldrh	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e7c:	e003      	b.n	8001e86 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e7e:	1cbb      	adds	r3, r7, #2
 8001e80:	881a      	ldrh	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b002      	add	sp, #8
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	000a      	movs	r2, r1
 8001e98:	1cbb      	adds	r3, r7, #2
 8001e9a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	1cba      	adds	r2, r7, #2
 8001ea2:	8812      	ldrh	r2, [r2, #0]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d005      	beq.n	8001eb4 <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001ea8:	1cbb      	adds	r3, r7, #2
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	041a      	lsls	r2, r3, #16
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001eb2:	e003      	b.n	8001ebc <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eb4:	1cbb      	adds	r3, r7, #2
 8001eb6:	881a      	ldrh	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	619a      	str	r2, [r3, #24]
}
 8001ebc:	46c0      	nop			; (mov r8, r8)
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	b002      	add	sp, #8
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d102      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	f000 fb76 	bl	80025c4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2201      	movs	r2, #1
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d100      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x20>
 8001ee2:	e08e      	b.n	8002002 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ee4:	4bc5      	ldr	r3, [pc, #788]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	220c      	movs	r2, #12
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d00e      	beq.n	8001f0e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ef0:	4bc2      	ldr	r3, [pc, #776]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	220c      	movs	r2, #12
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d117      	bne.n	8001f2c <HAL_RCC_OscConfig+0x68>
 8001efc:	4bbf      	ldr	r3, [pc, #764]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	23c0      	movs	r3, #192	; 0xc0
 8001f02:	025b      	lsls	r3, r3, #9
 8001f04:	401a      	ands	r2, r3
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	025b      	lsls	r3, r3, #9
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d10e      	bne.n	8001f2c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f0e:	4bbb      	ldr	r3, [pc, #748]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	029b      	lsls	r3, r3, #10
 8001f16:	4013      	ands	r3, r2
 8001f18:	d100      	bne.n	8001f1c <HAL_RCC_OscConfig+0x58>
 8001f1a:	e071      	b.n	8002000 <HAL_RCC_OscConfig+0x13c>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d000      	beq.n	8001f26 <HAL_RCC_OscConfig+0x62>
 8001f24:	e06c      	b.n	8002000 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	f000 fb4c 	bl	80025c4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d107      	bne.n	8001f44 <HAL_RCC_OscConfig+0x80>
 8001f34:	4bb1      	ldr	r3, [pc, #708]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4bb0      	ldr	r3, [pc, #704]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8001f3a:	2180      	movs	r1, #128	; 0x80
 8001f3c:	0249      	lsls	r1, r1, #9
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	e02f      	b.n	8001fa4 <HAL_RCC_OscConfig+0xe0>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10c      	bne.n	8001f66 <HAL_RCC_OscConfig+0xa2>
 8001f4c:	4bab      	ldr	r3, [pc, #684]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4baa      	ldr	r3, [pc, #680]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8001f52:	49ab      	ldr	r1, [pc, #684]	; (8002200 <HAL_RCC_OscConfig+0x33c>)
 8001f54:	400a      	ands	r2, r1
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	4ba8      	ldr	r3, [pc, #672]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4ba7      	ldr	r3, [pc, #668]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8001f5e:	49a9      	ldr	r1, [pc, #676]	; (8002204 <HAL_RCC_OscConfig+0x340>)
 8001f60:	400a      	ands	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	e01e      	b.n	8001fa4 <HAL_RCC_OscConfig+0xe0>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b05      	cmp	r3, #5
 8001f6c:	d10e      	bne.n	8001f8c <HAL_RCC_OscConfig+0xc8>
 8001f6e:	4ba3      	ldr	r3, [pc, #652]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	4ba2      	ldr	r3, [pc, #648]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8001f74:	2180      	movs	r1, #128	; 0x80
 8001f76:	02c9      	lsls	r1, r1, #11
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	4b9f      	ldr	r3, [pc, #636]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b9e      	ldr	r3, [pc, #632]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8001f82:	2180      	movs	r1, #128	; 0x80
 8001f84:	0249      	lsls	r1, r1, #9
 8001f86:	430a      	orrs	r2, r1
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	e00b      	b.n	8001fa4 <HAL_RCC_OscConfig+0xe0>
 8001f8c:	4b9b      	ldr	r3, [pc, #620]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b9a      	ldr	r3, [pc, #616]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8001f92:	499b      	ldr	r1, [pc, #620]	; (8002200 <HAL_RCC_OscConfig+0x33c>)
 8001f94:	400a      	ands	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	4b98      	ldr	r3, [pc, #608]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b97      	ldr	r3, [pc, #604]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8001f9e:	4999      	ldr	r1, [pc, #612]	; (8002204 <HAL_RCC_OscConfig+0x340>)
 8001fa0:	400a      	ands	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d014      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7ff f8e0 	bl	8001170 <HAL_GetTick>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fb6:	f7ff f8db 	bl	8001170 <HAL_GetTick>
 8001fba:	0002      	movs	r2, r0
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b64      	cmp	r3, #100	; 0x64
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e2fd      	b.n	80025c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc8:	4b8c      	ldr	r3, [pc, #560]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	029b      	lsls	r3, r3, #10
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d0f0      	beq.n	8001fb6 <HAL_RCC_OscConfig+0xf2>
 8001fd4:	e015      	b.n	8002002 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd6:	f7ff f8cb 	bl	8001170 <HAL_GetTick>
 8001fda:	0003      	movs	r3, r0
 8001fdc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe0:	f7ff f8c6 	bl	8001170 <HAL_GetTick>
 8001fe4:	0002      	movs	r2, r0
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b64      	cmp	r3, #100	; 0x64
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e2e8      	b.n	80025c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff2:	4b82      	ldr	r3, [pc, #520]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	029b      	lsls	r3, r3, #10
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x11c>
 8001ffe:	e000      	b.n	8002002 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002000:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2202      	movs	r2, #2
 8002008:	4013      	ands	r3, r2
 800200a:	d100      	bne.n	800200e <HAL_RCC_OscConfig+0x14a>
 800200c:	e06c      	b.n	80020e8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800200e:	4b7b      	ldr	r3, [pc, #492]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	220c      	movs	r2, #12
 8002014:	4013      	ands	r3, r2
 8002016:	d00e      	beq.n	8002036 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002018:	4b78      	ldr	r3, [pc, #480]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	220c      	movs	r2, #12
 800201e:	4013      	ands	r3, r2
 8002020:	2b08      	cmp	r3, #8
 8002022:	d11f      	bne.n	8002064 <HAL_RCC_OscConfig+0x1a0>
 8002024:	4b75      	ldr	r3, [pc, #468]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	23c0      	movs	r3, #192	; 0xc0
 800202a:	025b      	lsls	r3, r3, #9
 800202c:	401a      	ands	r2, r3
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	021b      	lsls	r3, r3, #8
 8002032:	429a      	cmp	r2, r3
 8002034:	d116      	bne.n	8002064 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002036:	4b71      	ldr	r3, [pc, #452]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2202      	movs	r2, #2
 800203c:	4013      	ands	r3, r2
 800203e:	d005      	beq.n	800204c <HAL_RCC_OscConfig+0x188>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d001      	beq.n	800204c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e2bb      	b.n	80025c4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204c:	4b6b      	ldr	r3, [pc, #428]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	22f8      	movs	r2, #248	; 0xf8
 8002052:	4393      	bics	r3, r2
 8002054:	0019      	movs	r1, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	00da      	lsls	r2, r3, #3
 800205c:	4b67      	ldr	r3, [pc, #412]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 800205e:	430a      	orrs	r2, r1
 8002060:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002062:	e041      	b.n	80020e8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d024      	beq.n	80020b6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800206c:	4b63      	ldr	r3, [pc, #396]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b62      	ldr	r3, [pc, #392]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8002072:	2101      	movs	r1, #1
 8002074:	430a      	orrs	r2, r1
 8002076:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7ff f87a 	bl	8001170 <HAL_GetTick>
 800207c:	0003      	movs	r3, r0
 800207e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002082:	f7ff f875 	bl	8001170 <HAL_GetTick>
 8002086:	0002      	movs	r2, r0
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e297      	b.n	80025c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002094:	4b59      	ldr	r3, [pc, #356]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2202      	movs	r2, #2
 800209a:	4013      	ands	r3, r2
 800209c:	d0f1      	beq.n	8002082 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209e:	4b57      	ldr	r3, [pc, #348]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	22f8      	movs	r2, #248	; 0xf8
 80020a4:	4393      	bics	r3, r2
 80020a6:	0019      	movs	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	00da      	lsls	r2, r3, #3
 80020ae:	4b53      	ldr	r3, [pc, #332]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 80020b0:	430a      	orrs	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	e018      	b.n	80020e8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b6:	4b51      	ldr	r3, [pc, #324]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	4b50      	ldr	r3, [pc, #320]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 80020bc:	2101      	movs	r1, #1
 80020be:	438a      	bics	r2, r1
 80020c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c2:	f7ff f855 	bl	8001170 <HAL_GetTick>
 80020c6:	0003      	movs	r3, r0
 80020c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020cc:	f7ff f850 	bl	8001170 <HAL_GetTick>
 80020d0:	0002      	movs	r2, r0
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e272      	b.n	80025c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020de:	4b47      	ldr	r3, [pc, #284]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2202      	movs	r2, #2
 80020e4:	4013      	ands	r3, r2
 80020e6:	d1f1      	bne.n	80020cc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2208      	movs	r2, #8
 80020ee:	4013      	ands	r3, r2
 80020f0:	d036      	beq.n	8002160 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d019      	beq.n	800212e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020fa:	4b40      	ldr	r3, [pc, #256]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 80020fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020fe:	4b3f      	ldr	r3, [pc, #252]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8002100:	2101      	movs	r1, #1
 8002102:	430a      	orrs	r2, r1
 8002104:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002106:	f7ff f833 	bl	8001170 <HAL_GetTick>
 800210a:	0003      	movs	r3, r0
 800210c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002110:	f7ff f82e 	bl	8001170 <HAL_GetTick>
 8002114:	0002      	movs	r2, r0
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e250      	b.n	80025c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002122:	4b36      	ldr	r3, [pc, #216]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	2202      	movs	r2, #2
 8002128:	4013      	ands	r3, r2
 800212a:	d0f1      	beq.n	8002110 <HAL_RCC_OscConfig+0x24c>
 800212c:	e018      	b.n	8002160 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800212e:	4b33      	ldr	r3, [pc, #204]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8002130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002132:	4b32      	ldr	r3, [pc, #200]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8002134:	2101      	movs	r1, #1
 8002136:	438a      	bics	r2, r1
 8002138:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213a:	f7ff f819 	bl	8001170 <HAL_GetTick>
 800213e:	0003      	movs	r3, r0
 8002140:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002144:	f7ff f814 	bl	8001170 <HAL_GetTick>
 8002148:	0002      	movs	r2, r0
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e236      	b.n	80025c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002156:	4b29      	ldr	r3, [pc, #164]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	2202      	movs	r2, #2
 800215c:	4013      	ands	r3, r2
 800215e:	d1f1      	bne.n	8002144 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2204      	movs	r2, #4
 8002166:	4013      	ands	r3, r2
 8002168:	d100      	bne.n	800216c <HAL_RCC_OscConfig+0x2a8>
 800216a:	e0b5      	b.n	80022d8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800216c:	231f      	movs	r3, #31
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002174:	4b21      	ldr	r3, [pc, #132]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8002176:	69da      	ldr	r2, [r3, #28]
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	055b      	lsls	r3, r3, #21
 800217c:	4013      	ands	r3, r2
 800217e:	d111      	bne.n	80021a4 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002180:	4b1e      	ldr	r3, [pc, #120]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8002182:	69da      	ldr	r2, [r3, #28]
 8002184:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8002186:	2180      	movs	r1, #128	; 0x80
 8002188:	0549      	lsls	r1, r1, #21
 800218a:	430a      	orrs	r2, r1
 800218c:	61da      	str	r2, [r3, #28]
 800218e:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 8002190:	69da      	ldr	r2, [r3, #28]
 8002192:	2380      	movs	r3, #128	; 0x80
 8002194:	055b      	lsls	r3, r3, #21
 8002196:	4013      	ands	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800219c:	231f      	movs	r3, #31
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a4:	4b18      	ldr	r3, [pc, #96]	; (8002208 <HAL_RCC_OscConfig+0x344>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4013      	ands	r3, r2
 80021ae:	d11a      	bne.n	80021e6 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021b0:	4b15      	ldr	r3, [pc, #84]	; (8002208 <HAL_RCC_OscConfig+0x344>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b14      	ldr	r3, [pc, #80]	; (8002208 <HAL_RCC_OscConfig+0x344>)
 80021b6:	2180      	movs	r1, #128	; 0x80
 80021b8:	0049      	lsls	r1, r1, #1
 80021ba:	430a      	orrs	r2, r1
 80021bc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021be:	f7fe ffd7 	bl	8001170 <HAL_GetTick>
 80021c2:	0003      	movs	r3, r0
 80021c4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c8:	f7fe ffd2 	bl	8001170 <HAL_GetTick>
 80021cc:	0002      	movs	r2, r0
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b64      	cmp	r3, #100	; 0x64
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e1f4      	b.n	80025c4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_RCC_OscConfig+0x344>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4013      	ands	r3, r2
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d10e      	bne.n	800220c <HAL_RCC_OscConfig+0x348>
 80021ee:	4b03      	ldr	r3, [pc, #12]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 80021f0:	6a1a      	ldr	r2, [r3, #32]
 80021f2:	4b02      	ldr	r3, [pc, #8]	; (80021fc <HAL_RCC_OscConfig+0x338>)
 80021f4:	2101      	movs	r1, #1
 80021f6:	430a      	orrs	r2, r1
 80021f8:	621a      	str	r2, [r3, #32]
 80021fa:	e035      	b.n	8002268 <HAL_RCC_OscConfig+0x3a4>
 80021fc:	40021000 	.word	0x40021000
 8002200:	fffeffff 	.word	0xfffeffff
 8002204:	fffbffff 	.word	0xfffbffff
 8002208:	40007000 	.word	0x40007000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10c      	bne.n	800222e <HAL_RCC_OscConfig+0x36a>
 8002214:	4bca      	ldr	r3, [pc, #808]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 8002216:	6a1a      	ldr	r2, [r3, #32]
 8002218:	4bc9      	ldr	r3, [pc, #804]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 800221a:	2101      	movs	r1, #1
 800221c:	438a      	bics	r2, r1
 800221e:	621a      	str	r2, [r3, #32]
 8002220:	4bc7      	ldr	r3, [pc, #796]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 8002222:	6a1a      	ldr	r2, [r3, #32]
 8002224:	4bc6      	ldr	r3, [pc, #792]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 8002226:	2104      	movs	r1, #4
 8002228:	438a      	bics	r2, r1
 800222a:	621a      	str	r2, [r3, #32]
 800222c:	e01c      	b.n	8002268 <HAL_RCC_OscConfig+0x3a4>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b05      	cmp	r3, #5
 8002234:	d10c      	bne.n	8002250 <HAL_RCC_OscConfig+0x38c>
 8002236:	4bc2      	ldr	r3, [pc, #776]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 8002238:	6a1a      	ldr	r2, [r3, #32]
 800223a:	4bc1      	ldr	r3, [pc, #772]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 800223c:	2104      	movs	r1, #4
 800223e:	430a      	orrs	r2, r1
 8002240:	621a      	str	r2, [r3, #32]
 8002242:	4bbf      	ldr	r3, [pc, #764]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 8002244:	6a1a      	ldr	r2, [r3, #32]
 8002246:	4bbe      	ldr	r3, [pc, #760]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 8002248:	2101      	movs	r1, #1
 800224a:	430a      	orrs	r2, r1
 800224c:	621a      	str	r2, [r3, #32]
 800224e:	e00b      	b.n	8002268 <HAL_RCC_OscConfig+0x3a4>
 8002250:	4bbb      	ldr	r3, [pc, #748]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 8002252:	6a1a      	ldr	r2, [r3, #32]
 8002254:	4bba      	ldr	r3, [pc, #744]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 8002256:	2101      	movs	r1, #1
 8002258:	438a      	bics	r2, r1
 800225a:	621a      	str	r2, [r3, #32]
 800225c:	4bb8      	ldr	r3, [pc, #736]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 800225e:	6a1a      	ldr	r2, [r3, #32]
 8002260:	4bb7      	ldr	r3, [pc, #732]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 8002262:	2104      	movs	r1, #4
 8002264:	438a      	bics	r2, r1
 8002266:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d014      	beq.n	800229a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002270:	f7fe ff7e 	bl	8001170 <HAL_GetTick>
 8002274:	0003      	movs	r3, r0
 8002276:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002278:	e009      	b.n	800228e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800227a:	f7fe ff79 	bl	8001170 <HAL_GetTick>
 800227e:	0002      	movs	r2, r0
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	4aaf      	ldr	r2, [pc, #700]	; (8002544 <HAL_RCC_OscConfig+0x680>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e19a      	b.n	80025c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228e:	4bac      	ldr	r3, [pc, #688]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	2202      	movs	r2, #2
 8002294:	4013      	ands	r3, r2
 8002296:	d0f0      	beq.n	800227a <HAL_RCC_OscConfig+0x3b6>
 8002298:	e013      	b.n	80022c2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229a:	f7fe ff69 	bl	8001170 <HAL_GetTick>
 800229e:	0003      	movs	r3, r0
 80022a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a2:	e009      	b.n	80022b8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a4:	f7fe ff64 	bl	8001170 <HAL_GetTick>
 80022a8:	0002      	movs	r2, r0
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	4aa5      	ldr	r2, [pc, #660]	; (8002544 <HAL_RCC_OscConfig+0x680>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e185      	b.n	80025c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b8:	4ba1      	ldr	r3, [pc, #644]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	2202      	movs	r2, #2
 80022be:	4013      	ands	r3, r2
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022c2:	231f      	movs	r3, #31
 80022c4:	18fb      	adds	r3, r7, r3
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d105      	bne.n	80022d8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022cc:	4b9c      	ldr	r3, [pc, #624]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 80022ce:	69da      	ldr	r2, [r3, #28]
 80022d0:	4b9b      	ldr	r3, [pc, #620]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 80022d2:	499d      	ldr	r1, [pc, #628]	; (8002548 <HAL_RCC_OscConfig+0x684>)
 80022d4:	400a      	ands	r2, r1
 80022d6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2210      	movs	r2, #16
 80022de:	4013      	ands	r3, r2
 80022e0:	d063      	beq.n	80023aa <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d12a      	bne.n	8002340 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80022ea:	4b95      	ldr	r3, [pc, #596]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 80022ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ee:	4b94      	ldr	r3, [pc, #592]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 80022f0:	2104      	movs	r1, #4
 80022f2:	430a      	orrs	r2, r1
 80022f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80022f6:	4b92      	ldr	r3, [pc, #584]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 80022f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022fa:	4b91      	ldr	r3, [pc, #580]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 80022fc:	2101      	movs	r1, #1
 80022fe:	430a      	orrs	r2, r1
 8002300:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002302:	f7fe ff35 	bl	8001170 <HAL_GetTick>
 8002306:	0003      	movs	r3, r0
 8002308:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800230c:	f7fe ff30 	bl	8001170 <HAL_GetTick>
 8002310:	0002      	movs	r2, r0
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e152      	b.n	80025c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800231e:	4b88      	ldr	r3, [pc, #544]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 8002320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002322:	2202      	movs	r2, #2
 8002324:	4013      	ands	r3, r2
 8002326:	d0f1      	beq.n	800230c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002328:	4b85      	ldr	r3, [pc, #532]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 800232a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232c:	22f8      	movs	r2, #248	; 0xf8
 800232e:	4393      	bics	r3, r2
 8002330:	0019      	movs	r1, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	00da      	lsls	r2, r3, #3
 8002338:	4b81      	ldr	r3, [pc, #516]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 800233a:	430a      	orrs	r2, r1
 800233c:	635a      	str	r2, [r3, #52]	; 0x34
 800233e:	e034      	b.n	80023aa <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	3305      	adds	r3, #5
 8002346:	d111      	bne.n	800236c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002348:	4b7d      	ldr	r3, [pc, #500]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 800234a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800234c:	4b7c      	ldr	r3, [pc, #496]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 800234e:	2104      	movs	r1, #4
 8002350:	438a      	bics	r2, r1
 8002352:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002354:	4b7a      	ldr	r3, [pc, #488]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 8002356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002358:	22f8      	movs	r2, #248	; 0xf8
 800235a:	4393      	bics	r3, r2
 800235c:	0019      	movs	r1, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	00da      	lsls	r2, r3, #3
 8002364:	4b76      	ldr	r3, [pc, #472]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 8002366:	430a      	orrs	r2, r1
 8002368:	635a      	str	r2, [r3, #52]	; 0x34
 800236a:	e01e      	b.n	80023aa <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800236c:	4b74      	ldr	r3, [pc, #464]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 800236e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002370:	4b73      	ldr	r3, [pc, #460]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 8002372:	2104      	movs	r1, #4
 8002374:	430a      	orrs	r2, r1
 8002376:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002378:	4b71      	ldr	r3, [pc, #452]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 800237a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800237c:	4b70      	ldr	r3, [pc, #448]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 800237e:	2101      	movs	r1, #1
 8002380:	438a      	bics	r2, r1
 8002382:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002384:	f7fe fef4 	bl	8001170 <HAL_GetTick>
 8002388:	0003      	movs	r3, r0
 800238a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800238e:	f7fe feef 	bl	8001170 <HAL_GetTick>
 8002392:	0002      	movs	r2, r0
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e111      	b.n	80025c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023a0:	4b67      	ldr	r3, [pc, #412]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 80023a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a4:	2202      	movs	r2, #2
 80023a6:	4013      	ands	r3, r2
 80023a8:	d1f1      	bne.n	800238e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2220      	movs	r2, #32
 80023b0:	4013      	ands	r3, r2
 80023b2:	d05c      	beq.n	800246e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80023b4:	4b62      	ldr	r3, [pc, #392]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	220c      	movs	r2, #12
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b0c      	cmp	r3, #12
 80023be:	d00e      	beq.n	80023de <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80023c0:	4b5f      	ldr	r3, [pc, #380]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	220c      	movs	r2, #12
 80023c6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d114      	bne.n	80023f6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80023cc:	4b5c      	ldr	r3, [pc, #368]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	23c0      	movs	r3, #192	; 0xc0
 80023d2:	025b      	lsls	r3, r3, #9
 80023d4:	401a      	ands	r2, r3
 80023d6:	23c0      	movs	r3, #192	; 0xc0
 80023d8:	025b      	lsls	r3, r3, #9
 80023da:	429a      	cmp	r2, r3
 80023dc:	d10b      	bne.n	80023f6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80023de:	4b58      	ldr	r3, [pc, #352]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 80023e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023e2:	2380      	movs	r3, #128	; 0x80
 80023e4:	025b      	lsls	r3, r3, #9
 80023e6:	4013      	ands	r3, r2
 80023e8:	d040      	beq.n	800246c <HAL_RCC_OscConfig+0x5a8>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d03c      	beq.n	800246c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e0e6      	b.n	80025c4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d01b      	beq.n	8002436 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80023fe:	4b50      	ldr	r3, [pc, #320]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 8002400:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002402:	4b4f      	ldr	r3, [pc, #316]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 8002404:	2180      	movs	r1, #128	; 0x80
 8002406:	0249      	lsls	r1, r1, #9
 8002408:	430a      	orrs	r2, r1
 800240a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240c:	f7fe feb0 	bl	8001170 <HAL_GetTick>
 8002410:	0003      	movs	r3, r0
 8002412:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002416:	f7fe feab 	bl	8001170 <HAL_GetTick>
 800241a:	0002      	movs	r2, r0
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e0cd      	b.n	80025c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002428:	4b45      	ldr	r3, [pc, #276]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 800242a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	025b      	lsls	r3, r3, #9
 8002430:	4013      	ands	r3, r2
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x552>
 8002434:	e01b      	b.n	800246e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002436:	4b42      	ldr	r3, [pc, #264]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 8002438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800243a:	4b41      	ldr	r3, [pc, #260]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 800243c:	4943      	ldr	r1, [pc, #268]	; (800254c <HAL_RCC_OscConfig+0x688>)
 800243e:	400a      	ands	r2, r1
 8002440:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002442:	f7fe fe95 	bl	8001170 <HAL_GetTick>
 8002446:	0003      	movs	r3, r0
 8002448:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800244c:	f7fe fe90 	bl	8001170 <HAL_GetTick>
 8002450:	0002      	movs	r2, r0
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e0b2      	b.n	80025c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800245e:	4b38      	ldr	r3, [pc, #224]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 8002460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002462:	2380      	movs	r3, #128	; 0x80
 8002464:	025b      	lsls	r3, r3, #9
 8002466:	4013      	ands	r3, r2
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x588>
 800246a:	e000      	b.n	800246e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800246c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	2b00      	cmp	r3, #0
 8002474:	d100      	bne.n	8002478 <HAL_RCC_OscConfig+0x5b4>
 8002476:	e0a4      	b.n	80025c2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002478:	4b31      	ldr	r3, [pc, #196]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	220c      	movs	r2, #12
 800247e:	4013      	ands	r3, r2
 8002480:	2b08      	cmp	r3, #8
 8002482:	d100      	bne.n	8002486 <HAL_RCC_OscConfig+0x5c2>
 8002484:	e078      	b.n	8002578 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	2b02      	cmp	r3, #2
 800248c:	d14c      	bne.n	8002528 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248e:	4b2c      	ldr	r3, [pc, #176]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	4b2b      	ldr	r3, [pc, #172]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 8002494:	492e      	ldr	r1, [pc, #184]	; (8002550 <HAL_RCC_OscConfig+0x68c>)
 8002496:	400a      	ands	r2, r1
 8002498:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249a:	f7fe fe69 	bl	8001170 <HAL_GetTick>
 800249e:	0003      	movs	r3, r0
 80024a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a4:	f7fe fe64 	bl	8001170 <HAL_GetTick>
 80024a8:	0002      	movs	r2, r0
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e086      	b.n	80025c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b6:	4b22      	ldr	r3, [pc, #136]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	049b      	lsls	r3, r3, #18
 80024be:	4013      	ands	r3, r2
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024c2:	4b1f      	ldr	r3, [pc, #124]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 80024c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c6:	220f      	movs	r2, #15
 80024c8:	4393      	bics	r3, r2
 80024ca:	0019      	movs	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024d0:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 80024d2:	430a      	orrs	r2, r1
 80024d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80024d6:	4b1a      	ldr	r3, [pc, #104]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4a1e      	ldr	r2, [pc, #120]	; (8002554 <HAL_RCC_OscConfig+0x690>)
 80024dc:	4013      	ands	r3, r2
 80024de:	0019      	movs	r1, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	431a      	orrs	r2, r3
 80024ea:	4b15      	ldr	r3, [pc, #84]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 80024ec:	430a      	orrs	r2, r1
 80024ee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f0:	4b13      	ldr	r3, [pc, #76]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 80024f6:	2180      	movs	r1, #128	; 0x80
 80024f8:	0449      	lsls	r1, r1, #17
 80024fa:	430a      	orrs	r2, r1
 80024fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fe:	f7fe fe37 	bl	8001170 <HAL_GetTick>
 8002502:	0003      	movs	r3, r0
 8002504:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002508:	f7fe fe32 	bl	8001170 <HAL_GetTick>
 800250c:	0002      	movs	r2, r0
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e054      	b.n	80025c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800251a:	4b09      	ldr	r3, [pc, #36]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	049b      	lsls	r3, r3, #18
 8002522:	4013      	ands	r3, r2
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0x644>
 8002526:	e04c      	b.n	80025c2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002528:	4b05      	ldr	r3, [pc, #20]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4b04      	ldr	r3, [pc, #16]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 800252e:	4908      	ldr	r1, [pc, #32]	; (8002550 <HAL_RCC_OscConfig+0x68c>)
 8002530:	400a      	ands	r2, r1
 8002532:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7fe fe1c 	bl	8001170 <HAL_GetTick>
 8002538:	0003      	movs	r3, r0
 800253a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253c:	e015      	b.n	800256a <HAL_RCC_OscConfig+0x6a6>
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	40021000 	.word	0x40021000
 8002544:	00001388 	.word	0x00001388
 8002548:	efffffff 	.word	0xefffffff
 800254c:	fffeffff 	.word	0xfffeffff
 8002550:	feffffff 	.word	0xfeffffff
 8002554:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002558:	f7fe fe0a 	bl	8001170 <HAL_GetTick>
 800255c:	0002      	movs	r2, r0
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e02c      	b.n	80025c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800256a:	4b18      	ldr	r3, [pc, #96]	; (80025cc <HAL_RCC_OscConfig+0x708>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	049b      	lsls	r3, r3, #18
 8002572:	4013      	ands	r3, r2
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x694>
 8002576:	e024      	b.n	80025c2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e01f      	b.n	80025c4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002584:	4b11      	ldr	r3, [pc, #68]	; (80025cc <HAL_RCC_OscConfig+0x708>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800258a:	4b10      	ldr	r3, [pc, #64]	; (80025cc <HAL_RCC_OscConfig+0x708>)
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	23c0      	movs	r3, #192	; 0xc0
 8002594:	025b      	lsls	r3, r3, #9
 8002596:	401a      	ands	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	429a      	cmp	r2, r3
 800259e:	d10e      	bne.n	80025be <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	220f      	movs	r2, #15
 80025a4:	401a      	ands	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d107      	bne.n	80025be <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	23f0      	movs	r3, #240	; 0xf0
 80025b2:	039b      	lsls	r3, r3, #14
 80025b4:	401a      	ands	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d001      	beq.n	80025c2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	0018      	movs	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b008      	add	sp, #32
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40021000 	.word	0x40021000

080025d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0bf      	b.n	8002764 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025e4:	4b61      	ldr	r3, [pc, #388]	; (800276c <HAL_RCC_ClockConfig+0x19c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2201      	movs	r2, #1
 80025ea:	4013      	ands	r3, r2
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d911      	bls.n	8002616 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b5e      	ldr	r3, [pc, #376]	; (800276c <HAL_RCC_ClockConfig+0x19c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2201      	movs	r2, #1
 80025f8:	4393      	bics	r3, r2
 80025fa:	0019      	movs	r1, r3
 80025fc:	4b5b      	ldr	r3, [pc, #364]	; (800276c <HAL_RCC_ClockConfig+0x19c>)
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002604:	4b59      	ldr	r3, [pc, #356]	; (800276c <HAL_RCC_ClockConfig+0x19c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2201      	movs	r2, #1
 800260a:	4013      	ands	r3, r2
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d001      	beq.n	8002616 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e0a6      	b.n	8002764 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2202      	movs	r2, #2
 800261c:	4013      	ands	r3, r2
 800261e:	d015      	beq.n	800264c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2204      	movs	r2, #4
 8002626:	4013      	ands	r3, r2
 8002628:	d006      	beq.n	8002638 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800262a:	4b51      	ldr	r3, [pc, #324]	; (8002770 <HAL_RCC_ClockConfig+0x1a0>)
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	4b50      	ldr	r3, [pc, #320]	; (8002770 <HAL_RCC_ClockConfig+0x1a0>)
 8002630:	21e0      	movs	r1, #224	; 0xe0
 8002632:	00c9      	lsls	r1, r1, #3
 8002634:	430a      	orrs	r2, r1
 8002636:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002638:	4b4d      	ldr	r3, [pc, #308]	; (8002770 <HAL_RCC_ClockConfig+0x1a0>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	22f0      	movs	r2, #240	; 0xf0
 800263e:	4393      	bics	r3, r2
 8002640:	0019      	movs	r1, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	4b4a      	ldr	r3, [pc, #296]	; (8002770 <HAL_RCC_ClockConfig+0x1a0>)
 8002648:	430a      	orrs	r2, r1
 800264a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2201      	movs	r2, #1
 8002652:	4013      	ands	r3, r2
 8002654:	d04c      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d107      	bne.n	800266e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265e:	4b44      	ldr	r3, [pc, #272]	; (8002770 <HAL_RCC_ClockConfig+0x1a0>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	2380      	movs	r3, #128	; 0x80
 8002664:	029b      	lsls	r3, r3, #10
 8002666:	4013      	ands	r3, r2
 8002668:	d120      	bne.n	80026ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e07a      	b.n	8002764 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d107      	bne.n	8002686 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002676:	4b3e      	ldr	r3, [pc, #248]	; (8002770 <HAL_RCC_ClockConfig+0x1a0>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	049b      	lsls	r3, r3, #18
 800267e:	4013      	ands	r3, r2
 8002680:	d114      	bne.n	80026ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e06e      	b.n	8002764 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b03      	cmp	r3, #3
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800268e:	4b38      	ldr	r3, [pc, #224]	; (8002770 <HAL_RCC_ClockConfig+0x1a0>)
 8002690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	025b      	lsls	r3, r3, #9
 8002696:	4013      	ands	r3, r2
 8002698:	d108      	bne.n	80026ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e062      	b.n	8002764 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269e:	4b34      	ldr	r3, [pc, #208]	; (8002770 <HAL_RCC_ClockConfig+0x1a0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2202      	movs	r2, #2
 80026a4:	4013      	ands	r3, r2
 80026a6:	d101      	bne.n	80026ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e05b      	b.n	8002764 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ac:	4b30      	ldr	r3, [pc, #192]	; (8002770 <HAL_RCC_ClockConfig+0x1a0>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2203      	movs	r2, #3
 80026b2:	4393      	bics	r3, r2
 80026b4:	0019      	movs	r1, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	4b2d      	ldr	r3, [pc, #180]	; (8002770 <HAL_RCC_ClockConfig+0x1a0>)
 80026bc:	430a      	orrs	r2, r1
 80026be:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c0:	f7fe fd56 	bl	8001170 <HAL_GetTick>
 80026c4:	0003      	movs	r3, r0
 80026c6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c8:	e009      	b.n	80026de <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ca:	f7fe fd51 	bl	8001170 <HAL_GetTick>
 80026ce:	0002      	movs	r2, r0
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	4a27      	ldr	r2, [pc, #156]	; (8002774 <HAL_RCC_ClockConfig+0x1a4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e042      	b.n	8002764 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	4b24      	ldr	r3, [pc, #144]	; (8002770 <HAL_RCC_ClockConfig+0x1a0>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	220c      	movs	r2, #12
 80026e4:	401a      	ands	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d1ec      	bne.n	80026ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026f0:	4b1e      	ldr	r3, [pc, #120]	; (800276c <HAL_RCC_ClockConfig+0x19c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2201      	movs	r2, #1
 80026f6:	4013      	ands	r3, r2
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d211      	bcs.n	8002722 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b1b      	ldr	r3, [pc, #108]	; (800276c <HAL_RCC_ClockConfig+0x19c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2201      	movs	r2, #1
 8002704:	4393      	bics	r3, r2
 8002706:	0019      	movs	r1, r3
 8002708:	4b18      	ldr	r3, [pc, #96]	; (800276c <HAL_RCC_ClockConfig+0x19c>)
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002710:	4b16      	ldr	r3, [pc, #88]	; (800276c <HAL_RCC_ClockConfig+0x19c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2201      	movs	r2, #1
 8002716:	4013      	ands	r3, r2
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d001      	beq.n	8002722 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e020      	b.n	8002764 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2204      	movs	r2, #4
 8002728:	4013      	ands	r3, r2
 800272a:	d009      	beq.n	8002740 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800272c:	4b10      	ldr	r3, [pc, #64]	; (8002770 <HAL_RCC_ClockConfig+0x1a0>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	4a11      	ldr	r2, [pc, #68]	; (8002778 <HAL_RCC_ClockConfig+0x1a8>)
 8002732:	4013      	ands	r3, r2
 8002734:	0019      	movs	r1, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <HAL_RCC_ClockConfig+0x1a0>)
 800273c:	430a      	orrs	r2, r1
 800273e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002740:	f000 f820 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 8002744:	0001      	movs	r1, r0
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <HAL_RCC_ClockConfig+0x1a0>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	091b      	lsrs	r3, r3, #4
 800274c:	220f      	movs	r2, #15
 800274e:	4013      	ands	r3, r2
 8002750:	4a0a      	ldr	r2, [pc, #40]	; (800277c <HAL_RCC_ClockConfig+0x1ac>)
 8002752:	5cd3      	ldrb	r3, [r2, r3]
 8002754:	000a      	movs	r2, r1
 8002756:	40da      	lsrs	r2, r3
 8002758:	4b09      	ldr	r3, [pc, #36]	; (8002780 <HAL_RCC_ClockConfig+0x1b0>)
 800275a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800275c:	2000      	movs	r0, #0
 800275e:	f7fe fa2b 	bl	8000bb8 <HAL_InitTick>
  
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	0018      	movs	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	b004      	add	sp, #16
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40022000 	.word	0x40022000
 8002770:	40021000 	.word	0x40021000
 8002774:	00001388 	.word	0x00001388
 8002778:	fffff8ff 	.word	0xfffff8ff
 800277c:	08004360 	.word	0x08004360
 8002780:	20000000 	.word	0x20000000

08002784 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b08f      	sub	sp, #60	; 0x3c
 8002788:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800278a:	2314      	movs	r3, #20
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	4a37      	ldr	r2, [pc, #220]	; (800286c <HAL_RCC_GetSysClockFreq+0xe8>)
 8002790:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002792:	c313      	stmia	r3!, {r0, r1, r4}
 8002794:	6812      	ldr	r2, [r2, #0]
 8002796:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002798:	1d3b      	adds	r3, r7, #4
 800279a:	4a35      	ldr	r2, [pc, #212]	; (8002870 <HAL_RCC_GetSysClockFreq+0xec>)
 800279c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800279e:	c313      	stmia	r3!, {r0, r1, r4}
 80027a0:	6812      	ldr	r2, [r2, #0]
 80027a2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027a8:	2300      	movs	r3, #0
 80027aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ac:	2300      	movs	r3, #0
 80027ae:	637b      	str	r3, [r7, #52]	; 0x34
 80027b0:	2300      	movs	r3, #0
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80027b8:	4b2e      	ldr	r3, [pc, #184]	; (8002874 <HAL_RCC_GetSysClockFreq+0xf0>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c0:	220c      	movs	r2, #12
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d006      	beq.n	80027d6 <HAL_RCC_GetSysClockFreq+0x52>
 80027c8:	2b0c      	cmp	r3, #12
 80027ca:	d043      	beq.n	8002854 <HAL_RCC_GetSysClockFreq+0xd0>
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d144      	bne.n	800285a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027d0:	4b29      	ldr	r3, [pc, #164]	; (8002878 <HAL_RCC_GetSysClockFreq+0xf4>)
 80027d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027d4:	e044      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d8:	0c9b      	lsrs	r3, r3, #18
 80027da:	220f      	movs	r2, #15
 80027dc:	4013      	ands	r3, r2
 80027de:	2214      	movs	r2, #20
 80027e0:	18ba      	adds	r2, r7, r2
 80027e2:	5cd3      	ldrb	r3, [r2, r3]
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80027e6:	4b23      	ldr	r3, [pc, #140]	; (8002874 <HAL_RCC_GetSysClockFreq+0xf0>)
 80027e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ea:	220f      	movs	r2, #15
 80027ec:	4013      	ands	r3, r2
 80027ee:	1d3a      	adds	r2, r7, #4
 80027f0:	5cd3      	ldrb	r3, [r2, r3]
 80027f2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80027f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f6:	23c0      	movs	r3, #192	; 0xc0
 80027f8:	025b      	lsls	r3, r3, #9
 80027fa:	401a      	ands	r2, r3
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	025b      	lsls	r3, r3, #9
 8002800:	429a      	cmp	r2, r3
 8002802:	d109      	bne.n	8002818 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002804:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002806:	481c      	ldr	r0, [pc, #112]	; (8002878 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002808:	f7fd fc7e 	bl	8000108 <__udivsi3>
 800280c:	0003      	movs	r3, r0
 800280e:	001a      	movs	r2, r3
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	4353      	muls	r3, r2
 8002814:	637b      	str	r3, [r7, #52]	; 0x34
 8002816:	e01a      	b.n	800284e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800281a:	23c0      	movs	r3, #192	; 0xc0
 800281c:	025b      	lsls	r3, r3, #9
 800281e:	401a      	ands	r2, r3
 8002820:	23c0      	movs	r3, #192	; 0xc0
 8002822:	025b      	lsls	r3, r3, #9
 8002824:	429a      	cmp	r2, r3
 8002826:	d109      	bne.n	800283c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800282a:	4814      	ldr	r0, [pc, #80]	; (800287c <HAL_RCC_GetSysClockFreq+0xf8>)
 800282c:	f7fd fc6c 	bl	8000108 <__udivsi3>
 8002830:	0003      	movs	r3, r0
 8002832:	001a      	movs	r2, r3
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	4353      	muls	r3, r2
 8002838:	637b      	str	r3, [r7, #52]	; 0x34
 800283a:	e008      	b.n	800284e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800283c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800283e:	480e      	ldr	r0, [pc, #56]	; (8002878 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002840:	f7fd fc62 	bl	8000108 <__udivsi3>
 8002844:	0003      	movs	r3, r0
 8002846:	001a      	movs	r2, r3
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	4353      	muls	r3, r2
 800284c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800284e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002850:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002852:	e005      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002856:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002858:	e002      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800285a:	4b07      	ldr	r3, [pc, #28]	; (8002878 <HAL_RCC_GetSysClockFreq+0xf4>)
 800285c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800285e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002862:	0018      	movs	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	b00f      	add	sp, #60	; 0x3c
 8002868:	bd90      	pop	{r4, r7, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	08004338 	.word	0x08004338
 8002870:	08004348 	.word	0x08004348
 8002874:	40021000 	.word	0x40021000
 8002878:	007a1200 	.word	0x007a1200
 800287c:	02dc6c00 	.word	0x02dc6c00

08002880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002884:	4b02      	ldr	r3, [pc, #8]	; (8002890 <HAL_RCC_GetHCLKFreq+0x10>)
 8002886:	681b      	ldr	r3, [r3, #0]
}
 8002888:	0018      	movs	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	20000000 	.word	0x20000000

08002894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002898:	f7ff fff2 	bl	8002880 <HAL_RCC_GetHCLKFreq>
 800289c:	0001      	movs	r1, r0
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	0a1b      	lsrs	r3, r3, #8
 80028a4:	2207      	movs	r2, #7
 80028a6:	4013      	ands	r3, r2
 80028a8:	4a04      	ldr	r2, [pc, #16]	; (80028bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80028aa:	5cd3      	ldrb	r3, [r2, r3]
 80028ac:	40d9      	lsrs	r1, r3
 80028ae:	000b      	movs	r3, r1
}    
 80028b0:	0018      	movs	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	40021000 	.word	0x40021000
 80028bc:	08004370 	.word	0x08004370

080028c0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2207      	movs	r2, #7
 80028ce:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028d0:	4b0e      	ldr	r3, [pc, #56]	; (800290c <HAL_RCC_GetClockConfig+0x4c>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2203      	movs	r2, #3
 80028d6:	401a      	ands	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <HAL_RCC_GetClockConfig+0x4c>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	22f0      	movs	r2, #240	; 0xf0
 80028e2:	401a      	ands	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80028e8:	4b08      	ldr	r3, [pc, #32]	; (800290c <HAL_RCC_GetClockConfig+0x4c>)
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	23e0      	movs	r3, #224	; 0xe0
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	401a      	ands	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 80028f6:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HAL_RCC_GetClockConfig+0x50>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2201      	movs	r2, #1
 80028fc:	401a      	ands	r2, r3
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	601a      	str	r2, [r3, #0]
}
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	46bd      	mov	sp, r7
 8002906:	b002      	add	sp, #8
 8002908:	bd80      	pop	{r7, pc}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	40021000 	.word	0x40021000
 8002910:	40022000 	.word	0x40022000

08002914 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e01e      	b.n	8002964 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	223d      	movs	r2, #61	; 0x3d
 800292a:	5c9b      	ldrb	r3, [r3, r2]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d107      	bne.n	8002942 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	223c      	movs	r2, #60	; 0x3c
 8002936:	2100      	movs	r1, #0
 8002938:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	0018      	movs	r0, r3
 800293e:	f000 f815 	bl	800296c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	223d      	movs	r2, #61	; 0x3d
 8002946:	2102      	movs	r1, #2
 8002948:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3304      	adds	r3, #4
 8002952:	0019      	movs	r1, r3
 8002954:	0010      	movs	r0, r2
 8002956:	f000 fb5f 	bl	8003018 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	223d      	movs	r2, #61	; 0x3d
 800295e:	2101      	movs	r1, #1
 8002960:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	0018      	movs	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	b002      	add	sp, #8
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002974:	46c0      	nop			; (mov r8, r8)
 8002976:	46bd      	mov	sp, r7
 8002978:	b002      	add	sp, #8
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2101      	movs	r1, #1
 8002990:	430a      	orrs	r2, r1
 8002992:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2207      	movs	r2, #7
 800299c:	4013      	ands	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b06      	cmp	r3, #6
 80029a4:	d007      	beq.n	80029b6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2101      	movs	r1, #1
 80029b2:	430a      	orrs	r2, r1
 80029b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	0018      	movs	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b004      	add	sp, #16
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e01e      	b.n	8002a10 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	223d      	movs	r2, #61	; 0x3d
 80029d6:	5c9b      	ldrb	r3, [r3, r2]
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d107      	bne.n	80029ee <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	223c      	movs	r2, #60	; 0x3c
 80029e2:	2100      	movs	r1, #0
 80029e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	0018      	movs	r0, r3
 80029ea:	f7fe fa85 	bl	8000ef8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	223d      	movs	r2, #61	; 0x3d
 80029f2:	2102      	movs	r1, #2
 80029f4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3304      	adds	r3, #4
 80029fe:	0019      	movs	r1, r3
 8002a00:	0010      	movs	r0, r2
 8002a02:	f000 fb09 	bl	8003018 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	223d      	movs	r2, #61	; 0x3d
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	0018      	movs	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b002      	add	sp, #8
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6839      	ldr	r1, [r7, #0]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f000 fd4a 	bl	80034c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a18      	ldr	r2, [pc, #96]	; (8002a98 <HAL_TIM_PWM_Start+0x80>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d009      	beq.n	8002a4e <HAL_TIM_PWM_Start+0x36>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a17      	ldr	r2, [pc, #92]	; (8002a9c <HAL_TIM_PWM_Start+0x84>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d004      	beq.n	8002a4e <HAL_TIM_PWM_Start+0x36>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a15      	ldr	r2, [pc, #84]	; (8002aa0 <HAL_TIM_PWM_Start+0x88>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d101      	bne.n	8002a52 <HAL_TIM_PWM_Start+0x3a>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <HAL_TIM_PWM_Start+0x3c>
 8002a52:	2300      	movs	r3, #0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_TIM_PWM_Start+0x52>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2180      	movs	r1, #128	; 0x80
 8002a64:	0209      	lsls	r1, r1, #8
 8002a66:	430a      	orrs	r2, r1
 8002a68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2207      	movs	r2, #7
 8002a72:	4013      	ands	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b06      	cmp	r3, #6
 8002a7a:	d007      	beq.n	8002a8c <HAL_TIM_PWM_Start+0x74>
  {
    __HAL_TIM_ENABLE(htim);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2101      	movs	r1, #1
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	0018      	movs	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b004      	add	sp, #16
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	40012c00 	.word	0x40012c00
 8002a9c:	40014400 	.word	0x40014400
 8002aa0:	40014800 	.word	0x40014800

08002aa4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e07c      	b.n	8002bb2 <HAL_TIM_Encoder_Init+0x10e>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	223d      	movs	r2, #61	; 0x3d
 8002abc:	5c9b      	ldrb	r3, [r3, r2]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d107      	bne.n	8002ad4 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	223c      	movs	r2, #60	; 0x3c
 8002ac8:	2100      	movs	r1, #0
 8002aca:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f7fe f9c8 	bl	8000e64 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	223d      	movs	r2, #61	; 0x3d
 8002ad8:	2102      	movs	r1, #2
 8002ada:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4935      	ldr	r1, [pc, #212]	; (8002bbc <HAL_TIM_Encoder_Init+0x118>)
 8002ae8:	400a      	ands	r2, r1
 8002aea:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3304      	adds	r3, #4
 8002af4:	0019      	movs	r1, r3
 8002af6:	0010      	movs	r0, r2
 8002af8:	f000 fa8e 	bl	8003018 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4a27      	ldr	r2, [pc, #156]	; (8002bc0 <HAL_TIM_Encoder_Init+0x11c>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	021b      	lsls	r3, r3, #8
 8002b30:	4313      	orrs	r3, r2
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4a22      	ldr	r2, [pc, #136]	; (8002bc4 <HAL_TIM_Encoder_Init+0x120>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4a21      	ldr	r2, [pc, #132]	; (8002bc8 <HAL_TIM_Encoder_Init+0x124>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	68da      	ldr	r2, [r3, #12]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	021b      	lsls	r3, r3, #8
 8002b52:	4313      	orrs	r3, r2
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	011a      	lsls	r2, r3, #4
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	031b      	lsls	r3, r3, #12
 8002b66:	4313      	orrs	r3, r2
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2222      	movs	r2, #34	; 0x22
 8002b72:	4393      	bics	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2288      	movs	r2, #136	; 0x88
 8002b7a:	4393      	bics	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	223d      	movs	r2, #61	; 0x3d
 8002bac:	2101      	movs	r1, #1
 8002bae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	b006      	add	sp, #24
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	ffffbff8 	.word	0xffffbff8
 8002bc0:	fffffcfc 	.word	0xfffffcfc
 8002bc4:	fffff3f3 	.word	0xfffff3f3
 8002bc8:	ffff0f0f 	.word	0xffff0f0f

08002bcc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <HAL_TIM_Encoder_Start+0x16>
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d008      	beq.n	8002bf2 <HAL_TIM_Encoder_Start+0x26>
 8002be0:	e00f      	b.n	8002c02 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2201      	movs	r2, #1
 8002be8:	2100      	movs	r1, #0
 8002bea:	0018      	movs	r0, r3
 8002bec:	f000 fc6a 	bl	80034c4 <TIM_CCxChannelCmd>
      break;
 8002bf0:	e016      	b.n	8002c20 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	2104      	movs	r1, #4
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f000 fc62 	bl	80034c4 <TIM_CCxChannelCmd>
      break;
 8002c00:	e00e      	b.n	8002c20 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2201      	movs	r2, #1
 8002c08:	2100      	movs	r1, #0
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f000 fc5a 	bl	80034c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2201      	movs	r2, #1
 8002c16:	2104      	movs	r1, #4
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f000 fc53 	bl	80034c4 <TIM_CCxChannelCmd>
      break;
 8002c1e:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	0018      	movs	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	b002      	add	sp, #8
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d124      	bne.n	8002c9a <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	2202      	movs	r2, #2
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d11d      	bne.n	8002c9a <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2203      	movs	r2, #3
 8002c64:	4252      	negs	r2, r2
 8002c66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	2203      	movs	r2, #3
 8002c76:	4013      	ands	r3, r2
 8002c78:	d004      	beq.n	8002c84 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f000 f9b3 	bl	8002fe8 <HAL_TIM_IC_CaptureCallback>
 8002c82:	e007      	b.n	8002c94 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	0018      	movs	r0, r3
 8002c88:	f000 f9a6 	bl	8002fd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f000 f9b2 	bl	8002ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d125      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	2204      	movs	r2, #4
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d11e      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2205      	movs	r2, #5
 8002cbc:	4252      	negs	r2, r2
 8002cbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699a      	ldr	r2, [r3, #24]
 8002ccc:	23c0      	movs	r3, #192	; 0xc0
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d004      	beq.n	8002cde <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f000 f986 	bl	8002fe8 <HAL_TIM_IC_CaptureCallback>
 8002cdc:	e007      	b.n	8002cee <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f000 f979 	bl	8002fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f000 f985 	bl	8002ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	2208      	movs	r2, #8
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d124      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2208      	movs	r2, #8
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d11d      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2209      	movs	r2, #9
 8002d16:	4252      	negs	r2, r2
 8002d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2204      	movs	r2, #4
 8002d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	2203      	movs	r2, #3
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d004      	beq.n	8002d36 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f000 f95a 	bl	8002fe8 <HAL_TIM_IC_CaptureCallback>
 8002d34:	e007      	b.n	8002d46 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f000 f94d 	bl	8002fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	0018      	movs	r0, r3
 8002d42:	f000 f959 	bl	8002ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2210      	movs	r2, #16
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b10      	cmp	r3, #16
 8002d58:	d125      	bne.n	8002da6 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	2210      	movs	r2, #16
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b10      	cmp	r3, #16
 8002d66:	d11e      	bne.n	8002da6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2211      	movs	r2, #17
 8002d6e:	4252      	negs	r2, r2
 8002d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2208      	movs	r2, #8
 8002d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	69da      	ldr	r2, [r3, #28]
 8002d7e:	23c0      	movs	r3, #192	; 0xc0
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4013      	ands	r3, r2
 8002d84:	d004      	beq.n	8002d90 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f000 f92d 	bl	8002fe8 <HAL_TIM_IC_CaptureCallback>
 8002d8e:	e007      	b.n	8002da0 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	0018      	movs	r0, r3
 8002d94:	f000 f920 	bl	8002fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f000 f92c 	bl	8002ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	2201      	movs	r2, #1
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d10f      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d108      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	4252      	negs	r2, r2
 8002dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f7fd feb0 	bl	8000b34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	2280      	movs	r2, #128	; 0x80
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b80      	cmp	r3, #128	; 0x80
 8002de0:	d10f      	bne.n	8002e02 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	2280      	movs	r2, #128	; 0x80
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b80      	cmp	r3, #128	; 0x80
 8002dee:	d108      	bne.n	8002e02 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2281      	movs	r2, #129	; 0x81
 8002df6:	4252      	negs	r2, r2
 8002df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f000 fbe5 	bl	80035cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	2240      	movs	r2, #64	; 0x40
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b40      	cmp	r3, #64	; 0x40
 8002e0e:	d10f      	bne.n	8002e30 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	2240      	movs	r2, #64	; 0x40
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b40      	cmp	r3, #64	; 0x40
 8002e1c:	d108      	bne.n	8002e30 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2241      	movs	r2, #65	; 0x41
 8002e24:	4252      	negs	r2, r2
 8002e26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f000 f8ec 	bl	8003008 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	2220      	movs	r2, #32
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	d10f      	bne.n	8002e5e <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	2220      	movs	r2, #32
 8002e46:	4013      	ands	r3, r2
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	d108      	bne.n	8002e5e <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2221      	movs	r2, #33	; 0x21
 8002e52:	4252      	negs	r2, r2
 8002e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f000 fbaf 	bl	80035bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	46bd      	mov	sp, r7
 8002e62:	b002      	add	sp, #8
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	223c      	movs	r2, #60	; 0x3c
 8002e78:	5c9b      	ldrb	r3, [r3, r2]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e0a4      	b.n	8002fcc <HAL_TIM_PWM_ConfigChannel+0x164>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	223c      	movs	r2, #60	; 0x3c
 8002e86:	2101      	movs	r1, #1
 8002e88:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	223d      	movs	r2, #61	; 0x3d
 8002e8e:	2102      	movs	r1, #2
 8002e90:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d029      	beq.n	8002eec <HAL_TIM_PWM_ConfigChannel+0x84>
 8002e98:	d802      	bhi.n	8002ea0 <HAL_TIM_PWM_ConfigChannel+0x38>
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d005      	beq.n	8002eaa <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8002e9e:	e08c      	b.n	8002fba <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d046      	beq.n	8002f32 <HAL_TIM_PWM_ConfigChannel+0xca>
 8002ea4:	2b0c      	cmp	r3, #12
 8002ea6:	d065      	beq.n	8002f74 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8002ea8:	e087      	b.n	8002fba <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	0011      	movs	r1, r2
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f000 f926 	bl	8003104 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699a      	ldr	r2, [r3, #24]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2108      	movs	r1, #8
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699a      	ldr	r2, [r3, #24]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2104      	movs	r1, #4
 8002ed4:	438a      	bics	r2, r1
 8002ed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6999      	ldr	r1, [r3, #24]
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	691a      	ldr	r2, [r3, #16]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	619a      	str	r2, [r3, #24]
      break;
 8002eea:	e066      	b.n	8002fba <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	0011      	movs	r1, r2
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f000 f983 	bl	8003200 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699a      	ldr	r2, [r3, #24]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2180      	movs	r1, #128	; 0x80
 8002f06:	0109      	lsls	r1, r1, #4
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699a      	ldr	r2, [r3, #24]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	492f      	ldr	r1, [pc, #188]	; (8002fd4 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002f18:	400a      	ands	r2, r1
 8002f1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6999      	ldr	r1, [r3, #24]
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	021a      	lsls	r2, r3, #8
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	619a      	str	r2, [r3, #24]
      break;
 8002f30:	e043      	b.n	8002fba <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	0011      	movs	r1, r2
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f000 f9de 	bl	80032fc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	69da      	ldr	r2, [r3, #28]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2108      	movs	r1, #8
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	69da      	ldr	r2, [r3, #28]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2104      	movs	r1, #4
 8002f5c:	438a      	bics	r2, r1
 8002f5e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	69d9      	ldr	r1, [r3, #28]
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	691a      	ldr	r2, [r3, #16]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	61da      	str	r2, [r3, #28]
      break;
 8002f72:	e022      	b.n	8002fba <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	0011      	movs	r1, r2
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f000 fa3d 	bl	80033fc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	69da      	ldr	r2, [r3, #28]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2180      	movs	r1, #128	; 0x80
 8002f8e:	0109      	lsls	r1, r1, #4
 8002f90:	430a      	orrs	r2, r1
 8002f92:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	69da      	ldr	r2, [r3, #28]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	490d      	ldr	r1, [pc, #52]	; (8002fd4 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002fa0:	400a      	ands	r2, r1
 8002fa2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	69d9      	ldr	r1, [r3, #28]
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	021a      	lsls	r2, r3, #8
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	61da      	str	r2, [r3, #28]
      break;
 8002fb8:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	223d      	movs	r2, #61	; 0x3d
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	223c      	movs	r2, #60	; 0x3c
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b004      	add	sp, #16
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	fffffbff 	.word	0xfffffbff

08002fd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fe0:	46c0      	nop			; (mov r8, r8)
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b002      	add	sp, #8
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ff0:	46c0      	nop			; (mov r8, r8)
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b002      	add	sp, #8
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003000:	46c0      	nop			; (mov r8, r8)
 8003002:	46bd      	mov	sp, r7
 8003004:	b002      	add	sp, #8
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003010:	46c0      	nop			; (mov r8, r8)
 8003012:	46bd      	mov	sp, r7
 8003014:	b002      	add	sp, #8
 8003016:	bd80      	pop	{r7, pc}

08003018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a30      	ldr	r2, [pc, #192]	; (80030ec <TIM_Base_SetConfig+0xd4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d008      	beq.n	8003042 <TIM_Base_SetConfig+0x2a>
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	2380      	movs	r3, #128	; 0x80
 8003034:	05db      	lsls	r3, r3, #23
 8003036:	429a      	cmp	r2, r3
 8003038:	d003      	beq.n	8003042 <TIM_Base_SetConfig+0x2a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a2c      	ldr	r2, [pc, #176]	; (80030f0 <TIM_Base_SetConfig+0xd8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d108      	bne.n	8003054 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2270      	movs	r2, #112	; 0x70
 8003046:	4393      	bics	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4313      	orrs	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a25      	ldr	r2, [pc, #148]	; (80030ec <TIM_Base_SetConfig+0xd4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d014      	beq.n	8003086 <TIM_Base_SetConfig+0x6e>
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	2380      	movs	r3, #128	; 0x80
 8003060:	05db      	lsls	r3, r3, #23
 8003062:	429a      	cmp	r2, r3
 8003064:	d00f      	beq.n	8003086 <TIM_Base_SetConfig+0x6e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a21      	ldr	r2, [pc, #132]	; (80030f0 <TIM_Base_SetConfig+0xd8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00b      	beq.n	8003086 <TIM_Base_SetConfig+0x6e>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a20      	ldr	r2, [pc, #128]	; (80030f4 <TIM_Base_SetConfig+0xdc>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d007      	beq.n	8003086 <TIM_Base_SetConfig+0x6e>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a1f      	ldr	r2, [pc, #124]	; (80030f8 <TIM_Base_SetConfig+0xe0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d003      	beq.n	8003086 <TIM_Base_SetConfig+0x6e>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a1e      	ldr	r2, [pc, #120]	; (80030fc <TIM_Base_SetConfig+0xe4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d108      	bne.n	8003098 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4a1d      	ldr	r2, [pc, #116]	; (8003100 <TIM_Base_SetConfig+0xe8>)
 800308a:	4013      	ands	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4313      	orrs	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2280      	movs	r2, #128	; 0x80
 800309c:	4393      	bics	r3, r2
 800309e:	001a      	movs	r2, r3
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <TIM_Base_SetConfig+0xd4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d007      	beq.n	80030d6 <TIM_Base_SetConfig+0xbe>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a0b      	ldr	r2, [pc, #44]	; (80030f8 <TIM_Base_SetConfig+0xe0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d003      	beq.n	80030d6 <TIM_Base_SetConfig+0xbe>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <TIM_Base_SetConfig+0xe4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d103      	bne.n	80030de <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	691a      	ldr	r2, [r3, #16]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	615a      	str	r2, [r3, #20]
}
 80030e4:	46c0      	nop			; (mov r8, r8)
 80030e6:	46bd      	mov	sp, r7
 80030e8:	b004      	add	sp, #16
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40012c00 	.word	0x40012c00
 80030f0:	40000400 	.word	0x40000400
 80030f4:	40002000 	.word	0x40002000
 80030f8:	40014400 	.word	0x40014400
 80030fc:	40014800 	.word	0x40014800
 8003100:	fffffcff 	.word	0xfffffcff

08003104 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	2201      	movs	r2, #1
 8003114:	4393      	bics	r3, r2
 8003116:	001a      	movs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2270      	movs	r2, #112	; 0x70
 8003132:	4393      	bics	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2203      	movs	r2, #3
 800313a:	4393      	bics	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4313      	orrs	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2202      	movs	r2, #2
 800314c:	4393      	bics	r3, r2
 800314e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	4313      	orrs	r3, r2
 8003158:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a23      	ldr	r2, [pc, #140]	; (80031ec <TIM_OC1_SetConfig+0xe8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d007      	beq.n	8003172 <TIM_OC1_SetConfig+0x6e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a22      	ldr	r2, [pc, #136]	; (80031f0 <TIM_OC1_SetConfig+0xec>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d003      	beq.n	8003172 <TIM_OC1_SetConfig+0x6e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a21      	ldr	r2, [pc, #132]	; (80031f4 <TIM_OC1_SetConfig+0xf0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d10c      	bne.n	800318c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2208      	movs	r2, #8
 8003176:	4393      	bics	r3, r2
 8003178:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	4313      	orrs	r3, r2
 8003182:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	2204      	movs	r2, #4
 8003188:	4393      	bics	r3, r2
 800318a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a17      	ldr	r2, [pc, #92]	; (80031ec <TIM_OC1_SetConfig+0xe8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d007      	beq.n	80031a4 <TIM_OC1_SetConfig+0xa0>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a16      	ldr	r2, [pc, #88]	; (80031f0 <TIM_OC1_SetConfig+0xec>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d003      	beq.n	80031a4 <TIM_OC1_SetConfig+0xa0>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a15      	ldr	r2, [pc, #84]	; (80031f4 <TIM_OC1_SetConfig+0xf0>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d111      	bne.n	80031c8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4a14      	ldr	r2, [pc, #80]	; (80031f8 <TIM_OC1_SetConfig+0xf4>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	4a13      	ldr	r2, [pc, #76]	; (80031fc <TIM_OC1_SetConfig+0xf8>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	621a      	str	r2, [r3, #32]
}
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	46bd      	mov	sp, r7
 80031e6:	b006      	add	sp, #24
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	40012c00 	.word	0x40012c00
 80031f0:	40014400 	.word	0x40014400
 80031f4:	40014800 	.word	0x40014800
 80031f8:	fffffeff 	.word	0xfffffeff
 80031fc:	fffffdff 	.word	0xfffffdff

08003200 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	2210      	movs	r2, #16
 8003210:	4393      	bics	r3, r2
 8003212:	001a      	movs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4a2c      	ldr	r2, [pc, #176]	; (80032e0 <TIM_OC2_SetConfig+0xe0>)
 800322e:	4013      	ands	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4a2b      	ldr	r2, [pc, #172]	; (80032e4 <TIM_OC2_SetConfig+0xe4>)
 8003236:	4013      	ands	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	021b      	lsls	r3, r3, #8
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2220      	movs	r2, #32
 800324a:	4393      	bics	r3, r2
 800324c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	4313      	orrs	r3, r2
 8003258:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a22      	ldr	r2, [pc, #136]	; (80032e8 <TIM_OC2_SetConfig+0xe8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d10d      	bne.n	800327e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2280      	movs	r2, #128	; 0x80
 8003266:	4393      	bics	r3, r2
 8003268:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	4313      	orrs	r3, r2
 8003274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2240      	movs	r2, #64	; 0x40
 800327a:	4393      	bics	r3, r2
 800327c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a19      	ldr	r2, [pc, #100]	; (80032e8 <TIM_OC2_SetConfig+0xe8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d007      	beq.n	8003296 <TIM_OC2_SetConfig+0x96>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a18      	ldr	r2, [pc, #96]	; (80032ec <TIM_OC2_SetConfig+0xec>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d003      	beq.n	8003296 <TIM_OC2_SetConfig+0x96>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a17      	ldr	r2, [pc, #92]	; (80032f0 <TIM_OC2_SetConfig+0xf0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d113      	bne.n	80032be <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	4a16      	ldr	r2, [pc, #88]	; (80032f4 <TIM_OC2_SetConfig+0xf4>)
 800329a:	4013      	ands	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4a15      	ldr	r2, [pc, #84]	; (80032f8 <TIM_OC2_SetConfig+0xf8>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	621a      	str	r2, [r3, #32]
}
 80032d8:	46c0      	nop			; (mov r8, r8)
 80032da:	46bd      	mov	sp, r7
 80032dc:	b006      	add	sp, #24
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	ffff8fff 	.word	0xffff8fff
 80032e4:	fffffcff 	.word	0xfffffcff
 80032e8:	40012c00 	.word	0x40012c00
 80032ec:	40014400 	.word	0x40014400
 80032f0:	40014800 	.word	0x40014800
 80032f4:	fffffbff 	.word	0xfffffbff
 80032f8:	fffff7ff 	.word	0xfffff7ff

080032fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	4a33      	ldr	r2, [pc, #204]	; (80033d8 <TIM_OC3_SetConfig+0xdc>)
 800330c:	401a      	ands	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2270      	movs	r2, #112	; 0x70
 8003328:	4393      	bics	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2203      	movs	r2, #3
 8003330:	4393      	bics	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	4a26      	ldr	r2, [pc, #152]	; (80033dc <TIM_OC3_SetConfig+0xe0>)
 8003342:	4013      	ands	r3, r2
 8003344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	021b      	lsls	r3, r3, #8
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	4313      	orrs	r3, r2
 8003350:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a22      	ldr	r2, [pc, #136]	; (80033e0 <TIM_OC3_SetConfig+0xe4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d10d      	bne.n	8003376 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	4a21      	ldr	r2, [pc, #132]	; (80033e4 <TIM_OC3_SetConfig+0xe8>)
 800335e:	4013      	ands	r3, r2
 8003360:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	021b      	lsls	r3, r3, #8
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	4313      	orrs	r3, r2
 800336c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <TIM_OC3_SetConfig+0xec>)
 8003372:	4013      	ands	r3, r2
 8003374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a19      	ldr	r2, [pc, #100]	; (80033e0 <TIM_OC3_SetConfig+0xe4>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d007      	beq.n	800338e <TIM_OC3_SetConfig+0x92>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a1a      	ldr	r2, [pc, #104]	; (80033ec <TIM_OC3_SetConfig+0xf0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d003      	beq.n	800338e <TIM_OC3_SetConfig+0x92>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a19      	ldr	r2, [pc, #100]	; (80033f0 <TIM_OC3_SetConfig+0xf4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d113      	bne.n	80033b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4a18      	ldr	r2, [pc, #96]	; (80033f4 <TIM_OC3_SetConfig+0xf8>)
 8003392:	4013      	ands	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4a17      	ldr	r2, [pc, #92]	; (80033f8 <TIM_OC3_SetConfig+0xfc>)
 800339a:	4013      	ands	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	621a      	str	r2, [r3, #32]
}
 80033d0:	46c0      	nop			; (mov r8, r8)
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b006      	add	sp, #24
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	fffffeff 	.word	0xfffffeff
 80033dc:	fffffdff 	.word	0xfffffdff
 80033e0:	40012c00 	.word	0x40012c00
 80033e4:	fffff7ff 	.word	0xfffff7ff
 80033e8:	fffffbff 	.word	0xfffffbff
 80033ec:	40014400 	.word	0x40014400
 80033f0:	40014800 	.word	0x40014800
 80033f4:	ffffefff 	.word	0xffffefff
 80033f8:	ffffdfff 	.word	0xffffdfff

080033fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	4a26      	ldr	r2, [pc, #152]	; (80034a4 <TIM_OC4_SetConfig+0xa8>)
 800340c:	401a      	ands	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4a20      	ldr	r2, [pc, #128]	; (80034a8 <TIM_OC4_SetConfig+0xac>)
 8003428:	4013      	ands	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4a1f      	ldr	r2, [pc, #124]	; (80034ac <TIM_OC4_SetConfig+0xb0>)
 8003430:	4013      	ands	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	4a1b      	ldr	r2, [pc, #108]	; (80034b0 <TIM_OC4_SetConfig+0xb4>)
 8003444:	4013      	ands	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	031b      	lsls	r3, r3, #12
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a17      	ldr	r2, [pc, #92]	; (80034b4 <TIM_OC4_SetConfig+0xb8>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d007      	beq.n	800346c <TIM_OC4_SetConfig+0x70>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a16      	ldr	r2, [pc, #88]	; (80034b8 <TIM_OC4_SetConfig+0xbc>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d003      	beq.n	800346c <TIM_OC4_SetConfig+0x70>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a15      	ldr	r2, [pc, #84]	; (80034bc <TIM_OC4_SetConfig+0xc0>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d109      	bne.n	8003480 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	4a14      	ldr	r2, [pc, #80]	; (80034c0 <TIM_OC4_SetConfig+0xc4>)
 8003470:	4013      	ands	r3, r2
 8003472:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	019b      	lsls	r3, r3, #6
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	621a      	str	r2, [r3, #32]
}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	46bd      	mov	sp, r7
 800349e:	b006      	add	sp, #24
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	ffffefff 	.word	0xffffefff
 80034a8:	ffff8fff 	.word	0xffff8fff
 80034ac:	fffffcff 	.word	0xfffffcff
 80034b0:	ffffdfff 	.word	0xffffdfff
 80034b4:	40012c00 	.word	0x40012c00
 80034b8:	40014400 	.word	0x40014400
 80034bc:	40014800 	.word	0x40014800
 80034c0:	ffffbfff 	.word	0xffffbfff

080034c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	221f      	movs	r2, #31
 80034d4:	4013      	ands	r3, r2
 80034d6:	2201      	movs	r2, #1
 80034d8:	409a      	lsls	r2, r3
 80034da:	0013      	movs	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	43d2      	mvns	r2, r2
 80034e6:	401a      	ands	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a1a      	ldr	r2, [r3, #32]
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	211f      	movs	r1, #31
 80034f4:	400b      	ands	r3, r1
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	4099      	lsls	r1, r3
 80034fa:	000b      	movs	r3, r1
 80034fc:	431a      	orrs	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	621a      	str	r2, [r3, #32]
}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	46bd      	mov	sp, r7
 8003506:	b006      	add	sp, #24
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	223c      	movs	r2, #60	; 0x3c
 800351a:	5c9b      	ldrb	r3, [r3, r2]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003520:	2302      	movs	r3, #2
 8003522:	e042      	b.n	80035aa <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	223c      	movs	r2, #60	; 0x3c
 8003528:	2101      	movs	r1, #1
 800352a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	223d      	movs	r2, #61	; 0x3d
 8003530:	2102      	movs	r1, #2
 8003532:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2270      	movs	r2, #112	; 0x70
 8003548:	4393      	bics	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a14      	ldr	r2, [pc, #80]	; (80035b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00a      	beq.n	800357e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	2380      	movs	r3, #128	; 0x80
 800356e:	05db      	lsls	r3, r3, #23
 8003570:	429a      	cmp	r2, r3
 8003572:	d004      	beq.n	800357e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a0f      	ldr	r2, [pc, #60]	; (80035b8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d10c      	bne.n	8003598 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2280      	movs	r2, #128	; 0x80
 8003582:	4393      	bics	r3, r2
 8003584:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	4313      	orrs	r3, r2
 800358e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	223d      	movs	r2, #61	; 0x3d
 800359c:	2101      	movs	r1, #1
 800359e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	223c      	movs	r2, #60	; 0x3c
 80035a4:	2100      	movs	r1, #0
 80035a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	0018      	movs	r0, r3
 80035ac:	46bd      	mov	sp, r7
 80035ae:	b004      	add	sp, #16
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	40012c00 	.word	0x40012c00
 80035b8:	40000400 	.word	0x40000400

080035bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b002      	add	sp, #8
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035d4:	46c0      	nop			; (mov r8, r8)
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b002      	add	sp, #8
 80035da:	bd80      	pop	{r7, pc}

080035dc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	0002      	movs	r2, r0
 80035e4:	1dbb      	adds	r3, r7, #6
 80035e6:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80035ec:	1dbb      	adds	r3, r7, #6
 80035ee:	2200      	movs	r2, #0
 80035f0:	5e9b      	ldrsh	r3, [r3, r2]
 80035f2:	2b84      	cmp	r3, #132	; 0x84
 80035f4:	d006      	beq.n	8003604 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80035f6:	1dbb      	adds	r3, r7, #6
 80035f8:	2200      	movs	r2, #0
 80035fa:	5e9a      	ldrsh	r2, [r3, r2]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	18d3      	adds	r3, r2, r3
 8003600:	3303      	adds	r3, #3
 8003602:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003604:	68fb      	ldr	r3, [r7, #12]
}
 8003606:	0018      	movs	r0, r3
 8003608:	46bd      	mov	sp, r7
 800360a:	b004      	add	sp, #16
 800360c:	bd80      	pop	{r7, pc}

0800360e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003612:	f000 fa4d 	bl	8003ab0 <vTaskStartScheduler>
  
  return osOK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	0018      	movs	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800361e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003620:	b089      	sub	sp, #36	; 0x24
 8003622:	af04      	add	r7, sp, #16
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685c      	ldr	r4, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681d      	ldr	r5, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691e      	ldr	r6, [r3, #16]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2208      	movs	r2, #8
 8003638:	5e9b      	ldrsh	r3, [r3, r2]
 800363a:	0018      	movs	r0, r3
 800363c:	f7ff ffce 	bl	80035dc <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003648:	6839      	ldr	r1, [r7, #0]
 800364a:	9302      	str	r3, [sp, #8]
 800364c:	9201      	str	r2, [sp, #4]
 800364e:	9000      	str	r0, [sp, #0]
 8003650:	000b      	movs	r3, r1
 8003652:	0032      	movs	r2, r6
 8003654:	0029      	movs	r1, r5
 8003656:	0020      	movs	r0, r4
 8003658:	f000 f8b0 	bl	80037bc <xTaskCreateStatic>
 800365c:	0003      	movs	r3, r0
 800365e:	60fb      	str	r3, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003660:	68fb      	ldr	r3, [r7, #12]
}
 8003662:	0018      	movs	r0, r3
 8003664:	46bd      	mov	sp, r7
 8003666:	b005      	add	sp, #20
 8003668:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800366a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b082      	sub	sp, #8
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3308      	adds	r3, #8
 8003676:	001a      	movs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	4252      	negs	r2, r2
 8003682:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3308      	adds	r3, #8
 8003688:	001a      	movs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3308      	adds	r3, #8
 8003692:	001a      	movs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b002      	add	sp, #8
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036b4:	46c0      	nop			; (mov r8, r8)
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b002      	add	sp, #8
 80036ba:	bd80      	pop	{r7, pc}

080036bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	601a      	str	r2, [r3, #0]
}
 80036f8:	46c0      	nop			; (mov r8, r8)
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b004      	add	sp, #16
 80036fe:	bd80      	pop	{r7, pc}

08003700 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	3301      	adds	r3, #1
 8003714:	d103      	bne.n	800371e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	e00c      	b.n	8003738 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3308      	adds	r3, #8
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	e002      	b.n	800372c <vListInsert+0x2c>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	429a      	cmp	r2, r3
 8003736:	d2f6      	bcs.n	8003726 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	601a      	str	r2, [r3, #0]
}
 8003764:	46c0      	nop			; (mov r8, r8)
 8003766:	46bd      	mov	sp, r7
 8003768:	b004      	add	sp, #16
 800376a:	bd80      	pop	{r7, pc}

0800376c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6892      	ldr	r2, [r2, #8]
 8003782:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6852      	ldr	r2, [r2, #4]
 800378c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	429a      	cmp	r2, r3
 8003796:	d103      	bne.n	80037a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	1e5a      	subs	r2, r3, #1
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
}
 80037b4:	0018      	movs	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b004      	add	sp, #16
 80037ba:	bd80      	pop	{r7, pc}

080037bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80037bc:	b590      	push	{r4, r7, lr}
 80037be:	b08d      	sub	sp, #52	; 0x34
 80037c0:	af04      	add	r7, sp, #16
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
 80037c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80037ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <xTaskCreateStatic+0x18>
 80037d0:	b672      	cpsid	i
 80037d2:	e7fe      	b.n	80037d2 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80037d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <xTaskCreateStatic+0x22>
 80037da:	b672      	cpsid	i
 80037dc:	e7fe      	b.n	80037dc <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80037de:	2350      	movs	r3, #80	; 0x50
 80037e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2b50      	cmp	r3, #80	; 0x50
 80037e6:	d001      	beq.n	80037ec <xTaskCreateStatic+0x30>
 80037e8:	b672      	cpsid	i
 80037ea:	e7fe      	b.n	80037ea <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80037ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d01c      	beq.n	800382c <xTaskCreateStatic+0x70>
 80037f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d019      	beq.n	800382c <xTaskCreateStatic+0x70>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fa:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003800:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003802:	683c      	ldr	r4, [r7, #0]
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	68b9      	ldr	r1, [r7, #8]
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	2300      	movs	r3, #0
 800380c:	9303      	str	r3, [sp, #12]
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	9302      	str	r3, [sp, #8]
 8003812:	2318      	movs	r3, #24
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	9301      	str	r3, [sp, #4]
 8003818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	0023      	movs	r3, r4
 800381e:	f000 f80d 	bl	800383c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	0018      	movs	r0, r3
 8003826:	f000 f883 	bl	8003930 <prvAddNewTaskToReadyList>
 800382a:	e001      	b.n	8003830 <xTaskCreateStatic+0x74>
		}
		else
		{
			xReturn = NULL;
 800382c:	2300      	movs	r3, #0
 800382e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003830:	69bb      	ldr	r3, [r7, #24]
	}
 8003832:	0018      	movs	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	b009      	add	sp, #36	; 0x24
 8003838:	bd90      	pop	{r4, r7, pc}
	...

0800383c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800384a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4936      	ldr	r1, [pc, #216]	; (800392c <prvInitialiseNewTask+0xf0>)
 8003852:	468c      	mov	ip, r1
 8003854:	4463      	add	r3, ip
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	18d3      	adds	r3, r2, r3
 800385a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	2207      	movs	r2, #7
 8003860:	4393      	bics	r3, r2
 8003862:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	2207      	movs	r2, #7
 8003868:	4013      	ands	r3, r2
 800386a:	d001      	beq.n	8003870 <prvInitialiseNewTask+0x34>
 800386c:	b672      	cpsid	i
 800386e:	e7fe      	b.n	800386e <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	e013      	b.n	800389e <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	18d3      	adds	r3, r2, r3
 800387c:	7818      	ldrb	r0, [r3, #0]
 800387e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003880:	2134      	movs	r1, #52	; 0x34
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	18d3      	adds	r3, r2, r3
 8003886:	185b      	adds	r3, r3, r1
 8003888:	1c02      	adds	r2, r0, #0
 800388a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	18d3      	adds	r3, r2, r3
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d006      	beq.n	80038a6 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	3301      	adds	r3, #1
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b0b      	cmp	r3, #11
 80038a2:	d9e8      	bls.n	8003876 <prvInitialiseNewTask+0x3a>
 80038a4:	e000      	b.n	80038a8 <prvInitialiseNewTask+0x6c>
		{
			break;
 80038a6:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80038a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038aa:	223f      	movs	r2, #63	; 0x3f
 80038ac:	2100      	movs	r1, #0
 80038ae:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	2b06      	cmp	r3, #6
 80038b4:	d901      	bls.n	80038ba <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80038b6:	2306      	movs	r3, #6
 80038b8:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80038ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038bc:	6a3a      	ldr	r2, [r7, #32]
 80038be:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80038c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c2:	6a3a      	ldr	r2, [r7, #32]
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 80038c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c8:	2200      	movs	r2, #0
 80038ca:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80038cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ce:	3304      	adds	r3, #4
 80038d0:	0018      	movs	r0, r3
 80038d2:	f7ff fee8 	bl	80036a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80038d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d8:	3318      	adds	r3, #24
 80038da:	0018      	movs	r0, r3
 80038dc:	f7ff fee3 	bl	80036a6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80038e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	2207      	movs	r2, #7
 80038ea:	1ad2      	subs	r2, r2, r3
 80038ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038f4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80038f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f8:	2200      	movs	r2, #0
 80038fa:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fe:	224c      	movs	r2, #76	; 0x4c
 8003900:	2100      	movs	r1, #0
 8003902:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	68f9      	ldr	r1, [r7, #12]
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	0018      	movs	r0, r3
 800390c:	f000 fb80 	bl	8004010 <pxPortInitialiseStack>
 8003910:	0002      	movs	r2, r0
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003920:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	46bd      	mov	sp, r7
 8003926:	b006      	add	sp, #24
 8003928:	bd80      	pop	{r7, pc}
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	3fffffff 	.word	0x3fffffff

08003930 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003938:	f000 fc02 	bl	8004140 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800393c:	4b28      	ldr	r3, [pc, #160]	; (80039e0 <prvAddNewTaskToReadyList+0xb0>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	4b27      	ldr	r3, [pc, #156]	; (80039e0 <prvAddNewTaskToReadyList+0xb0>)
 8003944:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003946:	4b27      	ldr	r3, [pc, #156]	; (80039e4 <prvAddNewTaskToReadyList+0xb4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d109      	bne.n	8003962 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800394e:	4b25      	ldr	r3, [pc, #148]	; (80039e4 <prvAddNewTaskToReadyList+0xb4>)
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003954:	4b22      	ldr	r3, [pc, #136]	; (80039e0 <prvAddNewTaskToReadyList+0xb0>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d110      	bne.n	800397e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800395c:	f000 fab2 	bl	8003ec4 <prvInitialiseTaskLists>
 8003960:	e00d      	b.n	800397e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003962:	4b21      	ldr	r3, [pc, #132]	; (80039e8 <prvAddNewTaskToReadyList+0xb8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800396a:	4b1e      	ldr	r3, [pc, #120]	; (80039e4 <prvAddNewTaskToReadyList+0xb4>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	429a      	cmp	r2, r3
 8003976:	d802      	bhi.n	800397e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003978:	4b1a      	ldr	r3, [pc, #104]	; (80039e4 <prvAddNewTaskToReadyList+0xb4>)
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800397e:	4b1b      	ldr	r3, [pc, #108]	; (80039ec <prvAddNewTaskToReadyList+0xbc>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	4b19      	ldr	r3, [pc, #100]	; (80039ec <prvAddNewTaskToReadyList+0xbc>)
 8003986:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398c:	4b18      	ldr	r3, [pc, #96]	; (80039f0 <prvAddNewTaskToReadyList+0xc0>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d903      	bls.n	800399c <prvAddNewTaskToReadyList+0x6c>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003998:	4b15      	ldr	r3, [pc, #84]	; (80039f0 <prvAddNewTaskToReadyList+0xc0>)
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a0:	0013      	movs	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	189b      	adds	r3, r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4a12      	ldr	r2, [pc, #72]	; (80039f4 <prvAddNewTaskToReadyList+0xc4>)
 80039aa:	189a      	adds	r2, r3, r2
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3304      	adds	r3, #4
 80039b0:	0019      	movs	r1, r3
 80039b2:	0010      	movs	r0, r2
 80039b4:	f7ff fe82 	bl	80036bc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80039b8:	f000 fbd4 	bl	8004164 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80039bc:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <prvAddNewTaskToReadyList+0xb8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d008      	beq.n	80039d6 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80039c4:	4b07      	ldr	r3, [pc, #28]	; (80039e4 <prvAddNewTaskToReadyList+0xb4>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d201      	bcs.n	80039d6 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80039d2:	f000 fba5 	bl	8004120 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	46bd      	mov	sp, r7
 80039da:	b002      	add	sp, #8
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	46c0      	nop			; (mov r8, r8)
 80039e0:	20000328 	.word	0x20000328
 80039e4:	20000254 	.word	0x20000254
 80039e8:	20000334 	.word	0x20000334
 80039ec:	20000344 	.word	0x20000344
 80039f0:	20000330 	.word	0x20000330
 80039f4:	20000258 	.word	0x20000258

080039f8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <vTaskDelayUntil+0x18>
 8003a0c:	b672      	cpsid	i
 8003a0e:	e7fe      	b.n	8003a0e <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <vTaskDelayUntil+0x22>
 8003a16:	b672      	cpsid	i
 8003a18:	e7fe      	b.n	8003a18 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
 8003a1a:	4b23      	ldr	r3, [pc, #140]	; (8003aa8 <vTaskDelayUntil+0xb0>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <vTaskDelayUntil+0x2e>
 8003a22:	b672      	cpsid	i
 8003a24:	e7fe      	b.n	8003a24 <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
 8003a26:	f000 f891 	bl	8003b4c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003a2a:	4b20      	ldr	r3, [pc, #128]	; (8003aac <vTaskDelayUntil+0xb4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	18d3      	adds	r3, r2, r3
 8003a38:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d20b      	bcs.n	8003a5c <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d211      	bcs.n	8003a72 <vTaskDelayUntil+0x7a>
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d90d      	bls.n	8003a72 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
 8003a56:	2301      	movs	r3, #1
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	e00a      	b.n	8003a72 <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d303      	bcc.n	8003a6e <vTaskDelayUntil+0x76>
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d901      	bls.n	8003a72 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d006      	beq.n	8003a8c <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2100      	movs	r1, #0
 8003a86:	0018      	movs	r0, r3
 8003a88:	f000 fa7e 	bl	8003f88 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003a8c:	f000 f86a 	bl	8003b64 <xTaskResumeAll>
 8003a90:	0003      	movs	r3, r0
 8003a92:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
 8003a9a:	f000 fb41 	bl	8004120 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	b006      	add	sp, #24
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	20000350 	.word	0x20000350
 8003aac:	2000032c 	.word	0x2000032c

08003ab0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ab0:	b590      	push	{r4, r7, lr}
 8003ab2:	b089      	sub	sp, #36	; 0x24
 8003ab4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003abe:	003a      	movs	r2, r7
 8003ac0:	1d39      	adds	r1, r7, #4
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	18fb      	adds	r3, r7, r3
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f7fc fe20 	bl	800070c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003acc:	683c      	ldr	r4, [r7, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	4918      	ldr	r1, [pc, #96]	; (8003b34 <vTaskStartScheduler+0x84>)
 8003ad4:	4818      	ldr	r0, [pc, #96]	; (8003b38 <vTaskStartScheduler+0x88>)
 8003ad6:	9202      	str	r2, [sp, #8]
 8003ad8:	9301      	str	r3, [sp, #4]
 8003ada:	2300      	movs	r3, #0
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	0022      	movs	r2, r4
 8003ae2:	f7ff fe6b 	bl	80037bc <xTaskCreateStatic>
 8003ae6:	0002      	movs	r2, r0
 8003ae8:	4b14      	ldr	r3, [pc, #80]	; (8003b3c <vTaskStartScheduler+0x8c>)
 8003aea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003aec:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <vTaskStartScheduler+0x8c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003af4:	2301      	movs	r3, #1
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	e001      	b.n	8003afe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d10d      	bne.n	8003b20 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003b04:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b06:	4b0e      	ldr	r3, [pc, #56]	; (8003b40 <vTaskStartScheduler+0x90>)
 8003b08:	2201      	movs	r2, #1
 8003b0a:	4252      	negs	r2, r2
 8003b0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b0e:	4b0d      	ldr	r3, [pc, #52]	; (8003b44 <vTaskStartScheduler+0x94>)
 8003b10:	2201      	movs	r2, #1
 8003b12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003b14:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <vTaskStartScheduler+0x98>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b1a:	f000 fadd 	bl	80040d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b1e:	e004      	b.n	8003b2a <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	3301      	adds	r3, #1
 8003b24:	d101      	bne.n	8003b2a <vTaskStartScheduler+0x7a>
 8003b26:	b672      	cpsid	i
 8003b28:	e7fe      	b.n	8003b28 <vTaskStartScheduler+0x78>
}
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	b005      	add	sp, #20
 8003b30:	bd90      	pop	{r4, r7, pc}
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	08004358 	.word	0x08004358
 8003b38:	08003ea5 	.word	0x08003ea5
 8003b3c:	2000034c 	.word	0x2000034c
 8003b40:	20000348 	.word	0x20000348
 8003b44:	20000334 	.word	0x20000334
 8003b48:	2000032c 	.word	0x2000032c

08003b4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003b50:	4b03      	ldr	r3, [pc, #12]	; (8003b60 <vTaskSuspendAll+0x14>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	4b02      	ldr	r3, [pc, #8]	; (8003b60 <vTaskSuspendAll+0x14>)
 8003b58:	601a      	str	r2, [r3, #0]
}
 8003b5a:	46c0      	nop			; (mov r8, r8)
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	20000350 	.word	0x20000350

08003b64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b72:	4b3a      	ldr	r3, [pc, #232]	; (8003c5c <xTaskResumeAll+0xf8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <xTaskResumeAll+0x1a>
 8003b7a:	b672      	cpsid	i
 8003b7c:	e7fe      	b.n	8003b7c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b7e:	f000 fadf 	bl	8004140 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b82:	4b36      	ldr	r3, [pc, #216]	; (8003c5c <xTaskResumeAll+0xf8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	1e5a      	subs	r2, r3, #1
 8003b88:	4b34      	ldr	r3, [pc, #208]	; (8003c5c <xTaskResumeAll+0xf8>)
 8003b8a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b8c:	4b33      	ldr	r3, [pc, #204]	; (8003c5c <xTaskResumeAll+0xf8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d15b      	bne.n	8003c4c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b94:	4b32      	ldr	r3, [pc, #200]	; (8003c60 <xTaskResumeAll+0xfc>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d057      	beq.n	8003c4c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b9c:	e02f      	b.n	8003bfe <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003b9e:	4b31      	ldr	r3, [pc, #196]	; (8003c64 <xTaskResumeAll+0x100>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	3318      	adds	r3, #24
 8003baa:	0018      	movs	r0, r3
 8003bac:	f7ff fdde 	bl	800376c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f7ff fdd9 	bl	800376c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bbe:	4b2a      	ldr	r3, [pc, #168]	; (8003c68 <xTaskResumeAll+0x104>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d903      	bls.n	8003bce <xTaskResumeAll+0x6a>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bca:	4b27      	ldr	r3, [pc, #156]	; (8003c68 <xTaskResumeAll+0x104>)
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd2:	0013      	movs	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	189b      	adds	r3, r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4a24      	ldr	r2, [pc, #144]	; (8003c6c <xTaskResumeAll+0x108>)
 8003bdc:	189a      	adds	r2, r3, r2
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	3304      	adds	r3, #4
 8003be2:	0019      	movs	r1, r3
 8003be4:	0010      	movs	r0, r2
 8003be6:	f7ff fd69 	bl	80036bc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bee:	4b20      	ldr	r3, [pc, #128]	; (8003c70 <xTaskResumeAll+0x10c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d302      	bcc.n	8003bfe <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8003bf8:	4b1e      	ldr	r3, [pc, #120]	; (8003c74 <xTaskResumeAll+0x110>)
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bfe:	4b19      	ldr	r3, [pc, #100]	; (8003c64 <xTaskResumeAll+0x100>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1cb      	bne.n	8003b9e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c0c:	f000 f998 	bl	8003f40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003c10:	4b19      	ldr	r3, [pc, #100]	; (8003c78 <xTaskResumeAll+0x114>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00f      	beq.n	8003c3c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c1c:	f000 f83c 	bl	8003c98 <xTaskIncrementTick>
 8003c20:	1e03      	subs	r3, r0, #0
 8003c22:	d002      	beq.n	8003c2a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8003c24:	4b13      	ldr	r3, [pc, #76]	; (8003c74 <xTaskResumeAll+0x110>)
 8003c26:	2201      	movs	r2, #1
 8003c28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f2      	bne.n	8003c1c <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8003c36:	4b10      	ldr	r3, [pc, #64]	; (8003c78 <xTaskResumeAll+0x114>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c3c:	4b0d      	ldr	r3, [pc, #52]	; (8003c74 <xTaskResumeAll+0x110>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c44:	2301      	movs	r3, #1
 8003c46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c48:	f000 fa6a 	bl	8004120 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c4c:	f000 fa8a 	bl	8004164 <vPortExitCritical>

	return xAlreadyYielded;
 8003c50:	68bb      	ldr	r3, [r7, #8]
}
 8003c52:	0018      	movs	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b004      	add	sp, #16
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	20000350 	.word	0x20000350
 8003c60:	20000328 	.word	0x20000328
 8003c64:	20000314 	.word	0x20000314
 8003c68:	20000330 	.word	0x20000330
 8003c6c:	20000258 	.word	0x20000258
 8003c70:	20000254 	.word	0x20000254
 8003c74:	2000033c 	.word	0x2000033c
 8003c78:	20000338 	.word	0x20000338

08003c7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c82:	4b04      	ldr	r3, [pc, #16]	; (8003c94 <xTaskGetTickCount+0x18>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c88:	687b      	ldr	r3, [r7, #4]
}
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b002      	add	sp, #8
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	2000032c 	.word	0x2000032c

08003c98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ca2:	4b4c      	ldr	r3, [pc, #304]	; (8003dd4 <xTaskIncrementTick+0x13c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d000      	beq.n	8003cac <xTaskIncrementTick+0x14>
 8003caa:	e083      	b.n	8003db4 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003cac:	4b4a      	ldr	r3, [pc, #296]	; (8003dd8 <xTaskIncrementTick+0x140>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003cb4:	4b48      	ldr	r3, [pc, #288]	; (8003dd8 <xTaskIncrementTick+0x140>)
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d117      	bne.n	8003cf0 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8003cc0:	4b46      	ldr	r3, [pc, #280]	; (8003ddc <xTaskIncrementTick+0x144>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <xTaskIncrementTick+0x36>
 8003cca:	b672      	cpsid	i
 8003ccc:	e7fe      	b.n	8003ccc <xTaskIncrementTick+0x34>
 8003cce:	4b43      	ldr	r3, [pc, #268]	; (8003ddc <xTaskIncrementTick+0x144>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	4b42      	ldr	r3, [pc, #264]	; (8003de0 <xTaskIncrementTick+0x148>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	4b40      	ldr	r3, [pc, #256]	; (8003ddc <xTaskIncrementTick+0x144>)
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	4b40      	ldr	r3, [pc, #256]	; (8003de0 <xTaskIncrementTick+0x148>)
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	4b40      	ldr	r3, [pc, #256]	; (8003de4 <xTaskIncrementTick+0x14c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	4b3e      	ldr	r3, [pc, #248]	; (8003de4 <xTaskIncrementTick+0x14c>)
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	f000 f928 	bl	8003f40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003cf0:	4b3d      	ldr	r3, [pc, #244]	; (8003de8 <xTaskIncrementTick+0x150>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d34e      	bcc.n	8003d98 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cfa:	4b38      	ldr	r3, [pc, #224]	; (8003ddc <xTaskIncrementTick+0x144>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <xTaskIncrementTick+0x70>
 8003d04:	2301      	movs	r3, #1
 8003d06:	e000      	b.n	8003d0a <xTaskIncrementTick+0x72>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d004      	beq.n	8003d18 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d0e:	4b36      	ldr	r3, [pc, #216]	; (8003de8 <xTaskIncrementTick+0x150>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	4252      	negs	r2, r2
 8003d14:	601a      	str	r2, [r3, #0]
					break;
 8003d16:	e03f      	b.n	8003d98 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d18:	4b30      	ldr	r3, [pc, #192]	; (8003ddc <xTaskIncrementTick+0x144>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d203      	bcs.n	8003d38 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d30:	4b2d      	ldr	r3, [pc, #180]	; (8003de8 <xTaskIncrementTick+0x150>)
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	601a      	str	r2, [r3, #0]
						break;
 8003d36:	e02f      	b.n	8003d98 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	f7ff fd15 	bl	800376c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d004      	beq.n	8003d54 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	3318      	adds	r3, #24
 8003d4e:	0018      	movs	r0, r3
 8003d50:	f7ff fd0c 	bl	800376c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d58:	4b24      	ldr	r3, [pc, #144]	; (8003dec <xTaskIncrementTick+0x154>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d903      	bls.n	8003d68 <xTaskIncrementTick+0xd0>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d64:	4b21      	ldr	r3, [pc, #132]	; (8003dec <xTaskIncrementTick+0x154>)
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6c:	0013      	movs	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	189b      	adds	r3, r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4a1e      	ldr	r2, [pc, #120]	; (8003df0 <xTaskIncrementTick+0x158>)
 8003d76:	189a      	adds	r2, r3, r2
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	0019      	movs	r1, r3
 8003d7e:	0010      	movs	r0, r2
 8003d80:	f7ff fc9c 	bl	80036bc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d88:	4b1a      	ldr	r3, [pc, #104]	; (8003df4 <xTaskIncrementTick+0x15c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d3b3      	bcc.n	8003cfa <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8003d92:	2301      	movs	r3, #1
 8003d94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d96:	e7b0      	b.n	8003cfa <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d98:	4b16      	ldr	r3, [pc, #88]	; (8003df4 <xTaskIncrementTick+0x15c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9e:	4914      	ldr	r1, [pc, #80]	; (8003df0 <xTaskIncrementTick+0x158>)
 8003da0:	0013      	movs	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	189b      	adds	r3, r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	585b      	ldr	r3, [r3, r1]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d907      	bls.n	8003dbe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003dae:	2301      	movs	r3, #1
 8003db0:	617b      	str	r3, [r7, #20]
 8003db2:	e004      	b.n	8003dbe <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003db4:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <xTaskIncrementTick+0x160>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <xTaskIncrementTick+0x160>)
 8003dbc:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003dbe:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <xTaskIncrementTick+0x164>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003dca:	697b      	ldr	r3, [r7, #20]
}
 8003dcc:	0018      	movs	r0, r3
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	b006      	add	sp, #24
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	20000350 	.word	0x20000350
 8003dd8:	2000032c 	.word	0x2000032c
 8003ddc:	2000030c 	.word	0x2000030c
 8003de0:	20000310 	.word	0x20000310
 8003de4:	20000340 	.word	0x20000340
 8003de8:	20000348 	.word	0x20000348
 8003dec:	20000330 	.word	0x20000330
 8003df0:	20000258 	.word	0x20000258
 8003df4:	20000254 	.word	0x20000254
 8003df8:	20000338 	.word	0x20000338
 8003dfc:	2000033c 	.word	0x2000033c

08003e00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e06:	4b22      	ldr	r3, [pc, #136]	; (8003e90 <vTaskSwitchContext+0x90>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e0e:	4b21      	ldr	r3, [pc, #132]	; (8003e94 <vTaskSwitchContext+0x94>)
 8003e10:	2201      	movs	r2, #1
 8003e12:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e14:	e037      	b.n	8003e86 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8003e16:	4b1f      	ldr	r3, [pc, #124]	; (8003e94 <vTaskSwitchContext+0x94>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003e1c:	4b1e      	ldr	r3, [pc, #120]	; (8003e98 <vTaskSwitchContext+0x98>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	607b      	str	r3, [r7, #4]
 8003e22:	e007      	b.n	8003e34 <vTaskSwitchContext+0x34>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <vTaskSwitchContext+0x2e>
 8003e2a:	b672      	cpsid	i
 8003e2c:	e7fe      	b.n	8003e2c <vTaskSwitchContext+0x2c>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	3b01      	subs	r3, #1
 8003e32:	607b      	str	r3, [r7, #4]
 8003e34:	4919      	ldr	r1, [pc, #100]	; (8003e9c <vTaskSwitchContext+0x9c>)
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	0013      	movs	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	189b      	adds	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	585b      	ldr	r3, [r3, r1]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0ee      	beq.n	8003e24 <vTaskSwitchContext+0x24>
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	0013      	movs	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	189b      	adds	r3, r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4a12      	ldr	r2, [pc, #72]	; (8003e9c <vTaskSwitchContext+0x9c>)
 8003e52:	189b      	adds	r3, r3, r2
 8003e54:	603b      	str	r3, [r7, #0]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	605a      	str	r2, [r3, #4]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	3308      	adds	r3, #8
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d104      	bne.n	8003e76 <vTaskSwitchContext+0x76>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	605a      	str	r2, [r3, #4]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	4b08      	ldr	r3, [pc, #32]	; (8003ea0 <vTaskSwitchContext+0xa0>)
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <vTaskSwitchContext+0x98>)
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	601a      	str	r2, [r3, #0]
}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b002      	add	sp, #8
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	20000350 	.word	0x20000350
 8003e94:	2000033c 	.word	0x2000033c
 8003e98:	20000330 	.word	0x20000330
 8003e9c:	20000258 	.word	0x20000258
 8003ea0:	20000254 	.word	0x20000254

08003ea4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003eac:	f000 f842 	bl	8003f34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003eb0:	4b03      	ldr	r3, [pc, #12]	; (8003ec0 <prvIdleTask+0x1c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d9f9      	bls.n	8003eac <prvIdleTask+0x8>
			{
				taskYIELD();
 8003eb8:	f000 f932 	bl	8004120 <vPortYield>
		prvCheckTasksWaitingTermination();
 8003ebc:	e7f6      	b.n	8003eac <prvIdleTask+0x8>
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	20000258 	.word	0x20000258

08003ec4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003eca:	2300      	movs	r3, #0
 8003ecc:	607b      	str	r3, [r7, #4]
 8003ece:	e00c      	b.n	8003eea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	0013      	movs	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	189b      	adds	r3, r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4a10      	ldr	r2, [pc, #64]	; (8003f1c <prvInitialiseTaskLists+0x58>)
 8003edc:	189b      	adds	r3, r3, r2
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f7ff fbc3 	bl	800366a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	607b      	str	r3, [r7, #4]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b06      	cmp	r3, #6
 8003eee:	d9ef      	bls.n	8003ed0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ef0:	4b0b      	ldr	r3, [pc, #44]	; (8003f20 <prvInitialiseTaskLists+0x5c>)
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f7ff fbb9 	bl	800366a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ef8:	4b0a      	ldr	r3, [pc, #40]	; (8003f24 <prvInitialiseTaskLists+0x60>)
 8003efa:	0018      	movs	r0, r3
 8003efc:	f7ff fbb5 	bl	800366a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f00:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <prvInitialiseTaskLists+0x64>)
 8003f02:	0018      	movs	r0, r3
 8003f04:	f7ff fbb1 	bl	800366a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f08:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <prvInitialiseTaskLists+0x68>)
 8003f0a:	4a05      	ldr	r2, [pc, #20]	; (8003f20 <prvInitialiseTaskLists+0x5c>)
 8003f0c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f0e:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <prvInitialiseTaskLists+0x6c>)
 8003f10:	4a04      	ldr	r2, [pc, #16]	; (8003f24 <prvInitialiseTaskLists+0x60>)
 8003f12:	601a      	str	r2, [r3, #0]
}
 8003f14:	46c0      	nop			; (mov r8, r8)
 8003f16:	46bd      	mov	sp, r7
 8003f18:	b002      	add	sp, #8
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	20000258 	.word	0x20000258
 8003f20:	200002e4 	.word	0x200002e4
 8003f24:	200002f8 	.word	0x200002f8
 8003f28:	20000314 	.word	0x20000314
 8003f2c:	2000030c 	.word	0x2000030c
 8003f30:	20000310 	.word	0x20000310

08003f34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f38:	46c0      	nop			; (mov r8, r8)
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f46:	4b0e      	ldr	r3, [pc, #56]	; (8003f80 <prvResetNextTaskUnblockTime+0x40>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <prvResetNextTaskUnblockTime+0x14>
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <prvResetNextTaskUnblockTime+0x16>
 8003f54:	2300      	movs	r3, #0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d004      	beq.n	8003f64 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f5a:	4b0a      	ldr	r3, [pc, #40]	; (8003f84 <prvResetNextTaskUnblockTime+0x44>)
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	4252      	negs	r2, r2
 8003f60:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f62:	e008      	b.n	8003f76 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f64:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <prvResetNextTaskUnblockTime+0x40>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <prvResetNextTaskUnblockTime+0x44>)
 8003f74:	601a      	str	r2, [r3, #0]
}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	b002      	add	sp, #8
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	2000030c 	.word	0x2000030c
 8003f84:	20000348 	.word	0x20000348

08003f88 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f92:	4b1a      	ldr	r3, [pc, #104]	; (8003ffc <prvAddCurrentTaskToDelayedList+0x74>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f98:	4b19      	ldr	r3, [pc, #100]	; (8004000 <prvAddCurrentTaskToDelayedList+0x78>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f7ff fbe4 	bl	800376c <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	18d3      	adds	r3, r2, r3
 8003faa:	60bb      	str	r3, [r7, #8]

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003fac:	4b14      	ldr	r3, [pc, #80]	; (8004000 <prvAddCurrentTaskToDelayedList+0x78>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	605a      	str	r2, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d209      	bcs.n	8003fd0 <prvAddCurrentTaskToDelayedList+0x48>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fbc:	4b11      	ldr	r3, [pc, #68]	; (8004004 <prvAddCurrentTaskToDelayedList+0x7c>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	4b0f      	ldr	r3, [pc, #60]	; (8004000 <prvAddCurrentTaskToDelayedList+0x78>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	0019      	movs	r1, r3
 8003fc8:	0010      	movs	r0, r2
 8003fca:	f7ff fb99 	bl	8003700 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003fce:	e010      	b.n	8003ff2 <prvAddCurrentTaskToDelayedList+0x6a>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fd0:	4b0d      	ldr	r3, [pc, #52]	; (8004008 <prvAddCurrentTaskToDelayedList+0x80>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	4b0a      	ldr	r3, [pc, #40]	; (8004000 <prvAddCurrentTaskToDelayedList+0x78>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	0019      	movs	r1, r3
 8003fdc:	0010      	movs	r0, r2
 8003fde:	f7ff fb8f 	bl	8003700 <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	; (800400c <prvAddCurrentTaskToDelayedList+0x84>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d202      	bcs.n	8003ff2 <prvAddCurrentTaskToDelayedList+0x6a>
				xNextTaskUnblockTime = xTimeToWake;
 8003fec:	4b07      	ldr	r3, [pc, #28]	; (800400c <prvAddCurrentTaskToDelayedList+0x84>)
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	601a      	str	r2, [r3, #0]
}
 8003ff2:	46c0      	nop			; (mov r8, r8)
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	b004      	add	sp, #16
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	2000032c 	.word	0x2000032c
 8004000:	20000254 	.word	0x20000254
 8004004:	20000310 	.word	0x20000310
 8004008:	2000030c 	.word	0x2000030c
 800400c:	20000348 	.word	0x20000348

08004010 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	3b04      	subs	r3, #4
 8004020:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2280      	movs	r2, #128	; 0x80
 8004026:	0452      	lsls	r2, r2, #17
 8004028:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	3b04      	subs	r3, #4
 800402e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	3b04      	subs	r3, #4
 800403a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800403c:	4a08      	ldr	r2, [pc, #32]	; (8004060 <pxPortInitialiseStack+0x50>)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	3b14      	subs	r3, #20
 8004046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	3b20      	subs	r3, #32
 8004052:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004054:	68fb      	ldr	r3, [r7, #12]
}
 8004056:	0018      	movs	r0, r3
 8004058:	46bd      	mov	sp, r7
 800405a:	b004      	add	sp, #16
 800405c:	bd80      	pop	{r7, pc}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	08004065 	.word	0x08004065

08004064 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800406a:	2300      	movs	r3, #0
 800406c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800406e:	4b07      	ldr	r3, [pc, #28]	; (800408c <prvTaskExitError+0x28>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3301      	adds	r3, #1
 8004074:	d001      	beq.n	800407a <prvTaskExitError+0x16>
 8004076:	b672      	cpsid	i
 8004078:	e7fe      	b.n	8004078 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800407a:	b672      	cpsid	i
	while( ulDummy == 0 )
 800407c:	46c0      	nop			; (mov r8, r8)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0fc      	beq.n	800407e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004084:	46c0      	nop			; (mov r8, r8)
 8004086:	46bd      	mov	sp, r7
 8004088:	b002      	add	sp, #8
 800408a:	bd80      	pop	{r7, pc}
 800408c:	20000008 	.word	0x20000008

08004090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8004094:	46c0      	nop			; (mov r8, r8)
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	0000      	movs	r0, r0
 800409c:	0000      	movs	r0, r0
	...

080040a0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80040a0:	4a0b      	ldr	r2, [pc, #44]	; (80040d0 <pxCurrentTCBConst2>)
 80040a2:	6813      	ldr	r3, [r2, #0]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	3020      	adds	r0, #32
 80040a8:	f380 8809 	msr	PSP, r0
 80040ac:	2002      	movs	r0, #2
 80040ae:	f380 8814 	msr	CONTROL, r0
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80040b8:	46ae      	mov	lr, r5
 80040ba:	bc08      	pop	{r3}
 80040bc:	bc04      	pop	{r2}
 80040be:	b662      	cpsie	i
 80040c0:	4718      	bx	r3
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	46c0      	nop			; (mov r8, r8)
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	46c0      	nop			; (mov r8, r8)
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	46c0      	nop			; (mov r8, r8)
 80040ce:	46c0      	nop			; (mov r8, r8)

080040d0 <pxCurrentTCBConst2>:
 80040d0:	20000254 	.word	0x20000254
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80040d4:	46c0      	nop			; (mov r8, r8)
 80040d6:	46c0      	nop			; (mov r8, r8)

080040d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80040dc:	4b0e      	ldr	r3, [pc, #56]	; (8004118 <xPortStartScheduler+0x40>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <xPortStartScheduler+0x40>)
 80040e2:	21ff      	movs	r1, #255	; 0xff
 80040e4:	0409      	lsls	r1, r1, #16
 80040e6:	430a      	orrs	r2, r1
 80040e8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80040ea:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <xPortStartScheduler+0x40>)
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <xPortStartScheduler+0x40>)
 80040f0:	21ff      	movs	r1, #255	; 0xff
 80040f2:	0609      	lsls	r1, r1, #24
 80040f4:	430a      	orrs	r2, r1
 80040f6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80040f8:	f000 f898 	bl	800422c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80040fc:	4b07      	ldr	r3, [pc, #28]	; (800411c <xPortStartScheduler+0x44>)
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004102:	f7ff ffcd 	bl	80040a0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004106:	f7ff fe7b 	bl	8003e00 <vTaskSwitchContext>
	prvTaskExitError();
 800410a:	f7ff ffab 	bl	8004064 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800410e:	2300      	movs	r3, #0
}
 8004110:	0018      	movs	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	46c0      	nop			; (mov r8, r8)
 8004118:	e000ed20 	.word	0xe000ed20
 800411c:	20000008 	.word	0x20000008

08004120 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8004124:	4b05      	ldr	r3, [pc, #20]	; (800413c <vPortYield+0x1c>)
 8004126:	2280      	movs	r2, #128	; 0x80
 8004128:	0552      	lsls	r2, r2, #21
 800412a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800412c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004130:	f3bf 8f6f 	isb	sy
}
 8004134:	46c0      	nop			; (mov r8, r8)
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	e000ed04 	.word	0xe000ed04

08004140 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004144:	b672      	cpsid	i
    uxCriticalNesting++;
 8004146:	4b06      	ldr	r3, [pc, #24]	; (8004160 <vPortEnterCritical+0x20>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	1c5a      	adds	r2, r3, #1
 800414c:	4b04      	ldr	r3, [pc, #16]	; (8004160 <vPortEnterCritical+0x20>)
 800414e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004150:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004154:	f3bf 8f6f 	isb	sy
}
 8004158:	46c0      	nop			; (mov r8, r8)
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	20000008 	.word	0x20000008

08004164 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004168:	4b09      	ldr	r3, [pc, #36]	; (8004190 <vPortExitCritical+0x2c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <vPortExitCritical+0x10>
 8004170:	b672      	cpsid	i
 8004172:	e7fe      	b.n	8004172 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004174:	4b06      	ldr	r3, [pc, #24]	; (8004190 <vPortExitCritical+0x2c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	1e5a      	subs	r2, r3, #1
 800417a:	4b05      	ldr	r3, [pc, #20]	; (8004190 <vPortExitCritical+0x2c>)
 800417c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800417e:	4b04      	ldr	r3, [pc, #16]	; (8004190 <vPortExitCritical+0x2c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d100      	bne.n	8004188 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8004186:	b662      	cpsie	i
    }
}
 8004188:	46c0      	nop			; (mov r8, r8)
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	20000008 	.word	0x20000008

08004194 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004194:	f3ef 8010 	mrs	r0, PRIMASK
 8004198:	b672      	cpsid	i
 800419a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800419c:	46c0      	nop			; (mov r8, r8)
 800419e:	0018      	movs	r0, r3

080041a0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80041a0:	f380 8810 	msr	PRIMASK, r0
 80041a4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80041a6:	46c0      	nop			; (mov r8, r8)
	...

080041b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80041b0:	f3ef 8009 	mrs	r0, PSP
 80041b4:	4b0e      	ldr	r3, [pc, #56]	; (80041f0 <pxCurrentTCBConst>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	3820      	subs	r0, #32
 80041ba:	6010      	str	r0, [r2, #0]
 80041bc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80041be:	4644      	mov	r4, r8
 80041c0:	464d      	mov	r5, r9
 80041c2:	4656      	mov	r6, sl
 80041c4:	465f      	mov	r7, fp
 80041c6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80041c8:	b508      	push	{r3, lr}
 80041ca:	b672      	cpsid	i
 80041cc:	f7ff fe18 	bl	8003e00 <vTaskSwitchContext>
 80041d0:	b662      	cpsie	i
 80041d2:	bc0c      	pop	{r2, r3}
 80041d4:	6811      	ldr	r1, [r2, #0]
 80041d6:	6808      	ldr	r0, [r1, #0]
 80041d8:	3010      	adds	r0, #16
 80041da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80041dc:	46a0      	mov	r8, r4
 80041de:	46a9      	mov	r9, r5
 80041e0:	46b2      	mov	sl, r6
 80041e2:	46bb      	mov	fp, r7
 80041e4:	f380 8809 	msr	PSP, r0
 80041e8:	3820      	subs	r0, #32
 80041ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80041ec:	4718      	bx	r3
 80041ee:	46c0      	nop			; (mov r8, r8)

080041f0 <pxCurrentTCBConst>:
 80041f0:	20000254 	.word	0x20000254
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80041f4:	46c0      	nop			; (mov r8, r8)
 80041f6:	46c0      	nop			; (mov r8, r8)

080041f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80041fe:	f7ff ffc9 	bl	8004194 <ulSetInterruptMaskFromISR>
 8004202:	0003      	movs	r3, r0
 8004204:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004206:	f7ff fd47 	bl	8003c98 <xTaskIncrementTick>
 800420a:	1e03      	subs	r3, r0, #0
 800420c:	d003      	beq.n	8004216 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800420e:	4b06      	ldr	r3, [pc, #24]	; (8004228 <SysTick_Handler+0x30>)
 8004210:	2280      	movs	r2, #128	; 0x80
 8004212:	0552      	lsls	r2, r2, #21
 8004214:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	0018      	movs	r0, r3
 800421a:	f7ff ffc1 	bl	80041a0 <vClearInterruptMaskFromISR>
}
 800421e:	46c0      	nop			; (mov r8, r8)
 8004220:	46bd      	mov	sp, r7
 8004222:	b002      	add	sp, #8
 8004224:	bd80      	pop	{r7, pc}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	e000ed04 	.word	0xe000ed04

0800422c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <prvSetupTimerInterrupt+0x34>)
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8004236:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <prvSetupTimerInterrupt+0x38>)
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800423c:	4b0a      	ldr	r3, [pc, #40]	; (8004268 <prvSetupTimerInterrupt+0x3c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	490a      	ldr	r1, [pc, #40]	; (800426c <prvSetupTimerInterrupt+0x40>)
 8004242:	0018      	movs	r0, r3
 8004244:	f7fb ff60 	bl	8000108 <__udivsi3>
 8004248:	0003      	movs	r3, r0
 800424a:	001a      	movs	r2, r3
 800424c:	4b08      	ldr	r3, [pc, #32]	; (8004270 <prvSetupTimerInterrupt+0x44>)
 800424e:	3a01      	subs	r2, #1
 8004250:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8004252:	4b03      	ldr	r3, [pc, #12]	; (8004260 <prvSetupTimerInterrupt+0x34>)
 8004254:	2207      	movs	r2, #7
 8004256:	601a      	str	r2, [r3, #0]
}
 8004258:	46c0      	nop			; (mov r8, r8)
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	46c0      	nop			; (mov r8, r8)
 8004260:	e000e010 	.word	0xe000e010
 8004264:	e000e018 	.word	0xe000e018
 8004268:	20000000 	.word	0x20000000
 800426c:	00002710 	.word	0x00002710
 8004270:	e000e014 	.word	0xe000e014

08004274 <__libc_init_array>:
 8004274:	b570      	push	{r4, r5, r6, lr}
 8004276:	2600      	movs	r6, #0
 8004278:	4d0c      	ldr	r5, [pc, #48]	; (80042ac <__libc_init_array+0x38>)
 800427a:	4c0d      	ldr	r4, [pc, #52]	; (80042b0 <__libc_init_array+0x3c>)
 800427c:	1b64      	subs	r4, r4, r5
 800427e:	10a4      	asrs	r4, r4, #2
 8004280:	42a6      	cmp	r6, r4
 8004282:	d109      	bne.n	8004298 <__libc_init_array+0x24>
 8004284:	2600      	movs	r6, #0
 8004286:	f000 f821 	bl	80042cc <_init>
 800428a:	4d0a      	ldr	r5, [pc, #40]	; (80042b4 <__libc_init_array+0x40>)
 800428c:	4c0a      	ldr	r4, [pc, #40]	; (80042b8 <__libc_init_array+0x44>)
 800428e:	1b64      	subs	r4, r4, r5
 8004290:	10a4      	asrs	r4, r4, #2
 8004292:	42a6      	cmp	r6, r4
 8004294:	d105      	bne.n	80042a2 <__libc_init_array+0x2e>
 8004296:	bd70      	pop	{r4, r5, r6, pc}
 8004298:	00b3      	lsls	r3, r6, #2
 800429a:	58eb      	ldr	r3, [r5, r3]
 800429c:	4798      	blx	r3
 800429e:	3601      	adds	r6, #1
 80042a0:	e7ee      	b.n	8004280 <__libc_init_array+0xc>
 80042a2:	00b3      	lsls	r3, r6, #2
 80042a4:	58eb      	ldr	r3, [r5, r3]
 80042a6:	4798      	blx	r3
 80042a8:	3601      	adds	r6, #1
 80042aa:	e7f2      	b.n	8004292 <__libc_init_array+0x1e>
 80042ac:	08004378 	.word	0x08004378
 80042b0:	08004378 	.word	0x08004378
 80042b4:	08004378 	.word	0x08004378
 80042b8:	0800437c 	.word	0x0800437c

080042bc <memset>:
 80042bc:	0003      	movs	r3, r0
 80042be:	1812      	adds	r2, r2, r0
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d100      	bne.n	80042c6 <memset+0xa>
 80042c4:	4770      	bx	lr
 80042c6:	7019      	strb	r1, [r3, #0]
 80042c8:	3301      	adds	r3, #1
 80042ca:	e7f9      	b.n	80042c0 <memset+0x4>

080042cc <_init>:
 80042cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042d2:	bc08      	pop	{r3}
 80042d4:	469e      	mov	lr, r3
 80042d6:	4770      	bx	lr

080042d8 <_fini>:
 80042d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042de:	bc08      	pop	{r3}
 80042e0:	469e      	mov	lr, r3
 80042e2:	4770      	bx	lr
