
MD2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000656c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800662c  0800662c  0001662c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067b8  080067b8  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080067b8  080067b8  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067b8  080067b8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067b8  080067b8  000167b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067bc  080067bc  000167bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080067c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c0  20000018  080067d8  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008d8  080067d8  000208d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122b8  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f2f  00000000  00000000  000322f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010d8  00000000  00000000  00035228  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f60  00000000  00000000  00036300  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017c99  00000000  00000000  00037260  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eb9d  00000000  00000000  0004eef9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080d0b  00000000  00000000  0005da96  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000de7a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003df8  00000000  00000000  000de81c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006614 	.word	0x08006614

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08006614 	.word	0x08006614

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 f83d 	bl	80012b0 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 ff95 	bl	8001170 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 f82f 	bl	80012b0 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 f825 	bl	80012b0 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 ffb7 	bl	80011e8 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 ffad 	bl	80011e8 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_cfrcmple>:
 800029c:	4684      	mov	ip, r0
 800029e:	1c08      	adds	r0, r1, #0
 80002a0:	4661      	mov	r1, ip
 80002a2:	e7ff      	b.n	80002a4 <__aeabi_cfcmpeq>

080002a4 <__aeabi_cfcmpeq>:
 80002a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002a6:	f000 fb73 	bl	8000990 <__lesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_cfcmpeq+0xe>
 80002ae:	2100      	movs	r1, #0
 80002b0:	42c8      	cmn	r0, r1
 80002b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002b4 <__aeabi_fcmpeq>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	f000 faf5 	bl	80008a4 <__eqsf2>
 80002ba:	4240      	negs	r0, r0
 80002bc:	3001      	adds	r0, #1
 80002be:	bd10      	pop	{r4, pc}

080002c0 <__aeabi_fcmplt>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 fb65 	bl	8000990 <__lesf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	db01      	blt.n	80002ce <__aeabi_fcmplt+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_fcmple>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 fb5b 	bl	8000990 <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	dd01      	ble.n	80002e2 <__aeabi_fcmple+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmpgt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 fb03 	bl	80008f4 <__gesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dc01      	bgt.n	80002f6 <__aeabi_fcmpgt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpge>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 faf9 	bl	80008f4 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	da01      	bge.n	800030a <__aeabi_fcmpge+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__aeabi_d2uiz>:
 8000310:	b570      	push	{r4, r5, r6, lr}
 8000312:	2200      	movs	r2, #0
 8000314:	4b0c      	ldr	r3, [pc, #48]	; (8000348 <__aeabi_d2uiz+0x38>)
 8000316:	0004      	movs	r4, r0
 8000318:	000d      	movs	r5, r1
 800031a:	f7ff ffb5 	bl	8000288 <__aeabi_dcmpge>
 800031e:	2800      	cmp	r0, #0
 8000320:	d104      	bne.n	800032c <__aeabi_d2uiz+0x1c>
 8000322:	0020      	movs	r0, r4
 8000324:	0029      	movs	r1, r5
 8000326:	f001 fde5 	bl	8001ef4 <__aeabi_d2iz>
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <__aeabi_d2uiz+0x38>)
 800032e:	2200      	movs	r2, #0
 8000330:	0020      	movs	r0, r4
 8000332:	0029      	movs	r1, r5
 8000334:	f001 fa96 	bl	8001864 <__aeabi_dsub>
 8000338:	f001 fddc 	bl	8001ef4 <__aeabi_d2iz>
 800033c:	2380      	movs	r3, #128	; 0x80
 800033e:	061b      	lsls	r3, r3, #24
 8000340:	469c      	mov	ip, r3
 8000342:	4460      	add	r0, ip
 8000344:	e7f1      	b.n	800032a <__aeabi_d2uiz+0x1a>
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	41e00000 	.word	0x41e00000

0800034c <__aeabi_fadd>:
 800034c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034e:	4647      	mov	r7, r8
 8000350:	46ce      	mov	lr, r9
 8000352:	0243      	lsls	r3, r0, #9
 8000354:	0a5b      	lsrs	r3, r3, #9
 8000356:	0044      	lsls	r4, r0, #1
 8000358:	0fc2      	lsrs	r2, r0, #31
 800035a:	469c      	mov	ip, r3
 800035c:	0048      	lsls	r0, r1, #1
 800035e:	00dd      	lsls	r5, r3, #3
 8000360:	024b      	lsls	r3, r1, #9
 8000362:	0e24      	lsrs	r4, r4, #24
 8000364:	0a5b      	lsrs	r3, r3, #9
 8000366:	0e00      	lsrs	r0, r0, #24
 8000368:	b580      	push	{r7, lr}
 800036a:	4698      	mov	r8, r3
 800036c:	0026      	movs	r6, r4
 800036e:	4691      	mov	r9, r2
 8000370:	0fc9      	lsrs	r1, r1, #31
 8000372:	00db      	lsls	r3, r3, #3
 8000374:	1a27      	subs	r7, r4, r0
 8000376:	428a      	cmp	r2, r1
 8000378:	d029      	beq.n	80003ce <__aeabi_fadd+0x82>
 800037a:	2f00      	cmp	r7, #0
 800037c:	dd15      	ble.n	80003aa <__aeabi_fadd+0x5e>
 800037e:	2800      	cmp	r0, #0
 8000380:	d14a      	bne.n	8000418 <__aeabi_fadd+0xcc>
 8000382:	2b00      	cmp	r3, #0
 8000384:	d000      	beq.n	8000388 <__aeabi_fadd+0x3c>
 8000386:	e095      	b.n	80004b4 <__aeabi_fadd+0x168>
 8000388:	08ed      	lsrs	r5, r5, #3
 800038a:	2cff      	cmp	r4, #255	; 0xff
 800038c:	d100      	bne.n	8000390 <__aeabi_fadd+0x44>
 800038e:	e088      	b.n	80004a2 <__aeabi_fadd+0x156>
 8000390:	026b      	lsls	r3, r5, #9
 8000392:	0a5b      	lsrs	r3, r3, #9
 8000394:	b2e6      	uxtb	r6, r4
 8000396:	025b      	lsls	r3, r3, #9
 8000398:	05f6      	lsls	r6, r6, #23
 800039a:	0a58      	lsrs	r0, r3, #9
 800039c:	4330      	orrs	r0, r6
 800039e:	07d2      	lsls	r2, r2, #31
 80003a0:	4310      	orrs	r0, r2
 80003a2:	bc0c      	pop	{r2, r3}
 80003a4:	4690      	mov	r8, r2
 80003a6:	4699      	mov	r9, r3
 80003a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003aa:	2f00      	cmp	r7, #0
 80003ac:	d000      	beq.n	80003b0 <__aeabi_fadd+0x64>
 80003ae:	e087      	b.n	80004c0 <__aeabi_fadd+0x174>
 80003b0:	1c60      	adds	r0, r4, #1
 80003b2:	b2c0      	uxtb	r0, r0
 80003b4:	2801      	cmp	r0, #1
 80003b6:	dc00      	bgt.n	80003ba <__aeabi_fadd+0x6e>
 80003b8:	e0b6      	b.n	8000528 <__aeabi_fadd+0x1dc>
 80003ba:	1aee      	subs	r6, r5, r3
 80003bc:	0172      	lsls	r2, r6, #5
 80003be:	d500      	bpl.n	80003c2 <__aeabi_fadd+0x76>
 80003c0:	e0c5      	b.n	800054e <__aeabi_fadd+0x202>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d13d      	bne.n	8000442 <__aeabi_fadd+0xf6>
 80003c6:	2200      	movs	r2, #0
 80003c8:	2600      	movs	r6, #0
 80003ca:	2300      	movs	r3, #0
 80003cc:	e7e3      	b.n	8000396 <__aeabi_fadd+0x4a>
 80003ce:	2f00      	cmp	r7, #0
 80003d0:	dc00      	bgt.n	80003d4 <__aeabi_fadd+0x88>
 80003d2:	e096      	b.n	8000502 <__aeabi_fadd+0x1b6>
 80003d4:	2800      	cmp	r0, #0
 80003d6:	d05d      	beq.n	8000494 <__aeabi_fadd+0x148>
 80003d8:	2cff      	cmp	r4, #255	; 0xff
 80003da:	d060      	beq.n	800049e <__aeabi_fadd+0x152>
 80003dc:	2280      	movs	r2, #128	; 0x80
 80003de:	04d2      	lsls	r2, r2, #19
 80003e0:	4313      	orrs	r3, r2
 80003e2:	2f1b      	cmp	r7, #27
 80003e4:	dd00      	ble.n	80003e8 <__aeabi_fadd+0x9c>
 80003e6:	e0ec      	b.n	80005c2 <__aeabi_fadd+0x276>
 80003e8:	2220      	movs	r2, #32
 80003ea:	1bd2      	subs	r2, r2, r7
 80003ec:	0018      	movs	r0, r3
 80003ee:	4093      	lsls	r3, r2
 80003f0:	40f8      	lsrs	r0, r7
 80003f2:	1e5a      	subs	r2, r3, #1
 80003f4:	4193      	sbcs	r3, r2
 80003f6:	4303      	orrs	r3, r0
 80003f8:	18ed      	adds	r5, r5, r3
 80003fa:	016b      	lsls	r3, r5, #5
 80003fc:	d57b      	bpl.n	80004f6 <__aeabi_fadd+0x1aa>
 80003fe:	3401      	adds	r4, #1
 8000400:	2cff      	cmp	r4, #255	; 0xff
 8000402:	d100      	bne.n	8000406 <__aeabi_fadd+0xba>
 8000404:	e0b7      	b.n	8000576 <__aeabi_fadd+0x22a>
 8000406:	2201      	movs	r2, #1
 8000408:	2607      	movs	r6, #7
 800040a:	402a      	ands	r2, r5
 800040c:	086b      	lsrs	r3, r5, #1
 800040e:	4d9a      	ldr	r5, [pc, #616]	; (8000678 <__aeabi_fadd+0x32c>)
 8000410:	401d      	ands	r5, r3
 8000412:	4315      	orrs	r5, r2
 8000414:	402e      	ands	r6, r5
 8000416:	e029      	b.n	800046c <__aeabi_fadd+0x120>
 8000418:	2cff      	cmp	r4, #255	; 0xff
 800041a:	d0b5      	beq.n	8000388 <__aeabi_fadd+0x3c>
 800041c:	2280      	movs	r2, #128	; 0x80
 800041e:	04d2      	lsls	r2, r2, #19
 8000420:	4313      	orrs	r3, r2
 8000422:	2f1b      	cmp	r7, #27
 8000424:	dd00      	ble.n	8000428 <__aeabi_fadd+0xdc>
 8000426:	e0b2      	b.n	800058e <__aeabi_fadd+0x242>
 8000428:	2220      	movs	r2, #32
 800042a:	1bd2      	subs	r2, r2, r7
 800042c:	0019      	movs	r1, r3
 800042e:	4093      	lsls	r3, r2
 8000430:	40f9      	lsrs	r1, r7
 8000432:	1e5a      	subs	r2, r3, #1
 8000434:	4193      	sbcs	r3, r2
 8000436:	430b      	orrs	r3, r1
 8000438:	1aed      	subs	r5, r5, r3
 800043a:	016b      	lsls	r3, r5, #5
 800043c:	d55b      	bpl.n	80004f6 <__aeabi_fadd+0x1aa>
 800043e:	01ad      	lsls	r5, r5, #6
 8000440:	09ae      	lsrs	r6, r5, #6
 8000442:	0030      	movs	r0, r6
 8000444:	f001 fe18 	bl	8002078 <__clzsi2>
 8000448:	3805      	subs	r0, #5
 800044a:	4086      	lsls	r6, r0
 800044c:	4284      	cmp	r4, r0
 800044e:	dc65      	bgt.n	800051c <__aeabi_fadd+0x1d0>
 8000450:	1b04      	subs	r4, r0, r4
 8000452:	0033      	movs	r3, r6
 8000454:	2020      	movs	r0, #32
 8000456:	3401      	adds	r4, #1
 8000458:	40e3      	lsrs	r3, r4
 800045a:	1b04      	subs	r4, r0, r4
 800045c:	40a6      	lsls	r6, r4
 800045e:	1e75      	subs	r5, r6, #1
 8000460:	41ae      	sbcs	r6, r5
 8000462:	4333      	orrs	r3, r6
 8000464:	2607      	movs	r6, #7
 8000466:	001d      	movs	r5, r3
 8000468:	2400      	movs	r4, #0
 800046a:	401e      	ands	r6, r3
 800046c:	2201      	movs	r2, #1
 800046e:	464b      	mov	r3, r9
 8000470:	401a      	ands	r2, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d004      	beq.n	8000480 <__aeabi_fadd+0x134>
 8000476:	230f      	movs	r3, #15
 8000478:	402b      	ands	r3, r5
 800047a:	2b04      	cmp	r3, #4
 800047c:	d000      	beq.n	8000480 <__aeabi_fadd+0x134>
 800047e:	3504      	adds	r5, #4
 8000480:	016b      	lsls	r3, r5, #5
 8000482:	d400      	bmi.n	8000486 <__aeabi_fadd+0x13a>
 8000484:	e780      	b.n	8000388 <__aeabi_fadd+0x3c>
 8000486:	3401      	adds	r4, #1
 8000488:	b2e6      	uxtb	r6, r4
 800048a:	2cff      	cmp	r4, #255	; 0xff
 800048c:	d12f      	bne.n	80004ee <__aeabi_fadd+0x1a2>
 800048e:	26ff      	movs	r6, #255	; 0xff
 8000490:	2300      	movs	r3, #0
 8000492:	e780      	b.n	8000396 <__aeabi_fadd+0x4a>
 8000494:	2b00      	cmp	r3, #0
 8000496:	d152      	bne.n	800053e <__aeabi_fadd+0x1f2>
 8000498:	2cff      	cmp	r4, #255	; 0xff
 800049a:	d000      	beq.n	800049e <__aeabi_fadd+0x152>
 800049c:	e774      	b.n	8000388 <__aeabi_fadd+0x3c>
 800049e:	000a      	movs	r2, r1
 80004a0:	08ed      	lsrs	r5, r5, #3
 80004a2:	2d00      	cmp	r5, #0
 80004a4:	d0f3      	beq.n	800048e <__aeabi_fadd+0x142>
 80004a6:	2380      	movs	r3, #128	; 0x80
 80004a8:	03db      	lsls	r3, r3, #15
 80004aa:	432b      	orrs	r3, r5
 80004ac:	025b      	lsls	r3, r3, #9
 80004ae:	0a5b      	lsrs	r3, r3, #9
 80004b0:	26ff      	movs	r6, #255	; 0xff
 80004b2:	e770      	b.n	8000396 <__aeabi_fadd+0x4a>
 80004b4:	3f01      	subs	r7, #1
 80004b6:	2f00      	cmp	r7, #0
 80004b8:	d0be      	beq.n	8000438 <__aeabi_fadd+0xec>
 80004ba:	2cff      	cmp	r4, #255	; 0xff
 80004bc:	d1b1      	bne.n	8000422 <__aeabi_fadd+0xd6>
 80004be:	e763      	b.n	8000388 <__aeabi_fadd+0x3c>
 80004c0:	2c00      	cmp	r4, #0
 80004c2:	d047      	beq.n	8000554 <__aeabi_fadd+0x208>
 80004c4:	28ff      	cmp	r0, #255	; 0xff
 80004c6:	d069      	beq.n	800059c <__aeabi_fadd+0x250>
 80004c8:	2480      	movs	r4, #128	; 0x80
 80004ca:	04e4      	lsls	r4, r4, #19
 80004cc:	427a      	negs	r2, r7
 80004ce:	4325      	orrs	r5, r4
 80004d0:	2a1b      	cmp	r2, #27
 80004d2:	dd00      	ble.n	80004d6 <__aeabi_fadd+0x18a>
 80004d4:	e0c5      	b.n	8000662 <__aeabi_fadd+0x316>
 80004d6:	002c      	movs	r4, r5
 80004d8:	2620      	movs	r6, #32
 80004da:	40d4      	lsrs	r4, r2
 80004dc:	1ab2      	subs	r2, r6, r2
 80004de:	4095      	lsls	r5, r2
 80004e0:	1e6a      	subs	r2, r5, #1
 80004e2:	4195      	sbcs	r5, r2
 80004e4:	4325      	orrs	r5, r4
 80004e6:	1b5d      	subs	r5, r3, r5
 80004e8:	0004      	movs	r4, r0
 80004ea:	4689      	mov	r9, r1
 80004ec:	e7a5      	b.n	800043a <__aeabi_fadd+0xee>
 80004ee:	01ab      	lsls	r3, r5, #6
 80004f0:	0a5b      	lsrs	r3, r3, #9
 80004f2:	e750      	b.n	8000396 <__aeabi_fadd+0x4a>
 80004f4:	2400      	movs	r4, #0
 80004f6:	2201      	movs	r2, #1
 80004f8:	464b      	mov	r3, r9
 80004fa:	401a      	ands	r2, r3
 80004fc:	076b      	lsls	r3, r5, #29
 80004fe:	d1ba      	bne.n	8000476 <__aeabi_fadd+0x12a>
 8000500:	e742      	b.n	8000388 <__aeabi_fadd+0x3c>
 8000502:	2f00      	cmp	r7, #0
 8000504:	d13b      	bne.n	800057e <__aeabi_fadd+0x232>
 8000506:	3401      	adds	r4, #1
 8000508:	b2e0      	uxtb	r0, r4
 800050a:	2801      	cmp	r0, #1
 800050c:	dd4a      	ble.n	80005a4 <__aeabi_fadd+0x258>
 800050e:	2cff      	cmp	r4, #255	; 0xff
 8000510:	d0bd      	beq.n	800048e <__aeabi_fadd+0x142>
 8000512:	2607      	movs	r6, #7
 8000514:	18ed      	adds	r5, r5, r3
 8000516:	086d      	lsrs	r5, r5, #1
 8000518:	402e      	ands	r6, r5
 800051a:	e7a7      	b.n	800046c <__aeabi_fadd+0x120>
 800051c:	2307      	movs	r3, #7
 800051e:	4d57      	ldr	r5, [pc, #348]	; (800067c <__aeabi_fadd+0x330>)
 8000520:	1a24      	subs	r4, r4, r0
 8000522:	4035      	ands	r5, r6
 8000524:	401e      	ands	r6, r3
 8000526:	e7a1      	b.n	800046c <__aeabi_fadd+0x120>
 8000528:	2c00      	cmp	r4, #0
 800052a:	d11b      	bne.n	8000564 <__aeabi_fadd+0x218>
 800052c:	2d00      	cmp	r5, #0
 800052e:	d16e      	bne.n	800060e <__aeabi_fadd+0x2c2>
 8000530:	2b00      	cmp	r3, #0
 8000532:	d100      	bne.n	8000536 <__aeabi_fadd+0x1ea>
 8000534:	e09a      	b.n	800066c <__aeabi_fadd+0x320>
 8000536:	000a      	movs	r2, r1
 8000538:	001d      	movs	r5, r3
 800053a:	003c      	movs	r4, r7
 800053c:	e724      	b.n	8000388 <__aeabi_fadd+0x3c>
 800053e:	3f01      	subs	r7, #1
 8000540:	2f00      	cmp	r7, #0
 8000542:	d100      	bne.n	8000546 <__aeabi_fadd+0x1fa>
 8000544:	e758      	b.n	80003f8 <__aeabi_fadd+0xac>
 8000546:	2cff      	cmp	r4, #255	; 0xff
 8000548:	d000      	beq.n	800054c <__aeabi_fadd+0x200>
 800054a:	e74a      	b.n	80003e2 <__aeabi_fadd+0x96>
 800054c:	e7a7      	b.n	800049e <__aeabi_fadd+0x152>
 800054e:	1b5e      	subs	r6, r3, r5
 8000550:	4689      	mov	r9, r1
 8000552:	e776      	b.n	8000442 <__aeabi_fadd+0xf6>
 8000554:	2d00      	cmp	r5, #0
 8000556:	d11c      	bne.n	8000592 <__aeabi_fadd+0x246>
 8000558:	000a      	movs	r2, r1
 800055a:	28ff      	cmp	r0, #255	; 0xff
 800055c:	d01f      	beq.n	800059e <__aeabi_fadd+0x252>
 800055e:	0004      	movs	r4, r0
 8000560:	001d      	movs	r5, r3
 8000562:	e711      	b.n	8000388 <__aeabi_fadd+0x3c>
 8000564:	2d00      	cmp	r5, #0
 8000566:	d15d      	bne.n	8000624 <__aeabi_fadd+0x2d8>
 8000568:	2b00      	cmp	r3, #0
 800056a:	d117      	bne.n	800059c <__aeabi_fadd+0x250>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	2200      	movs	r2, #0
 8000570:	03db      	lsls	r3, r3, #15
 8000572:	26ff      	movs	r6, #255	; 0xff
 8000574:	e70f      	b.n	8000396 <__aeabi_fadd+0x4a>
 8000576:	000a      	movs	r2, r1
 8000578:	26ff      	movs	r6, #255	; 0xff
 800057a:	2300      	movs	r3, #0
 800057c:	e70b      	b.n	8000396 <__aeabi_fadd+0x4a>
 800057e:	2c00      	cmp	r4, #0
 8000580:	d121      	bne.n	80005c6 <__aeabi_fadd+0x27a>
 8000582:	2d00      	cmp	r5, #0
 8000584:	d166      	bne.n	8000654 <__aeabi_fadd+0x308>
 8000586:	28ff      	cmp	r0, #255	; 0xff
 8000588:	d1e9      	bne.n	800055e <__aeabi_fadd+0x212>
 800058a:	001d      	movs	r5, r3
 800058c:	e787      	b.n	800049e <__aeabi_fadd+0x152>
 800058e:	2301      	movs	r3, #1
 8000590:	e752      	b.n	8000438 <__aeabi_fadd+0xec>
 8000592:	1c7a      	adds	r2, r7, #1
 8000594:	d0a7      	beq.n	80004e6 <__aeabi_fadd+0x19a>
 8000596:	43fa      	mvns	r2, r7
 8000598:	28ff      	cmp	r0, #255	; 0xff
 800059a:	d199      	bne.n	80004d0 <__aeabi_fadd+0x184>
 800059c:	000a      	movs	r2, r1
 800059e:	001d      	movs	r5, r3
 80005a0:	24ff      	movs	r4, #255	; 0xff
 80005a2:	e6f1      	b.n	8000388 <__aeabi_fadd+0x3c>
 80005a4:	2e00      	cmp	r6, #0
 80005a6:	d121      	bne.n	80005ec <__aeabi_fadd+0x2a0>
 80005a8:	2d00      	cmp	r5, #0
 80005aa:	d04f      	beq.n	800064c <__aeabi_fadd+0x300>
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d04c      	beq.n	800064a <__aeabi_fadd+0x2fe>
 80005b0:	18ed      	adds	r5, r5, r3
 80005b2:	016b      	lsls	r3, r5, #5
 80005b4:	d59e      	bpl.n	80004f4 <__aeabi_fadd+0x1a8>
 80005b6:	4b31      	ldr	r3, [pc, #196]	; (800067c <__aeabi_fadd+0x330>)
 80005b8:	3607      	adds	r6, #7
 80005ba:	402e      	ands	r6, r5
 80005bc:	2401      	movs	r4, #1
 80005be:	401d      	ands	r5, r3
 80005c0:	e754      	b.n	800046c <__aeabi_fadd+0x120>
 80005c2:	2301      	movs	r3, #1
 80005c4:	e718      	b.n	80003f8 <__aeabi_fadd+0xac>
 80005c6:	28ff      	cmp	r0, #255	; 0xff
 80005c8:	d0df      	beq.n	800058a <__aeabi_fadd+0x23e>
 80005ca:	2480      	movs	r4, #128	; 0x80
 80005cc:	04e4      	lsls	r4, r4, #19
 80005ce:	427f      	negs	r7, r7
 80005d0:	4325      	orrs	r5, r4
 80005d2:	2f1b      	cmp	r7, #27
 80005d4:	dc4d      	bgt.n	8000672 <__aeabi_fadd+0x326>
 80005d6:	2620      	movs	r6, #32
 80005d8:	1bf6      	subs	r6, r6, r7
 80005da:	002c      	movs	r4, r5
 80005dc:	40b5      	lsls	r5, r6
 80005de:	40fc      	lsrs	r4, r7
 80005e0:	1e6a      	subs	r2, r5, #1
 80005e2:	4195      	sbcs	r5, r2
 80005e4:	4325      	orrs	r5, r4
 80005e6:	18ed      	adds	r5, r5, r3
 80005e8:	0004      	movs	r4, r0
 80005ea:	e706      	b.n	80003fa <__aeabi_fadd+0xae>
 80005ec:	2d00      	cmp	r5, #0
 80005ee:	d0cc      	beq.n	800058a <__aeabi_fadd+0x23e>
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d100      	bne.n	80005f6 <__aeabi_fadd+0x2aa>
 80005f4:	e753      	b.n	800049e <__aeabi_fadd+0x152>
 80005f6:	2180      	movs	r1, #128	; 0x80
 80005f8:	4660      	mov	r0, ip
 80005fa:	03c9      	lsls	r1, r1, #15
 80005fc:	4208      	tst	r0, r1
 80005fe:	d003      	beq.n	8000608 <__aeabi_fadd+0x2bc>
 8000600:	4640      	mov	r0, r8
 8000602:	4208      	tst	r0, r1
 8000604:	d100      	bne.n	8000608 <__aeabi_fadd+0x2bc>
 8000606:	001d      	movs	r5, r3
 8000608:	2101      	movs	r1, #1
 800060a:	4011      	ands	r1, r2
 800060c:	e747      	b.n	800049e <__aeabi_fadd+0x152>
 800060e:	2b00      	cmp	r3, #0
 8000610:	d100      	bne.n	8000614 <__aeabi_fadd+0x2c8>
 8000612:	e6b9      	b.n	8000388 <__aeabi_fadd+0x3c>
 8000614:	1aea      	subs	r2, r5, r3
 8000616:	0150      	lsls	r0, r2, #5
 8000618:	d525      	bpl.n	8000666 <__aeabi_fadd+0x31a>
 800061a:	2607      	movs	r6, #7
 800061c:	1b5d      	subs	r5, r3, r5
 800061e:	402e      	ands	r6, r5
 8000620:	4689      	mov	r9, r1
 8000622:	e723      	b.n	800046c <__aeabi_fadd+0x120>
 8000624:	24ff      	movs	r4, #255	; 0xff
 8000626:	2b00      	cmp	r3, #0
 8000628:	d100      	bne.n	800062c <__aeabi_fadd+0x2e0>
 800062a:	e6ad      	b.n	8000388 <__aeabi_fadd+0x3c>
 800062c:	2280      	movs	r2, #128	; 0x80
 800062e:	4660      	mov	r0, ip
 8000630:	03d2      	lsls	r2, r2, #15
 8000632:	4210      	tst	r0, r2
 8000634:	d004      	beq.n	8000640 <__aeabi_fadd+0x2f4>
 8000636:	4640      	mov	r0, r8
 8000638:	4210      	tst	r0, r2
 800063a:	d101      	bne.n	8000640 <__aeabi_fadd+0x2f4>
 800063c:	001d      	movs	r5, r3
 800063e:	4689      	mov	r9, r1
 8000640:	2201      	movs	r2, #1
 8000642:	464b      	mov	r3, r9
 8000644:	24ff      	movs	r4, #255	; 0xff
 8000646:	401a      	ands	r2, r3
 8000648:	e69e      	b.n	8000388 <__aeabi_fadd+0x3c>
 800064a:	002b      	movs	r3, r5
 800064c:	08dd      	lsrs	r5, r3, #3
 800064e:	000a      	movs	r2, r1
 8000650:	2400      	movs	r4, #0
 8000652:	e69d      	b.n	8000390 <__aeabi_fadd+0x44>
 8000654:	1c7a      	adds	r2, r7, #1
 8000656:	d0c6      	beq.n	80005e6 <__aeabi_fadd+0x29a>
 8000658:	43ff      	mvns	r7, r7
 800065a:	28ff      	cmp	r0, #255	; 0xff
 800065c:	d1b9      	bne.n	80005d2 <__aeabi_fadd+0x286>
 800065e:	001d      	movs	r5, r3
 8000660:	e71d      	b.n	800049e <__aeabi_fadd+0x152>
 8000662:	2501      	movs	r5, #1
 8000664:	e73f      	b.n	80004e6 <__aeabi_fadd+0x19a>
 8000666:	1e15      	subs	r5, r2, #0
 8000668:	d000      	beq.n	800066c <__aeabi_fadd+0x320>
 800066a:	e744      	b.n	80004f6 <__aeabi_fadd+0x1aa>
 800066c:	2200      	movs	r2, #0
 800066e:	2300      	movs	r3, #0
 8000670:	e691      	b.n	8000396 <__aeabi_fadd+0x4a>
 8000672:	2501      	movs	r5, #1
 8000674:	e7b7      	b.n	80005e6 <__aeabi_fadd+0x29a>
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	7dffffff 	.word	0x7dffffff
 800067c:	fbffffff 	.word	0xfbffffff

08000680 <__aeabi_fdiv>:
 8000680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000682:	4657      	mov	r7, sl
 8000684:	464e      	mov	r6, r9
 8000686:	4645      	mov	r5, r8
 8000688:	46de      	mov	lr, fp
 800068a:	0244      	lsls	r4, r0, #9
 800068c:	b5e0      	push	{r5, r6, r7, lr}
 800068e:	0046      	lsls	r6, r0, #1
 8000690:	4688      	mov	r8, r1
 8000692:	0a64      	lsrs	r4, r4, #9
 8000694:	0e36      	lsrs	r6, r6, #24
 8000696:	0fc7      	lsrs	r7, r0, #31
 8000698:	2e00      	cmp	r6, #0
 800069a:	d063      	beq.n	8000764 <__aeabi_fdiv+0xe4>
 800069c:	2eff      	cmp	r6, #255	; 0xff
 800069e:	d024      	beq.n	80006ea <__aeabi_fdiv+0x6a>
 80006a0:	2380      	movs	r3, #128	; 0x80
 80006a2:	00e4      	lsls	r4, r4, #3
 80006a4:	04db      	lsls	r3, r3, #19
 80006a6:	431c      	orrs	r4, r3
 80006a8:	2300      	movs	r3, #0
 80006aa:	4699      	mov	r9, r3
 80006ac:	469b      	mov	fp, r3
 80006ae:	3e7f      	subs	r6, #127	; 0x7f
 80006b0:	4643      	mov	r3, r8
 80006b2:	4642      	mov	r2, r8
 80006b4:	025d      	lsls	r5, r3, #9
 80006b6:	0fd2      	lsrs	r2, r2, #31
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	0a6d      	lsrs	r5, r5, #9
 80006bc:	0e1b      	lsrs	r3, r3, #24
 80006be:	4690      	mov	r8, r2
 80006c0:	4692      	mov	sl, r2
 80006c2:	d065      	beq.n	8000790 <__aeabi_fdiv+0x110>
 80006c4:	2bff      	cmp	r3, #255	; 0xff
 80006c6:	d055      	beq.n	8000774 <__aeabi_fdiv+0xf4>
 80006c8:	2280      	movs	r2, #128	; 0x80
 80006ca:	2100      	movs	r1, #0
 80006cc:	00ed      	lsls	r5, r5, #3
 80006ce:	04d2      	lsls	r2, r2, #19
 80006d0:	3b7f      	subs	r3, #127	; 0x7f
 80006d2:	4315      	orrs	r5, r2
 80006d4:	1af6      	subs	r6, r6, r3
 80006d6:	4643      	mov	r3, r8
 80006d8:	464a      	mov	r2, r9
 80006da:	407b      	eors	r3, r7
 80006dc:	2a0f      	cmp	r2, #15
 80006de:	d900      	bls.n	80006e2 <__aeabi_fdiv+0x62>
 80006e0:	e08d      	b.n	80007fe <__aeabi_fdiv+0x17e>
 80006e2:	486d      	ldr	r0, [pc, #436]	; (8000898 <__aeabi_fdiv+0x218>)
 80006e4:	0092      	lsls	r2, r2, #2
 80006e6:	5882      	ldr	r2, [r0, r2]
 80006e8:	4697      	mov	pc, r2
 80006ea:	2c00      	cmp	r4, #0
 80006ec:	d154      	bne.n	8000798 <__aeabi_fdiv+0x118>
 80006ee:	2308      	movs	r3, #8
 80006f0:	4699      	mov	r9, r3
 80006f2:	3b06      	subs	r3, #6
 80006f4:	26ff      	movs	r6, #255	; 0xff
 80006f6:	469b      	mov	fp, r3
 80006f8:	e7da      	b.n	80006b0 <__aeabi_fdiv+0x30>
 80006fa:	2500      	movs	r5, #0
 80006fc:	4653      	mov	r3, sl
 80006fe:	2902      	cmp	r1, #2
 8000700:	d01b      	beq.n	800073a <__aeabi_fdiv+0xba>
 8000702:	2903      	cmp	r1, #3
 8000704:	d100      	bne.n	8000708 <__aeabi_fdiv+0x88>
 8000706:	e0bf      	b.n	8000888 <__aeabi_fdiv+0x208>
 8000708:	2901      	cmp	r1, #1
 800070a:	d028      	beq.n	800075e <__aeabi_fdiv+0xde>
 800070c:	0030      	movs	r0, r6
 800070e:	307f      	adds	r0, #127	; 0x7f
 8000710:	2800      	cmp	r0, #0
 8000712:	dd20      	ble.n	8000756 <__aeabi_fdiv+0xd6>
 8000714:	076a      	lsls	r2, r5, #29
 8000716:	d004      	beq.n	8000722 <__aeabi_fdiv+0xa2>
 8000718:	220f      	movs	r2, #15
 800071a:	402a      	ands	r2, r5
 800071c:	2a04      	cmp	r2, #4
 800071e:	d000      	beq.n	8000722 <__aeabi_fdiv+0xa2>
 8000720:	3504      	adds	r5, #4
 8000722:	012a      	lsls	r2, r5, #4
 8000724:	d503      	bpl.n	800072e <__aeabi_fdiv+0xae>
 8000726:	0030      	movs	r0, r6
 8000728:	4a5c      	ldr	r2, [pc, #368]	; (800089c <__aeabi_fdiv+0x21c>)
 800072a:	3080      	adds	r0, #128	; 0x80
 800072c:	4015      	ands	r5, r2
 800072e:	28fe      	cmp	r0, #254	; 0xfe
 8000730:	dc03      	bgt.n	800073a <__aeabi_fdiv+0xba>
 8000732:	01ac      	lsls	r4, r5, #6
 8000734:	0a64      	lsrs	r4, r4, #9
 8000736:	b2c2      	uxtb	r2, r0
 8000738:	e001      	b.n	800073e <__aeabi_fdiv+0xbe>
 800073a:	22ff      	movs	r2, #255	; 0xff
 800073c:	2400      	movs	r4, #0
 800073e:	0264      	lsls	r4, r4, #9
 8000740:	05d2      	lsls	r2, r2, #23
 8000742:	0a60      	lsrs	r0, r4, #9
 8000744:	07db      	lsls	r3, r3, #31
 8000746:	4310      	orrs	r0, r2
 8000748:	4318      	orrs	r0, r3
 800074a:	bc3c      	pop	{r2, r3, r4, r5}
 800074c:	4690      	mov	r8, r2
 800074e:	4699      	mov	r9, r3
 8000750:	46a2      	mov	sl, r4
 8000752:	46ab      	mov	fp, r5
 8000754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000756:	2201      	movs	r2, #1
 8000758:	1a10      	subs	r0, r2, r0
 800075a:	281b      	cmp	r0, #27
 800075c:	dd7c      	ble.n	8000858 <__aeabi_fdiv+0x1d8>
 800075e:	2200      	movs	r2, #0
 8000760:	2400      	movs	r4, #0
 8000762:	e7ec      	b.n	800073e <__aeabi_fdiv+0xbe>
 8000764:	2c00      	cmp	r4, #0
 8000766:	d11d      	bne.n	80007a4 <__aeabi_fdiv+0x124>
 8000768:	2304      	movs	r3, #4
 800076a:	4699      	mov	r9, r3
 800076c:	3b03      	subs	r3, #3
 800076e:	2600      	movs	r6, #0
 8000770:	469b      	mov	fp, r3
 8000772:	e79d      	b.n	80006b0 <__aeabi_fdiv+0x30>
 8000774:	3eff      	subs	r6, #255	; 0xff
 8000776:	2d00      	cmp	r5, #0
 8000778:	d120      	bne.n	80007bc <__aeabi_fdiv+0x13c>
 800077a:	2102      	movs	r1, #2
 800077c:	4643      	mov	r3, r8
 800077e:	464a      	mov	r2, r9
 8000780:	407b      	eors	r3, r7
 8000782:	430a      	orrs	r2, r1
 8000784:	2a0f      	cmp	r2, #15
 8000786:	d8d8      	bhi.n	800073a <__aeabi_fdiv+0xba>
 8000788:	4845      	ldr	r0, [pc, #276]	; (80008a0 <__aeabi_fdiv+0x220>)
 800078a:	0092      	lsls	r2, r2, #2
 800078c:	5882      	ldr	r2, [r0, r2]
 800078e:	4697      	mov	pc, r2
 8000790:	2d00      	cmp	r5, #0
 8000792:	d119      	bne.n	80007c8 <__aeabi_fdiv+0x148>
 8000794:	2101      	movs	r1, #1
 8000796:	e7f1      	b.n	800077c <__aeabi_fdiv+0xfc>
 8000798:	230c      	movs	r3, #12
 800079a:	4699      	mov	r9, r3
 800079c:	3b09      	subs	r3, #9
 800079e:	26ff      	movs	r6, #255	; 0xff
 80007a0:	469b      	mov	fp, r3
 80007a2:	e785      	b.n	80006b0 <__aeabi_fdiv+0x30>
 80007a4:	0020      	movs	r0, r4
 80007a6:	f001 fc67 	bl	8002078 <__clzsi2>
 80007aa:	2676      	movs	r6, #118	; 0x76
 80007ac:	1f43      	subs	r3, r0, #5
 80007ae:	409c      	lsls	r4, r3
 80007b0:	2300      	movs	r3, #0
 80007b2:	4276      	negs	r6, r6
 80007b4:	1a36      	subs	r6, r6, r0
 80007b6:	4699      	mov	r9, r3
 80007b8:	469b      	mov	fp, r3
 80007ba:	e779      	b.n	80006b0 <__aeabi_fdiv+0x30>
 80007bc:	464a      	mov	r2, r9
 80007be:	2303      	movs	r3, #3
 80007c0:	431a      	orrs	r2, r3
 80007c2:	4691      	mov	r9, r2
 80007c4:	2103      	movs	r1, #3
 80007c6:	e786      	b.n	80006d6 <__aeabi_fdiv+0x56>
 80007c8:	0028      	movs	r0, r5
 80007ca:	f001 fc55 	bl	8002078 <__clzsi2>
 80007ce:	1f43      	subs	r3, r0, #5
 80007d0:	1836      	adds	r6, r6, r0
 80007d2:	409d      	lsls	r5, r3
 80007d4:	3676      	adds	r6, #118	; 0x76
 80007d6:	2100      	movs	r1, #0
 80007d8:	e77d      	b.n	80006d6 <__aeabi_fdiv+0x56>
 80007da:	2480      	movs	r4, #128	; 0x80
 80007dc:	2300      	movs	r3, #0
 80007de:	03e4      	lsls	r4, r4, #15
 80007e0:	22ff      	movs	r2, #255	; 0xff
 80007e2:	e7ac      	b.n	800073e <__aeabi_fdiv+0xbe>
 80007e4:	2500      	movs	r5, #0
 80007e6:	2380      	movs	r3, #128	; 0x80
 80007e8:	03db      	lsls	r3, r3, #15
 80007ea:	421c      	tst	r4, r3
 80007ec:	d028      	beq.n	8000840 <__aeabi_fdiv+0x1c0>
 80007ee:	421d      	tst	r5, r3
 80007f0:	d126      	bne.n	8000840 <__aeabi_fdiv+0x1c0>
 80007f2:	432b      	orrs	r3, r5
 80007f4:	025c      	lsls	r4, r3, #9
 80007f6:	0a64      	lsrs	r4, r4, #9
 80007f8:	4643      	mov	r3, r8
 80007fa:	22ff      	movs	r2, #255	; 0xff
 80007fc:	e79f      	b.n	800073e <__aeabi_fdiv+0xbe>
 80007fe:	0162      	lsls	r2, r4, #5
 8000800:	016c      	lsls	r4, r5, #5
 8000802:	42a2      	cmp	r2, r4
 8000804:	d224      	bcs.n	8000850 <__aeabi_fdiv+0x1d0>
 8000806:	211b      	movs	r1, #27
 8000808:	2500      	movs	r5, #0
 800080a:	3e01      	subs	r6, #1
 800080c:	2701      	movs	r7, #1
 800080e:	0010      	movs	r0, r2
 8000810:	006d      	lsls	r5, r5, #1
 8000812:	0052      	lsls	r2, r2, #1
 8000814:	2800      	cmp	r0, #0
 8000816:	db01      	blt.n	800081c <__aeabi_fdiv+0x19c>
 8000818:	4294      	cmp	r4, r2
 800081a:	d801      	bhi.n	8000820 <__aeabi_fdiv+0x1a0>
 800081c:	1b12      	subs	r2, r2, r4
 800081e:	433d      	orrs	r5, r7
 8000820:	3901      	subs	r1, #1
 8000822:	2900      	cmp	r1, #0
 8000824:	d1f3      	bne.n	800080e <__aeabi_fdiv+0x18e>
 8000826:	0014      	movs	r4, r2
 8000828:	1e62      	subs	r2, r4, #1
 800082a:	4194      	sbcs	r4, r2
 800082c:	4325      	orrs	r5, r4
 800082e:	e76d      	b.n	800070c <__aeabi_fdiv+0x8c>
 8000830:	46ba      	mov	sl, r7
 8000832:	4659      	mov	r1, fp
 8000834:	0025      	movs	r5, r4
 8000836:	4653      	mov	r3, sl
 8000838:	2902      	cmp	r1, #2
 800083a:	d000      	beq.n	800083e <__aeabi_fdiv+0x1be>
 800083c:	e761      	b.n	8000702 <__aeabi_fdiv+0x82>
 800083e:	e77c      	b.n	800073a <__aeabi_fdiv+0xba>
 8000840:	2380      	movs	r3, #128	; 0x80
 8000842:	03db      	lsls	r3, r3, #15
 8000844:	431c      	orrs	r4, r3
 8000846:	0264      	lsls	r4, r4, #9
 8000848:	0a64      	lsrs	r4, r4, #9
 800084a:	003b      	movs	r3, r7
 800084c:	22ff      	movs	r2, #255	; 0xff
 800084e:	e776      	b.n	800073e <__aeabi_fdiv+0xbe>
 8000850:	1b12      	subs	r2, r2, r4
 8000852:	211a      	movs	r1, #26
 8000854:	2501      	movs	r5, #1
 8000856:	e7d9      	b.n	800080c <__aeabi_fdiv+0x18c>
 8000858:	369e      	adds	r6, #158	; 0x9e
 800085a:	002a      	movs	r2, r5
 800085c:	40b5      	lsls	r5, r6
 800085e:	002c      	movs	r4, r5
 8000860:	40c2      	lsrs	r2, r0
 8000862:	1e65      	subs	r5, r4, #1
 8000864:	41ac      	sbcs	r4, r5
 8000866:	4314      	orrs	r4, r2
 8000868:	0762      	lsls	r2, r4, #29
 800086a:	d004      	beq.n	8000876 <__aeabi_fdiv+0x1f6>
 800086c:	220f      	movs	r2, #15
 800086e:	4022      	ands	r2, r4
 8000870:	2a04      	cmp	r2, #4
 8000872:	d000      	beq.n	8000876 <__aeabi_fdiv+0x1f6>
 8000874:	3404      	adds	r4, #4
 8000876:	0162      	lsls	r2, r4, #5
 8000878:	d403      	bmi.n	8000882 <__aeabi_fdiv+0x202>
 800087a:	01a4      	lsls	r4, r4, #6
 800087c:	0a64      	lsrs	r4, r4, #9
 800087e:	2200      	movs	r2, #0
 8000880:	e75d      	b.n	800073e <__aeabi_fdiv+0xbe>
 8000882:	2201      	movs	r2, #1
 8000884:	2400      	movs	r4, #0
 8000886:	e75a      	b.n	800073e <__aeabi_fdiv+0xbe>
 8000888:	2480      	movs	r4, #128	; 0x80
 800088a:	03e4      	lsls	r4, r4, #15
 800088c:	432c      	orrs	r4, r5
 800088e:	0264      	lsls	r4, r4, #9
 8000890:	0a64      	lsrs	r4, r4, #9
 8000892:	22ff      	movs	r2, #255	; 0xff
 8000894:	e753      	b.n	800073e <__aeabi_fdiv+0xbe>
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	080066a0 	.word	0x080066a0
 800089c:	f7ffffff 	.word	0xf7ffffff
 80008a0:	080066e0 	.word	0x080066e0

080008a4 <__eqsf2>:
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	0042      	lsls	r2, r0, #1
 80008a8:	024e      	lsls	r6, r1, #9
 80008aa:	004c      	lsls	r4, r1, #1
 80008ac:	0245      	lsls	r5, r0, #9
 80008ae:	0a6d      	lsrs	r5, r5, #9
 80008b0:	0e12      	lsrs	r2, r2, #24
 80008b2:	0fc3      	lsrs	r3, r0, #31
 80008b4:	0a76      	lsrs	r6, r6, #9
 80008b6:	0e24      	lsrs	r4, r4, #24
 80008b8:	0fc9      	lsrs	r1, r1, #31
 80008ba:	2aff      	cmp	r2, #255	; 0xff
 80008bc:	d00f      	beq.n	80008de <__eqsf2+0x3a>
 80008be:	2cff      	cmp	r4, #255	; 0xff
 80008c0:	d011      	beq.n	80008e6 <__eqsf2+0x42>
 80008c2:	2001      	movs	r0, #1
 80008c4:	42a2      	cmp	r2, r4
 80008c6:	d000      	beq.n	80008ca <__eqsf2+0x26>
 80008c8:	bd70      	pop	{r4, r5, r6, pc}
 80008ca:	42b5      	cmp	r5, r6
 80008cc:	d1fc      	bne.n	80008c8 <__eqsf2+0x24>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d00d      	beq.n	80008ee <__eqsf2+0x4a>
 80008d2:	2a00      	cmp	r2, #0
 80008d4:	d1f8      	bne.n	80008c8 <__eqsf2+0x24>
 80008d6:	0028      	movs	r0, r5
 80008d8:	1e45      	subs	r5, r0, #1
 80008da:	41a8      	sbcs	r0, r5
 80008dc:	e7f4      	b.n	80008c8 <__eqsf2+0x24>
 80008de:	2001      	movs	r0, #1
 80008e0:	2d00      	cmp	r5, #0
 80008e2:	d1f1      	bne.n	80008c8 <__eqsf2+0x24>
 80008e4:	e7eb      	b.n	80008be <__eqsf2+0x1a>
 80008e6:	2001      	movs	r0, #1
 80008e8:	2e00      	cmp	r6, #0
 80008ea:	d1ed      	bne.n	80008c8 <__eqsf2+0x24>
 80008ec:	e7e9      	b.n	80008c2 <__eqsf2+0x1e>
 80008ee:	2000      	movs	r0, #0
 80008f0:	e7ea      	b.n	80008c8 <__eqsf2+0x24>
 80008f2:	46c0      	nop			; (mov r8, r8)

080008f4 <__gesf2>:
 80008f4:	b570      	push	{r4, r5, r6, lr}
 80008f6:	004a      	lsls	r2, r1, #1
 80008f8:	024e      	lsls	r6, r1, #9
 80008fa:	0245      	lsls	r5, r0, #9
 80008fc:	0044      	lsls	r4, r0, #1
 80008fe:	0a6d      	lsrs	r5, r5, #9
 8000900:	0e24      	lsrs	r4, r4, #24
 8000902:	0fc3      	lsrs	r3, r0, #31
 8000904:	0a76      	lsrs	r6, r6, #9
 8000906:	0e12      	lsrs	r2, r2, #24
 8000908:	0fc9      	lsrs	r1, r1, #31
 800090a:	2cff      	cmp	r4, #255	; 0xff
 800090c:	d015      	beq.n	800093a <__gesf2+0x46>
 800090e:	2aff      	cmp	r2, #255	; 0xff
 8000910:	d00e      	beq.n	8000930 <__gesf2+0x3c>
 8000912:	2c00      	cmp	r4, #0
 8000914:	d115      	bne.n	8000942 <__gesf2+0x4e>
 8000916:	2a00      	cmp	r2, #0
 8000918:	d101      	bne.n	800091e <__gesf2+0x2a>
 800091a:	2e00      	cmp	r6, #0
 800091c:	d01c      	beq.n	8000958 <__gesf2+0x64>
 800091e:	2d00      	cmp	r5, #0
 8000920:	d014      	beq.n	800094c <__gesf2+0x58>
 8000922:	428b      	cmp	r3, r1
 8000924:	d027      	beq.n	8000976 <__gesf2+0x82>
 8000926:	2002      	movs	r0, #2
 8000928:	3b01      	subs	r3, #1
 800092a:	4018      	ands	r0, r3
 800092c:	3801      	subs	r0, #1
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	2e00      	cmp	r6, #0
 8000932:	d0ee      	beq.n	8000912 <__gesf2+0x1e>
 8000934:	2002      	movs	r0, #2
 8000936:	4240      	negs	r0, r0
 8000938:	e7f9      	b.n	800092e <__gesf2+0x3a>
 800093a:	2d00      	cmp	r5, #0
 800093c:	d1fa      	bne.n	8000934 <__gesf2+0x40>
 800093e:	2aff      	cmp	r2, #255	; 0xff
 8000940:	d00e      	beq.n	8000960 <__gesf2+0x6c>
 8000942:	2a00      	cmp	r2, #0
 8000944:	d10e      	bne.n	8000964 <__gesf2+0x70>
 8000946:	2e00      	cmp	r6, #0
 8000948:	d0ed      	beq.n	8000926 <__gesf2+0x32>
 800094a:	e00b      	b.n	8000964 <__gesf2+0x70>
 800094c:	2301      	movs	r3, #1
 800094e:	3901      	subs	r1, #1
 8000950:	4399      	bics	r1, r3
 8000952:	0008      	movs	r0, r1
 8000954:	3001      	adds	r0, #1
 8000956:	e7ea      	b.n	800092e <__gesf2+0x3a>
 8000958:	2000      	movs	r0, #0
 800095a:	2d00      	cmp	r5, #0
 800095c:	d0e7      	beq.n	800092e <__gesf2+0x3a>
 800095e:	e7e2      	b.n	8000926 <__gesf2+0x32>
 8000960:	2e00      	cmp	r6, #0
 8000962:	d1e7      	bne.n	8000934 <__gesf2+0x40>
 8000964:	428b      	cmp	r3, r1
 8000966:	d1de      	bne.n	8000926 <__gesf2+0x32>
 8000968:	4294      	cmp	r4, r2
 800096a:	dd05      	ble.n	8000978 <__gesf2+0x84>
 800096c:	2102      	movs	r1, #2
 800096e:	1e58      	subs	r0, r3, #1
 8000970:	4008      	ands	r0, r1
 8000972:	3801      	subs	r0, #1
 8000974:	e7db      	b.n	800092e <__gesf2+0x3a>
 8000976:	2400      	movs	r4, #0
 8000978:	42a2      	cmp	r2, r4
 800097a:	dc04      	bgt.n	8000986 <__gesf2+0x92>
 800097c:	42b5      	cmp	r5, r6
 800097e:	d8d2      	bhi.n	8000926 <__gesf2+0x32>
 8000980:	2000      	movs	r0, #0
 8000982:	42b5      	cmp	r5, r6
 8000984:	d2d3      	bcs.n	800092e <__gesf2+0x3a>
 8000986:	1e58      	subs	r0, r3, #1
 8000988:	2301      	movs	r3, #1
 800098a:	4398      	bics	r0, r3
 800098c:	3001      	adds	r0, #1
 800098e:	e7ce      	b.n	800092e <__gesf2+0x3a>

08000990 <__lesf2>:
 8000990:	b530      	push	{r4, r5, lr}
 8000992:	0042      	lsls	r2, r0, #1
 8000994:	0244      	lsls	r4, r0, #9
 8000996:	024d      	lsls	r5, r1, #9
 8000998:	0fc3      	lsrs	r3, r0, #31
 800099a:	0048      	lsls	r0, r1, #1
 800099c:	0a64      	lsrs	r4, r4, #9
 800099e:	0e12      	lsrs	r2, r2, #24
 80009a0:	0a6d      	lsrs	r5, r5, #9
 80009a2:	0e00      	lsrs	r0, r0, #24
 80009a4:	0fc9      	lsrs	r1, r1, #31
 80009a6:	2aff      	cmp	r2, #255	; 0xff
 80009a8:	d012      	beq.n	80009d0 <__lesf2+0x40>
 80009aa:	28ff      	cmp	r0, #255	; 0xff
 80009ac:	d00c      	beq.n	80009c8 <__lesf2+0x38>
 80009ae:	2a00      	cmp	r2, #0
 80009b0:	d112      	bne.n	80009d8 <__lesf2+0x48>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	d119      	bne.n	80009ea <__lesf2+0x5a>
 80009b6:	2d00      	cmp	r5, #0
 80009b8:	d117      	bne.n	80009ea <__lesf2+0x5a>
 80009ba:	2c00      	cmp	r4, #0
 80009bc:	d02b      	beq.n	8000a16 <__lesf2+0x86>
 80009be:	2002      	movs	r0, #2
 80009c0:	3b01      	subs	r3, #1
 80009c2:	4018      	ands	r0, r3
 80009c4:	3801      	subs	r0, #1
 80009c6:	e026      	b.n	8000a16 <__lesf2+0x86>
 80009c8:	2d00      	cmp	r5, #0
 80009ca:	d0f0      	beq.n	80009ae <__lesf2+0x1e>
 80009cc:	2002      	movs	r0, #2
 80009ce:	e022      	b.n	8000a16 <__lesf2+0x86>
 80009d0:	2c00      	cmp	r4, #0
 80009d2:	d1fb      	bne.n	80009cc <__lesf2+0x3c>
 80009d4:	28ff      	cmp	r0, #255	; 0xff
 80009d6:	d01f      	beq.n	8000a18 <__lesf2+0x88>
 80009d8:	2800      	cmp	r0, #0
 80009da:	d11f      	bne.n	8000a1c <__lesf2+0x8c>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d11d      	bne.n	8000a1c <__lesf2+0x8c>
 80009e0:	2002      	movs	r0, #2
 80009e2:	3b01      	subs	r3, #1
 80009e4:	4018      	ands	r0, r3
 80009e6:	3801      	subs	r0, #1
 80009e8:	e015      	b.n	8000a16 <__lesf2+0x86>
 80009ea:	2c00      	cmp	r4, #0
 80009ec:	d00e      	beq.n	8000a0c <__lesf2+0x7c>
 80009ee:	428b      	cmp	r3, r1
 80009f0:	d1e5      	bne.n	80009be <__lesf2+0x2e>
 80009f2:	2200      	movs	r2, #0
 80009f4:	4290      	cmp	r0, r2
 80009f6:	dc04      	bgt.n	8000a02 <__lesf2+0x72>
 80009f8:	42ac      	cmp	r4, r5
 80009fa:	d8e0      	bhi.n	80009be <__lesf2+0x2e>
 80009fc:	2000      	movs	r0, #0
 80009fe:	42ac      	cmp	r4, r5
 8000a00:	d209      	bcs.n	8000a16 <__lesf2+0x86>
 8000a02:	1e58      	subs	r0, r3, #1
 8000a04:	2301      	movs	r3, #1
 8000a06:	4398      	bics	r0, r3
 8000a08:	3001      	adds	r0, #1
 8000a0a:	e004      	b.n	8000a16 <__lesf2+0x86>
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	3901      	subs	r1, #1
 8000a10:	4399      	bics	r1, r3
 8000a12:	0008      	movs	r0, r1
 8000a14:	3001      	adds	r0, #1
 8000a16:	bd30      	pop	{r4, r5, pc}
 8000a18:	2d00      	cmp	r5, #0
 8000a1a:	d1d7      	bne.n	80009cc <__lesf2+0x3c>
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d1ce      	bne.n	80009be <__lesf2+0x2e>
 8000a20:	4282      	cmp	r2, r0
 8000a22:	dde7      	ble.n	80009f4 <__lesf2+0x64>
 8000a24:	2102      	movs	r1, #2
 8000a26:	1e58      	subs	r0, r3, #1
 8000a28:	4008      	ands	r0, r1
 8000a2a:	3801      	subs	r0, #1
 8000a2c:	e7f3      	b.n	8000a16 <__lesf2+0x86>
 8000a2e:	46c0      	nop			; (mov r8, r8)

08000a30 <__aeabi_fmul>:
 8000a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a32:	464e      	mov	r6, r9
 8000a34:	4657      	mov	r7, sl
 8000a36:	4645      	mov	r5, r8
 8000a38:	46de      	mov	lr, fp
 8000a3a:	b5e0      	push	{r5, r6, r7, lr}
 8000a3c:	0243      	lsls	r3, r0, #9
 8000a3e:	0a5b      	lsrs	r3, r3, #9
 8000a40:	0045      	lsls	r5, r0, #1
 8000a42:	b083      	sub	sp, #12
 8000a44:	1c0f      	adds	r7, r1, #0
 8000a46:	4699      	mov	r9, r3
 8000a48:	0e2d      	lsrs	r5, r5, #24
 8000a4a:	0fc6      	lsrs	r6, r0, #31
 8000a4c:	2d00      	cmp	r5, #0
 8000a4e:	d057      	beq.n	8000b00 <__aeabi_fmul+0xd0>
 8000a50:	2dff      	cmp	r5, #255	; 0xff
 8000a52:	d024      	beq.n	8000a9e <__aeabi_fmul+0x6e>
 8000a54:	2080      	movs	r0, #128	; 0x80
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	04c0      	lsls	r0, r0, #19
 8000a5a:	4318      	orrs	r0, r3
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	4681      	mov	r9, r0
 8000a60:	469a      	mov	sl, r3
 8000a62:	469b      	mov	fp, r3
 8000a64:	3d7f      	subs	r5, #127	; 0x7f
 8000a66:	027c      	lsls	r4, r7, #9
 8000a68:	007a      	lsls	r2, r7, #1
 8000a6a:	0ffb      	lsrs	r3, r7, #31
 8000a6c:	0a64      	lsrs	r4, r4, #9
 8000a6e:	0e12      	lsrs	r2, r2, #24
 8000a70:	4698      	mov	r8, r3
 8000a72:	d023      	beq.n	8000abc <__aeabi_fmul+0x8c>
 8000a74:	2aff      	cmp	r2, #255	; 0xff
 8000a76:	d04b      	beq.n	8000b10 <__aeabi_fmul+0xe0>
 8000a78:	00e3      	lsls	r3, r4, #3
 8000a7a:	2480      	movs	r4, #128	; 0x80
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	04e4      	lsls	r4, r4, #19
 8000a80:	3a7f      	subs	r2, #127	; 0x7f
 8000a82:	431c      	orrs	r4, r3
 8000a84:	18ad      	adds	r5, r5, r2
 8000a86:	1c6b      	adds	r3, r5, #1
 8000a88:	4647      	mov	r7, r8
 8000a8a:	9301      	str	r3, [sp, #4]
 8000a8c:	4653      	mov	r3, sl
 8000a8e:	4077      	eors	r7, r6
 8000a90:	003a      	movs	r2, r7
 8000a92:	2b0f      	cmp	r3, #15
 8000a94:	d848      	bhi.n	8000b28 <__aeabi_fmul+0xf8>
 8000a96:	497d      	ldr	r1, [pc, #500]	; (8000c8c <__aeabi_fmul+0x25c>)
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	58cb      	ldr	r3, [r1, r3]
 8000a9c:	469f      	mov	pc, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_fmul+0x74>
 8000aa2:	e085      	b.n	8000bb0 <__aeabi_fmul+0x180>
 8000aa4:	3308      	adds	r3, #8
 8000aa6:	469a      	mov	sl, r3
 8000aa8:	3b06      	subs	r3, #6
 8000aaa:	469b      	mov	fp, r3
 8000aac:	027c      	lsls	r4, r7, #9
 8000aae:	007a      	lsls	r2, r7, #1
 8000ab0:	0ffb      	lsrs	r3, r7, #31
 8000ab2:	25ff      	movs	r5, #255	; 0xff
 8000ab4:	0a64      	lsrs	r4, r4, #9
 8000ab6:	0e12      	lsrs	r2, r2, #24
 8000ab8:	4698      	mov	r8, r3
 8000aba:	d1db      	bne.n	8000a74 <__aeabi_fmul+0x44>
 8000abc:	2c00      	cmp	r4, #0
 8000abe:	d000      	beq.n	8000ac2 <__aeabi_fmul+0x92>
 8000ac0:	e090      	b.n	8000be4 <__aeabi_fmul+0x1b4>
 8000ac2:	4652      	mov	r2, sl
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	4692      	mov	sl, r2
 8000aca:	2001      	movs	r0, #1
 8000acc:	e7db      	b.n	8000a86 <__aeabi_fmul+0x56>
 8000ace:	464c      	mov	r4, r9
 8000ad0:	4658      	mov	r0, fp
 8000ad2:	0017      	movs	r7, r2
 8000ad4:	2802      	cmp	r0, #2
 8000ad6:	d024      	beq.n	8000b22 <__aeabi_fmul+0xf2>
 8000ad8:	2803      	cmp	r0, #3
 8000ada:	d100      	bne.n	8000ade <__aeabi_fmul+0xae>
 8000adc:	e0cf      	b.n	8000c7e <__aeabi_fmul+0x24e>
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	2801      	cmp	r0, #1
 8000ae4:	d14d      	bne.n	8000b82 <__aeabi_fmul+0x152>
 8000ae6:	0258      	lsls	r0, r3, #9
 8000ae8:	05d2      	lsls	r2, r2, #23
 8000aea:	0a40      	lsrs	r0, r0, #9
 8000aec:	07ff      	lsls	r7, r7, #31
 8000aee:	4310      	orrs	r0, r2
 8000af0:	4338      	orrs	r0, r7
 8000af2:	b003      	add	sp, #12
 8000af4:	bc3c      	pop	{r2, r3, r4, r5}
 8000af6:	4690      	mov	r8, r2
 8000af8:	4699      	mov	r9, r3
 8000afa:	46a2      	mov	sl, r4
 8000afc:	46ab      	mov	fp, r5
 8000afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d15b      	bne.n	8000bbc <__aeabi_fmul+0x18c>
 8000b04:	2304      	movs	r3, #4
 8000b06:	469a      	mov	sl, r3
 8000b08:	3b03      	subs	r3, #3
 8000b0a:	2500      	movs	r5, #0
 8000b0c:	469b      	mov	fp, r3
 8000b0e:	e7aa      	b.n	8000a66 <__aeabi_fmul+0x36>
 8000b10:	35ff      	adds	r5, #255	; 0xff
 8000b12:	2c00      	cmp	r4, #0
 8000b14:	d160      	bne.n	8000bd8 <__aeabi_fmul+0x1a8>
 8000b16:	4652      	mov	r2, sl
 8000b18:	2302      	movs	r3, #2
 8000b1a:	431a      	orrs	r2, r3
 8000b1c:	4692      	mov	sl, r2
 8000b1e:	2002      	movs	r0, #2
 8000b20:	e7b1      	b.n	8000a86 <__aeabi_fmul+0x56>
 8000b22:	22ff      	movs	r2, #255	; 0xff
 8000b24:	2300      	movs	r3, #0
 8000b26:	e7de      	b.n	8000ae6 <__aeabi_fmul+0xb6>
 8000b28:	464b      	mov	r3, r9
 8000b2a:	0c1b      	lsrs	r3, r3, #16
 8000b2c:	469c      	mov	ip, r3
 8000b2e:	464b      	mov	r3, r9
 8000b30:	0426      	lsls	r6, r4, #16
 8000b32:	0c36      	lsrs	r6, r6, #16
 8000b34:	0418      	lsls	r0, r3, #16
 8000b36:	4661      	mov	r1, ip
 8000b38:	0033      	movs	r3, r6
 8000b3a:	0c22      	lsrs	r2, r4, #16
 8000b3c:	4664      	mov	r4, ip
 8000b3e:	0c00      	lsrs	r0, r0, #16
 8000b40:	4343      	muls	r3, r0
 8000b42:	434e      	muls	r6, r1
 8000b44:	4350      	muls	r0, r2
 8000b46:	4354      	muls	r4, r2
 8000b48:	1980      	adds	r0, r0, r6
 8000b4a:	0c1a      	lsrs	r2, r3, #16
 8000b4c:	1812      	adds	r2, r2, r0
 8000b4e:	4296      	cmp	r6, r2
 8000b50:	d903      	bls.n	8000b5a <__aeabi_fmul+0x12a>
 8000b52:	2180      	movs	r1, #128	; 0x80
 8000b54:	0249      	lsls	r1, r1, #9
 8000b56:	468c      	mov	ip, r1
 8000b58:	4464      	add	r4, ip
 8000b5a:	041b      	lsls	r3, r3, #16
 8000b5c:	0c1b      	lsrs	r3, r3, #16
 8000b5e:	0410      	lsls	r0, r2, #16
 8000b60:	18c0      	adds	r0, r0, r3
 8000b62:	0183      	lsls	r3, r0, #6
 8000b64:	1e5e      	subs	r6, r3, #1
 8000b66:	41b3      	sbcs	r3, r6
 8000b68:	0e80      	lsrs	r0, r0, #26
 8000b6a:	4318      	orrs	r0, r3
 8000b6c:	0c13      	lsrs	r3, r2, #16
 8000b6e:	191b      	adds	r3, r3, r4
 8000b70:	019b      	lsls	r3, r3, #6
 8000b72:	4303      	orrs	r3, r0
 8000b74:	001c      	movs	r4, r3
 8000b76:	0123      	lsls	r3, r4, #4
 8000b78:	d579      	bpl.n	8000c6e <__aeabi_fmul+0x23e>
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	0862      	lsrs	r2, r4, #1
 8000b7e:	401c      	ands	r4, r3
 8000b80:	4314      	orrs	r4, r2
 8000b82:	9a01      	ldr	r2, [sp, #4]
 8000b84:	327f      	adds	r2, #127	; 0x7f
 8000b86:	2a00      	cmp	r2, #0
 8000b88:	dd4d      	ble.n	8000c26 <__aeabi_fmul+0x1f6>
 8000b8a:	0763      	lsls	r3, r4, #29
 8000b8c:	d004      	beq.n	8000b98 <__aeabi_fmul+0x168>
 8000b8e:	230f      	movs	r3, #15
 8000b90:	4023      	ands	r3, r4
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	d000      	beq.n	8000b98 <__aeabi_fmul+0x168>
 8000b96:	3404      	adds	r4, #4
 8000b98:	0123      	lsls	r3, r4, #4
 8000b9a:	d503      	bpl.n	8000ba4 <__aeabi_fmul+0x174>
 8000b9c:	4b3c      	ldr	r3, [pc, #240]	; (8000c90 <__aeabi_fmul+0x260>)
 8000b9e:	9a01      	ldr	r2, [sp, #4]
 8000ba0:	401c      	ands	r4, r3
 8000ba2:	3280      	adds	r2, #128	; 0x80
 8000ba4:	2afe      	cmp	r2, #254	; 0xfe
 8000ba6:	dcbc      	bgt.n	8000b22 <__aeabi_fmul+0xf2>
 8000ba8:	01a3      	lsls	r3, r4, #6
 8000baa:	0a5b      	lsrs	r3, r3, #9
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	e79a      	b.n	8000ae6 <__aeabi_fmul+0xb6>
 8000bb0:	230c      	movs	r3, #12
 8000bb2:	469a      	mov	sl, r3
 8000bb4:	3b09      	subs	r3, #9
 8000bb6:	25ff      	movs	r5, #255	; 0xff
 8000bb8:	469b      	mov	fp, r3
 8000bba:	e754      	b.n	8000a66 <__aeabi_fmul+0x36>
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f001 fa5b 	bl	8002078 <__clzsi2>
 8000bc2:	464a      	mov	r2, r9
 8000bc4:	1f43      	subs	r3, r0, #5
 8000bc6:	2576      	movs	r5, #118	; 0x76
 8000bc8:	409a      	lsls	r2, r3
 8000bca:	2300      	movs	r3, #0
 8000bcc:	426d      	negs	r5, r5
 8000bce:	4691      	mov	r9, r2
 8000bd0:	1a2d      	subs	r5, r5, r0
 8000bd2:	469a      	mov	sl, r3
 8000bd4:	469b      	mov	fp, r3
 8000bd6:	e746      	b.n	8000a66 <__aeabi_fmul+0x36>
 8000bd8:	4652      	mov	r2, sl
 8000bda:	2303      	movs	r3, #3
 8000bdc:	431a      	orrs	r2, r3
 8000bde:	4692      	mov	sl, r2
 8000be0:	2003      	movs	r0, #3
 8000be2:	e750      	b.n	8000a86 <__aeabi_fmul+0x56>
 8000be4:	0020      	movs	r0, r4
 8000be6:	f001 fa47 	bl	8002078 <__clzsi2>
 8000bea:	1f43      	subs	r3, r0, #5
 8000bec:	1a2d      	subs	r5, r5, r0
 8000bee:	409c      	lsls	r4, r3
 8000bf0:	3d76      	subs	r5, #118	; 0x76
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	e747      	b.n	8000a86 <__aeabi_fmul+0x56>
 8000bf6:	2380      	movs	r3, #128	; 0x80
 8000bf8:	2700      	movs	r7, #0
 8000bfa:	03db      	lsls	r3, r3, #15
 8000bfc:	22ff      	movs	r2, #255	; 0xff
 8000bfe:	e772      	b.n	8000ae6 <__aeabi_fmul+0xb6>
 8000c00:	4642      	mov	r2, r8
 8000c02:	e766      	b.n	8000ad2 <__aeabi_fmul+0xa2>
 8000c04:	464c      	mov	r4, r9
 8000c06:	0032      	movs	r2, r6
 8000c08:	4658      	mov	r0, fp
 8000c0a:	e762      	b.n	8000ad2 <__aeabi_fmul+0xa2>
 8000c0c:	2380      	movs	r3, #128	; 0x80
 8000c0e:	464a      	mov	r2, r9
 8000c10:	03db      	lsls	r3, r3, #15
 8000c12:	421a      	tst	r2, r3
 8000c14:	d022      	beq.n	8000c5c <__aeabi_fmul+0x22c>
 8000c16:	421c      	tst	r4, r3
 8000c18:	d120      	bne.n	8000c5c <__aeabi_fmul+0x22c>
 8000c1a:	4323      	orrs	r3, r4
 8000c1c:	025b      	lsls	r3, r3, #9
 8000c1e:	0a5b      	lsrs	r3, r3, #9
 8000c20:	4647      	mov	r7, r8
 8000c22:	22ff      	movs	r2, #255	; 0xff
 8000c24:	e75f      	b.n	8000ae6 <__aeabi_fmul+0xb6>
 8000c26:	2301      	movs	r3, #1
 8000c28:	1a9a      	subs	r2, r3, r2
 8000c2a:	2a1b      	cmp	r2, #27
 8000c2c:	dc21      	bgt.n	8000c72 <__aeabi_fmul+0x242>
 8000c2e:	0023      	movs	r3, r4
 8000c30:	9901      	ldr	r1, [sp, #4]
 8000c32:	40d3      	lsrs	r3, r2
 8000c34:	319e      	adds	r1, #158	; 0x9e
 8000c36:	408c      	lsls	r4, r1
 8000c38:	001a      	movs	r2, r3
 8000c3a:	0023      	movs	r3, r4
 8000c3c:	1e5c      	subs	r4, r3, #1
 8000c3e:	41a3      	sbcs	r3, r4
 8000c40:	4313      	orrs	r3, r2
 8000c42:	075a      	lsls	r2, r3, #29
 8000c44:	d004      	beq.n	8000c50 <__aeabi_fmul+0x220>
 8000c46:	220f      	movs	r2, #15
 8000c48:	401a      	ands	r2, r3
 8000c4a:	2a04      	cmp	r2, #4
 8000c4c:	d000      	beq.n	8000c50 <__aeabi_fmul+0x220>
 8000c4e:	3304      	adds	r3, #4
 8000c50:	015a      	lsls	r2, r3, #5
 8000c52:	d411      	bmi.n	8000c78 <__aeabi_fmul+0x248>
 8000c54:	019b      	lsls	r3, r3, #6
 8000c56:	0a5b      	lsrs	r3, r3, #9
 8000c58:	2200      	movs	r2, #0
 8000c5a:	e744      	b.n	8000ae6 <__aeabi_fmul+0xb6>
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	464a      	mov	r2, r9
 8000c60:	03db      	lsls	r3, r3, #15
 8000c62:	4313      	orrs	r3, r2
 8000c64:	025b      	lsls	r3, r3, #9
 8000c66:	0a5b      	lsrs	r3, r3, #9
 8000c68:	0037      	movs	r7, r6
 8000c6a:	22ff      	movs	r2, #255	; 0xff
 8000c6c:	e73b      	b.n	8000ae6 <__aeabi_fmul+0xb6>
 8000c6e:	9501      	str	r5, [sp, #4]
 8000c70:	e787      	b.n	8000b82 <__aeabi_fmul+0x152>
 8000c72:	2200      	movs	r2, #0
 8000c74:	2300      	movs	r3, #0
 8000c76:	e736      	b.n	8000ae6 <__aeabi_fmul+0xb6>
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e733      	b.n	8000ae6 <__aeabi_fmul+0xb6>
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	03db      	lsls	r3, r3, #15
 8000c82:	4323      	orrs	r3, r4
 8000c84:	025b      	lsls	r3, r3, #9
 8000c86:	0a5b      	lsrs	r3, r3, #9
 8000c88:	22ff      	movs	r2, #255	; 0xff
 8000c8a:	e72c      	b.n	8000ae6 <__aeabi_fmul+0xb6>
 8000c8c:	08006720 	.word	0x08006720
 8000c90:	f7ffffff 	.word	0xf7ffffff

08000c94 <__aeabi_fsub>:
 8000c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c96:	4647      	mov	r7, r8
 8000c98:	46ce      	mov	lr, r9
 8000c9a:	0044      	lsls	r4, r0, #1
 8000c9c:	0fc2      	lsrs	r2, r0, #31
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	0247      	lsls	r7, r0, #9
 8000ca2:	0248      	lsls	r0, r1, #9
 8000ca4:	0a40      	lsrs	r0, r0, #9
 8000ca6:	4684      	mov	ip, r0
 8000ca8:	4666      	mov	r6, ip
 8000caa:	0048      	lsls	r0, r1, #1
 8000cac:	0a7f      	lsrs	r7, r7, #9
 8000cae:	0e24      	lsrs	r4, r4, #24
 8000cb0:	00f6      	lsls	r6, r6, #3
 8000cb2:	0025      	movs	r5, r4
 8000cb4:	4690      	mov	r8, r2
 8000cb6:	00fb      	lsls	r3, r7, #3
 8000cb8:	0e00      	lsrs	r0, r0, #24
 8000cba:	0fc9      	lsrs	r1, r1, #31
 8000cbc:	46b1      	mov	r9, r6
 8000cbe:	28ff      	cmp	r0, #255	; 0xff
 8000cc0:	d100      	bne.n	8000cc4 <__aeabi_fsub+0x30>
 8000cc2:	e085      	b.n	8000dd0 <__aeabi_fsub+0x13c>
 8000cc4:	2601      	movs	r6, #1
 8000cc6:	4071      	eors	r1, r6
 8000cc8:	1a26      	subs	r6, r4, r0
 8000cca:	4291      	cmp	r1, r2
 8000ccc:	d057      	beq.n	8000d7e <__aeabi_fsub+0xea>
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	dd43      	ble.n	8000d5a <__aeabi_fsub+0xc6>
 8000cd2:	2800      	cmp	r0, #0
 8000cd4:	d000      	beq.n	8000cd8 <__aeabi_fsub+0x44>
 8000cd6:	e07f      	b.n	8000dd8 <__aeabi_fsub+0x144>
 8000cd8:	4649      	mov	r1, r9
 8000cda:	2900      	cmp	r1, #0
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_fsub+0x4c>
 8000cde:	e0aa      	b.n	8000e36 <__aeabi_fsub+0x1a2>
 8000ce0:	3e01      	subs	r6, #1
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d000      	beq.n	8000ce8 <__aeabi_fsub+0x54>
 8000ce6:	e0f7      	b.n	8000ed8 <__aeabi_fsub+0x244>
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	015a      	lsls	r2, r3, #5
 8000cec:	d400      	bmi.n	8000cf0 <__aeabi_fsub+0x5c>
 8000cee:	e08b      	b.n	8000e08 <__aeabi_fsub+0x174>
 8000cf0:	019b      	lsls	r3, r3, #6
 8000cf2:	099c      	lsrs	r4, r3, #6
 8000cf4:	0020      	movs	r0, r4
 8000cf6:	f001 f9bf 	bl	8002078 <__clzsi2>
 8000cfa:	3805      	subs	r0, #5
 8000cfc:	4084      	lsls	r4, r0
 8000cfe:	4285      	cmp	r5, r0
 8000d00:	dd00      	ble.n	8000d04 <__aeabi_fsub+0x70>
 8000d02:	e0d3      	b.n	8000eac <__aeabi_fsub+0x218>
 8000d04:	1b45      	subs	r5, r0, r5
 8000d06:	0023      	movs	r3, r4
 8000d08:	2020      	movs	r0, #32
 8000d0a:	3501      	adds	r5, #1
 8000d0c:	40eb      	lsrs	r3, r5
 8000d0e:	1b45      	subs	r5, r0, r5
 8000d10:	40ac      	lsls	r4, r5
 8000d12:	1e62      	subs	r2, r4, #1
 8000d14:	4194      	sbcs	r4, r2
 8000d16:	4323      	orrs	r3, r4
 8000d18:	2407      	movs	r4, #7
 8000d1a:	2500      	movs	r5, #0
 8000d1c:	401c      	ands	r4, r3
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4641      	mov	r1, r8
 8000d22:	400a      	ands	r2, r1
 8000d24:	2c00      	cmp	r4, #0
 8000d26:	d004      	beq.n	8000d32 <__aeabi_fsub+0x9e>
 8000d28:	210f      	movs	r1, #15
 8000d2a:	4019      	ands	r1, r3
 8000d2c:	2904      	cmp	r1, #4
 8000d2e:	d000      	beq.n	8000d32 <__aeabi_fsub+0x9e>
 8000d30:	3304      	adds	r3, #4
 8000d32:	0159      	lsls	r1, r3, #5
 8000d34:	d400      	bmi.n	8000d38 <__aeabi_fsub+0xa4>
 8000d36:	e080      	b.n	8000e3a <__aeabi_fsub+0x1a6>
 8000d38:	3501      	adds	r5, #1
 8000d3a:	b2ec      	uxtb	r4, r5
 8000d3c:	2dff      	cmp	r5, #255	; 0xff
 8000d3e:	d000      	beq.n	8000d42 <__aeabi_fsub+0xae>
 8000d40:	e0a3      	b.n	8000e8a <__aeabi_fsub+0x1f6>
 8000d42:	24ff      	movs	r4, #255	; 0xff
 8000d44:	2300      	movs	r3, #0
 8000d46:	025b      	lsls	r3, r3, #9
 8000d48:	05e4      	lsls	r4, r4, #23
 8000d4a:	0a58      	lsrs	r0, r3, #9
 8000d4c:	07d2      	lsls	r2, r2, #31
 8000d4e:	4320      	orrs	r0, r4
 8000d50:	4310      	orrs	r0, r2
 8000d52:	bc0c      	pop	{r2, r3}
 8000d54:	4690      	mov	r8, r2
 8000d56:	4699      	mov	r9, r3
 8000d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d174      	bne.n	8000e48 <__aeabi_fsub+0x1b4>
 8000d5e:	1c60      	adds	r0, r4, #1
 8000d60:	b2c0      	uxtb	r0, r0
 8000d62:	2801      	cmp	r0, #1
 8000d64:	dc00      	bgt.n	8000d68 <__aeabi_fsub+0xd4>
 8000d66:	e0a7      	b.n	8000eb8 <__aeabi_fsub+0x224>
 8000d68:	464a      	mov	r2, r9
 8000d6a:	1a9c      	subs	r4, r3, r2
 8000d6c:	0162      	lsls	r2, r4, #5
 8000d6e:	d500      	bpl.n	8000d72 <__aeabi_fsub+0xde>
 8000d70:	e0b6      	b.n	8000ee0 <__aeabi_fsub+0x24c>
 8000d72:	2c00      	cmp	r4, #0
 8000d74:	d1be      	bne.n	8000cf4 <__aeabi_fsub+0x60>
 8000d76:	2200      	movs	r2, #0
 8000d78:	2400      	movs	r4, #0
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e7e3      	b.n	8000d46 <__aeabi_fsub+0xb2>
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	dc00      	bgt.n	8000d84 <__aeabi_fsub+0xf0>
 8000d82:	e085      	b.n	8000e90 <__aeabi_fsub+0x1fc>
 8000d84:	2800      	cmp	r0, #0
 8000d86:	d046      	beq.n	8000e16 <__aeabi_fsub+0x182>
 8000d88:	2cff      	cmp	r4, #255	; 0xff
 8000d8a:	d049      	beq.n	8000e20 <__aeabi_fsub+0x18c>
 8000d8c:	2280      	movs	r2, #128	; 0x80
 8000d8e:	4648      	mov	r0, r9
 8000d90:	04d2      	lsls	r2, r2, #19
 8000d92:	4310      	orrs	r0, r2
 8000d94:	4681      	mov	r9, r0
 8000d96:	2201      	movs	r2, #1
 8000d98:	2e1b      	cmp	r6, #27
 8000d9a:	dc09      	bgt.n	8000db0 <__aeabi_fsub+0x11c>
 8000d9c:	2020      	movs	r0, #32
 8000d9e:	464c      	mov	r4, r9
 8000da0:	1b80      	subs	r0, r0, r6
 8000da2:	4084      	lsls	r4, r0
 8000da4:	464a      	mov	r2, r9
 8000da6:	0020      	movs	r0, r4
 8000da8:	40f2      	lsrs	r2, r6
 8000daa:	1e44      	subs	r4, r0, #1
 8000dac:	41a0      	sbcs	r0, r4
 8000dae:	4302      	orrs	r2, r0
 8000db0:	189b      	adds	r3, r3, r2
 8000db2:	015a      	lsls	r2, r3, #5
 8000db4:	d528      	bpl.n	8000e08 <__aeabi_fsub+0x174>
 8000db6:	3501      	adds	r5, #1
 8000db8:	2dff      	cmp	r5, #255	; 0xff
 8000dba:	d100      	bne.n	8000dbe <__aeabi_fsub+0x12a>
 8000dbc:	e0a8      	b.n	8000f10 <__aeabi_fsub+0x27c>
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	2407      	movs	r4, #7
 8000dc2:	4994      	ldr	r1, [pc, #592]	; (8001014 <__aeabi_fsub+0x380>)
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	085b      	lsrs	r3, r3, #1
 8000dc8:	400b      	ands	r3, r1
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	401c      	ands	r4, r3
 8000dce:	e7a6      	b.n	8000d1e <__aeabi_fsub+0x8a>
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_fsub+0x142>
 8000dd4:	e778      	b.n	8000cc8 <__aeabi_fsub+0x34>
 8000dd6:	e775      	b.n	8000cc4 <__aeabi_fsub+0x30>
 8000dd8:	2cff      	cmp	r4, #255	; 0xff
 8000dda:	d054      	beq.n	8000e86 <__aeabi_fsub+0x1f2>
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	4649      	mov	r1, r9
 8000de0:	04d2      	lsls	r2, r2, #19
 8000de2:	4311      	orrs	r1, r2
 8000de4:	4689      	mov	r9, r1
 8000de6:	2201      	movs	r2, #1
 8000de8:	2e1b      	cmp	r6, #27
 8000dea:	dc09      	bgt.n	8000e00 <__aeabi_fsub+0x16c>
 8000dec:	2120      	movs	r1, #32
 8000dee:	4648      	mov	r0, r9
 8000df0:	1b89      	subs	r1, r1, r6
 8000df2:	4088      	lsls	r0, r1
 8000df4:	464a      	mov	r2, r9
 8000df6:	0001      	movs	r1, r0
 8000df8:	40f2      	lsrs	r2, r6
 8000dfa:	1e48      	subs	r0, r1, #1
 8000dfc:	4181      	sbcs	r1, r0
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	1a9b      	subs	r3, r3, r2
 8000e02:	015a      	lsls	r2, r3, #5
 8000e04:	d500      	bpl.n	8000e08 <__aeabi_fsub+0x174>
 8000e06:	e773      	b.n	8000cf0 <__aeabi_fsub+0x5c>
 8000e08:	2201      	movs	r2, #1
 8000e0a:	4641      	mov	r1, r8
 8000e0c:	400a      	ands	r2, r1
 8000e0e:	0759      	lsls	r1, r3, #29
 8000e10:	d000      	beq.n	8000e14 <__aeabi_fsub+0x180>
 8000e12:	e789      	b.n	8000d28 <__aeabi_fsub+0x94>
 8000e14:	e011      	b.n	8000e3a <__aeabi_fsub+0x1a6>
 8000e16:	4648      	mov	r0, r9
 8000e18:	2800      	cmp	r0, #0
 8000e1a:	d158      	bne.n	8000ece <__aeabi_fsub+0x23a>
 8000e1c:	2cff      	cmp	r4, #255	; 0xff
 8000e1e:	d10c      	bne.n	8000e3a <__aeabi_fsub+0x1a6>
 8000e20:	08db      	lsrs	r3, r3, #3
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d100      	bne.n	8000e28 <__aeabi_fsub+0x194>
 8000e26:	e78c      	b.n	8000d42 <__aeabi_fsub+0xae>
 8000e28:	2080      	movs	r0, #128	; 0x80
 8000e2a:	03c0      	lsls	r0, r0, #15
 8000e2c:	4303      	orrs	r3, r0
 8000e2e:	025b      	lsls	r3, r3, #9
 8000e30:	0a5b      	lsrs	r3, r3, #9
 8000e32:	24ff      	movs	r4, #255	; 0xff
 8000e34:	e787      	b.n	8000d46 <__aeabi_fsub+0xb2>
 8000e36:	2cff      	cmp	r4, #255	; 0xff
 8000e38:	d025      	beq.n	8000e86 <__aeabi_fsub+0x1f2>
 8000e3a:	08db      	lsrs	r3, r3, #3
 8000e3c:	2dff      	cmp	r5, #255	; 0xff
 8000e3e:	d0f0      	beq.n	8000e22 <__aeabi_fsub+0x18e>
 8000e40:	025b      	lsls	r3, r3, #9
 8000e42:	0a5b      	lsrs	r3, r3, #9
 8000e44:	b2ec      	uxtb	r4, r5
 8000e46:	e77e      	b.n	8000d46 <__aeabi_fsub+0xb2>
 8000e48:	2c00      	cmp	r4, #0
 8000e4a:	d04d      	beq.n	8000ee8 <__aeabi_fsub+0x254>
 8000e4c:	28ff      	cmp	r0, #255	; 0xff
 8000e4e:	d018      	beq.n	8000e82 <__aeabi_fsub+0x1ee>
 8000e50:	2480      	movs	r4, #128	; 0x80
 8000e52:	04e4      	lsls	r4, r4, #19
 8000e54:	4272      	negs	r2, r6
 8000e56:	4323      	orrs	r3, r4
 8000e58:	2a1b      	cmp	r2, #27
 8000e5a:	dd00      	ble.n	8000e5e <__aeabi_fsub+0x1ca>
 8000e5c:	e0c4      	b.n	8000fe8 <__aeabi_fsub+0x354>
 8000e5e:	001c      	movs	r4, r3
 8000e60:	2520      	movs	r5, #32
 8000e62:	40d4      	lsrs	r4, r2
 8000e64:	1aaa      	subs	r2, r5, r2
 8000e66:	4093      	lsls	r3, r2
 8000e68:	1e5a      	subs	r2, r3, #1
 8000e6a:	4193      	sbcs	r3, r2
 8000e6c:	4323      	orrs	r3, r4
 8000e6e:	464a      	mov	r2, r9
 8000e70:	0005      	movs	r5, r0
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	4688      	mov	r8, r1
 8000e76:	e738      	b.n	8000cea <__aeabi_fsub+0x56>
 8000e78:	1c72      	adds	r2, r6, #1
 8000e7a:	d0f8      	beq.n	8000e6e <__aeabi_fsub+0x1da>
 8000e7c:	43f2      	mvns	r2, r6
 8000e7e:	28ff      	cmp	r0, #255	; 0xff
 8000e80:	d1ea      	bne.n	8000e58 <__aeabi_fsub+0x1c4>
 8000e82:	000a      	movs	r2, r1
 8000e84:	464b      	mov	r3, r9
 8000e86:	25ff      	movs	r5, #255	; 0xff
 8000e88:	e7d7      	b.n	8000e3a <__aeabi_fsub+0x1a6>
 8000e8a:	019b      	lsls	r3, r3, #6
 8000e8c:	0a5b      	lsrs	r3, r3, #9
 8000e8e:	e75a      	b.n	8000d46 <__aeabi_fsub+0xb2>
 8000e90:	2e00      	cmp	r6, #0
 8000e92:	d141      	bne.n	8000f18 <__aeabi_fsub+0x284>
 8000e94:	1c65      	adds	r5, r4, #1
 8000e96:	b2e9      	uxtb	r1, r5
 8000e98:	2901      	cmp	r1, #1
 8000e9a:	dd45      	ble.n	8000f28 <__aeabi_fsub+0x294>
 8000e9c:	2dff      	cmp	r5, #255	; 0xff
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_fsub+0x20e>
 8000ea0:	e74f      	b.n	8000d42 <__aeabi_fsub+0xae>
 8000ea2:	2407      	movs	r4, #7
 8000ea4:	444b      	add	r3, r9
 8000ea6:	085b      	lsrs	r3, r3, #1
 8000ea8:	401c      	ands	r4, r3
 8000eaa:	e738      	b.n	8000d1e <__aeabi_fsub+0x8a>
 8000eac:	2207      	movs	r2, #7
 8000eae:	4b5a      	ldr	r3, [pc, #360]	; (8001018 <__aeabi_fsub+0x384>)
 8000eb0:	1a2d      	subs	r5, r5, r0
 8000eb2:	4023      	ands	r3, r4
 8000eb4:	4014      	ands	r4, r2
 8000eb6:	e732      	b.n	8000d1e <__aeabi_fsub+0x8a>
 8000eb8:	2c00      	cmp	r4, #0
 8000eba:	d11d      	bne.n	8000ef8 <__aeabi_fsub+0x264>
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d17a      	bne.n	8000fb6 <__aeabi_fsub+0x322>
 8000ec0:	464b      	mov	r3, r9
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d100      	bne.n	8000ec8 <__aeabi_fsub+0x234>
 8000ec6:	e091      	b.n	8000fec <__aeabi_fsub+0x358>
 8000ec8:	000a      	movs	r2, r1
 8000eca:	2500      	movs	r5, #0
 8000ecc:	e7b5      	b.n	8000e3a <__aeabi_fsub+0x1a6>
 8000ece:	3e01      	subs	r6, #1
 8000ed0:	2e00      	cmp	r6, #0
 8000ed2:	d119      	bne.n	8000f08 <__aeabi_fsub+0x274>
 8000ed4:	444b      	add	r3, r9
 8000ed6:	e76c      	b.n	8000db2 <__aeabi_fsub+0x11e>
 8000ed8:	2cff      	cmp	r4, #255	; 0xff
 8000eda:	d184      	bne.n	8000de6 <__aeabi_fsub+0x152>
 8000edc:	25ff      	movs	r5, #255	; 0xff
 8000ede:	e7ac      	b.n	8000e3a <__aeabi_fsub+0x1a6>
 8000ee0:	464a      	mov	r2, r9
 8000ee2:	4688      	mov	r8, r1
 8000ee4:	1ad4      	subs	r4, r2, r3
 8000ee6:	e705      	b.n	8000cf4 <__aeabi_fsub+0x60>
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1c5      	bne.n	8000e78 <__aeabi_fsub+0x1e4>
 8000eec:	000a      	movs	r2, r1
 8000eee:	28ff      	cmp	r0, #255	; 0xff
 8000ef0:	d0c8      	beq.n	8000e84 <__aeabi_fsub+0x1f0>
 8000ef2:	0005      	movs	r5, r0
 8000ef4:	464b      	mov	r3, r9
 8000ef6:	e7a0      	b.n	8000e3a <__aeabi_fsub+0x1a6>
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d149      	bne.n	8000f90 <__aeabi_fsub+0x2fc>
 8000efc:	464b      	mov	r3, r9
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d077      	beq.n	8000ff2 <__aeabi_fsub+0x35e>
 8000f02:	000a      	movs	r2, r1
 8000f04:	25ff      	movs	r5, #255	; 0xff
 8000f06:	e798      	b.n	8000e3a <__aeabi_fsub+0x1a6>
 8000f08:	2cff      	cmp	r4, #255	; 0xff
 8000f0a:	d000      	beq.n	8000f0e <__aeabi_fsub+0x27a>
 8000f0c:	e743      	b.n	8000d96 <__aeabi_fsub+0x102>
 8000f0e:	e787      	b.n	8000e20 <__aeabi_fsub+0x18c>
 8000f10:	000a      	movs	r2, r1
 8000f12:	24ff      	movs	r4, #255	; 0xff
 8000f14:	2300      	movs	r3, #0
 8000f16:	e716      	b.n	8000d46 <__aeabi_fsub+0xb2>
 8000f18:	2c00      	cmp	r4, #0
 8000f1a:	d115      	bne.n	8000f48 <__aeabi_fsub+0x2b4>
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d157      	bne.n	8000fd0 <__aeabi_fsub+0x33c>
 8000f20:	28ff      	cmp	r0, #255	; 0xff
 8000f22:	d1e6      	bne.n	8000ef2 <__aeabi_fsub+0x25e>
 8000f24:	464b      	mov	r3, r9
 8000f26:	e77b      	b.n	8000e20 <__aeabi_fsub+0x18c>
 8000f28:	2c00      	cmp	r4, #0
 8000f2a:	d120      	bne.n	8000f6e <__aeabi_fsub+0x2da>
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d057      	beq.n	8000fe0 <__aeabi_fsub+0x34c>
 8000f30:	4649      	mov	r1, r9
 8000f32:	2900      	cmp	r1, #0
 8000f34:	d053      	beq.n	8000fde <__aeabi_fsub+0x34a>
 8000f36:	444b      	add	r3, r9
 8000f38:	015a      	lsls	r2, r3, #5
 8000f3a:	d568      	bpl.n	800100e <__aeabi_fsub+0x37a>
 8000f3c:	2407      	movs	r4, #7
 8000f3e:	4a36      	ldr	r2, [pc, #216]	; (8001018 <__aeabi_fsub+0x384>)
 8000f40:	401c      	ands	r4, r3
 8000f42:	2501      	movs	r5, #1
 8000f44:	4013      	ands	r3, r2
 8000f46:	e6ea      	b.n	8000d1e <__aeabi_fsub+0x8a>
 8000f48:	28ff      	cmp	r0, #255	; 0xff
 8000f4a:	d0eb      	beq.n	8000f24 <__aeabi_fsub+0x290>
 8000f4c:	2280      	movs	r2, #128	; 0x80
 8000f4e:	04d2      	lsls	r2, r2, #19
 8000f50:	4276      	negs	r6, r6
 8000f52:	4313      	orrs	r3, r2
 8000f54:	2e1b      	cmp	r6, #27
 8000f56:	dc53      	bgt.n	8001000 <__aeabi_fsub+0x36c>
 8000f58:	2520      	movs	r5, #32
 8000f5a:	1bad      	subs	r5, r5, r6
 8000f5c:	001a      	movs	r2, r3
 8000f5e:	40ab      	lsls	r3, r5
 8000f60:	40f2      	lsrs	r2, r6
 8000f62:	1e5c      	subs	r4, r3, #1
 8000f64:	41a3      	sbcs	r3, r4
 8000f66:	4313      	orrs	r3, r2
 8000f68:	444b      	add	r3, r9
 8000f6a:	0005      	movs	r5, r0
 8000f6c:	e721      	b.n	8000db2 <__aeabi_fsub+0x11e>
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0d8      	beq.n	8000f24 <__aeabi_fsub+0x290>
 8000f72:	4649      	mov	r1, r9
 8000f74:	2900      	cmp	r1, #0
 8000f76:	d100      	bne.n	8000f7a <__aeabi_fsub+0x2e6>
 8000f78:	e752      	b.n	8000e20 <__aeabi_fsub+0x18c>
 8000f7a:	2180      	movs	r1, #128	; 0x80
 8000f7c:	03c9      	lsls	r1, r1, #15
 8000f7e:	420f      	tst	r7, r1
 8000f80:	d100      	bne.n	8000f84 <__aeabi_fsub+0x2f0>
 8000f82:	e74d      	b.n	8000e20 <__aeabi_fsub+0x18c>
 8000f84:	4660      	mov	r0, ip
 8000f86:	4208      	tst	r0, r1
 8000f88:	d000      	beq.n	8000f8c <__aeabi_fsub+0x2f8>
 8000f8a:	e749      	b.n	8000e20 <__aeabi_fsub+0x18c>
 8000f8c:	464b      	mov	r3, r9
 8000f8e:	e747      	b.n	8000e20 <__aeabi_fsub+0x18c>
 8000f90:	4648      	mov	r0, r9
 8000f92:	25ff      	movs	r5, #255	; 0xff
 8000f94:	2800      	cmp	r0, #0
 8000f96:	d100      	bne.n	8000f9a <__aeabi_fsub+0x306>
 8000f98:	e74f      	b.n	8000e3a <__aeabi_fsub+0x1a6>
 8000f9a:	2280      	movs	r2, #128	; 0x80
 8000f9c:	03d2      	lsls	r2, r2, #15
 8000f9e:	4217      	tst	r7, r2
 8000fa0:	d004      	beq.n	8000fac <__aeabi_fsub+0x318>
 8000fa2:	4660      	mov	r0, ip
 8000fa4:	4210      	tst	r0, r2
 8000fa6:	d101      	bne.n	8000fac <__aeabi_fsub+0x318>
 8000fa8:	464b      	mov	r3, r9
 8000faa:	4688      	mov	r8, r1
 8000fac:	2201      	movs	r2, #1
 8000fae:	4641      	mov	r1, r8
 8000fb0:	25ff      	movs	r5, #255	; 0xff
 8000fb2:	400a      	ands	r2, r1
 8000fb4:	e741      	b.n	8000e3a <__aeabi_fsub+0x1a6>
 8000fb6:	4648      	mov	r0, r9
 8000fb8:	2800      	cmp	r0, #0
 8000fba:	d01f      	beq.n	8000ffc <__aeabi_fsub+0x368>
 8000fbc:	1a1a      	subs	r2, r3, r0
 8000fbe:	0150      	lsls	r0, r2, #5
 8000fc0:	d520      	bpl.n	8001004 <__aeabi_fsub+0x370>
 8000fc2:	464a      	mov	r2, r9
 8000fc4:	2407      	movs	r4, #7
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	401c      	ands	r4, r3
 8000fca:	4688      	mov	r8, r1
 8000fcc:	2500      	movs	r5, #0
 8000fce:	e6a6      	b.n	8000d1e <__aeabi_fsub+0x8a>
 8000fd0:	1c74      	adds	r4, r6, #1
 8000fd2:	d0c9      	beq.n	8000f68 <__aeabi_fsub+0x2d4>
 8000fd4:	43f6      	mvns	r6, r6
 8000fd6:	28ff      	cmp	r0, #255	; 0xff
 8000fd8:	d1bc      	bne.n	8000f54 <__aeabi_fsub+0x2c0>
 8000fda:	464b      	mov	r3, r9
 8000fdc:	e720      	b.n	8000e20 <__aeabi_fsub+0x18c>
 8000fde:	4699      	mov	r9, r3
 8000fe0:	464b      	mov	r3, r9
 8000fe2:	2500      	movs	r5, #0
 8000fe4:	08db      	lsrs	r3, r3, #3
 8000fe6:	e72b      	b.n	8000e40 <__aeabi_fsub+0x1ac>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e740      	b.n	8000e6e <__aeabi_fsub+0x1da>
 8000fec:	2200      	movs	r2, #0
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e6a9      	b.n	8000d46 <__aeabi_fsub+0xb2>
 8000ff2:	2380      	movs	r3, #128	; 0x80
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	03db      	lsls	r3, r3, #15
 8000ff8:	24ff      	movs	r4, #255	; 0xff
 8000ffa:	e6a4      	b.n	8000d46 <__aeabi_fsub+0xb2>
 8000ffc:	2500      	movs	r5, #0
 8000ffe:	e71c      	b.n	8000e3a <__aeabi_fsub+0x1a6>
 8001000:	2301      	movs	r3, #1
 8001002:	e7b1      	b.n	8000f68 <__aeabi_fsub+0x2d4>
 8001004:	2a00      	cmp	r2, #0
 8001006:	d0f1      	beq.n	8000fec <__aeabi_fsub+0x358>
 8001008:	0013      	movs	r3, r2
 800100a:	2500      	movs	r5, #0
 800100c:	e6fc      	b.n	8000e08 <__aeabi_fsub+0x174>
 800100e:	2500      	movs	r5, #0
 8001010:	e6fa      	b.n	8000e08 <__aeabi_fsub+0x174>
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	7dffffff 	.word	0x7dffffff
 8001018:	fbffffff 	.word	0xfbffffff

0800101c <__aeabi_f2iz>:
 800101c:	0241      	lsls	r1, r0, #9
 800101e:	0042      	lsls	r2, r0, #1
 8001020:	0fc3      	lsrs	r3, r0, #31
 8001022:	0a49      	lsrs	r1, r1, #9
 8001024:	0e12      	lsrs	r2, r2, #24
 8001026:	2000      	movs	r0, #0
 8001028:	2a7e      	cmp	r2, #126	; 0x7e
 800102a:	d90d      	bls.n	8001048 <__aeabi_f2iz+0x2c>
 800102c:	2a9d      	cmp	r2, #157	; 0x9d
 800102e:	d80c      	bhi.n	800104a <__aeabi_f2iz+0x2e>
 8001030:	2080      	movs	r0, #128	; 0x80
 8001032:	0400      	lsls	r0, r0, #16
 8001034:	4301      	orrs	r1, r0
 8001036:	2a95      	cmp	r2, #149	; 0x95
 8001038:	dc0a      	bgt.n	8001050 <__aeabi_f2iz+0x34>
 800103a:	2096      	movs	r0, #150	; 0x96
 800103c:	1a82      	subs	r2, r0, r2
 800103e:	40d1      	lsrs	r1, r2
 8001040:	4248      	negs	r0, r1
 8001042:	2b00      	cmp	r3, #0
 8001044:	d100      	bne.n	8001048 <__aeabi_f2iz+0x2c>
 8001046:	0008      	movs	r0, r1
 8001048:	4770      	bx	lr
 800104a:	4a03      	ldr	r2, [pc, #12]	; (8001058 <__aeabi_f2iz+0x3c>)
 800104c:	1898      	adds	r0, r3, r2
 800104e:	e7fb      	b.n	8001048 <__aeabi_f2iz+0x2c>
 8001050:	3a96      	subs	r2, #150	; 0x96
 8001052:	4091      	lsls	r1, r2
 8001054:	e7f4      	b.n	8001040 <__aeabi_f2iz+0x24>
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	7fffffff 	.word	0x7fffffff

0800105c <__aeabi_i2f>:
 800105c:	b570      	push	{r4, r5, r6, lr}
 800105e:	2800      	cmp	r0, #0
 8001060:	d03d      	beq.n	80010de <__aeabi_i2f+0x82>
 8001062:	17c3      	asrs	r3, r0, #31
 8001064:	18c5      	adds	r5, r0, r3
 8001066:	405d      	eors	r5, r3
 8001068:	0fc4      	lsrs	r4, r0, #31
 800106a:	0028      	movs	r0, r5
 800106c:	f001 f804 	bl	8002078 <__clzsi2>
 8001070:	229e      	movs	r2, #158	; 0x9e
 8001072:	1a12      	subs	r2, r2, r0
 8001074:	2a96      	cmp	r2, #150	; 0x96
 8001076:	dc07      	bgt.n	8001088 <__aeabi_i2f+0x2c>
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	2808      	cmp	r0, #8
 800107c:	dd33      	ble.n	80010e6 <__aeabi_i2f+0x8a>
 800107e:	3808      	subs	r0, #8
 8001080:	4085      	lsls	r5, r0
 8001082:	0268      	lsls	r0, r5, #9
 8001084:	0a40      	lsrs	r0, r0, #9
 8001086:	e023      	b.n	80010d0 <__aeabi_i2f+0x74>
 8001088:	2a99      	cmp	r2, #153	; 0x99
 800108a:	dd0b      	ble.n	80010a4 <__aeabi_i2f+0x48>
 800108c:	2305      	movs	r3, #5
 800108e:	0029      	movs	r1, r5
 8001090:	1a1b      	subs	r3, r3, r0
 8001092:	40d9      	lsrs	r1, r3
 8001094:	0003      	movs	r3, r0
 8001096:	331b      	adds	r3, #27
 8001098:	409d      	lsls	r5, r3
 800109a:	002b      	movs	r3, r5
 800109c:	1e5d      	subs	r5, r3, #1
 800109e:	41ab      	sbcs	r3, r5
 80010a0:	4319      	orrs	r1, r3
 80010a2:	000d      	movs	r5, r1
 80010a4:	2805      	cmp	r0, #5
 80010a6:	dd01      	ble.n	80010ac <__aeabi_i2f+0x50>
 80010a8:	1f43      	subs	r3, r0, #5
 80010aa:	409d      	lsls	r5, r3
 80010ac:	002b      	movs	r3, r5
 80010ae:	490f      	ldr	r1, [pc, #60]	; (80010ec <__aeabi_i2f+0x90>)
 80010b0:	400b      	ands	r3, r1
 80010b2:	076e      	lsls	r6, r5, #29
 80010b4:	d009      	beq.n	80010ca <__aeabi_i2f+0x6e>
 80010b6:	260f      	movs	r6, #15
 80010b8:	4035      	ands	r5, r6
 80010ba:	2d04      	cmp	r5, #4
 80010bc:	d005      	beq.n	80010ca <__aeabi_i2f+0x6e>
 80010be:	3304      	adds	r3, #4
 80010c0:	015d      	lsls	r5, r3, #5
 80010c2:	d502      	bpl.n	80010ca <__aeabi_i2f+0x6e>
 80010c4:	229f      	movs	r2, #159	; 0x9f
 80010c6:	400b      	ands	r3, r1
 80010c8:	1a12      	subs	r2, r2, r0
 80010ca:	019b      	lsls	r3, r3, #6
 80010cc:	0a58      	lsrs	r0, r3, #9
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	0240      	lsls	r0, r0, #9
 80010d2:	05d2      	lsls	r2, r2, #23
 80010d4:	0a40      	lsrs	r0, r0, #9
 80010d6:	07e4      	lsls	r4, r4, #31
 80010d8:	4310      	orrs	r0, r2
 80010da:	4320      	orrs	r0, r4
 80010dc:	bd70      	pop	{r4, r5, r6, pc}
 80010de:	2400      	movs	r4, #0
 80010e0:	2200      	movs	r2, #0
 80010e2:	2000      	movs	r0, #0
 80010e4:	e7f4      	b.n	80010d0 <__aeabi_i2f+0x74>
 80010e6:	0268      	lsls	r0, r5, #9
 80010e8:	0a40      	lsrs	r0, r0, #9
 80010ea:	e7f1      	b.n	80010d0 <__aeabi_i2f+0x74>
 80010ec:	fbffffff 	.word	0xfbffffff

080010f0 <__aeabi_ui2f>:
 80010f0:	b570      	push	{r4, r5, r6, lr}
 80010f2:	1e04      	subs	r4, r0, #0
 80010f4:	d034      	beq.n	8001160 <__aeabi_ui2f+0x70>
 80010f6:	f000 ffbf 	bl	8002078 <__clzsi2>
 80010fa:	229e      	movs	r2, #158	; 0x9e
 80010fc:	1a12      	subs	r2, r2, r0
 80010fe:	2a96      	cmp	r2, #150	; 0x96
 8001100:	dc07      	bgt.n	8001112 <__aeabi_ui2f+0x22>
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	2808      	cmp	r0, #8
 8001106:	dd2e      	ble.n	8001166 <__aeabi_ui2f+0x76>
 8001108:	3808      	subs	r0, #8
 800110a:	4084      	lsls	r4, r0
 800110c:	0260      	lsls	r0, r4, #9
 800110e:	0a40      	lsrs	r0, r0, #9
 8001110:	e021      	b.n	8001156 <__aeabi_ui2f+0x66>
 8001112:	2a99      	cmp	r2, #153	; 0x99
 8001114:	dd09      	ble.n	800112a <__aeabi_ui2f+0x3a>
 8001116:	0003      	movs	r3, r0
 8001118:	0021      	movs	r1, r4
 800111a:	331b      	adds	r3, #27
 800111c:	4099      	lsls	r1, r3
 800111e:	1e4b      	subs	r3, r1, #1
 8001120:	4199      	sbcs	r1, r3
 8001122:	2305      	movs	r3, #5
 8001124:	1a1b      	subs	r3, r3, r0
 8001126:	40dc      	lsrs	r4, r3
 8001128:	430c      	orrs	r4, r1
 800112a:	2805      	cmp	r0, #5
 800112c:	dd01      	ble.n	8001132 <__aeabi_ui2f+0x42>
 800112e:	1f43      	subs	r3, r0, #5
 8001130:	409c      	lsls	r4, r3
 8001132:	0023      	movs	r3, r4
 8001134:	490d      	ldr	r1, [pc, #52]	; (800116c <__aeabi_ui2f+0x7c>)
 8001136:	400b      	ands	r3, r1
 8001138:	0765      	lsls	r5, r4, #29
 800113a:	d009      	beq.n	8001150 <__aeabi_ui2f+0x60>
 800113c:	250f      	movs	r5, #15
 800113e:	402c      	ands	r4, r5
 8001140:	2c04      	cmp	r4, #4
 8001142:	d005      	beq.n	8001150 <__aeabi_ui2f+0x60>
 8001144:	3304      	adds	r3, #4
 8001146:	015c      	lsls	r4, r3, #5
 8001148:	d502      	bpl.n	8001150 <__aeabi_ui2f+0x60>
 800114a:	229f      	movs	r2, #159	; 0x9f
 800114c:	400b      	ands	r3, r1
 800114e:	1a12      	subs	r2, r2, r0
 8001150:	019b      	lsls	r3, r3, #6
 8001152:	0a58      	lsrs	r0, r3, #9
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	0240      	lsls	r0, r0, #9
 8001158:	05d2      	lsls	r2, r2, #23
 800115a:	0a40      	lsrs	r0, r0, #9
 800115c:	4310      	orrs	r0, r2
 800115e:	bd70      	pop	{r4, r5, r6, pc}
 8001160:	2200      	movs	r2, #0
 8001162:	2000      	movs	r0, #0
 8001164:	e7f7      	b.n	8001156 <__aeabi_ui2f+0x66>
 8001166:	0260      	lsls	r0, r4, #9
 8001168:	0a40      	lsrs	r0, r0, #9
 800116a:	e7f4      	b.n	8001156 <__aeabi_ui2f+0x66>
 800116c:	fbffffff 	.word	0xfbffffff

08001170 <__eqdf2>:
 8001170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001172:	464f      	mov	r7, r9
 8001174:	4646      	mov	r6, r8
 8001176:	46d6      	mov	lr, sl
 8001178:	4684      	mov	ip, r0
 800117a:	b5c0      	push	{r6, r7, lr}
 800117c:	4680      	mov	r8, r0
 800117e:	4e19      	ldr	r6, [pc, #100]	; (80011e4 <__eqdf2+0x74>)
 8001180:	0318      	lsls	r0, r3, #12
 8001182:	030f      	lsls	r7, r1, #12
 8001184:	004d      	lsls	r5, r1, #1
 8001186:	0b00      	lsrs	r0, r0, #12
 8001188:	005c      	lsls	r4, r3, #1
 800118a:	4682      	mov	sl, r0
 800118c:	0b3f      	lsrs	r7, r7, #12
 800118e:	0d6d      	lsrs	r5, r5, #21
 8001190:	0fc9      	lsrs	r1, r1, #31
 8001192:	4691      	mov	r9, r2
 8001194:	0d64      	lsrs	r4, r4, #21
 8001196:	0fdb      	lsrs	r3, r3, #31
 8001198:	2001      	movs	r0, #1
 800119a:	42b5      	cmp	r5, r6
 800119c:	d00a      	beq.n	80011b4 <__eqdf2+0x44>
 800119e:	42b4      	cmp	r4, r6
 80011a0:	d003      	beq.n	80011aa <__eqdf2+0x3a>
 80011a2:	42a5      	cmp	r5, r4
 80011a4:	d101      	bne.n	80011aa <__eqdf2+0x3a>
 80011a6:	4557      	cmp	r7, sl
 80011a8:	d00c      	beq.n	80011c4 <__eqdf2+0x54>
 80011aa:	bc1c      	pop	{r2, r3, r4}
 80011ac:	4690      	mov	r8, r2
 80011ae:	4699      	mov	r9, r3
 80011b0:	46a2      	mov	sl, r4
 80011b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011b4:	4666      	mov	r6, ip
 80011b6:	433e      	orrs	r6, r7
 80011b8:	d1f7      	bne.n	80011aa <__eqdf2+0x3a>
 80011ba:	42ac      	cmp	r4, r5
 80011bc:	d1f5      	bne.n	80011aa <__eqdf2+0x3a>
 80011be:	4654      	mov	r4, sl
 80011c0:	4314      	orrs	r4, r2
 80011c2:	d1f2      	bne.n	80011aa <__eqdf2+0x3a>
 80011c4:	2001      	movs	r0, #1
 80011c6:	45c8      	cmp	r8, r9
 80011c8:	d1ef      	bne.n	80011aa <__eqdf2+0x3a>
 80011ca:	4299      	cmp	r1, r3
 80011cc:	d007      	beq.n	80011de <__eqdf2+0x6e>
 80011ce:	2d00      	cmp	r5, #0
 80011d0:	d1eb      	bne.n	80011aa <__eqdf2+0x3a>
 80011d2:	4663      	mov	r3, ip
 80011d4:	431f      	orrs	r7, r3
 80011d6:	0038      	movs	r0, r7
 80011d8:	1e47      	subs	r7, r0, #1
 80011da:	41b8      	sbcs	r0, r7
 80011dc:	e7e5      	b.n	80011aa <__eqdf2+0x3a>
 80011de:	2000      	movs	r0, #0
 80011e0:	e7e3      	b.n	80011aa <__eqdf2+0x3a>
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	000007ff 	.word	0x000007ff

080011e8 <__gedf2>:
 80011e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ea:	464f      	mov	r7, r9
 80011ec:	4646      	mov	r6, r8
 80011ee:	46d6      	mov	lr, sl
 80011f0:	004d      	lsls	r5, r1, #1
 80011f2:	b5c0      	push	{r6, r7, lr}
 80011f4:	030e      	lsls	r6, r1, #12
 80011f6:	0fc9      	lsrs	r1, r1, #31
 80011f8:	468a      	mov	sl, r1
 80011fa:	492c      	ldr	r1, [pc, #176]	; (80012ac <__gedf2+0xc4>)
 80011fc:	031f      	lsls	r7, r3, #12
 80011fe:	005c      	lsls	r4, r3, #1
 8001200:	4680      	mov	r8, r0
 8001202:	0b36      	lsrs	r6, r6, #12
 8001204:	0d6d      	lsrs	r5, r5, #21
 8001206:	4691      	mov	r9, r2
 8001208:	0b3f      	lsrs	r7, r7, #12
 800120a:	0d64      	lsrs	r4, r4, #21
 800120c:	0fdb      	lsrs	r3, r3, #31
 800120e:	428d      	cmp	r5, r1
 8001210:	d01e      	beq.n	8001250 <__gedf2+0x68>
 8001212:	428c      	cmp	r4, r1
 8001214:	d016      	beq.n	8001244 <__gedf2+0x5c>
 8001216:	2d00      	cmp	r5, #0
 8001218:	d11e      	bne.n	8001258 <__gedf2+0x70>
 800121a:	4330      	orrs	r0, r6
 800121c:	4684      	mov	ip, r0
 800121e:	2c00      	cmp	r4, #0
 8001220:	d101      	bne.n	8001226 <__gedf2+0x3e>
 8001222:	433a      	orrs	r2, r7
 8001224:	d023      	beq.n	800126e <__gedf2+0x86>
 8001226:	4662      	mov	r2, ip
 8001228:	2a00      	cmp	r2, #0
 800122a:	d01a      	beq.n	8001262 <__gedf2+0x7a>
 800122c:	459a      	cmp	sl, r3
 800122e:	d029      	beq.n	8001284 <__gedf2+0x9c>
 8001230:	4651      	mov	r1, sl
 8001232:	2002      	movs	r0, #2
 8001234:	3901      	subs	r1, #1
 8001236:	4008      	ands	r0, r1
 8001238:	3801      	subs	r0, #1
 800123a:	bc1c      	pop	{r2, r3, r4}
 800123c:	4690      	mov	r8, r2
 800123e:	4699      	mov	r9, r3
 8001240:	46a2      	mov	sl, r4
 8001242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001244:	0039      	movs	r1, r7
 8001246:	4311      	orrs	r1, r2
 8001248:	d0e5      	beq.n	8001216 <__gedf2+0x2e>
 800124a:	2002      	movs	r0, #2
 800124c:	4240      	negs	r0, r0
 800124e:	e7f4      	b.n	800123a <__gedf2+0x52>
 8001250:	4330      	orrs	r0, r6
 8001252:	d1fa      	bne.n	800124a <__gedf2+0x62>
 8001254:	42ac      	cmp	r4, r5
 8001256:	d00f      	beq.n	8001278 <__gedf2+0x90>
 8001258:	2c00      	cmp	r4, #0
 800125a:	d10f      	bne.n	800127c <__gedf2+0x94>
 800125c:	433a      	orrs	r2, r7
 800125e:	d0e7      	beq.n	8001230 <__gedf2+0x48>
 8001260:	e00c      	b.n	800127c <__gedf2+0x94>
 8001262:	2201      	movs	r2, #1
 8001264:	3b01      	subs	r3, #1
 8001266:	4393      	bics	r3, r2
 8001268:	0018      	movs	r0, r3
 800126a:	3001      	adds	r0, #1
 800126c:	e7e5      	b.n	800123a <__gedf2+0x52>
 800126e:	4663      	mov	r3, ip
 8001270:	2000      	movs	r0, #0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0e1      	beq.n	800123a <__gedf2+0x52>
 8001276:	e7db      	b.n	8001230 <__gedf2+0x48>
 8001278:	433a      	orrs	r2, r7
 800127a:	d1e6      	bne.n	800124a <__gedf2+0x62>
 800127c:	459a      	cmp	sl, r3
 800127e:	d1d7      	bne.n	8001230 <__gedf2+0x48>
 8001280:	42a5      	cmp	r5, r4
 8001282:	dcd5      	bgt.n	8001230 <__gedf2+0x48>
 8001284:	42a5      	cmp	r5, r4
 8001286:	db05      	blt.n	8001294 <__gedf2+0xac>
 8001288:	42be      	cmp	r6, r7
 800128a:	d8d1      	bhi.n	8001230 <__gedf2+0x48>
 800128c:	d008      	beq.n	80012a0 <__gedf2+0xb8>
 800128e:	2000      	movs	r0, #0
 8001290:	42be      	cmp	r6, r7
 8001292:	d2d2      	bcs.n	800123a <__gedf2+0x52>
 8001294:	4650      	mov	r0, sl
 8001296:	2301      	movs	r3, #1
 8001298:	3801      	subs	r0, #1
 800129a:	4398      	bics	r0, r3
 800129c:	3001      	adds	r0, #1
 800129e:	e7cc      	b.n	800123a <__gedf2+0x52>
 80012a0:	45c8      	cmp	r8, r9
 80012a2:	d8c5      	bhi.n	8001230 <__gedf2+0x48>
 80012a4:	2000      	movs	r0, #0
 80012a6:	45c8      	cmp	r8, r9
 80012a8:	d3f4      	bcc.n	8001294 <__gedf2+0xac>
 80012aa:	e7c6      	b.n	800123a <__gedf2+0x52>
 80012ac:	000007ff 	.word	0x000007ff

080012b0 <__ledf2>:
 80012b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b2:	464f      	mov	r7, r9
 80012b4:	4646      	mov	r6, r8
 80012b6:	46d6      	mov	lr, sl
 80012b8:	004d      	lsls	r5, r1, #1
 80012ba:	b5c0      	push	{r6, r7, lr}
 80012bc:	030e      	lsls	r6, r1, #12
 80012be:	0fc9      	lsrs	r1, r1, #31
 80012c0:	468a      	mov	sl, r1
 80012c2:	492e      	ldr	r1, [pc, #184]	; (800137c <__ledf2+0xcc>)
 80012c4:	031f      	lsls	r7, r3, #12
 80012c6:	005c      	lsls	r4, r3, #1
 80012c8:	4680      	mov	r8, r0
 80012ca:	0b36      	lsrs	r6, r6, #12
 80012cc:	0d6d      	lsrs	r5, r5, #21
 80012ce:	4691      	mov	r9, r2
 80012d0:	0b3f      	lsrs	r7, r7, #12
 80012d2:	0d64      	lsrs	r4, r4, #21
 80012d4:	0fdb      	lsrs	r3, r3, #31
 80012d6:	428d      	cmp	r5, r1
 80012d8:	d018      	beq.n	800130c <__ledf2+0x5c>
 80012da:	428c      	cmp	r4, r1
 80012dc:	d011      	beq.n	8001302 <__ledf2+0x52>
 80012de:	2d00      	cmp	r5, #0
 80012e0:	d118      	bne.n	8001314 <__ledf2+0x64>
 80012e2:	4330      	orrs	r0, r6
 80012e4:	4684      	mov	ip, r0
 80012e6:	2c00      	cmp	r4, #0
 80012e8:	d11e      	bne.n	8001328 <__ledf2+0x78>
 80012ea:	433a      	orrs	r2, r7
 80012ec:	d11c      	bne.n	8001328 <__ledf2+0x78>
 80012ee:	4663      	mov	r3, ip
 80012f0:	2000      	movs	r0, #0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d030      	beq.n	8001358 <__ledf2+0xa8>
 80012f6:	4651      	mov	r1, sl
 80012f8:	2002      	movs	r0, #2
 80012fa:	3901      	subs	r1, #1
 80012fc:	4008      	ands	r0, r1
 80012fe:	3801      	subs	r0, #1
 8001300:	e02a      	b.n	8001358 <__ledf2+0xa8>
 8001302:	0039      	movs	r1, r7
 8001304:	4311      	orrs	r1, r2
 8001306:	d0ea      	beq.n	80012de <__ledf2+0x2e>
 8001308:	2002      	movs	r0, #2
 800130a:	e025      	b.n	8001358 <__ledf2+0xa8>
 800130c:	4330      	orrs	r0, r6
 800130e:	d1fb      	bne.n	8001308 <__ledf2+0x58>
 8001310:	42ac      	cmp	r4, r5
 8001312:	d026      	beq.n	8001362 <__ledf2+0xb2>
 8001314:	2c00      	cmp	r4, #0
 8001316:	d126      	bne.n	8001366 <__ledf2+0xb6>
 8001318:	433a      	orrs	r2, r7
 800131a:	d124      	bne.n	8001366 <__ledf2+0xb6>
 800131c:	4651      	mov	r1, sl
 800131e:	2002      	movs	r0, #2
 8001320:	3901      	subs	r1, #1
 8001322:	4008      	ands	r0, r1
 8001324:	3801      	subs	r0, #1
 8001326:	e017      	b.n	8001358 <__ledf2+0xa8>
 8001328:	4662      	mov	r2, ip
 800132a:	2a00      	cmp	r2, #0
 800132c:	d00f      	beq.n	800134e <__ledf2+0x9e>
 800132e:	459a      	cmp	sl, r3
 8001330:	d1e1      	bne.n	80012f6 <__ledf2+0x46>
 8001332:	42a5      	cmp	r5, r4
 8001334:	db05      	blt.n	8001342 <__ledf2+0x92>
 8001336:	42be      	cmp	r6, r7
 8001338:	d8dd      	bhi.n	80012f6 <__ledf2+0x46>
 800133a:	d019      	beq.n	8001370 <__ledf2+0xc0>
 800133c:	2000      	movs	r0, #0
 800133e:	42be      	cmp	r6, r7
 8001340:	d20a      	bcs.n	8001358 <__ledf2+0xa8>
 8001342:	4650      	mov	r0, sl
 8001344:	2301      	movs	r3, #1
 8001346:	3801      	subs	r0, #1
 8001348:	4398      	bics	r0, r3
 800134a:	3001      	adds	r0, #1
 800134c:	e004      	b.n	8001358 <__ledf2+0xa8>
 800134e:	2201      	movs	r2, #1
 8001350:	3b01      	subs	r3, #1
 8001352:	4393      	bics	r3, r2
 8001354:	0018      	movs	r0, r3
 8001356:	3001      	adds	r0, #1
 8001358:	bc1c      	pop	{r2, r3, r4}
 800135a:	4690      	mov	r8, r2
 800135c:	4699      	mov	r9, r3
 800135e:	46a2      	mov	sl, r4
 8001360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001362:	433a      	orrs	r2, r7
 8001364:	d1d0      	bne.n	8001308 <__ledf2+0x58>
 8001366:	459a      	cmp	sl, r3
 8001368:	d1c5      	bne.n	80012f6 <__ledf2+0x46>
 800136a:	42a5      	cmp	r5, r4
 800136c:	dcc3      	bgt.n	80012f6 <__ledf2+0x46>
 800136e:	e7e0      	b.n	8001332 <__ledf2+0x82>
 8001370:	45c8      	cmp	r8, r9
 8001372:	d8c0      	bhi.n	80012f6 <__ledf2+0x46>
 8001374:	2000      	movs	r0, #0
 8001376:	45c8      	cmp	r8, r9
 8001378:	d3e3      	bcc.n	8001342 <__ledf2+0x92>
 800137a:	e7ed      	b.n	8001358 <__ledf2+0xa8>
 800137c:	000007ff 	.word	0x000007ff

08001380 <__aeabi_dmul>:
 8001380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001382:	4657      	mov	r7, sl
 8001384:	46de      	mov	lr, fp
 8001386:	464e      	mov	r6, r9
 8001388:	4645      	mov	r5, r8
 800138a:	b5e0      	push	{r5, r6, r7, lr}
 800138c:	4683      	mov	fp, r0
 800138e:	0006      	movs	r6, r0
 8001390:	030f      	lsls	r7, r1, #12
 8001392:	0048      	lsls	r0, r1, #1
 8001394:	b087      	sub	sp, #28
 8001396:	4692      	mov	sl, r2
 8001398:	001d      	movs	r5, r3
 800139a:	0b3f      	lsrs	r7, r7, #12
 800139c:	0d40      	lsrs	r0, r0, #21
 800139e:	0fcc      	lsrs	r4, r1, #31
 80013a0:	2800      	cmp	r0, #0
 80013a2:	d100      	bne.n	80013a6 <__aeabi_dmul+0x26>
 80013a4:	e06f      	b.n	8001486 <__aeabi_dmul+0x106>
 80013a6:	4bde      	ldr	r3, [pc, #888]	; (8001720 <__aeabi_dmul+0x3a0>)
 80013a8:	4298      	cmp	r0, r3
 80013aa:	d038      	beq.n	800141e <__aeabi_dmul+0x9e>
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	00ff      	lsls	r7, r7, #3
 80013b0:	041b      	lsls	r3, r3, #16
 80013b2:	431f      	orrs	r7, r3
 80013b4:	0f73      	lsrs	r3, r6, #29
 80013b6:	433b      	orrs	r3, r7
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	4bda      	ldr	r3, [pc, #872]	; (8001724 <__aeabi_dmul+0x3a4>)
 80013bc:	2700      	movs	r7, #0
 80013be:	4699      	mov	r9, r3
 80013c0:	2300      	movs	r3, #0
 80013c2:	469b      	mov	fp, r3
 80013c4:	00f6      	lsls	r6, r6, #3
 80013c6:	4481      	add	r9, r0
 80013c8:	032b      	lsls	r3, r5, #12
 80013ca:	0069      	lsls	r1, r5, #1
 80013cc:	0b1b      	lsrs	r3, r3, #12
 80013ce:	4652      	mov	r2, sl
 80013d0:	4698      	mov	r8, r3
 80013d2:	0d49      	lsrs	r1, r1, #21
 80013d4:	0fed      	lsrs	r5, r5, #31
 80013d6:	2900      	cmp	r1, #0
 80013d8:	d100      	bne.n	80013dc <__aeabi_dmul+0x5c>
 80013da:	e085      	b.n	80014e8 <__aeabi_dmul+0x168>
 80013dc:	4bd0      	ldr	r3, [pc, #832]	; (8001720 <__aeabi_dmul+0x3a0>)
 80013de:	4299      	cmp	r1, r3
 80013e0:	d100      	bne.n	80013e4 <__aeabi_dmul+0x64>
 80013e2:	e073      	b.n	80014cc <__aeabi_dmul+0x14c>
 80013e4:	4643      	mov	r3, r8
 80013e6:	00da      	lsls	r2, r3, #3
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	041b      	lsls	r3, r3, #16
 80013ec:	4313      	orrs	r3, r2
 80013ee:	4652      	mov	r2, sl
 80013f0:	48cc      	ldr	r0, [pc, #816]	; (8001724 <__aeabi_dmul+0x3a4>)
 80013f2:	0f52      	lsrs	r2, r2, #29
 80013f4:	4684      	mov	ip, r0
 80013f6:	4313      	orrs	r3, r2
 80013f8:	4652      	mov	r2, sl
 80013fa:	2000      	movs	r0, #0
 80013fc:	4461      	add	r1, ip
 80013fe:	00d2      	lsls	r2, r2, #3
 8001400:	4489      	add	r9, r1
 8001402:	0021      	movs	r1, r4
 8001404:	4069      	eors	r1, r5
 8001406:	9100      	str	r1, [sp, #0]
 8001408:	468c      	mov	ip, r1
 800140a:	2101      	movs	r1, #1
 800140c:	4449      	add	r1, r9
 800140e:	468a      	mov	sl, r1
 8001410:	2f0f      	cmp	r7, #15
 8001412:	d900      	bls.n	8001416 <__aeabi_dmul+0x96>
 8001414:	e090      	b.n	8001538 <__aeabi_dmul+0x1b8>
 8001416:	49c4      	ldr	r1, [pc, #784]	; (8001728 <__aeabi_dmul+0x3a8>)
 8001418:	00bf      	lsls	r7, r7, #2
 800141a:	59cf      	ldr	r7, [r1, r7]
 800141c:	46bf      	mov	pc, r7
 800141e:	465b      	mov	r3, fp
 8001420:	433b      	orrs	r3, r7
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	d000      	beq.n	8001428 <__aeabi_dmul+0xa8>
 8001426:	e16a      	b.n	80016fe <__aeabi_dmul+0x37e>
 8001428:	2302      	movs	r3, #2
 800142a:	2708      	movs	r7, #8
 800142c:	2600      	movs	r6, #0
 800142e:	4681      	mov	r9, r0
 8001430:	469b      	mov	fp, r3
 8001432:	e7c9      	b.n	80013c8 <__aeabi_dmul+0x48>
 8001434:	0032      	movs	r2, r6
 8001436:	4658      	mov	r0, fp
 8001438:	9b01      	ldr	r3, [sp, #4]
 800143a:	4661      	mov	r1, ip
 800143c:	9100      	str	r1, [sp, #0]
 800143e:	2802      	cmp	r0, #2
 8001440:	d100      	bne.n	8001444 <__aeabi_dmul+0xc4>
 8001442:	e075      	b.n	8001530 <__aeabi_dmul+0x1b0>
 8001444:	2803      	cmp	r0, #3
 8001446:	d100      	bne.n	800144a <__aeabi_dmul+0xca>
 8001448:	e1fe      	b.n	8001848 <__aeabi_dmul+0x4c8>
 800144a:	2801      	cmp	r0, #1
 800144c:	d000      	beq.n	8001450 <__aeabi_dmul+0xd0>
 800144e:	e12c      	b.n	80016aa <__aeabi_dmul+0x32a>
 8001450:	2300      	movs	r3, #0
 8001452:	2700      	movs	r7, #0
 8001454:	2600      	movs	r6, #0
 8001456:	2500      	movs	r5, #0
 8001458:	033f      	lsls	r7, r7, #12
 800145a:	0d2a      	lsrs	r2, r5, #20
 800145c:	0b3f      	lsrs	r7, r7, #12
 800145e:	48b3      	ldr	r0, [pc, #716]	; (800172c <__aeabi_dmul+0x3ac>)
 8001460:	0512      	lsls	r2, r2, #20
 8001462:	433a      	orrs	r2, r7
 8001464:	4002      	ands	r2, r0
 8001466:	051b      	lsls	r3, r3, #20
 8001468:	4313      	orrs	r3, r2
 800146a:	9a00      	ldr	r2, [sp, #0]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	07d1      	lsls	r1, r2, #31
 8001470:	085b      	lsrs	r3, r3, #1
 8001472:	430b      	orrs	r3, r1
 8001474:	0030      	movs	r0, r6
 8001476:	0019      	movs	r1, r3
 8001478:	b007      	add	sp, #28
 800147a:	bc3c      	pop	{r2, r3, r4, r5}
 800147c:	4690      	mov	r8, r2
 800147e:	4699      	mov	r9, r3
 8001480:	46a2      	mov	sl, r4
 8001482:	46ab      	mov	fp, r5
 8001484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001486:	465b      	mov	r3, fp
 8001488:	433b      	orrs	r3, r7
 800148a:	9301      	str	r3, [sp, #4]
 800148c:	d100      	bne.n	8001490 <__aeabi_dmul+0x110>
 800148e:	e12f      	b.n	80016f0 <__aeabi_dmul+0x370>
 8001490:	2f00      	cmp	r7, #0
 8001492:	d100      	bne.n	8001496 <__aeabi_dmul+0x116>
 8001494:	e1a5      	b.n	80017e2 <__aeabi_dmul+0x462>
 8001496:	0038      	movs	r0, r7
 8001498:	f000 fdee 	bl	8002078 <__clzsi2>
 800149c:	0003      	movs	r3, r0
 800149e:	3b0b      	subs	r3, #11
 80014a0:	2b1c      	cmp	r3, #28
 80014a2:	dd00      	ble.n	80014a6 <__aeabi_dmul+0x126>
 80014a4:	e196      	b.n	80017d4 <__aeabi_dmul+0x454>
 80014a6:	221d      	movs	r2, #29
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	465a      	mov	r2, fp
 80014ac:	0001      	movs	r1, r0
 80014ae:	40da      	lsrs	r2, r3
 80014b0:	465e      	mov	r6, fp
 80014b2:	3908      	subs	r1, #8
 80014b4:	408f      	lsls	r7, r1
 80014b6:	0013      	movs	r3, r2
 80014b8:	408e      	lsls	r6, r1
 80014ba:	433b      	orrs	r3, r7
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	4b9c      	ldr	r3, [pc, #624]	; (8001730 <__aeabi_dmul+0x3b0>)
 80014c0:	2700      	movs	r7, #0
 80014c2:	1a1b      	subs	r3, r3, r0
 80014c4:	4699      	mov	r9, r3
 80014c6:	2300      	movs	r3, #0
 80014c8:	469b      	mov	fp, r3
 80014ca:	e77d      	b.n	80013c8 <__aeabi_dmul+0x48>
 80014cc:	4641      	mov	r1, r8
 80014ce:	4653      	mov	r3, sl
 80014d0:	430b      	orrs	r3, r1
 80014d2:	4993      	ldr	r1, [pc, #588]	; (8001720 <__aeabi_dmul+0x3a0>)
 80014d4:	468c      	mov	ip, r1
 80014d6:	44e1      	add	r9, ip
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d000      	beq.n	80014de <__aeabi_dmul+0x15e>
 80014dc:	e11a      	b.n	8001714 <__aeabi_dmul+0x394>
 80014de:	2202      	movs	r2, #2
 80014e0:	2002      	movs	r0, #2
 80014e2:	4317      	orrs	r7, r2
 80014e4:	2200      	movs	r2, #0
 80014e6:	e78c      	b.n	8001402 <__aeabi_dmul+0x82>
 80014e8:	4313      	orrs	r3, r2
 80014ea:	d100      	bne.n	80014ee <__aeabi_dmul+0x16e>
 80014ec:	e10d      	b.n	800170a <__aeabi_dmul+0x38a>
 80014ee:	4643      	mov	r3, r8
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dmul+0x176>
 80014f4:	e181      	b.n	80017fa <__aeabi_dmul+0x47a>
 80014f6:	4640      	mov	r0, r8
 80014f8:	f000 fdbe 	bl	8002078 <__clzsi2>
 80014fc:	0002      	movs	r2, r0
 80014fe:	3a0b      	subs	r2, #11
 8001500:	2a1c      	cmp	r2, #28
 8001502:	dd00      	ble.n	8001506 <__aeabi_dmul+0x186>
 8001504:	e172      	b.n	80017ec <__aeabi_dmul+0x46c>
 8001506:	0001      	movs	r1, r0
 8001508:	4643      	mov	r3, r8
 800150a:	3908      	subs	r1, #8
 800150c:	408b      	lsls	r3, r1
 800150e:	4698      	mov	r8, r3
 8001510:	231d      	movs	r3, #29
 8001512:	1a9a      	subs	r2, r3, r2
 8001514:	4653      	mov	r3, sl
 8001516:	40d3      	lsrs	r3, r2
 8001518:	001a      	movs	r2, r3
 800151a:	4643      	mov	r3, r8
 800151c:	4313      	orrs	r3, r2
 800151e:	4652      	mov	r2, sl
 8001520:	408a      	lsls	r2, r1
 8001522:	4649      	mov	r1, r9
 8001524:	1a08      	subs	r0, r1, r0
 8001526:	4982      	ldr	r1, [pc, #520]	; (8001730 <__aeabi_dmul+0x3b0>)
 8001528:	4689      	mov	r9, r1
 800152a:	4481      	add	r9, r0
 800152c:	2000      	movs	r0, #0
 800152e:	e768      	b.n	8001402 <__aeabi_dmul+0x82>
 8001530:	4b7b      	ldr	r3, [pc, #492]	; (8001720 <__aeabi_dmul+0x3a0>)
 8001532:	2700      	movs	r7, #0
 8001534:	2600      	movs	r6, #0
 8001536:	e78e      	b.n	8001456 <__aeabi_dmul+0xd6>
 8001538:	0c14      	lsrs	r4, r2, #16
 800153a:	0412      	lsls	r2, r2, #16
 800153c:	0c12      	lsrs	r2, r2, #16
 800153e:	0011      	movs	r1, r2
 8001540:	0c37      	lsrs	r7, r6, #16
 8001542:	0436      	lsls	r6, r6, #16
 8001544:	0c35      	lsrs	r5, r6, #16
 8001546:	4379      	muls	r1, r7
 8001548:	0028      	movs	r0, r5
 800154a:	468c      	mov	ip, r1
 800154c:	002e      	movs	r6, r5
 800154e:	4360      	muls	r0, r4
 8001550:	4460      	add	r0, ip
 8001552:	4683      	mov	fp, r0
 8001554:	4356      	muls	r6, r2
 8001556:	0021      	movs	r1, r4
 8001558:	0c30      	lsrs	r0, r6, #16
 800155a:	4680      	mov	r8, r0
 800155c:	4658      	mov	r0, fp
 800155e:	4379      	muls	r1, r7
 8001560:	4440      	add	r0, r8
 8001562:	9102      	str	r1, [sp, #8]
 8001564:	4584      	cmp	ip, r0
 8001566:	d906      	bls.n	8001576 <__aeabi_dmul+0x1f6>
 8001568:	4688      	mov	r8, r1
 800156a:	2180      	movs	r1, #128	; 0x80
 800156c:	0249      	lsls	r1, r1, #9
 800156e:	468c      	mov	ip, r1
 8001570:	44e0      	add	r8, ip
 8001572:	4641      	mov	r1, r8
 8001574:	9102      	str	r1, [sp, #8]
 8001576:	0436      	lsls	r6, r6, #16
 8001578:	0c01      	lsrs	r1, r0, #16
 800157a:	0c36      	lsrs	r6, r6, #16
 800157c:	0400      	lsls	r0, r0, #16
 800157e:	468b      	mov	fp, r1
 8001580:	1981      	adds	r1, r0, r6
 8001582:	0c1e      	lsrs	r6, r3, #16
 8001584:	041b      	lsls	r3, r3, #16
 8001586:	0c1b      	lsrs	r3, r3, #16
 8001588:	9103      	str	r1, [sp, #12]
 800158a:	0019      	movs	r1, r3
 800158c:	4379      	muls	r1, r7
 800158e:	468c      	mov	ip, r1
 8001590:	0028      	movs	r0, r5
 8001592:	4375      	muls	r5, r6
 8001594:	4465      	add	r5, ip
 8001596:	46a8      	mov	r8, r5
 8001598:	4358      	muls	r0, r3
 800159a:	0c05      	lsrs	r5, r0, #16
 800159c:	4445      	add	r5, r8
 800159e:	4377      	muls	r7, r6
 80015a0:	42a9      	cmp	r1, r5
 80015a2:	d903      	bls.n	80015ac <__aeabi_dmul+0x22c>
 80015a4:	2180      	movs	r1, #128	; 0x80
 80015a6:	0249      	lsls	r1, r1, #9
 80015a8:	468c      	mov	ip, r1
 80015aa:	4467      	add	r7, ip
 80015ac:	0c29      	lsrs	r1, r5, #16
 80015ae:	468c      	mov	ip, r1
 80015b0:	0039      	movs	r1, r7
 80015b2:	0400      	lsls	r0, r0, #16
 80015b4:	0c00      	lsrs	r0, r0, #16
 80015b6:	042d      	lsls	r5, r5, #16
 80015b8:	182d      	adds	r5, r5, r0
 80015ba:	4461      	add	r1, ip
 80015bc:	44ab      	add	fp, r5
 80015be:	9105      	str	r1, [sp, #20]
 80015c0:	4659      	mov	r1, fp
 80015c2:	9104      	str	r1, [sp, #16]
 80015c4:	9901      	ldr	r1, [sp, #4]
 80015c6:	040f      	lsls	r7, r1, #16
 80015c8:	0c3f      	lsrs	r7, r7, #16
 80015ca:	0c08      	lsrs	r0, r1, #16
 80015cc:	0039      	movs	r1, r7
 80015ce:	4351      	muls	r1, r2
 80015d0:	4342      	muls	r2, r0
 80015d2:	4690      	mov	r8, r2
 80015d4:	0002      	movs	r2, r0
 80015d6:	468c      	mov	ip, r1
 80015d8:	0c09      	lsrs	r1, r1, #16
 80015da:	468b      	mov	fp, r1
 80015dc:	4362      	muls	r2, r4
 80015de:	437c      	muls	r4, r7
 80015e0:	4444      	add	r4, r8
 80015e2:	445c      	add	r4, fp
 80015e4:	45a0      	cmp	r8, r4
 80015e6:	d903      	bls.n	80015f0 <__aeabi_dmul+0x270>
 80015e8:	2180      	movs	r1, #128	; 0x80
 80015ea:	0249      	lsls	r1, r1, #9
 80015ec:	4688      	mov	r8, r1
 80015ee:	4442      	add	r2, r8
 80015f0:	0c21      	lsrs	r1, r4, #16
 80015f2:	4688      	mov	r8, r1
 80015f4:	4661      	mov	r1, ip
 80015f6:	0409      	lsls	r1, r1, #16
 80015f8:	0c09      	lsrs	r1, r1, #16
 80015fa:	468c      	mov	ip, r1
 80015fc:	0039      	movs	r1, r7
 80015fe:	4359      	muls	r1, r3
 8001600:	4343      	muls	r3, r0
 8001602:	4370      	muls	r0, r6
 8001604:	437e      	muls	r6, r7
 8001606:	0c0f      	lsrs	r7, r1, #16
 8001608:	18f6      	adds	r6, r6, r3
 800160a:	0424      	lsls	r4, r4, #16
 800160c:	19be      	adds	r6, r7, r6
 800160e:	4464      	add	r4, ip
 8001610:	4442      	add	r2, r8
 8001612:	468c      	mov	ip, r1
 8001614:	42b3      	cmp	r3, r6
 8001616:	d903      	bls.n	8001620 <__aeabi_dmul+0x2a0>
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	025b      	lsls	r3, r3, #9
 800161c:	4698      	mov	r8, r3
 800161e:	4440      	add	r0, r8
 8001620:	9b02      	ldr	r3, [sp, #8]
 8001622:	4661      	mov	r1, ip
 8001624:	4698      	mov	r8, r3
 8001626:	9b04      	ldr	r3, [sp, #16]
 8001628:	0437      	lsls	r7, r6, #16
 800162a:	4443      	add	r3, r8
 800162c:	469b      	mov	fp, r3
 800162e:	45ab      	cmp	fp, r5
 8001630:	41ad      	sbcs	r5, r5
 8001632:	426b      	negs	r3, r5
 8001634:	040d      	lsls	r5, r1, #16
 8001636:	9905      	ldr	r1, [sp, #20]
 8001638:	0c2d      	lsrs	r5, r5, #16
 800163a:	468c      	mov	ip, r1
 800163c:	197f      	adds	r7, r7, r5
 800163e:	4467      	add	r7, ip
 8001640:	18fd      	adds	r5, r7, r3
 8001642:	46a8      	mov	r8, r5
 8001644:	465d      	mov	r5, fp
 8001646:	192d      	adds	r5, r5, r4
 8001648:	42a5      	cmp	r5, r4
 800164a:	41a4      	sbcs	r4, r4
 800164c:	4693      	mov	fp, r2
 800164e:	4264      	negs	r4, r4
 8001650:	46a4      	mov	ip, r4
 8001652:	44c3      	add	fp, r8
 8001654:	44dc      	add	ip, fp
 8001656:	428f      	cmp	r7, r1
 8001658:	41bf      	sbcs	r7, r7
 800165a:	4598      	cmp	r8, r3
 800165c:	419b      	sbcs	r3, r3
 800165e:	4593      	cmp	fp, r2
 8001660:	4192      	sbcs	r2, r2
 8001662:	45a4      	cmp	ip, r4
 8001664:	41a4      	sbcs	r4, r4
 8001666:	425b      	negs	r3, r3
 8001668:	427f      	negs	r7, r7
 800166a:	431f      	orrs	r7, r3
 800166c:	0c36      	lsrs	r6, r6, #16
 800166e:	4252      	negs	r2, r2
 8001670:	4264      	negs	r4, r4
 8001672:	19bf      	adds	r7, r7, r6
 8001674:	4322      	orrs	r2, r4
 8001676:	18bf      	adds	r7, r7, r2
 8001678:	4662      	mov	r2, ip
 800167a:	1838      	adds	r0, r7, r0
 800167c:	0243      	lsls	r3, r0, #9
 800167e:	0dd2      	lsrs	r2, r2, #23
 8001680:	9903      	ldr	r1, [sp, #12]
 8001682:	4313      	orrs	r3, r2
 8001684:	026a      	lsls	r2, r5, #9
 8001686:	430a      	orrs	r2, r1
 8001688:	1e50      	subs	r0, r2, #1
 800168a:	4182      	sbcs	r2, r0
 800168c:	4661      	mov	r1, ip
 800168e:	0ded      	lsrs	r5, r5, #23
 8001690:	432a      	orrs	r2, r5
 8001692:	024e      	lsls	r6, r1, #9
 8001694:	4332      	orrs	r2, r6
 8001696:	01d9      	lsls	r1, r3, #7
 8001698:	d400      	bmi.n	800169c <__aeabi_dmul+0x31c>
 800169a:	e0b3      	b.n	8001804 <__aeabi_dmul+0x484>
 800169c:	2601      	movs	r6, #1
 800169e:	0850      	lsrs	r0, r2, #1
 80016a0:	4032      	ands	r2, r6
 80016a2:	4302      	orrs	r2, r0
 80016a4:	07de      	lsls	r6, r3, #31
 80016a6:	4332      	orrs	r2, r6
 80016a8:	085b      	lsrs	r3, r3, #1
 80016aa:	4c22      	ldr	r4, [pc, #136]	; (8001734 <__aeabi_dmul+0x3b4>)
 80016ac:	4454      	add	r4, sl
 80016ae:	2c00      	cmp	r4, #0
 80016b0:	dd62      	ble.n	8001778 <__aeabi_dmul+0x3f8>
 80016b2:	0751      	lsls	r1, r2, #29
 80016b4:	d009      	beq.n	80016ca <__aeabi_dmul+0x34a>
 80016b6:	200f      	movs	r0, #15
 80016b8:	4010      	ands	r0, r2
 80016ba:	2804      	cmp	r0, #4
 80016bc:	d005      	beq.n	80016ca <__aeabi_dmul+0x34a>
 80016be:	1d10      	adds	r0, r2, #4
 80016c0:	4290      	cmp	r0, r2
 80016c2:	4192      	sbcs	r2, r2
 80016c4:	4252      	negs	r2, r2
 80016c6:	189b      	adds	r3, r3, r2
 80016c8:	0002      	movs	r2, r0
 80016ca:	01d9      	lsls	r1, r3, #7
 80016cc:	d504      	bpl.n	80016d8 <__aeabi_dmul+0x358>
 80016ce:	2480      	movs	r4, #128	; 0x80
 80016d0:	4819      	ldr	r0, [pc, #100]	; (8001738 <__aeabi_dmul+0x3b8>)
 80016d2:	00e4      	lsls	r4, r4, #3
 80016d4:	4003      	ands	r3, r0
 80016d6:	4454      	add	r4, sl
 80016d8:	4818      	ldr	r0, [pc, #96]	; (800173c <__aeabi_dmul+0x3bc>)
 80016da:	4284      	cmp	r4, r0
 80016dc:	dd00      	ble.n	80016e0 <__aeabi_dmul+0x360>
 80016de:	e727      	b.n	8001530 <__aeabi_dmul+0x1b0>
 80016e0:	075e      	lsls	r6, r3, #29
 80016e2:	025b      	lsls	r3, r3, #9
 80016e4:	08d2      	lsrs	r2, r2, #3
 80016e6:	0b1f      	lsrs	r7, r3, #12
 80016e8:	0563      	lsls	r3, r4, #21
 80016ea:	4316      	orrs	r6, r2
 80016ec:	0d5b      	lsrs	r3, r3, #21
 80016ee:	e6b2      	b.n	8001456 <__aeabi_dmul+0xd6>
 80016f0:	2300      	movs	r3, #0
 80016f2:	4699      	mov	r9, r3
 80016f4:	3301      	adds	r3, #1
 80016f6:	2704      	movs	r7, #4
 80016f8:	2600      	movs	r6, #0
 80016fa:	469b      	mov	fp, r3
 80016fc:	e664      	b.n	80013c8 <__aeabi_dmul+0x48>
 80016fe:	2303      	movs	r3, #3
 8001700:	9701      	str	r7, [sp, #4]
 8001702:	4681      	mov	r9, r0
 8001704:	270c      	movs	r7, #12
 8001706:	469b      	mov	fp, r3
 8001708:	e65e      	b.n	80013c8 <__aeabi_dmul+0x48>
 800170a:	2201      	movs	r2, #1
 800170c:	2001      	movs	r0, #1
 800170e:	4317      	orrs	r7, r2
 8001710:	2200      	movs	r2, #0
 8001712:	e676      	b.n	8001402 <__aeabi_dmul+0x82>
 8001714:	2303      	movs	r3, #3
 8001716:	2003      	movs	r0, #3
 8001718:	431f      	orrs	r7, r3
 800171a:	4643      	mov	r3, r8
 800171c:	e671      	b.n	8001402 <__aeabi_dmul+0x82>
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	000007ff 	.word	0x000007ff
 8001724:	fffffc01 	.word	0xfffffc01
 8001728:	08006760 	.word	0x08006760
 800172c:	800fffff 	.word	0x800fffff
 8001730:	fffffc0d 	.word	0xfffffc0d
 8001734:	000003ff 	.word	0x000003ff
 8001738:	feffffff 	.word	0xfeffffff
 800173c:	000007fe 	.word	0x000007fe
 8001740:	2300      	movs	r3, #0
 8001742:	2780      	movs	r7, #128	; 0x80
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	033f      	lsls	r7, r7, #12
 8001748:	2600      	movs	r6, #0
 800174a:	4b43      	ldr	r3, [pc, #268]	; (8001858 <__aeabi_dmul+0x4d8>)
 800174c:	e683      	b.n	8001456 <__aeabi_dmul+0xd6>
 800174e:	9b01      	ldr	r3, [sp, #4]
 8001750:	0032      	movs	r2, r6
 8001752:	46a4      	mov	ip, r4
 8001754:	4658      	mov	r0, fp
 8001756:	e670      	b.n	800143a <__aeabi_dmul+0xba>
 8001758:	46ac      	mov	ip, r5
 800175a:	e66e      	b.n	800143a <__aeabi_dmul+0xba>
 800175c:	2780      	movs	r7, #128	; 0x80
 800175e:	9901      	ldr	r1, [sp, #4]
 8001760:	033f      	lsls	r7, r7, #12
 8001762:	4239      	tst	r1, r7
 8001764:	d02d      	beq.n	80017c2 <__aeabi_dmul+0x442>
 8001766:	423b      	tst	r3, r7
 8001768:	d12b      	bne.n	80017c2 <__aeabi_dmul+0x442>
 800176a:	431f      	orrs	r7, r3
 800176c:	033f      	lsls	r7, r7, #12
 800176e:	0b3f      	lsrs	r7, r7, #12
 8001770:	9500      	str	r5, [sp, #0]
 8001772:	0016      	movs	r6, r2
 8001774:	4b38      	ldr	r3, [pc, #224]	; (8001858 <__aeabi_dmul+0x4d8>)
 8001776:	e66e      	b.n	8001456 <__aeabi_dmul+0xd6>
 8001778:	2501      	movs	r5, #1
 800177a:	1b2d      	subs	r5, r5, r4
 800177c:	2d38      	cmp	r5, #56	; 0x38
 800177e:	dd00      	ble.n	8001782 <__aeabi_dmul+0x402>
 8001780:	e666      	b.n	8001450 <__aeabi_dmul+0xd0>
 8001782:	2d1f      	cmp	r5, #31
 8001784:	dc40      	bgt.n	8001808 <__aeabi_dmul+0x488>
 8001786:	4835      	ldr	r0, [pc, #212]	; (800185c <__aeabi_dmul+0x4dc>)
 8001788:	001c      	movs	r4, r3
 800178a:	4450      	add	r0, sl
 800178c:	0016      	movs	r6, r2
 800178e:	4082      	lsls	r2, r0
 8001790:	4084      	lsls	r4, r0
 8001792:	40ee      	lsrs	r6, r5
 8001794:	1e50      	subs	r0, r2, #1
 8001796:	4182      	sbcs	r2, r0
 8001798:	4334      	orrs	r4, r6
 800179a:	4314      	orrs	r4, r2
 800179c:	40eb      	lsrs	r3, r5
 800179e:	0762      	lsls	r2, r4, #29
 80017a0:	d009      	beq.n	80017b6 <__aeabi_dmul+0x436>
 80017a2:	220f      	movs	r2, #15
 80017a4:	4022      	ands	r2, r4
 80017a6:	2a04      	cmp	r2, #4
 80017a8:	d005      	beq.n	80017b6 <__aeabi_dmul+0x436>
 80017aa:	0022      	movs	r2, r4
 80017ac:	1d14      	adds	r4, r2, #4
 80017ae:	4294      	cmp	r4, r2
 80017b0:	4180      	sbcs	r0, r0
 80017b2:	4240      	negs	r0, r0
 80017b4:	181b      	adds	r3, r3, r0
 80017b6:	021a      	lsls	r2, r3, #8
 80017b8:	d53e      	bpl.n	8001838 <__aeabi_dmul+0x4b8>
 80017ba:	2301      	movs	r3, #1
 80017bc:	2700      	movs	r7, #0
 80017be:	2600      	movs	r6, #0
 80017c0:	e649      	b.n	8001456 <__aeabi_dmul+0xd6>
 80017c2:	2780      	movs	r7, #128	; 0x80
 80017c4:	9b01      	ldr	r3, [sp, #4]
 80017c6:	033f      	lsls	r7, r7, #12
 80017c8:	431f      	orrs	r7, r3
 80017ca:	033f      	lsls	r7, r7, #12
 80017cc:	0b3f      	lsrs	r7, r7, #12
 80017ce:	9400      	str	r4, [sp, #0]
 80017d0:	4b21      	ldr	r3, [pc, #132]	; (8001858 <__aeabi_dmul+0x4d8>)
 80017d2:	e640      	b.n	8001456 <__aeabi_dmul+0xd6>
 80017d4:	0003      	movs	r3, r0
 80017d6:	465a      	mov	r2, fp
 80017d8:	3b28      	subs	r3, #40	; 0x28
 80017da:	409a      	lsls	r2, r3
 80017dc:	2600      	movs	r6, #0
 80017de:	9201      	str	r2, [sp, #4]
 80017e0:	e66d      	b.n	80014be <__aeabi_dmul+0x13e>
 80017e2:	4658      	mov	r0, fp
 80017e4:	f000 fc48 	bl	8002078 <__clzsi2>
 80017e8:	3020      	adds	r0, #32
 80017ea:	e657      	b.n	800149c <__aeabi_dmul+0x11c>
 80017ec:	0003      	movs	r3, r0
 80017ee:	4652      	mov	r2, sl
 80017f0:	3b28      	subs	r3, #40	; 0x28
 80017f2:	409a      	lsls	r2, r3
 80017f4:	0013      	movs	r3, r2
 80017f6:	2200      	movs	r2, #0
 80017f8:	e693      	b.n	8001522 <__aeabi_dmul+0x1a2>
 80017fa:	4650      	mov	r0, sl
 80017fc:	f000 fc3c 	bl	8002078 <__clzsi2>
 8001800:	3020      	adds	r0, #32
 8001802:	e67b      	b.n	80014fc <__aeabi_dmul+0x17c>
 8001804:	46ca      	mov	sl, r9
 8001806:	e750      	b.n	80016aa <__aeabi_dmul+0x32a>
 8001808:	201f      	movs	r0, #31
 800180a:	001e      	movs	r6, r3
 800180c:	4240      	negs	r0, r0
 800180e:	1b04      	subs	r4, r0, r4
 8001810:	40e6      	lsrs	r6, r4
 8001812:	2d20      	cmp	r5, #32
 8001814:	d003      	beq.n	800181e <__aeabi_dmul+0x49e>
 8001816:	4c12      	ldr	r4, [pc, #72]	; (8001860 <__aeabi_dmul+0x4e0>)
 8001818:	4454      	add	r4, sl
 800181a:	40a3      	lsls	r3, r4
 800181c:	431a      	orrs	r2, r3
 800181e:	1e50      	subs	r0, r2, #1
 8001820:	4182      	sbcs	r2, r0
 8001822:	4332      	orrs	r2, r6
 8001824:	2607      	movs	r6, #7
 8001826:	2700      	movs	r7, #0
 8001828:	4016      	ands	r6, r2
 800182a:	d009      	beq.n	8001840 <__aeabi_dmul+0x4c0>
 800182c:	200f      	movs	r0, #15
 800182e:	2300      	movs	r3, #0
 8001830:	4010      	ands	r0, r2
 8001832:	0014      	movs	r4, r2
 8001834:	2804      	cmp	r0, #4
 8001836:	d1b9      	bne.n	80017ac <__aeabi_dmul+0x42c>
 8001838:	0022      	movs	r2, r4
 800183a:	075e      	lsls	r6, r3, #29
 800183c:	025b      	lsls	r3, r3, #9
 800183e:	0b1f      	lsrs	r7, r3, #12
 8001840:	08d2      	lsrs	r2, r2, #3
 8001842:	4316      	orrs	r6, r2
 8001844:	2300      	movs	r3, #0
 8001846:	e606      	b.n	8001456 <__aeabi_dmul+0xd6>
 8001848:	2780      	movs	r7, #128	; 0x80
 800184a:	033f      	lsls	r7, r7, #12
 800184c:	431f      	orrs	r7, r3
 800184e:	033f      	lsls	r7, r7, #12
 8001850:	0b3f      	lsrs	r7, r7, #12
 8001852:	0016      	movs	r6, r2
 8001854:	4b00      	ldr	r3, [pc, #0]	; (8001858 <__aeabi_dmul+0x4d8>)
 8001856:	e5fe      	b.n	8001456 <__aeabi_dmul+0xd6>
 8001858:	000007ff 	.word	0x000007ff
 800185c:	0000041e 	.word	0x0000041e
 8001860:	0000043e 	.word	0x0000043e

08001864 <__aeabi_dsub>:
 8001864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001866:	4657      	mov	r7, sl
 8001868:	464e      	mov	r6, r9
 800186a:	4645      	mov	r5, r8
 800186c:	46de      	mov	lr, fp
 800186e:	000c      	movs	r4, r1
 8001870:	0309      	lsls	r1, r1, #12
 8001872:	b5e0      	push	{r5, r6, r7, lr}
 8001874:	0a49      	lsrs	r1, r1, #9
 8001876:	0f46      	lsrs	r6, r0, #29
 8001878:	005f      	lsls	r7, r3, #1
 800187a:	4331      	orrs	r1, r6
 800187c:	031e      	lsls	r6, r3, #12
 800187e:	0fdb      	lsrs	r3, r3, #31
 8001880:	0a76      	lsrs	r6, r6, #9
 8001882:	469b      	mov	fp, r3
 8001884:	0f53      	lsrs	r3, r2, #29
 8001886:	4333      	orrs	r3, r6
 8001888:	4ec8      	ldr	r6, [pc, #800]	; (8001bac <__aeabi_dsub+0x348>)
 800188a:	0065      	lsls	r5, r4, #1
 800188c:	00c0      	lsls	r0, r0, #3
 800188e:	0fe4      	lsrs	r4, r4, #31
 8001890:	00d2      	lsls	r2, r2, #3
 8001892:	0d6d      	lsrs	r5, r5, #21
 8001894:	46a2      	mov	sl, r4
 8001896:	4681      	mov	r9, r0
 8001898:	0d7f      	lsrs	r7, r7, #21
 800189a:	469c      	mov	ip, r3
 800189c:	4690      	mov	r8, r2
 800189e:	42b7      	cmp	r7, r6
 80018a0:	d100      	bne.n	80018a4 <__aeabi_dsub+0x40>
 80018a2:	e0b9      	b.n	8001a18 <__aeabi_dsub+0x1b4>
 80018a4:	465b      	mov	r3, fp
 80018a6:	2601      	movs	r6, #1
 80018a8:	4073      	eors	r3, r6
 80018aa:	469b      	mov	fp, r3
 80018ac:	1bee      	subs	r6, r5, r7
 80018ae:	45a3      	cmp	fp, r4
 80018b0:	d100      	bne.n	80018b4 <__aeabi_dsub+0x50>
 80018b2:	e083      	b.n	80019bc <__aeabi_dsub+0x158>
 80018b4:	2e00      	cmp	r6, #0
 80018b6:	dd63      	ble.n	8001980 <__aeabi_dsub+0x11c>
 80018b8:	2f00      	cmp	r7, #0
 80018ba:	d000      	beq.n	80018be <__aeabi_dsub+0x5a>
 80018bc:	e0b1      	b.n	8001a22 <__aeabi_dsub+0x1be>
 80018be:	4663      	mov	r3, ip
 80018c0:	4313      	orrs	r3, r2
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dsub+0x62>
 80018c4:	e123      	b.n	8001b0e <__aeabi_dsub+0x2aa>
 80018c6:	1e73      	subs	r3, r6, #1
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d000      	beq.n	80018ce <__aeabi_dsub+0x6a>
 80018cc:	e1ba      	b.n	8001c44 <__aeabi_dsub+0x3e0>
 80018ce:	1a86      	subs	r6, r0, r2
 80018d0:	4663      	mov	r3, ip
 80018d2:	42b0      	cmp	r0, r6
 80018d4:	4180      	sbcs	r0, r0
 80018d6:	2501      	movs	r5, #1
 80018d8:	1ac9      	subs	r1, r1, r3
 80018da:	4240      	negs	r0, r0
 80018dc:	1a09      	subs	r1, r1, r0
 80018de:	020b      	lsls	r3, r1, #8
 80018e0:	d400      	bmi.n	80018e4 <__aeabi_dsub+0x80>
 80018e2:	e147      	b.n	8001b74 <__aeabi_dsub+0x310>
 80018e4:	0249      	lsls	r1, r1, #9
 80018e6:	0a4b      	lsrs	r3, r1, #9
 80018e8:	4698      	mov	r8, r3
 80018ea:	4643      	mov	r3, r8
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d100      	bne.n	80018f2 <__aeabi_dsub+0x8e>
 80018f0:	e189      	b.n	8001c06 <__aeabi_dsub+0x3a2>
 80018f2:	4640      	mov	r0, r8
 80018f4:	f000 fbc0 	bl	8002078 <__clzsi2>
 80018f8:	0003      	movs	r3, r0
 80018fa:	3b08      	subs	r3, #8
 80018fc:	2b1f      	cmp	r3, #31
 80018fe:	dd00      	ble.n	8001902 <__aeabi_dsub+0x9e>
 8001900:	e17c      	b.n	8001bfc <__aeabi_dsub+0x398>
 8001902:	2220      	movs	r2, #32
 8001904:	0030      	movs	r0, r6
 8001906:	1ad2      	subs	r2, r2, r3
 8001908:	4641      	mov	r1, r8
 800190a:	40d0      	lsrs	r0, r2
 800190c:	4099      	lsls	r1, r3
 800190e:	0002      	movs	r2, r0
 8001910:	409e      	lsls	r6, r3
 8001912:	430a      	orrs	r2, r1
 8001914:	429d      	cmp	r5, r3
 8001916:	dd00      	ble.n	800191a <__aeabi_dsub+0xb6>
 8001918:	e16a      	b.n	8001bf0 <__aeabi_dsub+0x38c>
 800191a:	1b5d      	subs	r5, r3, r5
 800191c:	1c6b      	adds	r3, r5, #1
 800191e:	2b1f      	cmp	r3, #31
 8001920:	dd00      	ble.n	8001924 <__aeabi_dsub+0xc0>
 8001922:	e194      	b.n	8001c4e <__aeabi_dsub+0x3ea>
 8001924:	2120      	movs	r1, #32
 8001926:	0010      	movs	r0, r2
 8001928:	0035      	movs	r5, r6
 800192a:	1ac9      	subs	r1, r1, r3
 800192c:	408e      	lsls	r6, r1
 800192e:	40da      	lsrs	r2, r3
 8001930:	4088      	lsls	r0, r1
 8001932:	40dd      	lsrs	r5, r3
 8001934:	1e71      	subs	r1, r6, #1
 8001936:	418e      	sbcs	r6, r1
 8001938:	0011      	movs	r1, r2
 800193a:	2207      	movs	r2, #7
 800193c:	4328      	orrs	r0, r5
 800193e:	2500      	movs	r5, #0
 8001940:	4306      	orrs	r6, r0
 8001942:	4032      	ands	r2, r6
 8001944:	2a00      	cmp	r2, #0
 8001946:	d009      	beq.n	800195c <__aeabi_dsub+0xf8>
 8001948:	230f      	movs	r3, #15
 800194a:	4033      	ands	r3, r6
 800194c:	2b04      	cmp	r3, #4
 800194e:	d005      	beq.n	800195c <__aeabi_dsub+0xf8>
 8001950:	1d33      	adds	r3, r6, #4
 8001952:	42b3      	cmp	r3, r6
 8001954:	41b6      	sbcs	r6, r6
 8001956:	4276      	negs	r6, r6
 8001958:	1989      	adds	r1, r1, r6
 800195a:	001e      	movs	r6, r3
 800195c:	020b      	lsls	r3, r1, #8
 800195e:	d400      	bmi.n	8001962 <__aeabi_dsub+0xfe>
 8001960:	e23d      	b.n	8001dde <__aeabi_dsub+0x57a>
 8001962:	1c6a      	adds	r2, r5, #1
 8001964:	4b91      	ldr	r3, [pc, #580]	; (8001bac <__aeabi_dsub+0x348>)
 8001966:	0555      	lsls	r5, r2, #21
 8001968:	0d6d      	lsrs	r5, r5, #21
 800196a:	429a      	cmp	r2, r3
 800196c:	d100      	bne.n	8001970 <__aeabi_dsub+0x10c>
 800196e:	e119      	b.n	8001ba4 <__aeabi_dsub+0x340>
 8001970:	4a8f      	ldr	r2, [pc, #572]	; (8001bb0 <__aeabi_dsub+0x34c>)
 8001972:	08f6      	lsrs	r6, r6, #3
 8001974:	400a      	ands	r2, r1
 8001976:	0757      	lsls	r7, r2, #29
 8001978:	0252      	lsls	r2, r2, #9
 800197a:	4337      	orrs	r7, r6
 800197c:	0b12      	lsrs	r2, r2, #12
 800197e:	e09b      	b.n	8001ab8 <__aeabi_dsub+0x254>
 8001980:	2e00      	cmp	r6, #0
 8001982:	d000      	beq.n	8001986 <__aeabi_dsub+0x122>
 8001984:	e0c5      	b.n	8001b12 <__aeabi_dsub+0x2ae>
 8001986:	1c6e      	adds	r6, r5, #1
 8001988:	0576      	lsls	r6, r6, #21
 800198a:	0d76      	lsrs	r6, r6, #21
 800198c:	2e01      	cmp	r6, #1
 800198e:	dc00      	bgt.n	8001992 <__aeabi_dsub+0x12e>
 8001990:	e148      	b.n	8001c24 <__aeabi_dsub+0x3c0>
 8001992:	4667      	mov	r7, ip
 8001994:	1a86      	subs	r6, r0, r2
 8001996:	1bcb      	subs	r3, r1, r7
 8001998:	42b0      	cmp	r0, r6
 800199a:	41bf      	sbcs	r7, r7
 800199c:	427f      	negs	r7, r7
 800199e:	46b8      	mov	r8, r7
 80019a0:	001f      	movs	r7, r3
 80019a2:	4643      	mov	r3, r8
 80019a4:	1aff      	subs	r7, r7, r3
 80019a6:	003b      	movs	r3, r7
 80019a8:	46b8      	mov	r8, r7
 80019aa:	021b      	lsls	r3, r3, #8
 80019ac:	d500      	bpl.n	80019b0 <__aeabi_dsub+0x14c>
 80019ae:	e15f      	b.n	8001c70 <__aeabi_dsub+0x40c>
 80019b0:	4337      	orrs	r7, r6
 80019b2:	d19a      	bne.n	80018ea <__aeabi_dsub+0x86>
 80019b4:	2200      	movs	r2, #0
 80019b6:	2400      	movs	r4, #0
 80019b8:	2500      	movs	r5, #0
 80019ba:	e079      	b.n	8001ab0 <__aeabi_dsub+0x24c>
 80019bc:	2e00      	cmp	r6, #0
 80019be:	dc00      	bgt.n	80019c2 <__aeabi_dsub+0x15e>
 80019c0:	e0fa      	b.n	8001bb8 <__aeabi_dsub+0x354>
 80019c2:	2f00      	cmp	r7, #0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dsub+0x164>
 80019c6:	e08d      	b.n	8001ae4 <__aeabi_dsub+0x280>
 80019c8:	4b78      	ldr	r3, [pc, #480]	; (8001bac <__aeabi_dsub+0x348>)
 80019ca:	429d      	cmp	r5, r3
 80019cc:	d067      	beq.n	8001a9e <__aeabi_dsub+0x23a>
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	4667      	mov	r7, ip
 80019d2:	041b      	lsls	r3, r3, #16
 80019d4:	431f      	orrs	r7, r3
 80019d6:	46bc      	mov	ip, r7
 80019d8:	2e38      	cmp	r6, #56	; 0x38
 80019da:	dc00      	bgt.n	80019de <__aeabi_dsub+0x17a>
 80019dc:	e152      	b.n	8001c84 <__aeabi_dsub+0x420>
 80019de:	4663      	mov	r3, ip
 80019e0:	4313      	orrs	r3, r2
 80019e2:	1e5a      	subs	r2, r3, #1
 80019e4:	4193      	sbcs	r3, r2
 80019e6:	181e      	adds	r6, r3, r0
 80019e8:	4286      	cmp	r6, r0
 80019ea:	4180      	sbcs	r0, r0
 80019ec:	4240      	negs	r0, r0
 80019ee:	1809      	adds	r1, r1, r0
 80019f0:	020b      	lsls	r3, r1, #8
 80019f2:	d400      	bmi.n	80019f6 <__aeabi_dsub+0x192>
 80019f4:	e0be      	b.n	8001b74 <__aeabi_dsub+0x310>
 80019f6:	4b6d      	ldr	r3, [pc, #436]	; (8001bac <__aeabi_dsub+0x348>)
 80019f8:	3501      	adds	r5, #1
 80019fa:	429d      	cmp	r5, r3
 80019fc:	d100      	bne.n	8001a00 <__aeabi_dsub+0x19c>
 80019fe:	e0d2      	b.n	8001ba6 <__aeabi_dsub+0x342>
 8001a00:	4a6b      	ldr	r2, [pc, #428]	; (8001bb0 <__aeabi_dsub+0x34c>)
 8001a02:	0873      	lsrs	r3, r6, #1
 8001a04:	400a      	ands	r2, r1
 8001a06:	2101      	movs	r1, #1
 8001a08:	400e      	ands	r6, r1
 8001a0a:	431e      	orrs	r6, r3
 8001a0c:	0851      	lsrs	r1, r2, #1
 8001a0e:	07d3      	lsls	r3, r2, #31
 8001a10:	2207      	movs	r2, #7
 8001a12:	431e      	orrs	r6, r3
 8001a14:	4032      	ands	r2, r6
 8001a16:	e795      	b.n	8001944 <__aeabi_dsub+0xe0>
 8001a18:	001e      	movs	r6, r3
 8001a1a:	4316      	orrs	r6, r2
 8001a1c:	d000      	beq.n	8001a20 <__aeabi_dsub+0x1bc>
 8001a1e:	e745      	b.n	80018ac <__aeabi_dsub+0x48>
 8001a20:	e740      	b.n	80018a4 <__aeabi_dsub+0x40>
 8001a22:	4b62      	ldr	r3, [pc, #392]	; (8001bac <__aeabi_dsub+0x348>)
 8001a24:	429d      	cmp	r5, r3
 8001a26:	d03a      	beq.n	8001a9e <__aeabi_dsub+0x23a>
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	4667      	mov	r7, ip
 8001a2c:	041b      	lsls	r3, r3, #16
 8001a2e:	431f      	orrs	r7, r3
 8001a30:	46bc      	mov	ip, r7
 8001a32:	2e38      	cmp	r6, #56	; 0x38
 8001a34:	dd00      	ble.n	8001a38 <__aeabi_dsub+0x1d4>
 8001a36:	e0eb      	b.n	8001c10 <__aeabi_dsub+0x3ac>
 8001a38:	2e1f      	cmp	r6, #31
 8001a3a:	dc00      	bgt.n	8001a3e <__aeabi_dsub+0x1da>
 8001a3c:	e13a      	b.n	8001cb4 <__aeabi_dsub+0x450>
 8001a3e:	0033      	movs	r3, r6
 8001a40:	4667      	mov	r7, ip
 8001a42:	3b20      	subs	r3, #32
 8001a44:	40df      	lsrs	r7, r3
 8001a46:	003b      	movs	r3, r7
 8001a48:	2e20      	cmp	r6, #32
 8001a4a:	d005      	beq.n	8001a58 <__aeabi_dsub+0x1f4>
 8001a4c:	2740      	movs	r7, #64	; 0x40
 8001a4e:	1bbf      	subs	r7, r7, r6
 8001a50:	4666      	mov	r6, ip
 8001a52:	40be      	lsls	r6, r7
 8001a54:	4332      	orrs	r2, r6
 8001a56:	4690      	mov	r8, r2
 8001a58:	4646      	mov	r6, r8
 8001a5a:	1e72      	subs	r2, r6, #1
 8001a5c:	4196      	sbcs	r6, r2
 8001a5e:	4333      	orrs	r3, r6
 8001a60:	e0da      	b.n	8001c18 <__aeabi_dsub+0x3b4>
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d100      	bne.n	8001a68 <__aeabi_dsub+0x204>
 8001a66:	e214      	b.n	8001e92 <__aeabi_dsub+0x62e>
 8001a68:	4663      	mov	r3, ip
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	d100      	bne.n	8001a70 <__aeabi_dsub+0x20c>
 8001a6e:	e168      	b.n	8001d42 <__aeabi_dsub+0x4de>
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	074e      	lsls	r6, r1, #29
 8001a74:	08c0      	lsrs	r0, r0, #3
 8001a76:	08c9      	lsrs	r1, r1, #3
 8001a78:	031b      	lsls	r3, r3, #12
 8001a7a:	4306      	orrs	r6, r0
 8001a7c:	4219      	tst	r1, r3
 8001a7e:	d008      	beq.n	8001a92 <__aeabi_dsub+0x22e>
 8001a80:	4660      	mov	r0, ip
 8001a82:	08c0      	lsrs	r0, r0, #3
 8001a84:	4218      	tst	r0, r3
 8001a86:	d104      	bne.n	8001a92 <__aeabi_dsub+0x22e>
 8001a88:	4663      	mov	r3, ip
 8001a8a:	0001      	movs	r1, r0
 8001a8c:	08d2      	lsrs	r2, r2, #3
 8001a8e:	075e      	lsls	r6, r3, #29
 8001a90:	4316      	orrs	r6, r2
 8001a92:	00f3      	lsls	r3, r6, #3
 8001a94:	4699      	mov	r9, r3
 8001a96:	00c9      	lsls	r1, r1, #3
 8001a98:	0f72      	lsrs	r2, r6, #29
 8001a9a:	4d44      	ldr	r5, [pc, #272]	; (8001bac <__aeabi_dsub+0x348>)
 8001a9c:	4311      	orrs	r1, r2
 8001a9e:	464b      	mov	r3, r9
 8001aa0:	08de      	lsrs	r6, r3, #3
 8001aa2:	4b42      	ldr	r3, [pc, #264]	; (8001bac <__aeabi_dsub+0x348>)
 8001aa4:	074f      	lsls	r7, r1, #29
 8001aa6:	4337      	orrs	r7, r6
 8001aa8:	08ca      	lsrs	r2, r1, #3
 8001aaa:	429d      	cmp	r5, r3
 8001aac:	d100      	bne.n	8001ab0 <__aeabi_dsub+0x24c>
 8001aae:	e06e      	b.n	8001b8e <__aeabi_dsub+0x32a>
 8001ab0:	0312      	lsls	r2, r2, #12
 8001ab2:	056d      	lsls	r5, r5, #21
 8001ab4:	0b12      	lsrs	r2, r2, #12
 8001ab6:	0d6d      	lsrs	r5, r5, #21
 8001ab8:	2100      	movs	r1, #0
 8001aba:	0312      	lsls	r2, r2, #12
 8001abc:	0b13      	lsrs	r3, r2, #12
 8001abe:	0d0a      	lsrs	r2, r1, #20
 8001ac0:	0512      	lsls	r2, r2, #20
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	4b3b      	ldr	r3, [pc, #236]	; (8001bb4 <__aeabi_dsub+0x350>)
 8001ac6:	052d      	lsls	r5, r5, #20
 8001ac8:	4013      	ands	r3, r2
 8001aca:	432b      	orrs	r3, r5
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	07e4      	lsls	r4, r4, #31
 8001ad0:	085b      	lsrs	r3, r3, #1
 8001ad2:	4323      	orrs	r3, r4
 8001ad4:	0038      	movs	r0, r7
 8001ad6:	0019      	movs	r1, r3
 8001ad8:	bc3c      	pop	{r2, r3, r4, r5}
 8001ada:	4690      	mov	r8, r2
 8001adc:	4699      	mov	r9, r3
 8001ade:	46a2      	mov	sl, r4
 8001ae0:	46ab      	mov	fp, r5
 8001ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ae4:	4663      	mov	r3, ip
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	d011      	beq.n	8001b0e <__aeabi_dsub+0x2aa>
 8001aea:	1e73      	subs	r3, r6, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d000      	beq.n	8001af2 <__aeabi_dsub+0x28e>
 8001af0:	e107      	b.n	8001d02 <__aeabi_dsub+0x49e>
 8001af2:	1886      	adds	r6, r0, r2
 8001af4:	4286      	cmp	r6, r0
 8001af6:	4180      	sbcs	r0, r0
 8001af8:	4461      	add	r1, ip
 8001afa:	4240      	negs	r0, r0
 8001afc:	1809      	adds	r1, r1, r0
 8001afe:	2501      	movs	r5, #1
 8001b00:	020b      	lsls	r3, r1, #8
 8001b02:	d537      	bpl.n	8001b74 <__aeabi_dsub+0x310>
 8001b04:	2502      	movs	r5, #2
 8001b06:	e77b      	b.n	8001a00 <__aeabi_dsub+0x19c>
 8001b08:	003e      	movs	r6, r7
 8001b0a:	4661      	mov	r1, ip
 8001b0c:	4691      	mov	r9, r2
 8001b0e:	0035      	movs	r5, r6
 8001b10:	e7c5      	b.n	8001a9e <__aeabi_dsub+0x23a>
 8001b12:	465c      	mov	r4, fp
 8001b14:	2d00      	cmp	r5, #0
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dsub+0x2b6>
 8001b18:	e0e1      	b.n	8001cde <__aeabi_dsub+0x47a>
 8001b1a:	000b      	movs	r3, r1
 8001b1c:	4303      	orrs	r3, r0
 8001b1e:	d0f3      	beq.n	8001b08 <__aeabi_dsub+0x2a4>
 8001b20:	1c73      	adds	r3, r6, #1
 8001b22:	d100      	bne.n	8001b26 <__aeabi_dsub+0x2c2>
 8001b24:	e1ac      	b.n	8001e80 <__aeabi_dsub+0x61c>
 8001b26:	4b21      	ldr	r3, [pc, #132]	; (8001bac <__aeabi_dsub+0x348>)
 8001b28:	429f      	cmp	r7, r3
 8001b2a:	d100      	bne.n	8001b2e <__aeabi_dsub+0x2ca>
 8001b2c:	e13a      	b.n	8001da4 <__aeabi_dsub+0x540>
 8001b2e:	43f3      	mvns	r3, r6
 8001b30:	2b38      	cmp	r3, #56	; 0x38
 8001b32:	dd00      	ble.n	8001b36 <__aeabi_dsub+0x2d2>
 8001b34:	e16f      	b.n	8001e16 <__aeabi_dsub+0x5b2>
 8001b36:	2b1f      	cmp	r3, #31
 8001b38:	dd00      	ble.n	8001b3c <__aeabi_dsub+0x2d8>
 8001b3a:	e18c      	b.n	8001e56 <__aeabi_dsub+0x5f2>
 8001b3c:	2520      	movs	r5, #32
 8001b3e:	000e      	movs	r6, r1
 8001b40:	1aed      	subs	r5, r5, r3
 8001b42:	40ae      	lsls	r6, r5
 8001b44:	46b0      	mov	r8, r6
 8001b46:	0006      	movs	r6, r0
 8001b48:	46aa      	mov	sl, r5
 8001b4a:	40de      	lsrs	r6, r3
 8001b4c:	4645      	mov	r5, r8
 8001b4e:	4335      	orrs	r5, r6
 8001b50:	002e      	movs	r6, r5
 8001b52:	4655      	mov	r5, sl
 8001b54:	40d9      	lsrs	r1, r3
 8001b56:	40a8      	lsls	r0, r5
 8001b58:	4663      	mov	r3, ip
 8001b5a:	1e45      	subs	r5, r0, #1
 8001b5c:	41a8      	sbcs	r0, r5
 8001b5e:	1a5b      	subs	r3, r3, r1
 8001b60:	469c      	mov	ip, r3
 8001b62:	4330      	orrs	r0, r6
 8001b64:	1a16      	subs	r6, r2, r0
 8001b66:	42b2      	cmp	r2, r6
 8001b68:	4192      	sbcs	r2, r2
 8001b6a:	4663      	mov	r3, ip
 8001b6c:	4252      	negs	r2, r2
 8001b6e:	1a99      	subs	r1, r3, r2
 8001b70:	003d      	movs	r5, r7
 8001b72:	e6b4      	b.n	80018de <__aeabi_dsub+0x7a>
 8001b74:	2207      	movs	r2, #7
 8001b76:	4032      	ands	r2, r6
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d000      	beq.n	8001b7e <__aeabi_dsub+0x31a>
 8001b7c:	e6e4      	b.n	8001948 <__aeabi_dsub+0xe4>
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <__aeabi_dsub+0x348>)
 8001b80:	08f6      	lsrs	r6, r6, #3
 8001b82:	074f      	lsls	r7, r1, #29
 8001b84:	4337      	orrs	r7, r6
 8001b86:	08ca      	lsrs	r2, r1, #3
 8001b88:	429d      	cmp	r5, r3
 8001b8a:	d000      	beq.n	8001b8e <__aeabi_dsub+0x32a>
 8001b8c:	e790      	b.n	8001ab0 <__aeabi_dsub+0x24c>
 8001b8e:	003b      	movs	r3, r7
 8001b90:	4313      	orrs	r3, r2
 8001b92:	d100      	bne.n	8001b96 <__aeabi_dsub+0x332>
 8001b94:	e1a6      	b.n	8001ee4 <__aeabi_dsub+0x680>
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	031b      	lsls	r3, r3, #12
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	0312      	lsls	r2, r2, #12
 8001b9e:	0b12      	lsrs	r2, r2, #12
 8001ba0:	4d02      	ldr	r5, [pc, #8]	; (8001bac <__aeabi_dsub+0x348>)
 8001ba2:	e789      	b.n	8001ab8 <__aeabi_dsub+0x254>
 8001ba4:	0015      	movs	r5, r2
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2700      	movs	r7, #0
 8001baa:	e785      	b.n	8001ab8 <__aeabi_dsub+0x254>
 8001bac:	000007ff 	.word	0x000007ff
 8001bb0:	ff7fffff 	.word	0xff7fffff
 8001bb4:	800fffff 	.word	0x800fffff
 8001bb8:	2e00      	cmp	r6, #0
 8001bba:	d000      	beq.n	8001bbe <__aeabi_dsub+0x35a>
 8001bbc:	e0c7      	b.n	8001d4e <__aeabi_dsub+0x4ea>
 8001bbe:	1c6b      	adds	r3, r5, #1
 8001bc0:	055e      	lsls	r6, r3, #21
 8001bc2:	0d76      	lsrs	r6, r6, #21
 8001bc4:	2e01      	cmp	r6, #1
 8001bc6:	dc00      	bgt.n	8001bca <__aeabi_dsub+0x366>
 8001bc8:	e0f0      	b.n	8001dac <__aeabi_dsub+0x548>
 8001bca:	4dc8      	ldr	r5, [pc, #800]	; (8001eec <__aeabi_dsub+0x688>)
 8001bcc:	42ab      	cmp	r3, r5
 8001bce:	d100      	bne.n	8001bd2 <__aeabi_dsub+0x36e>
 8001bd0:	e0b9      	b.n	8001d46 <__aeabi_dsub+0x4e2>
 8001bd2:	1885      	adds	r5, r0, r2
 8001bd4:	000a      	movs	r2, r1
 8001bd6:	4285      	cmp	r5, r0
 8001bd8:	4189      	sbcs	r1, r1
 8001bda:	4462      	add	r2, ip
 8001bdc:	4249      	negs	r1, r1
 8001bde:	1851      	adds	r1, r2, r1
 8001be0:	2207      	movs	r2, #7
 8001be2:	07ce      	lsls	r6, r1, #31
 8001be4:	086d      	lsrs	r5, r5, #1
 8001be6:	432e      	orrs	r6, r5
 8001be8:	0849      	lsrs	r1, r1, #1
 8001bea:	4032      	ands	r2, r6
 8001bec:	001d      	movs	r5, r3
 8001bee:	e6a9      	b.n	8001944 <__aeabi_dsub+0xe0>
 8001bf0:	49bf      	ldr	r1, [pc, #764]	; (8001ef0 <__aeabi_dsub+0x68c>)
 8001bf2:	1aed      	subs	r5, r5, r3
 8001bf4:	4011      	ands	r1, r2
 8001bf6:	2207      	movs	r2, #7
 8001bf8:	4032      	ands	r2, r6
 8001bfa:	e6a3      	b.n	8001944 <__aeabi_dsub+0xe0>
 8001bfc:	0032      	movs	r2, r6
 8001bfe:	3828      	subs	r0, #40	; 0x28
 8001c00:	4082      	lsls	r2, r0
 8001c02:	2600      	movs	r6, #0
 8001c04:	e686      	b.n	8001914 <__aeabi_dsub+0xb0>
 8001c06:	0030      	movs	r0, r6
 8001c08:	f000 fa36 	bl	8002078 <__clzsi2>
 8001c0c:	3020      	adds	r0, #32
 8001c0e:	e673      	b.n	80018f8 <__aeabi_dsub+0x94>
 8001c10:	4663      	mov	r3, ip
 8001c12:	4313      	orrs	r3, r2
 8001c14:	1e5a      	subs	r2, r3, #1
 8001c16:	4193      	sbcs	r3, r2
 8001c18:	1ac6      	subs	r6, r0, r3
 8001c1a:	42b0      	cmp	r0, r6
 8001c1c:	4180      	sbcs	r0, r0
 8001c1e:	4240      	negs	r0, r0
 8001c20:	1a09      	subs	r1, r1, r0
 8001c22:	e65c      	b.n	80018de <__aeabi_dsub+0x7a>
 8001c24:	000e      	movs	r6, r1
 8001c26:	4667      	mov	r7, ip
 8001c28:	4306      	orrs	r6, r0
 8001c2a:	4317      	orrs	r7, r2
 8001c2c:	2d00      	cmp	r5, #0
 8001c2e:	d15e      	bne.n	8001cee <__aeabi_dsub+0x48a>
 8001c30:	2e00      	cmp	r6, #0
 8001c32:	d000      	beq.n	8001c36 <__aeabi_dsub+0x3d2>
 8001c34:	e0f3      	b.n	8001e1e <__aeabi_dsub+0x5ba>
 8001c36:	2f00      	cmp	r7, #0
 8001c38:	d100      	bne.n	8001c3c <__aeabi_dsub+0x3d8>
 8001c3a:	e11e      	b.n	8001e7a <__aeabi_dsub+0x616>
 8001c3c:	465c      	mov	r4, fp
 8001c3e:	4661      	mov	r1, ip
 8001c40:	4691      	mov	r9, r2
 8001c42:	e72c      	b.n	8001a9e <__aeabi_dsub+0x23a>
 8001c44:	4fa9      	ldr	r7, [pc, #676]	; (8001eec <__aeabi_dsub+0x688>)
 8001c46:	42be      	cmp	r6, r7
 8001c48:	d07b      	beq.n	8001d42 <__aeabi_dsub+0x4de>
 8001c4a:	001e      	movs	r6, r3
 8001c4c:	e6f1      	b.n	8001a32 <__aeabi_dsub+0x1ce>
 8001c4e:	0010      	movs	r0, r2
 8001c50:	3d1f      	subs	r5, #31
 8001c52:	40e8      	lsrs	r0, r5
 8001c54:	2b20      	cmp	r3, #32
 8001c56:	d003      	beq.n	8001c60 <__aeabi_dsub+0x3fc>
 8001c58:	2140      	movs	r1, #64	; 0x40
 8001c5a:	1acb      	subs	r3, r1, r3
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	4316      	orrs	r6, r2
 8001c60:	1e73      	subs	r3, r6, #1
 8001c62:	419e      	sbcs	r6, r3
 8001c64:	2207      	movs	r2, #7
 8001c66:	4306      	orrs	r6, r0
 8001c68:	4032      	ands	r2, r6
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	2500      	movs	r5, #0
 8001c6e:	e783      	b.n	8001b78 <__aeabi_dsub+0x314>
 8001c70:	1a16      	subs	r6, r2, r0
 8001c72:	4663      	mov	r3, ip
 8001c74:	42b2      	cmp	r2, r6
 8001c76:	4180      	sbcs	r0, r0
 8001c78:	1a59      	subs	r1, r3, r1
 8001c7a:	4240      	negs	r0, r0
 8001c7c:	1a0b      	subs	r3, r1, r0
 8001c7e:	4698      	mov	r8, r3
 8001c80:	465c      	mov	r4, fp
 8001c82:	e632      	b.n	80018ea <__aeabi_dsub+0x86>
 8001c84:	2e1f      	cmp	r6, #31
 8001c86:	dd00      	ble.n	8001c8a <__aeabi_dsub+0x426>
 8001c88:	e0ab      	b.n	8001de2 <__aeabi_dsub+0x57e>
 8001c8a:	2720      	movs	r7, #32
 8001c8c:	1bbb      	subs	r3, r7, r6
 8001c8e:	469a      	mov	sl, r3
 8001c90:	4663      	mov	r3, ip
 8001c92:	4657      	mov	r7, sl
 8001c94:	40bb      	lsls	r3, r7
 8001c96:	4699      	mov	r9, r3
 8001c98:	0013      	movs	r3, r2
 8001c9a:	464f      	mov	r7, r9
 8001c9c:	40f3      	lsrs	r3, r6
 8001c9e:	431f      	orrs	r7, r3
 8001ca0:	003b      	movs	r3, r7
 8001ca2:	4657      	mov	r7, sl
 8001ca4:	40ba      	lsls	r2, r7
 8001ca6:	1e57      	subs	r7, r2, #1
 8001ca8:	41ba      	sbcs	r2, r7
 8001caa:	4313      	orrs	r3, r2
 8001cac:	4662      	mov	r2, ip
 8001cae:	40f2      	lsrs	r2, r6
 8001cb0:	1889      	adds	r1, r1, r2
 8001cb2:	e698      	b.n	80019e6 <__aeabi_dsub+0x182>
 8001cb4:	2720      	movs	r7, #32
 8001cb6:	1bbb      	subs	r3, r7, r6
 8001cb8:	469a      	mov	sl, r3
 8001cba:	4663      	mov	r3, ip
 8001cbc:	4657      	mov	r7, sl
 8001cbe:	40bb      	lsls	r3, r7
 8001cc0:	4699      	mov	r9, r3
 8001cc2:	0013      	movs	r3, r2
 8001cc4:	464f      	mov	r7, r9
 8001cc6:	40f3      	lsrs	r3, r6
 8001cc8:	431f      	orrs	r7, r3
 8001cca:	003b      	movs	r3, r7
 8001ccc:	4657      	mov	r7, sl
 8001cce:	40ba      	lsls	r2, r7
 8001cd0:	1e57      	subs	r7, r2, #1
 8001cd2:	41ba      	sbcs	r2, r7
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	4662      	mov	r2, ip
 8001cd8:	40f2      	lsrs	r2, r6
 8001cda:	1a89      	subs	r1, r1, r2
 8001cdc:	e79c      	b.n	8001c18 <__aeabi_dsub+0x3b4>
 8001cde:	4b83      	ldr	r3, [pc, #524]	; (8001eec <__aeabi_dsub+0x688>)
 8001ce0:	429f      	cmp	r7, r3
 8001ce2:	d05f      	beq.n	8001da4 <__aeabi_dsub+0x540>
 8001ce4:	2580      	movs	r5, #128	; 0x80
 8001ce6:	042d      	lsls	r5, r5, #16
 8001ce8:	4273      	negs	r3, r6
 8001cea:	4329      	orrs	r1, r5
 8001cec:	e720      	b.n	8001b30 <__aeabi_dsub+0x2cc>
 8001cee:	2e00      	cmp	r6, #0
 8001cf0:	d10c      	bne.n	8001d0c <__aeabi_dsub+0x4a8>
 8001cf2:	2f00      	cmp	r7, #0
 8001cf4:	d100      	bne.n	8001cf8 <__aeabi_dsub+0x494>
 8001cf6:	e0d0      	b.n	8001e9a <__aeabi_dsub+0x636>
 8001cf8:	465c      	mov	r4, fp
 8001cfa:	4661      	mov	r1, ip
 8001cfc:	4691      	mov	r9, r2
 8001cfe:	4d7b      	ldr	r5, [pc, #492]	; (8001eec <__aeabi_dsub+0x688>)
 8001d00:	e6cd      	b.n	8001a9e <__aeabi_dsub+0x23a>
 8001d02:	4f7a      	ldr	r7, [pc, #488]	; (8001eec <__aeabi_dsub+0x688>)
 8001d04:	42be      	cmp	r6, r7
 8001d06:	d01c      	beq.n	8001d42 <__aeabi_dsub+0x4de>
 8001d08:	001e      	movs	r6, r3
 8001d0a:	e665      	b.n	80019d8 <__aeabi_dsub+0x174>
 8001d0c:	2f00      	cmp	r7, #0
 8001d0e:	d018      	beq.n	8001d42 <__aeabi_dsub+0x4de>
 8001d10:	08c0      	lsrs	r0, r0, #3
 8001d12:	074e      	lsls	r6, r1, #29
 8001d14:	4306      	orrs	r6, r0
 8001d16:	2080      	movs	r0, #128	; 0x80
 8001d18:	08c9      	lsrs	r1, r1, #3
 8001d1a:	0300      	lsls	r0, r0, #12
 8001d1c:	4201      	tst	r1, r0
 8001d1e:	d008      	beq.n	8001d32 <__aeabi_dsub+0x4ce>
 8001d20:	4663      	mov	r3, ip
 8001d22:	08dc      	lsrs	r4, r3, #3
 8001d24:	4204      	tst	r4, r0
 8001d26:	d104      	bne.n	8001d32 <__aeabi_dsub+0x4ce>
 8001d28:	0021      	movs	r1, r4
 8001d2a:	46da      	mov	sl, fp
 8001d2c:	08d2      	lsrs	r2, r2, #3
 8001d2e:	075e      	lsls	r6, r3, #29
 8001d30:	4316      	orrs	r6, r2
 8001d32:	00f3      	lsls	r3, r6, #3
 8001d34:	4699      	mov	r9, r3
 8001d36:	2401      	movs	r4, #1
 8001d38:	4653      	mov	r3, sl
 8001d3a:	00c9      	lsls	r1, r1, #3
 8001d3c:	0f72      	lsrs	r2, r6, #29
 8001d3e:	4311      	orrs	r1, r2
 8001d40:	401c      	ands	r4, r3
 8001d42:	4d6a      	ldr	r5, [pc, #424]	; (8001eec <__aeabi_dsub+0x688>)
 8001d44:	e6ab      	b.n	8001a9e <__aeabi_dsub+0x23a>
 8001d46:	001d      	movs	r5, r3
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2700      	movs	r7, #0
 8001d4c:	e6b4      	b.n	8001ab8 <__aeabi_dsub+0x254>
 8001d4e:	2d00      	cmp	r5, #0
 8001d50:	d159      	bne.n	8001e06 <__aeabi_dsub+0x5a2>
 8001d52:	000b      	movs	r3, r1
 8001d54:	4303      	orrs	r3, r0
 8001d56:	d100      	bne.n	8001d5a <__aeabi_dsub+0x4f6>
 8001d58:	e6d6      	b.n	8001b08 <__aeabi_dsub+0x2a4>
 8001d5a:	1c73      	adds	r3, r6, #1
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dsub+0x4fc>
 8001d5e:	e0b2      	b.n	8001ec6 <__aeabi_dsub+0x662>
 8001d60:	4b62      	ldr	r3, [pc, #392]	; (8001eec <__aeabi_dsub+0x688>)
 8001d62:	429f      	cmp	r7, r3
 8001d64:	d01e      	beq.n	8001da4 <__aeabi_dsub+0x540>
 8001d66:	43f3      	mvns	r3, r6
 8001d68:	2b38      	cmp	r3, #56	; 0x38
 8001d6a:	dc6f      	bgt.n	8001e4c <__aeabi_dsub+0x5e8>
 8001d6c:	2b1f      	cmp	r3, #31
 8001d6e:	dd00      	ble.n	8001d72 <__aeabi_dsub+0x50e>
 8001d70:	e097      	b.n	8001ea2 <__aeabi_dsub+0x63e>
 8001d72:	2520      	movs	r5, #32
 8001d74:	000e      	movs	r6, r1
 8001d76:	1aed      	subs	r5, r5, r3
 8001d78:	40ae      	lsls	r6, r5
 8001d7a:	46b0      	mov	r8, r6
 8001d7c:	0006      	movs	r6, r0
 8001d7e:	46aa      	mov	sl, r5
 8001d80:	40de      	lsrs	r6, r3
 8001d82:	4645      	mov	r5, r8
 8001d84:	4335      	orrs	r5, r6
 8001d86:	002e      	movs	r6, r5
 8001d88:	4655      	mov	r5, sl
 8001d8a:	40a8      	lsls	r0, r5
 8001d8c:	40d9      	lsrs	r1, r3
 8001d8e:	1e45      	subs	r5, r0, #1
 8001d90:	41a8      	sbcs	r0, r5
 8001d92:	448c      	add	ip, r1
 8001d94:	4306      	orrs	r6, r0
 8001d96:	18b6      	adds	r6, r6, r2
 8001d98:	4296      	cmp	r6, r2
 8001d9a:	4192      	sbcs	r2, r2
 8001d9c:	4251      	negs	r1, r2
 8001d9e:	4461      	add	r1, ip
 8001da0:	003d      	movs	r5, r7
 8001da2:	e625      	b.n	80019f0 <__aeabi_dsub+0x18c>
 8001da4:	003d      	movs	r5, r7
 8001da6:	4661      	mov	r1, ip
 8001da8:	4691      	mov	r9, r2
 8001daa:	e678      	b.n	8001a9e <__aeabi_dsub+0x23a>
 8001dac:	000b      	movs	r3, r1
 8001dae:	4303      	orrs	r3, r0
 8001db0:	2d00      	cmp	r5, #0
 8001db2:	d000      	beq.n	8001db6 <__aeabi_dsub+0x552>
 8001db4:	e655      	b.n	8001a62 <__aeabi_dsub+0x1fe>
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f5      	beq.n	8001da6 <__aeabi_dsub+0x542>
 8001dba:	4663      	mov	r3, ip
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	d100      	bne.n	8001dc2 <__aeabi_dsub+0x55e>
 8001dc0:	e66d      	b.n	8001a9e <__aeabi_dsub+0x23a>
 8001dc2:	1886      	adds	r6, r0, r2
 8001dc4:	4286      	cmp	r6, r0
 8001dc6:	4180      	sbcs	r0, r0
 8001dc8:	4461      	add	r1, ip
 8001dca:	4240      	negs	r0, r0
 8001dcc:	1809      	adds	r1, r1, r0
 8001dce:	2200      	movs	r2, #0
 8001dd0:	020b      	lsls	r3, r1, #8
 8001dd2:	d400      	bmi.n	8001dd6 <__aeabi_dsub+0x572>
 8001dd4:	e6d0      	b.n	8001b78 <__aeabi_dsub+0x314>
 8001dd6:	4b46      	ldr	r3, [pc, #280]	; (8001ef0 <__aeabi_dsub+0x68c>)
 8001dd8:	3501      	adds	r5, #1
 8001dda:	4019      	ands	r1, r3
 8001ddc:	e5b2      	b.n	8001944 <__aeabi_dsub+0xe0>
 8001dde:	46b1      	mov	r9, r6
 8001de0:	e65d      	b.n	8001a9e <__aeabi_dsub+0x23a>
 8001de2:	0033      	movs	r3, r6
 8001de4:	4667      	mov	r7, ip
 8001de6:	3b20      	subs	r3, #32
 8001de8:	40df      	lsrs	r7, r3
 8001dea:	003b      	movs	r3, r7
 8001dec:	2e20      	cmp	r6, #32
 8001dee:	d005      	beq.n	8001dfc <__aeabi_dsub+0x598>
 8001df0:	2740      	movs	r7, #64	; 0x40
 8001df2:	1bbf      	subs	r7, r7, r6
 8001df4:	4666      	mov	r6, ip
 8001df6:	40be      	lsls	r6, r7
 8001df8:	4332      	orrs	r2, r6
 8001dfa:	4690      	mov	r8, r2
 8001dfc:	4646      	mov	r6, r8
 8001dfe:	1e72      	subs	r2, r6, #1
 8001e00:	4196      	sbcs	r6, r2
 8001e02:	4333      	orrs	r3, r6
 8001e04:	e5ef      	b.n	80019e6 <__aeabi_dsub+0x182>
 8001e06:	4b39      	ldr	r3, [pc, #228]	; (8001eec <__aeabi_dsub+0x688>)
 8001e08:	429f      	cmp	r7, r3
 8001e0a:	d0cb      	beq.n	8001da4 <__aeabi_dsub+0x540>
 8001e0c:	2580      	movs	r5, #128	; 0x80
 8001e0e:	042d      	lsls	r5, r5, #16
 8001e10:	4273      	negs	r3, r6
 8001e12:	4329      	orrs	r1, r5
 8001e14:	e7a8      	b.n	8001d68 <__aeabi_dsub+0x504>
 8001e16:	4308      	orrs	r0, r1
 8001e18:	1e41      	subs	r1, r0, #1
 8001e1a:	4188      	sbcs	r0, r1
 8001e1c:	e6a2      	b.n	8001b64 <__aeabi_dsub+0x300>
 8001e1e:	2f00      	cmp	r7, #0
 8001e20:	d100      	bne.n	8001e24 <__aeabi_dsub+0x5c0>
 8001e22:	e63c      	b.n	8001a9e <__aeabi_dsub+0x23a>
 8001e24:	4663      	mov	r3, ip
 8001e26:	1a86      	subs	r6, r0, r2
 8001e28:	1acf      	subs	r7, r1, r3
 8001e2a:	42b0      	cmp	r0, r6
 8001e2c:	419b      	sbcs	r3, r3
 8001e2e:	425b      	negs	r3, r3
 8001e30:	1afb      	subs	r3, r7, r3
 8001e32:	4698      	mov	r8, r3
 8001e34:	021b      	lsls	r3, r3, #8
 8001e36:	d54e      	bpl.n	8001ed6 <__aeabi_dsub+0x672>
 8001e38:	1a16      	subs	r6, r2, r0
 8001e3a:	4663      	mov	r3, ip
 8001e3c:	42b2      	cmp	r2, r6
 8001e3e:	4192      	sbcs	r2, r2
 8001e40:	1a59      	subs	r1, r3, r1
 8001e42:	4252      	negs	r2, r2
 8001e44:	1a89      	subs	r1, r1, r2
 8001e46:	465c      	mov	r4, fp
 8001e48:	2200      	movs	r2, #0
 8001e4a:	e57b      	b.n	8001944 <__aeabi_dsub+0xe0>
 8001e4c:	4301      	orrs	r1, r0
 8001e4e:	000e      	movs	r6, r1
 8001e50:	1e71      	subs	r1, r6, #1
 8001e52:	418e      	sbcs	r6, r1
 8001e54:	e79f      	b.n	8001d96 <__aeabi_dsub+0x532>
 8001e56:	001d      	movs	r5, r3
 8001e58:	000e      	movs	r6, r1
 8001e5a:	3d20      	subs	r5, #32
 8001e5c:	40ee      	lsrs	r6, r5
 8001e5e:	46b0      	mov	r8, r6
 8001e60:	2b20      	cmp	r3, #32
 8001e62:	d004      	beq.n	8001e6e <__aeabi_dsub+0x60a>
 8001e64:	2540      	movs	r5, #64	; 0x40
 8001e66:	1aeb      	subs	r3, r5, r3
 8001e68:	4099      	lsls	r1, r3
 8001e6a:	4308      	orrs	r0, r1
 8001e6c:	4681      	mov	r9, r0
 8001e6e:	4648      	mov	r0, r9
 8001e70:	4643      	mov	r3, r8
 8001e72:	1e41      	subs	r1, r0, #1
 8001e74:	4188      	sbcs	r0, r1
 8001e76:	4318      	orrs	r0, r3
 8001e78:	e674      	b.n	8001b64 <__aeabi_dsub+0x300>
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2400      	movs	r4, #0
 8001e7e:	e617      	b.n	8001ab0 <__aeabi_dsub+0x24c>
 8001e80:	1a16      	subs	r6, r2, r0
 8001e82:	4663      	mov	r3, ip
 8001e84:	42b2      	cmp	r2, r6
 8001e86:	4192      	sbcs	r2, r2
 8001e88:	1a59      	subs	r1, r3, r1
 8001e8a:	4252      	negs	r2, r2
 8001e8c:	1a89      	subs	r1, r1, r2
 8001e8e:	003d      	movs	r5, r7
 8001e90:	e525      	b.n	80018de <__aeabi_dsub+0x7a>
 8001e92:	4661      	mov	r1, ip
 8001e94:	4691      	mov	r9, r2
 8001e96:	4d15      	ldr	r5, [pc, #84]	; (8001eec <__aeabi_dsub+0x688>)
 8001e98:	e601      	b.n	8001a9e <__aeabi_dsub+0x23a>
 8001e9a:	2280      	movs	r2, #128	; 0x80
 8001e9c:	2400      	movs	r4, #0
 8001e9e:	0312      	lsls	r2, r2, #12
 8001ea0:	e679      	b.n	8001b96 <__aeabi_dsub+0x332>
 8001ea2:	001d      	movs	r5, r3
 8001ea4:	000e      	movs	r6, r1
 8001ea6:	3d20      	subs	r5, #32
 8001ea8:	40ee      	lsrs	r6, r5
 8001eaa:	46b0      	mov	r8, r6
 8001eac:	2b20      	cmp	r3, #32
 8001eae:	d004      	beq.n	8001eba <__aeabi_dsub+0x656>
 8001eb0:	2540      	movs	r5, #64	; 0x40
 8001eb2:	1aeb      	subs	r3, r5, r3
 8001eb4:	4099      	lsls	r1, r3
 8001eb6:	4308      	orrs	r0, r1
 8001eb8:	4681      	mov	r9, r0
 8001eba:	464e      	mov	r6, r9
 8001ebc:	4643      	mov	r3, r8
 8001ebe:	1e71      	subs	r1, r6, #1
 8001ec0:	418e      	sbcs	r6, r1
 8001ec2:	431e      	orrs	r6, r3
 8001ec4:	e767      	b.n	8001d96 <__aeabi_dsub+0x532>
 8001ec6:	1886      	adds	r6, r0, r2
 8001ec8:	4296      	cmp	r6, r2
 8001eca:	419b      	sbcs	r3, r3
 8001ecc:	4461      	add	r1, ip
 8001ece:	425b      	negs	r3, r3
 8001ed0:	18c9      	adds	r1, r1, r3
 8001ed2:	003d      	movs	r5, r7
 8001ed4:	e58c      	b.n	80019f0 <__aeabi_dsub+0x18c>
 8001ed6:	4647      	mov	r7, r8
 8001ed8:	4337      	orrs	r7, r6
 8001eda:	d0ce      	beq.n	8001e7a <__aeabi_dsub+0x616>
 8001edc:	2207      	movs	r2, #7
 8001ede:	4641      	mov	r1, r8
 8001ee0:	4032      	ands	r2, r6
 8001ee2:	e649      	b.n	8001b78 <__aeabi_dsub+0x314>
 8001ee4:	2700      	movs	r7, #0
 8001ee6:	003a      	movs	r2, r7
 8001ee8:	e5e6      	b.n	8001ab8 <__aeabi_dsub+0x254>
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	000007ff 	.word	0x000007ff
 8001ef0:	ff7fffff 	.word	0xff7fffff

08001ef4 <__aeabi_d2iz>:
 8001ef4:	b530      	push	{r4, r5, lr}
 8001ef6:	4d14      	ldr	r5, [pc, #80]	; (8001f48 <__aeabi_d2iz+0x54>)
 8001ef8:	030a      	lsls	r2, r1, #12
 8001efa:	004b      	lsls	r3, r1, #1
 8001efc:	0b12      	lsrs	r2, r2, #12
 8001efe:	0d5b      	lsrs	r3, r3, #21
 8001f00:	0fc9      	lsrs	r1, r1, #31
 8001f02:	2400      	movs	r4, #0
 8001f04:	42ab      	cmp	r3, r5
 8001f06:	dd11      	ble.n	8001f2c <__aeabi_d2iz+0x38>
 8001f08:	4c10      	ldr	r4, [pc, #64]	; (8001f4c <__aeabi_d2iz+0x58>)
 8001f0a:	42a3      	cmp	r3, r4
 8001f0c:	dc10      	bgt.n	8001f30 <__aeabi_d2iz+0x3c>
 8001f0e:	2480      	movs	r4, #128	; 0x80
 8001f10:	0364      	lsls	r4, r4, #13
 8001f12:	4322      	orrs	r2, r4
 8001f14:	4c0e      	ldr	r4, [pc, #56]	; (8001f50 <__aeabi_d2iz+0x5c>)
 8001f16:	1ae4      	subs	r4, r4, r3
 8001f18:	2c1f      	cmp	r4, #31
 8001f1a:	dd0c      	ble.n	8001f36 <__aeabi_d2iz+0x42>
 8001f1c:	480d      	ldr	r0, [pc, #52]	; (8001f54 <__aeabi_d2iz+0x60>)
 8001f1e:	1ac3      	subs	r3, r0, r3
 8001f20:	40da      	lsrs	r2, r3
 8001f22:	0013      	movs	r3, r2
 8001f24:	425c      	negs	r4, r3
 8001f26:	2900      	cmp	r1, #0
 8001f28:	d100      	bne.n	8001f2c <__aeabi_d2iz+0x38>
 8001f2a:	001c      	movs	r4, r3
 8001f2c:	0020      	movs	r0, r4
 8001f2e:	bd30      	pop	{r4, r5, pc}
 8001f30:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <__aeabi_d2iz+0x64>)
 8001f32:	18cc      	adds	r4, r1, r3
 8001f34:	e7fa      	b.n	8001f2c <__aeabi_d2iz+0x38>
 8001f36:	4d09      	ldr	r5, [pc, #36]	; (8001f5c <__aeabi_d2iz+0x68>)
 8001f38:	40e0      	lsrs	r0, r4
 8001f3a:	46ac      	mov	ip, r5
 8001f3c:	4463      	add	r3, ip
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	0013      	movs	r3, r2
 8001f42:	4303      	orrs	r3, r0
 8001f44:	e7ee      	b.n	8001f24 <__aeabi_d2iz+0x30>
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	000003fe 	.word	0x000003fe
 8001f4c:	0000041d 	.word	0x0000041d
 8001f50:	00000433 	.word	0x00000433
 8001f54:	00000413 	.word	0x00000413
 8001f58:	7fffffff 	.word	0x7fffffff
 8001f5c:	fffffbed 	.word	0xfffffbed

08001f60 <__aeabi_i2d>:
 8001f60:	b570      	push	{r4, r5, r6, lr}
 8001f62:	2800      	cmp	r0, #0
 8001f64:	d02d      	beq.n	8001fc2 <__aeabi_i2d+0x62>
 8001f66:	17c3      	asrs	r3, r0, #31
 8001f68:	18c5      	adds	r5, r0, r3
 8001f6a:	405d      	eors	r5, r3
 8001f6c:	0fc4      	lsrs	r4, r0, #31
 8001f6e:	0028      	movs	r0, r5
 8001f70:	f000 f882 	bl	8002078 <__clzsi2>
 8001f74:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <__aeabi_i2d+0x6c>)
 8001f76:	1a1b      	subs	r3, r3, r0
 8001f78:	055b      	lsls	r3, r3, #21
 8001f7a:	0d5b      	lsrs	r3, r3, #21
 8001f7c:	280a      	cmp	r0, #10
 8001f7e:	dd15      	ble.n	8001fac <__aeabi_i2d+0x4c>
 8001f80:	380b      	subs	r0, #11
 8001f82:	4085      	lsls	r5, r0
 8001f84:	2200      	movs	r2, #0
 8001f86:	032d      	lsls	r5, r5, #12
 8001f88:	0b2d      	lsrs	r5, r5, #12
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	0010      	movs	r0, r2
 8001f8e:	032d      	lsls	r5, r5, #12
 8001f90:	0d0a      	lsrs	r2, r1, #20
 8001f92:	0b2d      	lsrs	r5, r5, #12
 8001f94:	0512      	lsls	r2, r2, #20
 8001f96:	432a      	orrs	r2, r5
 8001f98:	4d0d      	ldr	r5, [pc, #52]	; (8001fd0 <__aeabi_i2d+0x70>)
 8001f9a:	051b      	lsls	r3, r3, #20
 8001f9c:	402a      	ands	r2, r5
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	07e4      	lsls	r4, r4, #31
 8001fa4:	085b      	lsrs	r3, r3, #1
 8001fa6:	4323      	orrs	r3, r4
 8001fa8:	0019      	movs	r1, r3
 8001faa:	bd70      	pop	{r4, r5, r6, pc}
 8001fac:	0002      	movs	r2, r0
 8001fae:	0029      	movs	r1, r5
 8001fb0:	3215      	adds	r2, #21
 8001fb2:	4091      	lsls	r1, r2
 8001fb4:	000a      	movs	r2, r1
 8001fb6:	210b      	movs	r1, #11
 8001fb8:	1a08      	subs	r0, r1, r0
 8001fba:	40c5      	lsrs	r5, r0
 8001fbc:	032d      	lsls	r5, r5, #12
 8001fbe:	0b2d      	lsrs	r5, r5, #12
 8001fc0:	e7e3      	b.n	8001f8a <__aeabi_i2d+0x2a>
 8001fc2:	2400      	movs	r4, #0
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	2500      	movs	r5, #0
 8001fc8:	2200      	movs	r2, #0
 8001fca:	e7de      	b.n	8001f8a <__aeabi_i2d+0x2a>
 8001fcc:	0000041e 	.word	0x0000041e
 8001fd0:	800fffff 	.word	0x800fffff

08001fd4 <__aeabi_f2d>:
 8001fd4:	0041      	lsls	r1, r0, #1
 8001fd6:	0e09      	lsrs	r1, r1, #24
 8001fd8:	1c4b      	adds	r3, r1, #1
 8001fda:	b570      	push	{r4, r5, r6, lr}
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	0246      	lsls	r6, r0, #9
 8001fe0:	0a75      	lsrs	r5, r6, #9
 8001fe2:	0fc4      	lsrs	r4, r0, #31
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	dd14      	ble.n	8002012 <__aeabi_f2d+0x3e>
 8001fe8:	23e0      	movs	r3, #224	; 0xe0
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	076d      	lsls	r5, r5, #29
 8001fee:	0b36      	lsrs	r6, r6, #12
 8001ff0:	18cb      	adds	r3, r1, r3
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	0d0a      	lsrs	r2, r1, #20
 8001ff6:	0028      	movs	r0, r5
 8001ff8:	0512      	lsls	r2, r2, #20
 8001ffa:	4d1c      	ldr	r5, [pc, #112]	; (800206c <__aeabi_f2d+0x98>)
 8001ffc:	4332      	orrs	r2, r6
 8001ffe:	055b      	lsls	r3, r3, #21
 8002000:	402a      	ands	r2, r5
 8002002:	085b      	lsrs	r3, r3, #1
 8002004:	4313      	orrs	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	07e4      	lsls	r4, r4, #31
 800200a:	085b      	lsrs	r3, r3, #1
 800200c:	4323      	orrs	r3, r4
 800200e:	0019      	movs	r1, r3
 8002010:	bd70      	pop	{r4, r5, r6, pc}
 8002012:	2900      	cmp	r1, #0
 8002014:	d114      	bne.n	8002040 <__aeabi_f2d+0x6c>
 8002016:	2d00      	cmp	r5, #0
 8002018:	d01e      	beq.n	8002058 <__aeabi_f2d+0x84>
 800201a:	0028      	movs	r0, r5
 800201c:	f000 f82c 	bl	8002078 <__clzsi2>
 8002020:	280a      	cmp	r0, #10
 8002022:	dc1c      	bgt.n	800205e <__aeabi_f2d+0x8a>
 8002024:	230b      	movs	r3, #11
 8002026:	002a      	movs	r2, r5
 8002028:	1a1b      	subs	r3, r3, r0
 800202a:	40da      	lsrs	r2, r3
 800202c:	0003      	movs	r3, r0
 800202e:	3315      	adds	r3, #21
 8002030:	409d      	lsls	r5, r3
 8002032:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <__aeabi_f2d+0x9c>)
 8002034:	0312      	lsls	r2, r2, #12
 8002036:	1a1b      	subs	r3, r3, r0
 8002038:	055b      	lsls	r3, r3, #21
 800203a:	0b16      	lsrs	r6, r2, #12
 800203c:	0d5b      	lsrs	r3, r3, #21
 800203e:	e7d8      	b.n	8001ff2 <__aeabi_f2d+0x1e>
 8002040:	2d00      	cmp	r5, #0
 8002042:	d006      	beq.n	8002052 <__aeabi_f2d+0x7e>
 8002044:	0b32      	lsrs	r2, r6, #12
 8002046:	2680      	movs	r6, #128	; 0x80
 8002048:	0336      	lsls	r6, r6, #12
 800204a:	076d      	lsls	r5, r5, #29
 800204c:	4316      	orrs	r6, r2
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <__aeabi_f2d+0xa0>)
 8002050:	e7cf      	b.n	8001ff2 <__aeabi_f2d+0x1e>
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <__aeabi_f2d+0xa0>)
 8002054:	2600      	movs	r6, #0
 8002056:	e7cc      	b.n	8001ff2 <__aeabi_f2d+0x1e>
 8002058:	2300      	movs	r3, #0
 800205a:	2600      	movs	r6, #0
 800205c:	e7c9      	b.n	8001ff2 <__aeabi_f2d+0x1e>
 800205e:	0003      	movs	r3, r0
 8002060:	002a      	movs	r2, r5
 8002062:	3b0b      	subs	r3, #11
 8002064:	409a      	lsls	r2, r3
 8002066:	2500      	movs	r5, #0
 8002068:	e7e3      	b.n	8002032 <__aeabi_f2d+0x5e>
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	800fffff 	.word	0x800fffff
 8002070:	00000389 	.word	0x00000389
 8002074:	000007ff 	.word	0x000007ff

08002078 <__clzsi2>:
 8002078:	211c      	movs	r1, #28
 800207a:	2301      	movs	r3, #1
 800207c:	041b      	lsls	r3, r3, #16
 800207e:	4298      	cmp	r0, r3
 8002080:	d301      	bcc.n	8002086 <__clzsi2+0xe>
 8002082:	0c00      	lsrs	r0, r0, #16
 8002084:	3910      	subs	r1, #16
 8002086:	0a1b      	lsrs	r3, r3, #8
 8002088:	4298      	cmp	r0, r3
 800208a:	d301      	bcc.n	8002090 <__clzsi2+0x18>
 800208c:	0a00      	lsrs	r0, r0, #8
 800208e:	3908      	subs	r1, #8
 8002090:	091b      	lsrs	r3, r3, #4
 8002092:	4298      	cmp	r0, r3
 8002094:	d301      	bcc.n	800209a <__clzsi2+0x22>
 8002096:	0900      	lsrs	r0, r0, #4
 8002098:	3904      	subs	r1, #4
 800209a:	a202      	add	r2, pc, #8	; (adr r2, 80020a4 <__clzsi2+0x2c>)
 800209c:	5c10      	ldrb	r0, [r2, r0]
 800209e:	1840      	adds	r0, r0, r1
 80020a0:	4770      	bx	lr
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	02020304 	.word	0x02020304
 80020a8:	01010101 	.word	0x01010101
	...

080020b4 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80020ba:	1d3b      	adds	r3, r7, #4
 80020bc:	0018      	movs	r0, r3
 80020be:	230c      	movs	r3, #12
 80020c0:	001a      	movs	r2, r3
 80020c2:	2100      	movs	r1, #0
 80020c4:	f004 fa9e 	bl	8006604 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 80020c8:	4b33      	ldr	r3, [pc, #204]	; (8002198 <MX_ADC_Init+0xe4>)
 80020ca:	4a34      	ldr	r2, [pc, #208]	; (800219c <MX_ADC_Init+0xe8>)
 80020cc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80020ce:	4b32      	ldr	r3, [pc, #200]	; (8002198 <MX_ADC_Init+0xe4>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80020d4:	4b30      	ldr	r3, [pc, #192]	; (8002198 <MX_ADC_Init+0xe4>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020da:	4b2f      	ldr	r3, [pc, #188]	; (8002198 <MX_ADC_Init+0xe4>)
 80020dc:	2200      	movs	r2, #0
 80020de:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80020e0:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <MX_ADC_Init+0xe4>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020e6:	4b2c      	ldr	r3, [pc, #176]	; (8002198 <MX_ADC_Init+0xe4>)
 80020e8:	2204      	movs	r2, #4
 80020ea:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80020ec:	4b2a      	ldr	r3, [pc, #168]	; (8002198 <MX_ADC_Init+0xe4>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80020f2:	4b29      	ldr	r3, [pc, #164]	; (8002198 <MX_ADC_Init+0xe4>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80020f8:	4b27      	ldr	r3, [pc, #156]	; (8002198 <MX_ADC_Init+0xe4>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80020fe:	4b26      	ldr	r3, [pc, #152]	; (8002198 <MX_ADC_Init+0xe4>)
 8002100:	2200      	movs	r2, #0
 8002102:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002104:	4b24      	ldr	r3, [pc, #144]	; (8002198 <MX_ADC_Init+0xe4>)
 8002106:	22c2      	movs	r2, #194	; 0xc2
 8002108:	32ff      	adds	r2, #255	; 0xff
 800210a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800210c:	4b22      	ldr	r3, [pc, #136]	; (8002198 <MX_ADC_Init+0xe4>)
 800210e:	2200      	movs	r2, #0
 8002110:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8002112:	4b21      	ldr	r3, [pc, #132]	; (8002198 <MX_ADC_Init+0xe4>)
 8002114:	2224      	movs	r2, #36	; 0x24
 8002116:	2101      	movs	r1, #1
 8002118:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800211a:	4b1f      	ldr	r3, [pc, #124]	; (8002198 <MX_ADC_Init+0xe4>)
 800211c:	2201      	movs	r2, #1
 800211e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <MX_ADC_Init+0xe4>)
 8002122:	0018      	movs	r0, r3
 8002124:	f001 f88c 	bl	8003240 <HAL_ADC_Init>
 8002128:	1e03      	subs	r3, r0, #0
 800212a:	d001      	beq.n	8002130 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800212c:	f000 fd08 	bl	8002b40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002130:	1d3b      	adds	r3, r7, #4
 8002132:	2203      	movs	r2, #3
 8002134:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002136:	1d3b      	adds	r3, r7, #4
 8002138:	2280      	movs	r2, #128	; 0x80
 800213a:	0152      	lsls	r2, r2, #5
 800213c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	2280      	movs	r2, #128	; 0x80
 8002142:	0552      	lsls	r2, r2, #21
 8002144:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002146:	1d3a      	adds	r2, r7, #4
 8002148:	4b13      	ldr	r3, [pc, #76]	; (8002198 <MX_ADC_Init+0xe4>)
 800214a:	0011      	movs	r1, r2
 800214c:	0018      	movs	r0, r3
 800214e:	f001 f9b7 	bl	80034c0 <HAL_ADC_ConfigChannel>
 8002152:	1e03      	subs	r3, r0, #0
 8002154:	d001      	beq.n	800215a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002156:	f000 fcf3 	bl	8002b40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	2204      	movs	r2, #4
 800215e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002160:	1d3a      	adds	r2, r7, #4
 8002162:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <MX_ADC_Init+0xe4>)
 8002164:	0011      	movs	r1, r2
 8002166:	0018      	movs	r0, r3
 8002168:	f001 f9aa 	bl	80034c0 <HAL_ADC_ConfigChannel>
 800216c:	1e03      	subs	r3, r0, #0
 800216e:	d001      	beq.n	8002174 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8002170:	f000 fce6 	bl	8002b40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002174:	1d3b      	adds	r3, r7, #4
 8002176:	2205      	movs	r2, #5
 8002178:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800217a:	1d3a      	adds	r2, r7, #4
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <MX_ADC_Init+0xe4>)
 800217e:	0011      	movs	r1, r2
 8002180:	0018      	movs	r0, r3
 8002182:	f001 f99d 	bl	80034c0 <HAL_ADC_ConfigChannel>
 8002186:	1e03      	subs	r3, r0, #0
 8002188:	d001      	beq.n	800218e <MX_ADC_Init+0xda>
  {
    Error_Handler();
 800218a:	f000 fcd9 	bl	8002b40 <Error_Handler>
  }

}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	46bd      	mov	sp, r7
 8002192:	b004      	add	sp, #16
 8002194:	bd80      	pop	{r7, pc}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	200003e4 	.word	0x200003e4
 800219c:	40012400 	.word	0x40012400

080021a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08a      	sub	sp, #40	; 0x28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	2314      	movs	r3, #20
 80021aa:	18fb      	adds	r3, r7, r3
 80021ac:	0018      	movs	r0, r3
 80021ae:	2314      	movs	r3, #20
 80021b0:	001a      	movs	r2, r3
 80021b2:	2100      	movs	r1, #0
 80021b4:	f004 fa26 	bl	8006604 <memset>
  if(adcHandle->Instance==ADC1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a2d      	ldr	r2, [pc, #180]	; (8002274 <HAL_ADC_MspInit+0xd4>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d154      	bne.n	800226c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021c2:	4b2d      	ldr	r3, [pc, #180]	; (8002278 <HAL_ADC_MspInit+0xd8>)
 80021c4:	699a      	ldr	r2, [r3, #24]
 80021c6:	4b2c      	ldr	r3, [pc, #176]	; (8002278 <HAL_ADC_MspInit+0xd8>)
 80021c8:	2180      	movs	r1, #128	; 0x80
 80021ca:	0089      	lsls	r1, r1, #2
 80021cc:	430a      	orrs	r2, r1
 80021ce:	619a      	str	r2, [r3, #24]
 80021d0:	4b29      	ldr	r3, [pc, #164]	; (8002278 <HAL_ADC_MspInit+0xd8>)
 80021d2:	699a      	ldr	r2, [r3, #24]
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4013      	ands	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021de:	4b26      	ldr	r3, [pc, #152]	; (8002278 <HAL_ADC_MspInit+0xd8>)
 80021e0:	695a      	ldr	r2, [r3, #20]
 80021e2:	4b25      	ldr	r3, [pc, #148]	; (8002278 <HAL_ADC_MspInit+0xd8>)
 80021e4:	2180      	movs	r1, #128	; 0x80
 80021e6:	0289      	lsls	r1, r1, #10
 80021e8:	430a      	orrs	r2, r1
 80021ea:	615a      	str	r2, [r3, #20]
 80021ec:	4b22      	ldr	r3, [pc, #136]	; (8002278 <HAL_ADC_MspInit+0xd8>)
 80021ee:	695a      	ldr	r2, [r3, #20]
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	029b      	lsls	r3, r3, #10
 80021f4:	4013      	ands	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5 
    */
    GPIO_InitStruct.Pin = INA199_REF_Pin|INA199_OUT_Pin|BATT_VOLT_Pin;
 80021fa:	2114      	movs	r1, #20
 80021fc:	187b      	adds	r3, r7, r1
 80021fe:	2238      	movs	r2, #56	; 0x38
 8002200:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002202:	187b      	adds	r3, r7, r1
 8002204:	2203      	movs	r2, #3
 8002206:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	187b      	adds	r3, r7, r1
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220e:	187a      	adds	r2, r7, r1
 8002210:	2390      	movs	r3, #144	; 0x90
 8002212:	05db      	lsls	r3, r3, #23
 8002214:	0011      	movs	r1, r2
 8002216:	0018      	movs	r0, r3
 8002218:	f001 fd12 	bl	8003c40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800221c:	4b17      	ldr	r3, [pc, #92]	; (800227c <HAL_ADC_MspInit+0xdc>)
 800221e:	4a18      	ldr	r2, [pc, #96]	; (8002280 <HAL_ADC_MspInit+0xe0>)
 8002220:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002222:	4b16      	ldr	r3, [pc, #88]	; (800227c <HAL_ADC_MspInit+0xdc>)
 8002224:	2200      	movs	r2, #0
 8002226:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002228:	4b14      	ldr	r3, [pc, #80]	; (800227c <HAL_ADC_MspInit+0xdc>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800222e:	4b13      	ldr	r3, [pc, #76]	; (800227c <HAL_ADC_MspInit+0xdc>)
 8002230:	2280      	movs	r2, #128	; 0x80
 8002232:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_ADC_MspInit+0xdc>)
 8002236:	2280      	movs	r2, #128	; 0x80
 8002238:	0052      	lsls	r2, r2, #1
 800223a:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800223c:	4b0f      	ldr	r3, [pc, #60]	; (800227c <HAL_ADC_MspInit+0xdc>)
 800223e:	2280      	movs	r2, #128	; 0x80
 8002240:	00d2      	lsls	r2, r2, #3
 8002242:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002244:	4b0d      	ldr	r3, [pc, #52]	; (800227c <HAL_ADC_MspInit+0xdc>)
 8002246:	2220      	movs	r2, #32
 8002248:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800224a:	4b0c      	ldr	r3, [pc, #48]	; (800227c <HAL_ADC_MspInit+0xdc>)
 800224c:	2200      	movs	r2, #0
 800224e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002250:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_ADC_MspInit+0xdc>)
 8002252:	0018      	movs	r0, r3
 8002254:	f001 fbee 	bl	8003a34 <HAL_DMA_Init>
 8002258:	1e03      	subs	r3, r0, #0
 800225a:	d001      	beq.n	8002260 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 800225c:	f000 fc70 	bl	8002b40 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a06      	ldr	r2, [pc, #24]	; (800227c <HAL_ADC_MspInit+0xdc>)
 8002264:	631a      	str	r2, [r3, #48]	; 0x30
 8002266:	4b05      	ldr	r3, [pc, #20]	; (800227c <HAL_ADC_MspInit+0xdc>)
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800226c:	46c0      	nop			; (mov r8, r8)
 800226e:	46bd      	mov	sp, r7
 8002270:	b00a      	add	sp, #40	; 0x28
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40012400 	.word	0x40012400
 8002278:	40021000 	.word	0x40021000
 800227c:	200003a0 	.word	0x200003a0
 8002280:	40020008 	.word	0x40020008

08002284 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0

  hcan.Instance = CAN;
 8002288:	4b18      	ldr	r3, [pc, #96]	; (80022ec <MX_CAN_Init+0x68>)
 800228a:	4a19      	ldr	r2, [pc, #100]	; (80022f0 <MX_CAN_Init+0x6c>)
 800228c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 800228e:	4b17      	ldr	r3, [pc, #92]	; (80022ec <MX_CAN_Init+0x68>)
 8002290:	2203      	movs	r2, #3
 8002292:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002294:	4b15      	ldr	r3, [pc, #84]	; (80022ec <MX_CAN_Init+0x68>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800229a:	4b14      	ldr	r3, [pc, #80]	; (80022ec <MX_CAN_Init+0x68>)
 800229c:	2200      	movs	r2, #0
 800229e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80022a0:	4b12      	ldr	r3, [pc, #72]	; (80022ec <MX_CAN_Init+0x68>)
 80022a2:	22c0      	movs	r2, #192	; 0xc0
 80022a4:	0312      	lsls	r2, r2, #12
 80022a6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80022a8:	4b10      	ldr	r3, [pc, #64]	; (80022ec <MX_CAN_Init+0x68>)
 80022aa:	2280      	movs	r2, #128	; 0x80
 80022ac:	0352      	lsls	r2, r2, #13
 80022ae:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80022b0:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <MX_CAN_Init+0x68>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80022b6:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <MX_CAN_Init+0x68>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <MX_CAN_Init+0x68>)
 80022be:	2200      	movs	r2, #0
 80022c0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80022c2:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <MX_CAN_Init+0x68>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80022c8:	4b08      	ldr	r3, [pc, #32]	; (80022ec <MX_CAN_Init+0x68>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80022ce:	4b07      	ldr	r3, [pc, #28]	; (80022ec <MX_CAN_Init+0x68>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <MX_CAN_Init+0x68>)
 80022d6:	0018      	movs	r0, r3
 80022d8:	f001 fa00 	bl	80036dc <HAL_CAN_Init>
 80022dc:	1e03      	subs	r3, r0, #0
 80022de:	d001      	beq.n	80022e4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80022e0:	f000 fc2e 	bl	8002b40 <Error_Handler>
  }

}
 80022e4:	46c0      	nop			; (mov r8, r8)
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	20000424 	.word	0x20000424
 80022f0:	40006400 	.word	0x40006400

080022f4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08a      	sub	sp, #40	; 0x28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fc:	2314      	movs	r3, #20
 80022fe:	18fb      	adds	r3, r7, r3
 8002300:	0018      	movs	r0, r3
 8002302:	2314      	movs	r3, #20
 8002304:	001a      	movs	r2, r3
 8002306:	2100      	movs	r1, #0
 8002308:	f004 f97c 	bl	8006604 <memset>
  if(canHandle->Instance==CAN)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a1d      	ldr	r2, [pc, #116]	; (8002388 <HAL_CAN_MspInit+0x94>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d133      	bne.n	800237e <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002316:	4b1d      	ldr	r3, [pc, #116]	; (800238c <HAL_CAN_MspInit+0x98>)
 8002318:	69da      	ldr	r2, [r3, #28]
 800231a:	4b1c      	ldr	r3, [pc, #112]	; (800238c <HAL_CAN_MspInit+0x98>)
 800231c:	2180      	movs	r1, #128	; 0x80
 800231e:	0489      	lsls	r1, r1, #18
 8002320:	430a      	orrs	r2, r1
 8002322:	61da      	str	r2, [r3, #28]
 8002324:	4b19      	ldr	r3, [pc, #100]	; (800238c <HAL_CAN_MspInit+0x98>)
 8002326:	69da      	ldr	r2, [r3, #28]
 8002328:	2380      	movs	r3, #128	; 0x80
 800232a:	049b      	lsls	r3, r3, #18
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
 8002330:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002332:	4b16      	ldr	r3, [pc, #88]	; (800238c <HAL_CAN_MspInit+0x98>)
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <HAL_CAN_MspInit+0x98>)
 8002338:	2180      	movs	r1, #128	; 0x80
 800233a:	0289      	lsls	r1, r1, #10
 800233c:	430a      	orrs	r2, r1
 800233e:	615a      	str	r2, [r3, #20]
 8002340:	4b12      	ldr	r3, [pc, #72]	; (800238c <HAL_CAN_MspInit+0x98>)
 8002342:	695a      	ldr	r2, [r3, #20]
 8002344:	2380      	movs	r3, #128	; 0x80
 8002346:	029b      	lsls	r3, r3, #10
 8002348:	4013      	ands	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800234e:	2114      	movs	r1, #20
 8002350:	187b      	adds	r3, r7, r1
 8002352:	22c0      	movs	r2, #192	; 0xc0
 8002354:	0152      	lsls	r2, r2, #5
 8002356:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	187b      	adds	r3, r7, r1
 800235a:	2202      	movs	r2, #2
 800235c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	187b      	adds	r3, r7, r1
 8002360:	2200      	movs	r2, #0
 8002362:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002364:	187b      	adds	r3, r7, r1
 8002366:	2203      	movs	r2, #3
 8002368:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800236a:	187b      	adds	r3, r7, r1
 800236c:	2204      	movs	r2, #4
 800236e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002370:	187a      	adds	r2, r7, r1
 8002372:	2390      	movs	r3, #144	; 0x90
 8002374:	05db      	lsls	r3, r3, #23
 8002376:	0011      	movs	r1, r2
 8002378:	0018      	movs	r0, r3
 800237a:	f001 fc61 	bl	8003c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	46bd      	mov	sp, r7
 8002382:	b00a      	add	sp, #40	; 0x28
 8002384:	bd80      	pop	{r7, pc}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	40006400 	.word	0x40006400
 800238c:	40021000 	.word	0x40021000

08002390 <get_time>:
#define POSERRINT_LIMIT 1.0//[rad・s]
static float vel_pos_gain=0;
const float RADPERCNT = -2.0 * M_PI / ONEREVCNT; //[rad/cnt]
static float Kp_p = Kp_p_DEFAULT, Ki_p = Ki_p_DEFAULT, Kd_p = Kd_p_DEFAULT;

void get_time() { //wake only once in control loop
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
//	static uint32_t loopcounter;
//	loopcounter++;
//	TimeNow = loopcounter * dt_major;
	TimeNow = HAL_GetTick() * 0.001f;
 8002394:	f000 ff4a 	bl	800322c <HAL_GetTick>
 8002398:	0003      	movs	r3, r0
 800239a:	0018      	movs	r0, r3
 800239c:	f7fe fea8 	bl	80010f0 <__aeabi_ui2f>
 80023a0:	1c03      	adds	r3, r0, #0
 80023a2:	4905      	ldr	r1, [pc, #20]	; (80023b8 <get_time+0x28>)
 80023a4:	1c18      	adds	r0, r3, #0
 80023a6:	f7fe fb43 	bl	8000a30 <__aeabi_fmul>
 80023aa:	1c03      	adds	r3, r0, #0
 80023ac:	1c1a      	adds	r2, r3, #0
 80023ae:	4b03      	ldr	r3, [pc, #12]	; (80023bc <get_time+0x2c>)
 80023b0:	601a      	str	r2, [r3, #0]
}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	3a83126f 	.word	0x3a83126f
 80023bc:	20000058 	.word	0x20000058

080023c0 <get_pos>:
void get_pos() {
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
	PosRes = Enc_Read() * RADPERCNT;
 80023c4:	f000 febc 	bl	8003140 <Enc_Read>
 80023c8:	0003      	movs	r3, r0
 80023ca:	0018      	movs	r0, r3
 80023cc:	f7fe fe46 	bl	800105c <__aeabi_i2f>
 80023d0:	1c02      	adds	r2, r0, #0
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <get_pos+0x2c>)
 80023d4:	1c19      	adds	r1, r3, #0
 80023d6:	1c10      	adds	r0, r2, #0
 80023d8:	f7fe fb2a 	bl	8000a30 <__aeabi_fmul>
 80023dc:	1c03      	adds	r3, r0, #0
 80023de:	1c1a      	adds	r2, r3, #0
 80023e0:	4b03      	ldr	r3, [pc, #12]	; (80023f0 <get_pos+0x30>)
 80023e2:	601a      	str	r2, [r3, #0]
}
 80023e4:	46c0      	nop			; (mov r8, r8)
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	bdb2b8c2 	.word	0xbdb2b8c2
 80023f0:	20000038 	.word	0x20000038

080023f4 <get_vel>:
void get_vel() {
 80023f4:	b590      	push	{r4, r7, lr}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
	static float PosLast = 0.0f, TimeLast = 0.0f; //　過去位置，過去時間

	float dtheta = PosRes - PosLast;
 80023fa:	4b27      	ldr	r3, [pc, #156]	; (8002498 <get_vel+0xa4>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	4b27      	ldr	r3, [pc, #156]	; (800249c <get_vel+0xa8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	1c19      	adds	r1, r3, #0
 8002404:	1c10      	adds	r0, r2, #0
 8002406:	f7fe fc45 	bl	8000c94 <__aeabi_fsub>
 800240a:	1c03      	adds	r3, r0, #0
 800240c:	607b      	str	r3, [r7, #4]
	float spendtime = TimeNow - TimeLast;
 800240e:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <get_vel+0xac>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <get_vel+0xb0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	1c19      	adds	r1, r3, #0
 8002418:	1c10      	adds	r0, r2, #0
 800241a:	f7fe fc3b 	bl	8000c94 <__aeabi_fsub>
 800241e:	1c03      	adds	r3, r0, #0
 8002420:	603b      	str	r3, [r7, #0]

	if (abs(dtheta) > M_PI) { //　±180度以上
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff fdd6 	bl	8001fd4 <__aeabi_f2d>
 8002428:	0003      	movs	r3, r0
 800242a:	000c      	movs	r4, r1
 800242c:	0018      	movs	r0, r3
 800242e:	0021      	movs	r1, r4
 8002430:	f004 f8c0 	bl	80065b4 <abs>
 8002434:	0003      	movs	r3, r0
 8002436:	0018      	movs	r0, r3
 8002438:	f7ff fd92 	bl	8001f60 <__aeabi_i2d>
 800243c:	4a1a      	ldr	r2, [pc, #104]	; (80024a8 <get_vel+0xb4>)
 800243e:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <get_vel+0xb8>)
 8002440:	f7fd ff18 	bl	8000274 <__aeabi_dcmpgt>
 8002444:	1e03      	subs	r3, r0, #0
 8002446:	d010      	beq.n	800246a <get_vel+0x76>
		VelRes = dtheta / spendtime; //　速度更新
 8002448:	6839      	ldr	r1, [r7, #0]
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7fe f918 	bl	8000680 <__aeabi_fdiv>
 8002450:	1c03      	adds	r3, r0, #0
 8002452:	1c1a      	adds	r2, r3, #0
 8002454:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <get_vel+0xbc>)
 8002456:	601a      	str	r2, [r3, #0]
		PosLast = PosRes; //　位置更新
 8002458:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <get_vel+0xa4>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b0f      	ldr	r3, [pc, #60]	; (800249c <get_vel+0xa8>)
 800245e:	601a      	str	r2, [r3, #0]
		TimeLast = TimeNow; //　過去時間更新
 8002460:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <get_vel+0xac>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <get_vel+0xb0>)
 8002466:	601a      	str	r2, [r3, #0]
	} else if (spendtime > 1) { //　1秒たっても半回転してない時
		VelRes = 0.0; //　停止と判断
		PosLast = PosRes; //　位置更新
		TimeLast = TimeNow; //　過去時間更新
	}
}
 8002468:	e012      	b.n	8002490 <get_vel+0x9c>
	} else if (spendtime > 1) { //　1秒たっても半回転してない時
 800246a:	21fe      	movs	r1, #254	; 0xfe
 800246c:	0589      	lsls	r1, r1, #22
 800246e:	6838      	ldr	r0, [r7, #0]
 8002470:	f7fd ff3a 	bl	80002e8 <__aeabi_fcmpgt>
 8002474:	1e03      	subs	r3, r0, #0
 8002476:	d100      	bne.n	800247a <get_vel+0x86>
}
 8002478:	e00a      	b.n	8002490 <get_vel+0x9c>
		VelRes = 0.0; //　停止と判断
 800247a:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <get_vel+0xbc>)
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
		PosLast = PosRes; //　位置更新
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <get_vel+0xa4>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <get_vel+0xa8>)
 8002486:	601a      	str	r2, [r3, #0]
		TimeLast = TimeNow; //　過去時間更新
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <get_vel+0xac>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <get_vel+0xb0>)
 800248e:	601a      	str	r2, [r3, #0]
}
 8002490:	46c0      	nop			; (mov r8, r8)
 8002492:	46bd      	mov	sp, r7
 8002494:	b003      	add	sp, #12
 8002496:	bd90      	pop	{r4, r7, pc}
 8002498:	20000038 	.word	0x20000038
 800249c:	20000060 	.word	0x20000060
 80024a0:	20000058 	.word	0x20000058
 80024a4:	20000064 	.word	0x20000064
 80024a8:	54442d18 	.word	0x54442d18
 80024ac:	400921fb 	.word	0x400921fb
 80024b0:	20000048 	.word	0x20000048

080024b4 <control>:

void control() {
 80024b4:	b5b0      	push	{r4, r5, r7, lr}
 80024b6:	af00      	add	r7, sp, #0
	get_time(); //　時刻更新
 80024b8:	f7ff ff6a 	bl	8002390 <get_time>
	get_pos(); //　位置更新
 80024bc:	f7ff ff80 	bl	80023c0 <get_pos>
	get_vel(); //　速度更新
 80024c0:	f7ff ff98 	bl	80023f4 <get_vel>
//	PosCmd = TimeNow;
//	PosCmd=100.0;
//	VelCmd = 10;

	//　位置制御モード
	PosErr = PosCmd - PosRes; //　位置偏差
 80024c4:	4b70      	ldr	r3, [pc, #448]	; (8002688 <control+0x1d4>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b70      	ldr	r3, [pc, #448]	; (800268c <control+0x1d8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	1c19      	adds	r1, r3, #0
 80024ce:	1c10      	adds	r0, r2, #0
 80024d0:	f7fe fbe0 	bl	8000c94 <__aeabi_fsub>
 80024d4:	1c03      	adds	r3, r0, #0
 80024d6:	1c1a      	adds	r2, r3, #0
 80024d8:	4b6d      	ldr	r3, [pc, #436]	; (8002690 <control+0x1dc>)
 80024da:	601a      	str	r2, [r3, #0]
	if (abs(PosErr) < M_PI)  //残り半周以内なら
 80024dc:	4b6c      	ldr	r3, [pc, #432]	; (8002690 <control+0x1dc>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	1c18      	adds	r0, r3, #0
 80024e2:	f7ff fd77 	bl	8001fd4 <__aeabi_f2d>
 80024e6:	0003      	movs	r3, r0
 80024e8:	000c      	movs	r4, r1
 80024ea:	0018      	movs	r0, r3
 80024ec:	0021      	movs	r1, r4
 80024ee:	f004 f861 	bl	80065b4 <abs>
 80024f2:	0003      	movs	r3, r0
 80024f4:	0018      	movs	r0, r3
 80024f6:	f7ff fd33 	bl	8001f60 <__aeabi_i2d>
 80024fa:	4a66      	ldr	r2, [pc, #408]	; (8002694 <control+0x1e0>)
 80024fc:	4b66      	ldr	r3, [pc, #408]	; (8002698 <control+0x1e4>)
 80024fe:	f7fd fea5 	bl	800024c <__aeabi_dcmplt>
 8002502:	1e03      	subs	r3, r0, #0
 8002504:	d00b      	beq.n	800251e <control+0x6a>
		VelCmd = PosErr * vel_pos_gain; //　残角度に比例した速度
 8002506:	4b62      	ldr	r3, [pc, #392]	; (8002690 <control+0x1dc>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	4b64      	ldr	r3, [pc, #400]	; (800269c <control+0x1e8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	1c19      	adds	r1, r3, #0
 8002510:	1c10      	adds	r0, r2, #0
 8002512:	f7fe fa8d 	bl	8000a30 <__aeabi_fmul>
 8002516:	1c03      	adds	r3, r0, #0
 8002518:	1c1a      	adds	r2, r3, #0
 800251a:	4b61      	ldr	r3, [pc, #388]	; (80026a0 <control+0x1ec>)
 800251c:	601a      	str	r2, [r3, #0]

	VelErr = VelCmd - VelRes; //　速度偏差
 800251e:	4b60      	ldr	r3, [pc, #384]	; (80026a0 <control+0x1ec>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	4b60      	ldr	r3, [pc, #384]	; (80026a4 <control+0x1f0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	1c19      	adds	r1, r3, #0
 8002528:	1c10      	adds	r0, r2, #0
 800252a:	f7fe fbb3 	bl	8000c94 <__aeabi_fsub>
 800252e:	1c03      	adds	r3, r0, #0
 8002530:	1c1a      	adds	r2, r3, #0
 8002532:	4b5d      	ldr	r3, [pc, #372]	; (80026a8 <control+0x1f4>)
 8002534:	601a      	str	r2, [r3, #0]
	PosErrInt += PosErr * dt_major; // 積分成分
 8002536:	4b56      	ldr	r3, [pc, #344]	; (8002690 <control+0x1dc>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	495c      	ldr	r1, [pc, #368]	; (80026ac <control+0x1f8>)
 800253c:	1c18      	adds	r0, r3, #0
 800253e:	f7fe fa77 	bl	8000a30 <__aeabi_fmul>
 8002542:	1c03      	adds	r3, r0, #0
 8002544:	1c1a      	adds	r2, r3, #0
 8002546:	4b5a      	ldr	r3, [pc, #360]	; (80026b0 <control+0x1fc>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	1c19      	adds	r1, r3, #0
 800254c:	1c10      	adds	r0, r2, #0
 800254e:	f7fd fefd 	bl	800034c <__aeabi_fadd>
 8002552:	1c03      	adds	r3, r0, #0
 8002554:	1c1a      	adds	r2, r3, #0
 8002556:	4b56      	ldr	r3, [pc, #344]	; (80026b0 <control+0x1fc>)
 8002558:	601a      	str	r2, [r3, #0]
	if (abs(PosErrInt) > POSERRINT_LIMIT) //　積分成分の範囲内強制
 800255a:	4b55      	ldr	r3, [pc, #340]	; (80026b0 <control+0x1fc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	1c18      	adds	r0, r3, #0
 8002560:	f7ff fd38 	bl	8001fd4 <__aeabi_f2d>
 8002564:	0003      	movs	r3, r0
 8002566:	000c      	movs	r4, r1
 8002568:	0018      	movs	r0, r3
 800256a:	0021      	movs	r1, r4
 800256c:	f004 f822 	bl	80065b4 <abs>
 8002570:	0003      	movs	r3, r0
 8002572:	0018      	movs	r0, r3
 8002574:	f7ff fcf4 	bl	8001f60 <__aeabi_i2d>
 8002578:	2200      	movs	r2, #0
 800257a:	4b4e      	ldr	r3, [pc, #312]	; (80026b4 <control+0x200>)
 800257c:	f7fd fe7a 	bl	8000274 <__aeabi_dcmpgt>
 8002580:	1e03      	subs	r3, r0, #0
 8002582:	d019      	beq.n	80025b8 <control+0x104>
		PosErrInt = constrain(PosErrInt, -POSERRINT_LIMIT, POSERRINT_LIMIT);
 8002584:	4b4a      	ldr	r3, [pc, #296]	; (80026b0 <control+0x1fc>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	494b      	ldr	r1, [pc, #300]	; (80026b8 <control+0x204>)
 800258a:	1c18      	adds	r0, r3, #0
 800258c:	f7fd fe98 	bl	80002c0 <__aeabi_fcmplt>
 8002590:	1e03      	subs	r3, r0, #0
 8002592:	d001      	beq.n	8002598 <control+0xe4>
 8002594:	4b48      	ldr	r3, [pc, #288]	; (80026b8 <control+0x204>)
 8002596:	e00d      	b.n	80025b4 <control+0x100>
 8002598:	4b45      	ldr	r3, [pc, #276]	; (80026b0 <control+0x1fc>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	21fe      	movs	r1, #254	; 0xfe
 800259e:	0589      	lsls	r1, r1, #22
 80025a0:	1c18      	adds	r0, r3, #0
 80025a2:	f7fd fea1 	bl	80002e8 <__aeabi_fcmpgt>
 80025a6:	1e03      	subs	r3, r0, #0
 80025a8:	d002      	beq.n	80025b0 <control+0xfc>
 80025aa:	23fe      	movs	r3, #254	; 0xfe
 80025ac:	059b      	lsls	r3, r3, #22
 80025ae:	e001      	b.n	80025b4 <control+0x100>
 80025b0:	4b3f      	ldr	r3, [pc, #252]	; (80026b0 <control+0x1fc>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a3e      	ldr	r2, [pc, #248]	; (80026b0 <control+0x1fc>)
 80025b6:	6013      	str	r3, [r2, #0]

	AccelerationRef = Kp_p * PosErr + Kd_p * VelErr + Ki_p * PosErrInt;
 80025b8:	4b40      	ldr	r3, [pc, #256]	; (80026bc <control+0x208>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b34      	ldr	r3, [pc, #208]	; (8002690 <control+0x1dc>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	1c19      	adds	r1, r3, #0
 80025c2:	1c10      	adds	r0, r2, #0
 80025c4:	f7fe fa34 	bl	8000a30 <__aeabi_fmul>
 80025c8:	1c03      	adds	r3, r0, #0
 80025ca:	1c1c      	adds	r4, r3, #0
 80025cc:	4b3c      	ldr	r3, [pc, #240]	; (80026c0 <control+0x20c>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	4b35      	ldr	r3, [pc, #212]	; (80026a8 <control+0x1f4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	1c19      	adds	r1, r3, #0
 80025d6:	1c10      	adds	r0, r2, #0
 80025d8:	f7fe fa2a 	bl	8000a30 <__aeabi_fmul>
 80025dc:	1c03      	adds	r3, r0, #0
 80025de:	1c19      	adds	r1, r3, #0
 80025e0:	1c20      	adds	r0, r4, #0
 80025e2:	f7fd feb3 	bl	800034c <__aeabi_fadd>
 80025e6:	1c03      	adds	r3, r0, #0
 80025e8:	1c1c      	adds	r4, r3, #0
 80025ea:	4b36      	ldr	r3, [pc, #216]	; (80026c4 <control+0x210>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	4b30      	ldr	r3, [pc, #192]	; (80026b0 <control+0x1fc>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	1c19      	adds	r1, r3, #0
 80025f4:	1c10      	adds	r0, r2, #0
 80025f6:	f7fe fa1b 	bl	8000a30 <__aeabi_fmul>
 80025fa:	1c03      	adds	r3, r0, #0
 80025fc:	1c19      	adds	r1, r3, #0
 80025fe:	1c20      	adds	r0, r4, #0
 8002600:	f7fd fea4 	bl	800034c <__aeabi_fadd>
 8002604:	1c03      	adds	r3, r0, #0
 8002606:	1c1a      	adds	r2, r3, #0
 8002608:	4b2f      	ldr	r3, [pc, #188]	; (80026c8 <control+0x214>)
 800260a:	601a      	str	r2, [r3, #0]
//	static const float Acceleration2Current = Mn / Ktn;
//	CurrentRef = AccelerationRef * Acceleration2Current;
//	CurCmd = CurrentRef;
	VoltageRef = AccelerationRef;//CurCmd * Rn;
 800260c:	4b2e      	ldr	r3, [pc, #184]	; (80026c8 <control+0x214>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4b2e      	ldr	r3, [pc, #184]	; (80026cc <control+0x218>)
 8002612:	601a      	str	r2, [r3, #0]
	Duty_Out(constrain(VoltageRef / 12, -0.9, 0.9));
 8002614:	4b2d      	ldr	r3, [pc, #180]	; (80026cc <control+0x218>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	492d      	ldr	r1, [pc, #180]	; (80026d0 <control+0x21c>)
 800261a:	1c18      	adds	r0, r3, #0
 800261c:	f7fe f830 	bl	8000680 <__aeabi_fdiv>
 8002620:	1c03      	adds	r3, r0, #0
 8002622:	1c18      	adds	r0, r3, #0
 8002624:	f7ff fcd6 	bl	8001fd4 <__aeabi_f2d>
 8002628:	4a2a      	ldr	r2, [pc, #168]	; (80026d4 <control+0x220>)
 800262a:	4b2b      	ldr	r3, [pc, #172]	; (80026d8 <control+0x224>)
 800262c:	f7fd fe0e 	bl	800024c <__aeabi_dcmplt>
 8002630:	1e03      	subs	r3, r0, #0
 8002632:	d002      	beq.n	800263a <control+0x186>
 8002634:	4b27      	ldr	r3, [pc, #156]	; (80026d4 <control+0x220>)
 8002636:	4c28      	ldr	r4, [pc, #160]	; (80026d8 <control+0x224>)
 8002638:	e01e      	b.n	8002678 <control+0x1c4>
 800263a:	4b24      	ldr	r3, [pc, #144]	; (80026cc <control+0x218>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4924      	ldr	r1, [pc, #144]	; (80026d0 <control+0x21c>)
 8002640:	1c18      	adds	r0, r3, #0
 8002642:	f7fe f81d 	bl	8000680 <__aeabi_fdiv>
 8002646:	1c03      	adds	r3, r0, #0
 8002648:	1c18      	adds	r0, r3, #0
 800264a:	f7ff fcc3 	bl	8001fd4 <__aeabi_f2d>
 800264e:	4a21      	ldr	r2, [pc, #132]	; (80026d4 <control+0x220>)
 8002650:	4b22      	ldr	r3, [pc, #136]	; (80026dc <control+0x228>)
 8002652:	f7fd fe0f 	bl	8000274 <__aeabi_dcmpgt>
 8002656:	1e03      	subs	r3, r0, #0
 8002658:	d002      	beq.n	8002660 <control+0x1ac>
 800265a:	4b1e      	ldr	r3, [pc, #120]	; (80026d4 <control+0x220>)
 800265c:	4c1f      	ldr	r4, [pc, #124]	; (80026dc <control+0x228>)
 800265e:	e00b      	b.n	8002678 <control+0x1c4>
 8002660:	4b1a      	ldr	r3, [pc, #104]	; (80026cc <control+0x218>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	491a      	ldr	r1, [pc, #104]	; (80026d0 <control+0x21c>)
 8002666:	1c18      	adds	r0, r3, #0
 8002668:	f7fe f80a 	bl	8000680 <__aeabi_fdiv>
 800266c:	1c03      	adds	r3, r0, #0
 800266e:	1c18      	adds	r0, r3, #0
 8002670:	f7ff fcb0 	bl	8001fd4 <__aeabi_f2d>
 8002674:	0003      	movs	r3, r0
 8002676:	000c      	movs	r4, r1
 8002678:	0018      	movs	r0, r3
 800267a:	0021      	movs	r1, r4
 800267c:	f000 fcee 	bl	800305c <Duty_Out>
//	Duty_Out(0.3);
//	setMotorVoltage(VoltageRef);
}
 8002680:	46c0      	nop			; (mov r8, r8)
 8002682:	46bd      	mov	sp, r7
 8002684:	bdb0      	pop	{r4, r5, r7, pc}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	20000034 	.word	0x20000034
 800268c:	20000038 	.word	0x20000038
 8002690:	2000003c 	.word	0x2000003c
 8002694:	54442d18 	.word	0x54442d18
 8002698:	400921fb 	.word	0x400921fb
 800269c:	2000005c 	.word	0x2000005c
 80026a0:	20000044 	.word	0x20000044
 80026a4:	20000048 	.word	0x20000048
 80026a8:	2000004c 	.word	0x2000004c
 80026ac:	3951b717 	.word	0x3951b717
 80026b0:	20000040 	.word	0x20000040
 80026b4:	3ff00000 	.word	0x3ff00000
 80026b8:	bf800000 	.word	0xbf800000
 80026bc:	20000000 	.word	0x20000000
 80026c0:	20000008 	.word	0x20000008
 80026c4:	20000004 	.word	0x20000004
 80026c8:	20000050 	.word	0x20000050
 80026cc:	20000054 	.word	0x20000054
 80026d0:	41400000 	.word	0x41400000
 80026d4:	cccccccd 	.word	0xcccccccd
 80026d8:	bfeccccc 	.word	0xbfeccccc
 80026dc:	3feccccc 	.word	0x3feccccc

080026e0 <get_vel_cmd>:
float get_vel_cmd() {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
	return VelCmd;
 80026e4:	4b02      	ldr	r3, [pc, #8]	; (80026f0 <get_vel_cmd+0x10>)
 80026e6:	681b      	ldr	r3, [r3, #0]
}
 80026e8:	1c18      	adds	r0, r3, #0
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	46c0      	nop			; (mov r8, r8)
 80026f0:	20000044 	.word	0x20000044

080026f4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026fa:	4b0c      	ldr	r3, [pc, #48]	; (800272c <MX_DMA_Init+0x38>)
 80026fc:	695a      	ldr	r2, [r3, #20]
 80026fe:	4b0b      	ldr	r3, [pc, #44]	; (800272c <MX_DMA_Init+0x38>)
 8002700:	2101      	movs	r1, #1
 8002702:	430a      	orrs	r2, r1
 8002704:	615a      	str	r2, [r3, #20]
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <MX_DMA_Init+0x38>)
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	2201      	movs	r2, #1
 800270c:	4013      	ands	r3, r2
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8002712:	2200      	movs	r2, #0
 8002714:	2103      	movs	r1, #3
 8002716:	2009      	movs	r0, #9
 8002718:	f001 f966 	bl	80039e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800271c:	2009      	movs	r0, #9
 800271e:	f001 f978 	bl	8003a12 <HAL_NVIC_EnableIRQ>

}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	46bd      	mov	sp, r7
 8002726:	b002      	add	sp, #8
 8002728:	bd80      	pop	{r7, pc}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	40021000 	.word	0x40021000

08002730 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4a06      	ldr	r2, [pc, #24]	; (8002758 <vApplicationGetIdleTaskMemory+0x28>)
 8002740:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	4a05      	ldr	r2, [pc, #20]	; (800275c <vApplicationGetIdleTaskMemory+0x2c>)
 8002746:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2264      	movs	r2, #100	; 0x64
 800274c:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	46bd      	mov	sp, r7
 8002752:	b004      	add	sp, #16
 8002754:	bd80      	pop	{r7, pc}
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	20000068 	.word	0x20000068
 800275c:	200000b8 	.word	0x200000b8

08002760 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002760:	b5b0      	push	{r4, r5, r7, lr}
 8002762:	b08e      	sub	sp, #56	; 0x38
 8002764:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 100, defaultTaskBuffer, &defaultTaskControlBlock);
 8002766:	211c      	movs	r1, #28
 8002768:	187b      	adds	r3, r7, r1
 800276a:	4a11      	ldr	r2, [pc, #68]	; (80027b0 <MX_FREERTOS_Init+0x50>)
 800276c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800276e:	c331      	stmia	r3!, {r0, r4, r5}
 8002770:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002772:	c331      	stmia	r3!, {r0, r4, r5}
 8002774:	6812      	ldr	r2, [r2, #0]
 8002776:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002778:	187b      	adds	r3, r7, r1
 800277a:	2100      	movs	r1, #0
 800277c:	0018      	movs	r0, r3
 800277e:	f003 f8ea 	bl	8005956 <osThreadCreate>
 8002782:	0002      	movs	r2, r0
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <MX_FREERTOS_Init+0x54>)
 8002786:	601a      	str	r2, [r3, #0]

  /* definition and creation of Control */
  osThreadStaticDef(Control, StartControl, osPriorityRealtime, 0, 100, myTask02Buffer, &myTask02ControlBlock);
 8002788:	003b      	movs	r3, r7
 800278a:	4a0b      	ldr	r2, [pc, #44]	; (80027b8 <MX_FREERTOS_Init+0x58>)
 800278c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800278e:	c313      	stmia	r3!, {r0, r1, r4}
 8002790:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002792:	c313      	stmia	r3!, {r0, r1, r4}
 8002794:	6812      	ldr	r2, [r2, #0]
 8002796:	601a      	str	r2, [r3, #0]
  ControlHandle = osThreadCreate(osThread(Control), NULL);
 8002798:	003b      	movs	r3, r7
 800279a:	2100      	movs	r1, #0
 800279c:	0018      	movs	r0, r3
 800279e:	f003 f8da 	bl	8005956 <osThreadCreate>
 80027a2:	0002      	movs	r2, r0
 80027a4:	4b05      	ldr	r3, [pc, #20]	; (80027bc <MX_FREERTOS_Init+0x5c>)
 80027a6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80027a8:	46c0      	nop			; (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b00e      	add	sp, #56	; 0x38
 80027ae:	bdb0      	pop	{r4, r5, r7, pc}
 80027b0:	08006638 	.word	0x08006638
 80027b4:	2000049c 	.word	0x2000049c
 80027b8:	0800665c 	.word	0x0800665c
 80027bc:	200004a0 	.word	0x200004a0

080027c0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	TickType_t xPreviousWakeTime = xTaskGetTickCount();
 80027c8:	f003 fbf4 	bl	8005fb4 <xTaskGetTickCount>
 80027cc:	0003      	movs	r3, r0
 80027ce:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {
		vTaskDelayUntil(&xPreviousWakeTime, 100); //10k/100=100Hz
 80027d0:	230c      	movs	r3, #12
 80027d2:	18fb      	adds	r3, r7, r3
 80027d4:	2164      	movs	r1, #100	; 0x64
 80027d6:	0018      	movs	r0, r3
 80027d8:	f003 faaa 	bl	8005d30 <vTaskDelayUntil>
		LED_Go2Go(get_vel_cmd());
 80027dc:	f7ff ff80 	bl	80026e0 <get_vel_cmd>
 80027e0:	1c03      	adds	r3, r0, #0
 80027e2:	1c18      	adds	r0, r3, #0
 80027e4:	f7fe fc1a 	bl	800101c <__aeabi_f2iz>
 80027e8:	0003      	movs	r3, r0
 80027ea:	0018      	movs	r0, r3
 80027ec:	f000 f88e 	bl	800290c <LED_Go2Go>
		vTaskDelayUntil(&xPreviousWakeTime, 100); //10k/100=100Hz
 80027f0:	e7ee      	b.n	80027d0 <StartDefaultTask+0x10>

080027f2 <StartControl>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControl */
void StartControl(void const * argument)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b084      	sub	sp, #16
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControl */
	TickType_t pxPreviousWakeTime = xTaskGetTickCount();
 80027fa:	f003 fbdb 	bl	8005fb4 <xTaskGetTickCount>
 80027fe:	0003      	movs	r3, r0
 8002800:	60fb      	str	r3, [r7, #12]
	Enc_Start(); //init encoder
 8002802:	f000 fc8b 	bl	800311c <Enc_Start>
	PWM_Start();
 8002806:	f000 fc0d 	bl	8003024 <PWM_Start>
	/* Infinite loop */
	for (;;) {
		vTaskDelayUntil(&pxPreviousWakeTime, 2); //10k/2=5kHz=0.0002s
 800280a:	230c      	movs	r3, #12
 800280c:	18fb      	adds	r3, r7, r3
 800280e:	2102      	movs	r1, #2
 8002810:	0018      	movs	r0, r3
 8002812:	f003 fa8d 	bl	8005d30 <vTaskDelayUntil>
		control();
 8002816:	f7ff fe4d 	bl	80024b4 <control>
		vTaskDelayUntil(&pxPreviousWakeTime, 2); //10k/2=5kHz=0.0002s
 800281a:	e7f6      	b.n	800280a <StartControl+0x18>

0800281c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800281c:	b590      	push	{r4, r7, lr}
 800281e:	b089      	sub	sp, #36	; 0x24
 8002820:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002822:	240c      	movs	r4, #12
 8002824:	193b      	adds	r3, r7, r4
 8002826:	0018      	movs	r0, r3
 8002828:	2314      	movs	r3, #20
 800282a:	001a      	movs	r2, r3
 800282c:	2100      	movs	r1, #0
 800282e:	f003 fee9 	bl	8006604 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002832:	4b33      	ldr	r3, [pc, #204]	; (8002900 <MX_GPIO_Init+0xe4>)
 8002834:	695a      	ldr	r2, [r3, #20]
 8002836:	4b32      	ldr	r3, [pc, #200]	; (8002900 <MX_GPIO_Init+0xe4>)
 8002838:	2180      	movs	r1, #128	; 0x80
 800283a:	0289      	lsls	r1, r1, #10
 800283c:	430a      	orrs	r2, r1
 800283e:	615a      	str	r2, [r3, #20]
 8002840:	4b2f      	ldr	r3, [pc, #188]	; (8002900 <MX_GPIO_Init+0xe4>)
 8002842:	695a      	ldr	r2, [r3, #20]
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	029b      	lsls	r3, r3, #10
 8002848:	4013      	ands	r3, r2
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800284e:	4b2c      	ldr	r3, [pc, #176]	; (8002900 <MX_GPIO_Init+0xe4>)
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <MX_GPIO_Init+0xe4>)
 8002854:	2180      	movs	r1, #128	; 0x80
 8002856:	02c9      	lsls	r1, r1, #11
 8002858:	430a      	orrs	r2, r1
 800285a:	615a      	str	r2, [r3, #20]
 800285c:	4b28      	ldr	r3, [pc, #160]	; (8002900 <MX_GPIO_Init+0xe4>)
 800285e:	695a      	ldr	r2, [r3, #20]
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	02db      	lsls	r3, r3, #11
 8002864:	4013      	ands	r3, r2
 8002866:	607b      	str	r3, [r7, #4]
 8002868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA2_Pin|PA15_Pin, GPIO_PIN_RESET);
 800286a:	4926      	ldr	r1, [pc, #152]	; (8002904 <MX_GPIO_Init+0xe8>)
 800286c:	2390      	movs	r3, #144	; 0x90
 800286e:	05db      	lsls	r3, r3, #23
 8002870:	2200      	movs	r2, #0
 8002872:	0018      	movs	r0, r3
 8002874:	f001 fb4c 	bl	8003f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RA_BK_Pin|LD5_11_Pin|LD4_10_Pin|LD3_9_Pin 
 8002878:	23fc      	movs	r3, #252	; 0xfc
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	4822      	ldr	r0, [pc, #136]	; (8002908 <MX_GPIO_Init+0xec>)
 800287e:	2200      	movs	r2, #0
 8002880:	0019      	movs	r1, r3
 8002882:	f001 fb45 	bl	8003f10 <HAL_GPIO_WritePin>
                          |LD2_8_Pin|LD1_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = PA2_Pin|PA15_Pin;
 8002886:	193b      	adds	r3, r7, r4
 8002888:	4a1e      	ldr	r2, [pc, #120]	; (8002904 <MX_GPIO_Init+0xe8>)
 800288a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800288c:	193b      	adds	r3, r7, r4
 800288e:	2201      	movs	r2, #1
 8002890:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	193b      	adds	r3, r7, r4
 8002894:	2200      	movs	r2, #0
 8002896:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002898:	193b      	adds	r3, r7, r4
 800289a:	2200      	movs	r2, #0
 800289c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289e:	193a      	adds	r2, r7, r4
 80028a0:	2390      	movs	r3, #144	; 0x90
 80028a2:	05db      	lsls	r3, r3, #23
 80028a4:	0011      	movs	r1, r2
 80028a6:	0018      	movs	r0, r3
 80028a8:	f001 f9ca 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW4_Pin|SW3_Pin|SW2_Pin;
 80028ac:	193b      	adds	r3, r7, r4
 80028ae:	22e0      	movs	r2, #224	; 0xe0
 80028b0:	00d2      	lsls	r2, r2, #3
 80028b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b4:	193b      	adds	r3, r7, r4
 80028b6:	2200      	movs	r2, #0
 80028b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028ba:	193b      	adds	r3, r7, r4
 80028bc:	2201      	movs	r2, #1
 80028be:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c0:	193a      	adds	r2, r7, r4
 80028c2:	2390      	movs	r3, #144	; 0x90
 80028c4:	05db      	lsls	r3, r3, #23
 80028c6:	0011      	movs	r1, r2
 80028c8:	0018      	movs	r0, r3
 80028ca:	f001 f9b9 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin */
  GPIO_InitStruct.Pin = RA_BK_Pin|LD5_11_Pin|LD4_10_Pin|LD3_9_Pin 
 80028ce:	0021      	movs	r1, r4
 80028d0:	187b      	adds	r3, r7, r1
 80028d2:	22fc      	movs	r2, #252	; 0xfc
 80028d4:	0052      	lsls	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]
                          |LD2_8_Pin|LD1_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d8:	187b      	adds	r3, r7, r1
 80028da:	2201      	movs	r2, #1
 80028dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	187b      	adds	r3, r7, r1
 80028e0:	2200      	movs	r2, #0
 80028e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e4:	187b      	adds	r3, r7, r1
 80028e6:	2200      	movs	r2, #0
 80028e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ea:	187b      	adds	r3, r7, r1
 80028ec:	4a06      	ldr	r2, [pc, #24]	; (8002908 <MX_GPIO_Init+0xec>)
 80028ee:	0019      	movs	r1, r3
 80028f0:	0010      	movs	r0, r2
 80028f2:	f001 f9a5 	bl	8003c40 <HAL_GPIO_Init>

}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b009      	add	sp, #36	; 0x24
 80028fc:	bd90      	pop	{r4, r7, pc}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	40021000 	.word	0x40021000
 8002904:	00008004 	.word	0x00008004
 8002908:	48000400 	.word	0x48000400

0800290c <LED_Go2Go>:

/* USER CODE BEGIN 2 */
void LED_Go2Go(int x) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RA_BK_GPIO_Port, RA_BK_Pin, x > 0);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	17da      	asrs	r2, r3, #31
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	0fdb      	lsrs	r3, r3, #31
 800291c:	b2db      	uxtb	r3, r3
 800291e:	001a      	movs	r2, r3
 8002920:	4b49      	ldr	r3, [pc, #292]	; (8002a48 <LED_Go2Go+0x13c>)
 8002922:	2108      	movs	r1, #8
 8002924:	0018      	movs	r0, r3
 8002926:	f001 faf3 	bl	8003f10 <HAL_GPIO_WritePin>
	if (x > 0) {
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	dd44      	ble.n	80029ba <LED_Go2Go+0xae>
		HAL_GPIO_WritePin(LD1_7_GPIO_Port, LD1_7_Pin, x < 5);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2204      	movs	r2, #4
 8002934:	0fd8      	lsrs	r0, r3, #31
 8002936:	17d1      	asrs	r1, r2, #31
 8002938:	429a      	cmp	r2, r3
 800293a:	4148      	adcs	r0, r1
 800293c:	0003      	movs	r3, r0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	001a      	movs	r2, r3
 8002942:	2380      	movs	r3, #128	; 0x80
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4840      	ldr	r0, [pc, #256]	; (8002a48 <LED_Go2Go+0x13c>)
 8002948:	0019      	movs	r1, r3
 800294a:	f001 fae1 	bl	8003f10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_8_GPIO_Port, LD2_8_Pin, x < 4);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2203      	movs	r2, #3
 8002952:	0fd8      	lsrs	r0, r3, #31
 8002954:	17d1      	asrs	r1, r2, #31
 8002956:	429a      	cmp	r2, r3
 8002958:	4148      	adcs	r0, r1
 800295a:	0003      	movs	r3, r0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	001a      	movs	r2, r3
 8002960:	4b39      	ldr	r3, [pc, #228]	; (8002a48 <LED_Go2Go+0x13c>)
 8002962:	2180      	movs	r1, #128	; 0x80
 8002964:	0018      	movs	r0, r3
 8002966:	f001 fad3 	bl	8003f10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_9_GPIO_Port, LD3_9_Pin, x < 3);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2202      	movs	r2, #2
 800296e:	0fd8      	lsrs	r0, r3, #31
 8002970:	17d1      	asrs	r1, r2, #31
 8002972:	429a      	cmp	r2, r3
 8002974:	4148      	adcs	r0, r1
 8002976:	0003      	movs	r3, r0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	001a      	movs	r2, r3
 800297c:	4b32      	ldr	r3, [pc, #200]	; (8002a48 <LED_Go2Go+0x13c>)
 800297e:	2140      	movs	r1, #64	; 0x40
 8002980:	0018      	movs	r0, r3
 8002982:	f001 fac5 	bl	8003f10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_10_GPIO_Port, LD4_10_Pin, x < 2);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	0fd8      	lsrs	r0, r3, #31
 800298c:	17d1      	asrs	r1, r2, #31
 800298e:	429a      	cmp	r2, r3
 8002990:	4148      	adcs	r0, r1
 8002992:	0003      	movs	r3, r0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	001a      	movs	r2, r3
 8002998:	4b2b      	ldr	r3, [pc, #172]	; (8002a48 <LED_Go2Go+0x13c>)
 800299a:	2120      	movs	r1, #32
 800299c:	0018      	movs	r0, r3
 800299e:	f001 fab7 	bl	8003f10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_11_GPIO_Port, LD5_11_Pin, x < 1);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	1e5a      	subs	r2, r3, #1
 80029a6:	4313      	orrs	r3, r2
 80029a8:	0fdb      	lsrs	r3, r3, #31
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	001a      	movs	r2, r3
 80029ae:	4b26      	ldr	r3, [pc, #152]	; (8002a48 <LED_Go2Go+0x13c>)
 80029b0:	2110      	movs	r1, #16
 80029b2:	0018      	movs	r0, r3
 80029b4:	f001 faac 	bl	8003f10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_8_GPIO_Port, LD2_8_Pin, x < -1);
		HAL_GPIO_WritePin(LD3_9_GPIO_Port, LD3_9_Pin, x < -2);
		HAL_GPIO_WritePin(LD4_10_GPIO_Port, LD4_10_Pin, x < -3);
		HAL_GPIO_WritePin(LD5_11_GPIO_Port, LD5_11_Pin, x < -4);
	}
}
 80029b8:	e041      	b.n	8002a3e <LED_Go2Go+0x132>
		HAL_GPIO_WritePin(LD1_7_GPIO_Port, LD1_7_Pin, x < 0);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	0fdb      	lsrs	r3, r3, #31
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	001a      	movs	r2, r3
 80029c2:	2380      	movs	r3, #128	; 0x80
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	4820      	ldr	r0, [pc, #128]	; (8002a48 <LED_Go2Go+0x13c>)
 80029c8:	0019      	movs	r1, r3
 80029ca:	f001 faa1 	bl	8003f10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_8_GPIO_Port, LD2_8_Pin, x < -1);
 80029ce:	2301      	movs	r3, #1
 80029d0:	1c1a      	adds	r2, r3, #0
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3301      	adds	r3, #1
 80029d6:	db01      	blt.n	80029dc <LED_Go2Go+0xd0>
 80029d8:	2300      	movs	r3, #0
 80029da:	1c1a      	adds	r2, r3, #0
 80029dc:	b2d3      	uxtb	r3, r2
 80029de:	001a      	movs	r2, r3
 80029e0:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <LED_Go2Go+0x13c>)
 80029e2:	2180      	movs	r1, #128	; 0x80
 80029e4:	0018      	movs	r0, r3
 80029e6:	f001 fa93 	bl	8003f10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_9_GPIO_Port, LD3_9_Pin, x < -2);
 80029ea:	2301      	movs	r3, #1
 80029ec:	1c1a      	adds	r2, r3, #0
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3302      	adds	r3, #2
 80029f2:	db01      	blt.n	80029f8 <LED_Go2Go+0xec>
 80029f4:	2300      	movs	r3, #0
 80029f6:	1c1a      	adds	r2, r3, #0
 80029f8:	b2d3      	uxtb	r3, r2
 80029fa:	001a      	movs	r2, r3
 80029fc:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <LED_Go2Go+0x13c>)
 80029fe:	2140      	movs	r1, #64	; 0x40
 8002a00:	0018      	movs	r0, r3
 8002a02:	f001 fa85 	bl	8003f10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_10_GPIO_Port, LD4_10_Pin, x < -3);
 8002a06:	2301      	movs	r3, #1
 8002a08:	1c1a      	adds	r2, r3, #0
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3303      	adds	r3, #3
 8002a0e:	db01      	blt.n	8002a14 <LED_Go2Go+0x108>
 8002a10:	2300      	movs	r3, #0
 8002a12:	1c1a      	adds	r2, r3, #0
 8002a14:	b2d3      	uxtb	r3, r2
 8002a16:	001a      	movs	r2, r3
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <LED_Go2Go+0x13c>)
 8002a1a:	2120      	movs	r1, #32
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f001 fa77 	bl	8003f10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_11_GPIO_Port, LD5_11_Pin, x < -4);
 8002a22:	2301      	movs	r3, #1
 8002a24:	1c1a      	adds	r2, r3, #0
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	db01      	blt.n	8002a30 <LED_Go2Go+0x124>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	1c1a      	adds	r2, r3, #0
 8002a30:	b2d3      	uxtb	r3, r2
 8002a32:	001a      	movs	r2, r3
 8002a34:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <LED_Go2Go+0x13c>)
 8002a36:	2110      	movs	r1, #16
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f001 fa69 	bl	8003f10 <HAL_GPIO_WritePin>
}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b002      	add	sp, #8
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	48000400 	.word	0x48000400

08002a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a50:	f000 fbc6 	bl	80031e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a54:	f000 f811 	bl	8002a7a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a58:	f7ff fee0 	bl	800281c <MX_GPIO_Init>
  MX_DMA_Init();
 8002a5c:	f7ff fe4a 	bl	80026f4 <MX_DMA_Init>
  MX_ADC_Init();
 8002a60:	f7ff fb28 	bl	80020b4 <MX_ADC_Init>
  MX_CAN_Init();
 8002a64:	f7ff fc0e 	bl	8002284 <MX_CAN_Init>
  MX_TIM2_Init();
 8002a68:	f000 f92a 	bl	8002cc0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002a6c:	f000 f97c 	bl	8002d68 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8002a70:	f7ff fe76 	bl	8002760 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002a74:	f002 ff67 	bl	8005946 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8002a78:	e7fe      	b.n	8002a78 <main+0x2c>

08002a7a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a7a:	b590      	push	{r4, r7, lr}
 8002a7c:	b093      	sub	sp, #76	; 0x4c
 8002a7e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a80:	2414      	movs	r4, #20
 8002a82:	193b      	adds	r3, r7, r4
 8002a84:	0018      	movs	r0, r3
 8002a86:	2334      	movs	r3, #52	; 0x34
 8002a88:	001a      	movs	r2, r3
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	f003 fdba 	bl	8006604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a90:	1d3b      	adds	r3, r7, #4
 8002a92:	0018      	movs	r0, r3
 8002a94:	2310      	movs	r3, #16
 8002a96:	001a      	movs	r2, r3
 8002a98:	2100      	movs	r1, #0
 8002a9a:	f003 fdb3 	bl	8006604 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002a9e:	0021      	movs	r1, r4
 8002aa0:	187b      	adds	r3, r7, r1
 8002aa2:	2212      	movs	r2, #18
 8002aa4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002aa6:	187b      	adds	r3, r7, r1
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002aac:	187b      	adds	r3, r7, r1
 8002aae:	2201      	movs	r2, #1
 8002ab0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ab2:	187b      	adds	r3, r7, r1
 8002ab4:	2210      	movs	r2, #16
 8002ab6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002ab8:	187b      	adds	r3, r7, r1
 8002aba:	2210      	movs	r2, #16
 8002abc:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002abe:	187b      	adds	r3, r7, r1
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ac4:	187b      	adds	r3, r7, r1
 8002ac6:	2280      	movs	r2, #128	; 0x80
 8002ac8:	0212      	lsls	r2, r2, #8
 8002aca:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002acc:	187b      	adds	r3, r7, r1
 8002ace:	2280      	movs	r2, #128	; 0x80
 8002ad0:	0352      	lsls	r2, r2, #13
 8002ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002ad4:	187b      	adds	r3, r7, r1
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ada:	187b      	adds	r3, r7, r1
 8002adc:	0018      	movs	r0, r3
 8002ade:	f001 fa35 	bl	8003f4c <HAL_RCC_OscConfig>
 8002ae2:	1e03      	subs	r3, r0, #0
 8002ae4:	d001      	beq.n	8002aea <SystemClock_Config+0x70>
  {
    Error_Handler();
 8002ae6:	f000 f82b 	bl	8002b40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002aea:	1d3b      	adds	r3, r7, #4
 8002aec:	2207      	movs	r2, #7
 8002aee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002af0:	1d3b      	adds	r3, r7, #4
 8002af2:	2202      	movs	r2, #2
 8002af4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002af6:	1d3b      	adds	r3, r7, #4
 8002af8:	2200      	movs	r2, #0
 8002afa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002afc:	1d3b      	adds	r3, r7, #4
 8002afe:	2200      	movs	r2, #0
 8002b00:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002b02:	1d3b      	adds	r3, r7, #4
 8002b04:	2101      	movs	r1, #1
 8002b06:	0018      	movs	r0, r3
 8002b08:	f001 fda6 	bl	8004658 <HAL_RCC_ClockConfig>
 8002b0c:	1e03      	subs	r3, r0, #0
 8002b0e:	d001      	beq.n	8002b14 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002b10:	f000 f816 	bl	8002b40 <Error_Handler>
  }
}
 8002b14:	46c0      	nop			; (mov r8, r8)
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b013      	add	sp, #76	; 0x4c
 8002b1a:	bd90      	pop	{r4, r7, pc}

08002b1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d101      	bne.n	8002b32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b2e:	f000 fb6b 	bl	8003208 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	46bd      	mov	sp, r7
 8002b36:	b002      	add	sp, #8
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	40014800 	.word	0x40014800

08002b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002b44:	46c0      	nop			; (mov r8, r8)
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b52:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <HAL_MspInit+0x50>)
 8002b54:	699a      	ldr	r2, [r3, #24]
 8002b56:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <HAL_MspInit+0x50>)
 8002b58:	2101      	movs	r1, #1
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	619a      	str	r2, [r3, #24]
 8002b5e:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <HAL_MspInit+0x50>)
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	2201      	movs	r2, #1
 8002b64:	4013      	ands	r3, r2
 8002b66:	607b      	str	r3, [r7, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b6a:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <HAL_MspInit+0x50>)
 8002b6c:	69da      	ldr	r2, [r3, #28]
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_MspInit+0x50>)
 8002b70:	2180      	movs	r1, #128	; 0x80
 8002b72:	0549      	lsls	r1, r1, #21
 8002b74:	430a      	orrs	r2, r1
 8002b76:	61da      	str	r2, [r3, #28]
 8002b78:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <HAL_MspInit+0x50>)
 8002b7a:	69da      	ldr	r2, [r3, #28]
 8002b7c:	2380      	movs	r3, #128	; 0x80
 8002b7e:	055b      	lsls	r3, r3, #21
 8002b80:	4013      	ands	r3, r2
 8002b82:	603b      	str	r3, [r7, #0]
 8002b84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8002b86:	2302      	movs	r3, #2
 8002b88:	425b      	negs	r3, r3
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2103      	movs	r1, #3
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f000 ff2a 	bl	80039e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b94:	46c0      	nop			; (mov r8, r8)
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b002      	add	sp, #8
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40021000 	.word	0x40021000

08002ba0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	; 0x28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8002bac:	2300      	movs	r3, #0
 8002bae:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0); 
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	0019      	movs	r1, r3
 8002bb6:	2016      	movs	r0, #22
 8002bb8:	f000 ff16 	bl	80039e8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn); 
 8002bbc:	2016      	movs	r0, #22
 8002bbe:	f000 ff28 	bl	8003a12 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8002bc2:	4b21      	ldr	r3, [pc, #132]	; (8002c48 <HAL_InitTick+0xa8>)
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	4b20      	ldr	r3, [pc, #128]	; (8002c48 <HAL_InitTick+0xa8>)
 8002bc8:	2180      	movs	r1, #128	; 0x80
 8002bca:	02c9      	lsls	r1, r1, #11
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	619a      	str	r2, [r3, #24]
 8002bd0:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <HAL_InitTick+0xa8>)
 8002bd2:	699a      	ldr	r2, [r3, #24]
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	02db      	lsls	r3, r3, #11
 8002bd8:	4013      	ands	r3, r2
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bde:	230c      	movs	r3, #12
 8002be0:	18fa      	adds	r2, r7, r3
 8002be2:	2310      	movs	r3, #16
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	0011      	movs	r1, r2
 8002be8:	0018      	movs	r0, r3
 8002bea:	f001 fead 	bl	8004948 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002bee:	f001 fe95 	bl	800491c <HAL_RCC_GetPCLK1Freq>
 8002bf2:	0003      	movs	r3, r0
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	4914      	ldr	r1, [pc, #80]	; (8002c4c <HAL_InitTick+0xac>)
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f7fd fa84 	bl	8000108 <__udivsi3>
 8002c00:	0003      	movs	r3, r0
 8002c02:	3b01      	subs	r3, #1
 8002c04:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8002c06:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <HAL_InitTick+0xb0>)
 8002c08:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <HAL_InitTick+0xb4>)
 8002c0a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000 / 1000) - 1;
 8002c0c:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <HAL_InitTick+0xb0>)
 8002c0e:	4a12      	ldr	r2, [pc, #72]	; (8002c58 <HAL_InitTick+0xb8>)
 8002c10:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8002c12:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <HAL_InitTick+0xb0>)
 8002c14:	6a3a      	ldr	r2, [r7, #32]
 8002c16:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 8002c18:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <HAL_InitTick+0xb0>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <HAL_InitTick+0xb0>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8002c24:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <HAL_InitTick+0xb0>)
 8002c26:	0018      	movs	r0, r3
 8002c28:	f001 feb8 	bl	800499c <HAL_TIM_Base_Init>
 8002c2c:	1e03      	subs	r3, r0, #0
 8002c2e:	d105      	bne.n	8002c3c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8002c30:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <HAL_InitTick+0xb0>)
 8002c32:	0018      	movs	r0, r3
 8002c34:	f001 fede 	bl	80049f4 <HAL_TIM_Base_Start_IT>
 8002c38:	0003      	movs	r3, r0
 8002c3a:	e000      	b.n	8002c3e <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
}
 8002c3e:	0018      	movs	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	b00a      	add	sp, #40	; 0x28
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	000f4240 	.word	0x000f4240
 8002c50:	20000814 	.word	0x20000814
 8002c54:	40014800 	.word	0x40014800
 8002c58:	000003e7 	.word	0x000003e7

08002c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c60:	46c0      	nop			; (mov r8, r8)
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c6a:	e7fe      	b.n	8002c6a <HardFault_Handler+0x4>

08002c6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002c70:	4b03      	ldr	r3, [pc, #12]	; (8002c80 <DMA1_Channel1_IRQHandler+0x14>)
 8002c72:	0018      	movs	r0, r3
 8002c74:	f000 ff26 	bl	8003ac4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c78:	46c0      	nop			; (mov r8, r8)
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	200003a0 	.word	0x200003a0

08002c84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c88:	4b03      	ldr	r3, [pc, #12]	; (8002c98 <TIM3_IRQHandler+0x14>)
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f002 f819 	bl	8004cc2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c90:	46c0      	nop			; (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	20000854 	.word	0x20000854

08002c9c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002ca0:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <TIM17_IRQHandler+0x14>)
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f002 f80d 	bl	8004cc2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002ca8:	46c0      	nop			; (mov r8, r8)
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	20000814 	.word	0x20000814

08002cb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002cb8:	46c0      	nop			; (mov r8, r8)
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void) {
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
//  TIM_Encoder_InitTypeDef sConfig = {0};
//  TIM_MasterConfigTypeDef sMasterConfig = {0};

	htim2.Instance = TIM2;
 8002cc4:	4b25      	ldr	r3, [pc, #148]	; (8002d5c <MX_TIM2_Init+0x9c>)
 8002cc6:	2280      	movs	r2, #128	; 0x80
 8002cc8:	05d2      	lsls	r2, r2, #23
 8002cca:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002ccc:	4b23      	ldr	r3, [pc, #140]	; (8002d5c <MX_TIM2_Init+0x9c>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd2:	4b22      	ldr	r3, [pc, #136]	; (8002d5c <MX_TIM2_Init+0x9c>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xffffffff;
 8002cd8:	4b20      	ldr	r3, [pc, #128]	; (8002d5c <MX_TIM2_Init+0x9c>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	4252      	negs	r2, r2
 8002cde:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ce0:	4b1e      	ldr	r3, [pc, #120]	; (8002d5c <MX_TIM2_Init+0x9c>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ce6:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <MX_TIM2_Init+0x9c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002cec:	4b1c      	ldr	r3, [pc, #112]	; (8002d60 <MX_TIM2_Init+0xa0>)
 8002cee:	2203      	movs	r2, #3
 8002cf0:	601a      	str	r2, [r3, #0]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002cf2:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <MX_TIM2_Init+0xa0>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	605a      	str	r2, [r3, #4]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002cf8:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <MX_TIM2_Init+0xa0>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	609a      	str	r2, [r3, #8]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002cfe:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <MX_TIM2_Init+0xa0>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	60da      	str	r2, [r3, #12]
	sConfig.IC1Filter = 3;
 8002d04:	4b16      	ldr	r3, [pc, #88]	; (8002d60 <MX_TIM2_Init+0xa0>)
 8002d06:	2203      	movs	r2, #3
 8002d08:	611a      	str	r2, [r3, #16]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d0a:	4b15      	ldr	r3, [pc, #84]	; (8002d60 <MX_TIM2_Init+0xa0>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	615a      	str	r2, [r3, #20]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d10:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <MX_TIM2_Init+0xa0>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	619a      	str	r2, [r3, #24]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d16:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <MX_TIM2_Init+0xa0>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	61da      	str	r2, [r3, #28]
	sConfig.IC2Filter = 3;
 8002d1c:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <MX_TIM2_Init+0xa0>)
 8002d1e:	2203      	movs	r2, #3
 8002d20:	621a      	str	r2, [r3, #32]
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8002d22:	4a0f      	ldr	r2, [pc, #60]	; (8002d60 <MX_TIM2_Init+0xa0>)
 8002d24:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <MX_TIM2_Init+0x9c>)
 8002d26:	0011      	movs	r1, r2
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f001 feff 	bl	8004b2c <HAL_TIM_Encoder_Init>
 8002d2e:	1e03      	subs	r3, r0, #0
 8002d30:	d001      	beq.n	8002d36 <MX_TIM2_Init+0x76>
		Error_Handler();
 8002d32:	f7ff ff05 	bl	8002b40 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d36:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <MX_TIM2_Init+0xa4>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d3c:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <MX_TIM2_Init+0xa4>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002d42:	4a08      	ldr	r2, [pc, #32]	; (8002d64 <MX_TIM2_Init+0xa4>)
 8002d44:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <MX_TIM2_Init+0x9c>)
 8002d46:	0011      	movs	r1, r2
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f002 fd7b 	bl	8005844 <HAL_TIMEx_MasterConfigSynchronization>
 8002d4e:	1e03      	subs	r3, r0, #0
 8002d50:	d001      	beq.n	8002d56 <MX_TIM2_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8002d52:	f7ff fef5 	bl	8002b40 <Error_Handler>
	}

}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	20000894 	.word	0x20000894
 8002d60:	2000026c 	.word	0x2000026c
 8002d64:	20000248 	.word	0x20000248

08002d68 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void) {
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
//  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
//  TIM_MasterConfigTypeDef sMasterConfig = {0};
//  TIM_OC_InitTypeDef sConfigOC = {0};

	htim3.Instance = TIM3;
 8002d6c:	4b3d      	ldr	r3, [pc, #244]	; (8002e64 <MX_TIM3_Init+0xfc>)
 8002d6e:	4a3e      	ldr	r2, [pc, #248]	; (8002e68 <MX_TIM3_Init+0x100>)
 8002d70:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8002d72:	4b3c      	ldr	r3, [pc, #240]	; (8002e64 <MX_TIM3_Init+0xfc>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002d78:	4b3a      	ldr	r3, [pc, #232]	; (8002e64 <MX_TIM3_Init+0xfc>)
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = PWM_PERIOD; //24kHz
 8002d7e:	4b39      	ldr	r3, [pc, #228]	; (8002e64 <MX_TIM3_Init+0xfc>)
 8002d80:	4a3a      	ldr	r2, [pc, #232]	; (8002e6c <MX_TIM3_Init+0x104>)
 8002d82:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d84:	4b37      	ldr	r3, [pc, #220]	; (8002e64 <MX_TIM3_Init+0xfc>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d8a:	4b36      	ldr	r3, [pc, #216]	; (8002e64 <MX_TIM3_Init+0xfc>)
 8002d8c:	2280      	movs	r2, #128	; 0x80
 8002d8e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8002d90:	4b34      	ldr	r3, [pc, #208]	; (8002e64 <MX_TIM3_Init+0xfc>)
 8002d92:	0018      	movs	r0, r3
 8002d94:	f001 fe02 	bl	800499c <HAL_TIM_Base_Init>
 8002d98:	1e03      	subs	r3, r0, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_TIM3_Init+0x38>
		Error_Handler();
 8002d9c:	f7ff fed0 	bl	8002b40 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002da0:	4b33      	ldr	r3, [pc, #204]	; (8002e70 <MX_TIM3_Init+0x108>)
 8002da2:	2280      	movs	r2, #128	; 0x80
 8002da4:	0152      	lsls	r2, r2, #5
 8002da6:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8002da8:	4a31      	ldr	r2, [pc, #196]	; (8002e70 <MX_TIM3_Init+0x108>)
 8002daa:	4b2e      	ldr	r3, [pc, #184]	; (8002e64 <MX_TIM3_Init+0xfc>)
 8002dac:	0011      	movs	r1, r2
 8002dae:	0018      	movs	r0, r3
 8002db0:	f002 f956 	bl	8005060 <HAL_TIM_ConfigClockSource>
 8002db4:	1e03      	subs	r3, r0, #0
 8002db6:	d001      	beq.n	8002dbc <MX_TIM3_Init+0x54>
		Error_Handler();
 8002db8:	f7ff fec2 	bl	8002b40 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8002dbc:	4b29      	ldr	r3, [pc, #164]	; (8002e64 <MX_TIM3_Init+0xfc>)
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f001 fe3a 	bl	8004a38 <HAL_TIM_PWM_Init>
 8002dc4:	1e03      	subs	r3, r0, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_TIM3_Init+0x64>
		Error_Handler();
 8002dc8:	f7ff feba 	bl	8002b40 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dcc:	4b29      	ldr	r3, [pc, #164]	; (8002e74 <MX_TIM3_Init+0x10c>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dd2:	4b28      	ldr	r3, [pc, #160]	; (8002e74 <MX_TIM3_Init+0x10c>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002dd8:	4a26      	ldr	r2, [pc, #152]	; (8002e74 <MX_TIM3_Init+0x10c>)
 8002dda:	4b22      	ldr	r3, [pc, #136]	; (8002e64 <MX_TIM3_Init+0xfc>)
 8002ddc:	0011      	movs	r1, r2
 8002dde:	0018      	movs	r0, r3
 8002de0:	f002 fd30 	bl	8005844 <HAL_TIMEx_MasterConfigSynchronization>
 8002de4:	1e03      	subs	r3, r0, #0
 8002de6:	d001      	beq.n	8002dec <MX_TIM3_Init+0x84>
			!= HAL_OK) {
		Error_Handler();
 8002de8:	f7ff feaa 	bl	8002b40 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dec:	4b22      	ldr	r3, [pc, #136]	; (8002e78 <MX_TIM3_Init+0x110>)
 8002dee:	2260      	movs	r2, #96	; 0x60
 8002df0:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8002df2:	4b21      	ldr	r3, [pc, #132]	; (8002e78 <MX_TIM3_Init+0x110>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002df8:	4b1f      	ldr	r3, [pc, #124]	; (8002e78 <MX_TIM3_Init+0x110>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002dfe:	4b1e      	ldr	r3, [pc, #120]	; (8002e78 <MX_TIM3_Init+0x110>)
 8002e00:	2204      	movs	r2, #4
 8002e02:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8002e04:	491c      	ldr	r1, [pc, #112]	; (8002e78 <MX_TIM3_Init+0x110>)
 8002e06:	4b17      	ldr	r3, [pc, #92]	; (8002e64 <MX_TIM3_Init+0xfc>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f002 f870 	bl	8004ef0 <HAL_TIM_PWM_ConfigChannel>
 8002e10:	1e03      	subs	r3, r0, #0
 8002e12:	d001      	beq.n	8002e18 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8002e14:	f7ff fe94 	bl	8002b40 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8002e18:	4917      	ldr	r1, [pc, #92]	; (8002e78 <MX_TIM3_Init+0x110>)
 8002e1a:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <MX_TIM3_Init+0xfc>)
 8002e1c:	2204      	movs	r2, #4
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f002 f866 	bl	8004ef0 <HAL_TIM_PWM_ConfigChannel>
 8002e24:	1e03      	subs	r3, r0, #0
 8002e26:	d001      	beq.n	8002e2c <MX_TIM3_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8002e28:	f7ff fe8a 	bl	8002b40 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8002e2c:	4912      	ldr	r1, [pc, #72]	; (8002e78 <MX_TIM3_Init+0x110>)
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <MX_TIM3_Init+0xfc>)
 8002e30:	2208      	movs	r2, #8
 8002e32:	0018      	movs	r0, r3
 8002e34:	f002 f85c 	bl	8004ef0 <HAL_TIM_PWM_ConfigChannel>
 8002e38:	1e03      	subs	r3, r0, #0
 8002e3a:	d001      	beq.n	8002e40 <MX_TIM3_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8002e3c:	f7ff fe80 	bl	8002b40 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 8002e40:	490d      	ldr	r1, [pc, #52]	; (8002e78 <MX_TIM3_Init+0x110>)
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <MX_TIM3_Init+0xfc>)
 8002e44:	220c      	movs	r2, #12
 8002e46:	0018      	movs	r0, r3
 8002e48:	f002 f852 	bl	8004ef0 <HAL_TIM_PWM_ConfigChannel>
 8002e4c:	1e03      	subs	r3, r0, #0
 8002e4e:	d001      	beq.n	8002e54 <MX_TIM3_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 8002e50:	f7ff fe76 	bl	8002b40 <Error_Handler>
	}
	HAL_TIM_MspPostInit(&htim3);
 8002e54:	4b03      	ldr	r3, [pc, #12]	; (8002e64 <MX_TIM3_Init+0xfc>)
 8002e56:	0018      	movs	r0, r3
 8002e58:	f000 f880 	bl	8002f5c <HAL_TIM_MspPostInit>

}
 8002e5c:	46c0      	nop			; (mov r8, r8)
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	20000854 	.word	0x20000854
 8002e68:	40000400 	.word	0x40000400
 8002e6c:	000003e7 	.word	0x000003e7
 8002e70:	20000290 	.word	0x20000290
 8002e74:	20000248 	.word	0x20000248
 8002e78:	20000250 	.word	0x20000250

08002e7c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *tim_encoderHandle) {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08a      	sub	sp, #40	; 0x28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002e84:	2314      	movs	r3, #20
 8002e86:	18fb      	adds	r3, r7, r3
 8002e88:	0018      	movs	r0, r3
 8002e8a:	2314      	movs	r3, #20
 8002e8c:	001a      	movs	r2, r3
 8002e8e:	2100      	movs	r1, #0
 8002e90:	f003 fbb8 	bl	8006604 <memset>
	if (tim_encoderHandle->Instance == TIM2) {
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	05db      	lsls	r3, r3, #23
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d130      	bne.n	8002f02 <HAL_TIM_Encoder_MspInit+0x86>
		/* USER CODE BEGIN TIM2_MspInit 0 */

		/* USER CODE END TIM2_MspInit 0 */
		/* TIM2 clock enable */
		__HAL_RCC_TIM2_CLK_ENABLE();
 8002ea0:	4b1a      	ldr	r3, [pc, #104]	; (8002f0c <HAL_TIM_Encoder_MspInit+0x90>)
 8002ea2:	69da      	ldr	r2, [r3, #28]
 8002ea4:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <HAL_TIM_Encoder_MspInit+0x90>)
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	61da      	str	r2, [r3, #28]
 8002eac:	4b17      	ldr	r3, [pc, #92]	; (8002f0c <HAL_TIM_Encoder_MspInit+0x90>)
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb8:	4b14      	ldr	r3, [pc, #80]	; (8002f0c <HAL_TIM_Encoder_MspInit+0x90>)
 8002eba:	695a      	ldr	r2, [r3, #20]
 8002ebc:	4b13      	ldr	r3, [pc, #76]	; (8002f0c <HAL_TIM_Encoder_MspInit+0x90>)
 8002ebe:	2180      	movs	r1, #128	; 0x80
 8002ec0:	0289      	lsls	r1, r1, #10
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	615a      	str	r2, [r3, #20]
 8002ec6:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <HAL_TIM_Encoder_MspInit+0x90>)
 8002ec8:	695a      	ldr	r2, [r3, #20]
 8002eca:	2380      	movs	r3, #128	; 0x80
 8002ecc:	029b      	lsls	r3, r3, #10
 8002ece:	4013      	ands	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
		/**TIM2 GPIO Configuration
		 PA0     ------> TIM2_CH1
		 PA1     ------> TIM2_CH2
		 */
		GPIO_InitStruct.Pin = ENC_A_Pin | ENC_B_Pin;
 8002ed4:	2114      	movs	r1, #20
 8002ed6:	187b      	adds	r3, r7, r1
 8002ed8:	2203      	movs	r2, #3
 8002eda:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002edc:	187b      	adds	r3, r7, r1
 8002ede:	2202      	movs	r2, #2
 8002ee0:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	187b      	adds	r3, r7, r1
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	609a      	str	r2, [r3, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee8:	187b      	adds	r3, r7, r1
 8002eea:	2200      	movs	r2, #0
 8002eec:	60da      	str	r2, [r3, #12]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002eee:	187b      	adds	r3, r7, r1
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef4:	187a      	adds	r2, r7, r1
 8002ef6:	2390      	movs	r3, #144	; 0x90
 8002ef8:	05db      	lsls	r3, r3, #23
 8002efa:	0011      	movs	r1, r2
 8002efc:	0018      	movs	r0, r3
 8002efe:	f000 fe9f 	bl	8003c40 <HAL_GPIO_Init>

		/* USER CODE BEGIN TIM2_MspInit 1 */

		/* USER CODE END TIM2_MspInit 1 */
	}
}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	46bd      	mov	sp, r7
 8002f06:	b00a      	add	sp, #40	; 0x28
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	40021000 	.word	0x40021000

08002f10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *tim_baseHandle) {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]

	if (tim_baseHandle->Instance == TIM3) {
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a0d      	ldr	r2, [pc, #52]	; (8002f54 <HAL_TIM_Base_MspInit+0x44>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d113      	bne.n	8002f4a <HAL_TIM_Base_MspInit+0x3a>
		/* USER CODE BEGIN TIM3_MspInit 0 */

		/* USER CODE END TIM3_MspInit 0 */
		/* TIM3 clock enable */
		__HAL_RCC_TIM3_CLK_ENABLE();
 8002f22:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <HAL_TIM_Base_MspInit+0x48>)
 8002f24:	69da      	ldr	r2, [r3, #28]
 8002f26:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <HAL_TIM_Base_MspInit+0x48>)
 8002f28:	2102      	movs	r1, #2
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	61da      	str	r2, [r3, #28]
 8002f2e:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <HAL_TIM_Base_MspInit+0x48>)
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	2202      	movs	r2, #2
 8002f34:	4013      	ands	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]

		/* TIM3 interrupt Init */
		HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2103      	movs	r1, #3
 8002f3e:	2010      	movs	r0, #16
 8002f40:	f000 fd52 	bl	80039e8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f44:	2010      	movs	r0, #16
 8002f46:	f000 fd64 	bl	8003a12 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM3_MspInit 1 */

		/* USER CODE END TIM3_MspInit 1 */
	}
}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b004      	add	sp, #16
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	40000400 	.word	0x40000400
 8002f58:	40021000 	.word	0x40021000

08002f5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *timHandle) {
 8002f5c:	b590      	push	{r4, r7, lr}
 8002f5e:	b08b      	sub	sp, #44	; 0x2c
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002f64:	2314      	movs	r3, #20
 8002f66:	18fb      	adds	r3, r7, r3
 8002f68:	0018      	movs	r0, r3
 8002f6a:	2314      	movs	r3, #20
 8002f6c:	001a      	movs	r2, r3
 8002f6e:	2100      	movs	r1, #0
 8002f70:	f003 fb48 	bl	8006604 <memset>
	if (timHandle->Instance == TIM3) {
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a27      	ldr	r2, [pc, #156]	; (8003018 <HAL_TIM_MspPostInit+0xbc>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d148      	bne.n	8003010 <HAL_TIM_MspPostInit+0xb4>
		/* USER CODE BEGIN TIM3_MspPostInit 0 */

		/* USER CODE END TIM3_MspPostInit 0 */

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8002f7e:	4b27      	ldr	r3, [pc, #156]	; (800301c <HAL_TIM_MspPostInit+0xc0>)
 8002f80:	695a      	ldr	r2, [r3, #20]
 8002f82:	4b26      	ldr	r3, [pc, #152]	; (800301c <HAL_TIM_MspPostInit+0xc0>)
 8002f84:	2180      	movs	r1, #128	; 0x80
 8002f86:	0289      	lsls	r1, r1, #10
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	615a      	str	r2, [r3, #20]
 8002f8c:	4b23      	ldr	r3, [pc, #140]	; (800301c <HAL_TIM_MspPostInit+0xc0>)
 8002f8e:	695a      	ldr	r2, [r3, #20]
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	029b      	lsls	r3, r3, #10
 8002f94:	4013      	ands	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8002f9a:	4b20      	ldr	r3, [pc, #128]	; (800301c <HAL_TIM_MspPostInit+0xc0>)
 8002f9c:	695a      	ldr	r2, [r3, #20]
 8002f9e:	4b1f      	ldr	r3, [pc, #124]	; (800301c <HAL_TIM_MspPostInit+0xc0>)
 8002fa0:	2180      	movs	r1, #128	; 0x80
 8002fa2:	02c9      	lsls	r1, r1, #11
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	615a      	str	r2, [r3, #20]
 8002fa8:	4b1c      	ldr	r3, [pc, #112]	; (800301c <HAL_TIM_MspPostInit+0xc0>)
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	02db      	lsls	r3, r3, #11
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
		 PA6     ------> TIM3_CH1
		 PA7     ------> TIM3_CH2
		 PB0     ------> TIM3_CH3
		 PB1     ------> TIM3_CH4
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8002fb6:	2414      	movs	r4, #20
 8002fb8:	193b      	adds	r3, r7, r4
 8002fba:	22c0      	movs	r2, #192	; 0xc0
 8002fbc:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbe:	193b      	adds	r3, r7, r4
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc4:	193b      	adds	r3, r7, r4
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	609a      	str	r2, [r3, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fca:	193b      	adds	r3, r7, r4
 8002fcc:	2200      	movs	r2, #0
 8002fce:	60da      	str	r2, [r3, #12]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002fd0:	193b      	adds	r3, r7, r4
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd6:	193a      	adds	r2, r7, r4
 8002fd8:	2390      	movs	r3, #144	; 0x90
 8002fda:	05db      	lsls	r3, r3, #23
 8002fdc:	0011      	movs	r1, r2
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f000 fe2e 	bl	8003c40 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002fe4:	0021      	movs	r1, r4
 8002fe6:	187b      	adds	r3, r7, r1
 8002fe8:	2203      	movs	r2, #3
 8002fea:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fec:	187b      	adds	r3, r7, r1
 8002fee:	2202      	movs	r2, #2
 8002ff0:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff2:	187b      	adds	r3, r7, r1
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	609a      	str	r2, [r3, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff8:	187b      	adds	r3, r7, r1
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	60da      	str	r2, [r3, #12]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002ffe:	187b      	adds	r3, r7, r1
 8003000:	2201      	movs	r2, #1
 8003002:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003004:	187b      	adds	r3, r7, r1
 8003006:	4a06      	ldr	r2, [pc, #24]	; (8003020 <HAL_TIM_MspPostInit+0xc4>)
 8003008:	0019      	movs	r1, r3
 800300a:	0010      	movs	r0, r2
 800300c:	f000 fe18 	bl	8003c40 <HAL_GPIO_Init>
		/* USER CODE BEGIN TIM3_MspPostInit 1 */

		/* USER CODE END TIM3_MspPostInit 1 */
	}

}
 8003010:	46c0      	nop			; (mov r8, r8)
 8003012:	46bd      	mov	sp, r7
 8003014:	b00b      	add	sp, #44	; 0x2c
 8003016:	bd90      	pop	{r4, r7, pc}
 8003018:	40000400 	.word	0x40000400
 800301c:	40021000 	.word	0x40021000
 8003020:	48000400 	.word	0x48000400

08003024 <PWM_Start>:
//			Error_Handler();
//		if (HAL_TIM_PWM_Start(&htim3, CHANNELS[i]) != HAL_OK)
//			Error_Handler();
//	}
//}
void PWM_Start() {
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003028:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <PWM_Start+0x34>)
 800302a:	2100      	movs	r1, #0
 800302c:	0018      	movs	r0, r3
 800302e:	f001 fd37 	bl	8004aa0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003032:	4b09      	ldr	r3, [pc, #36]	; (8003058 <PWM_Start+0x34>)
 8003034:	2104      	movs	r1, #4
 8003036:	0018      	movs	r0, r3
 8003038:	f001 fd32 	bl	8004aa0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <PWM_Start+0x34>)
 800303e:	2108      	movs	r1, #8
 8003040:	0018      	movs	r0, r3
 8003042:	f001 fd2d 	bl	8004aa0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003046:	4b04      	ldr	r3, [pc, #16]	; (8003058 <PWM_Start+0x34>)
 8003048:	210c      	movs	r1, #12
 800304a:	0018      	movs	r0, r3
 800304c:	f001 fd28 	bl	8004aa0 <HAL_TIM_PWM_Start>
}
 8003050:	46c0      	nop			; (mov r8, r8)
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	20000854 	.word	0x20000854

0800305c <Duty_Out>:
void Duty_Out(double duty_persentage) {
 800305c:	b5b0      	push	{r4, r5, r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6038      	str	r0, [r7, #0]
 8003064:	6079      	str	r1, [r7, #4]
	if (duty_persentage >= 0) {
 8003066:	2200      	movs	r2, #0
 8003068:	2300      	movs	r3, #0
 800306a:	6838      	ldr	r0, [r7, #0]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	f7fd f90b 	bl	8000288 <__aeabi_dcmpge>
 8003072:	1e03      	subs	r3, r0, #0
 8003074:	d021      	beq.n	80030ba <Duty_Out+0x5e>
		uint32_t Pulse = (duty_persentage) * PWM_PERIOD; //正なら最大??��?��パ�?�セント左サイ?��?
 8003076:	2200      	movs	r2, #0
 8003078:	4b26      	ldr	r3, [pc, #152]	; (8003114 <Duty_Out+0xb8>)
 800307a:	6838      	ldr	r0, [r7, #0]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	f7fe f97f 	bl	8001380 <__aeabi_dmul>
 8003082:	0003      	movs	r3, r0
 8003084:	000c      	movs	r4, r1
 8003086:	0018      	movs	r0, r3
 8003088:	0021      	movs	r1, r4
 800308a:	f7fd f941 	bl	8000310 <__aeabi_d2uiz>
 800308e:	0003      	movs	r3, r0
 8003090:	60bb      	str	r3, [r7, #8]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Pulse);
 8003092:	4b21      	ldr	r3, [pc, #132]	; (8003118 <Duty_Out+0xbc>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, Pulse + 80);
 800309a:	4b1f      	ldr	r3, [pc, #124]	; (8003118 <Duty_Out+0xbc>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	3250      	adds	r2, #80	; 0x50
 80030a2:	639a      	str	r2, [r3, #56]	; 0x38
		Pulse = 0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	60bb      	str	r3, [r7, #8]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, Pulse);
 80030a8:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <Duty_Out+0xbc>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, Pulse);
 80030b0:	4b19      	ldr	r3, [pc, #100]	; (8003118 <Duty_Out+0xbc>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	641a      	str	r2, [r3, #64]	; 0x40
////		Error_Handler();
//	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
//		Error_Handler();
//	if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_ALL) != HAL_OK)
//		Error_Handler();
}
 80030b8:	e027      	b.n	800310a <Duty_Out+0xae>
		uint32_t Pulse = (-duty_persentage) * PWM_PERIOD; //正なら最大??��?��パ�?�セント左サイ?��?
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	001c      	movs	r4, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2280      	movs	r2, #128	; 0x80
 80030c2:	0612      	lsls	r2, r2, #24
 80030c4:	405a      	eors	r2, r3
 80030c6:	0015      	movs	r5, r2
 80030c8:	2200      	movs	r2, #0
 80030ca:	4b12      	ldr	r3, [pc, #72]	; (8003114 <Duty_Out+0xb8>)
 80030cc:	0020      	movs	r0, r4
 80030ce:	0029      	movs	r1, r5
 80030d0:	f7fe f956 	bl	8001380 <__aeabi_dmul>
 80030d4:	0003      	movs	r3, r0
 80030d6:	000c      	movs	r4, r1
 80030d8:	0018      	movs	r0, r3
 80030da:	0021      	movs	r1, r4
 80030dc:	f7fd f918 	bl	8000310 <__aeabi_d2uiz>
 80030e0:	0003      	movs	r3, r0
 80030e2:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, Pulse);
 80030e4:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <Duty_Out+0xbc>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, Pulse + 80);
 80030ec:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <Duty_Out+0xbc>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	3250      	adds	r2, #80	; 0x50
 80030f4:	641a      	str	r2, [r3, #64]	; 0x40
		Pulse = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Pulse);
 80030fa:	4b07      	ldr	r3, [pc, #28]	; (8003118 <Duty_Out+0xbc>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, Pulse);
 8003102:	4b05      	ldr	r3, [pc, #20]	; (8003118 <Duty_Out+0xbc>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	639a      	str	r2, [r3, #56]	; 0x38
}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	46bd      	mov	sp, r7
 800310e:	b004      	add	sp, #16
 8003110:	bdb0      	pop	{r4, r5, r7, pc}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	408f3800 	.word	0x408f3800
 8003118:	20000854 	.word	0x20000854

0800311c <Enc_Start>:
void Enc_Start() {
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <Enc_Start+0x1c>)
 8003122:	213c      	movs	r1, #60	; 0x3c
 8003124:	0018      	movs	r0, r3
 8003126:	f001 fd95 	bl	8004c54 <HAL_TIM_Encoder_Start>
	TIM2->CNT = 0x7fffffff;
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	05db      	lsls	r3, r3, #23
 800312e:	4a03      	ldr	r2, [pc, #12]	; (800313c <Enc_Start+0x20>)
 8003130:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20000894 	.word	0x20000894
 800313c:	7fffffff 	.word	0x7fffffff

08003140 <Enc_Read>:
int32_t Enc_Read() { //4294967295cnt /2(±) /18(?��?) /4(逓�??)?��?/6000(rpm) =4971(min) 計測可
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
	return TIM2->CNT - 0x7fffffff;
 8003144:	2380      	movs	r3, #128	; 0x80
 8003146:	05db      	lsls	r3, r3, #23
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	4a03      	ldr	r2, [pc, #12]	; (8003158 <Enc_Read+0x18>)
 800314c:	4694      	mov	ip, r2
 800314e:	4463      	add	r3, ip
}
 8003150:	0018      	movs	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	80000001 	.word	0x80000001

0800315c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800315c:	4813      	ldr	r0, [pc, #76]	; (80031ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800315e:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8003160:	4813      	ldr	r0, [pc, #76]	; (80031b0 <LoopForever+0x6>)
    LDR R1, [R0]
 8003162:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8003164:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8003166:	4a13      	ldr	r2, [pc, #76]	; (80031b4 <LoopForever+0xa>)
    CMP R1, R2
 8003168:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800316a:	d105      	bne.n	8003178 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 800316c:	4812      	ldr	r0, [pc, #72]	; (80031b8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800316e:	4913      	ldr	r1, [pc, #76]	; (80031bc <LoopForever+0x12>)
    STR R1, [R0]
 8003170:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8003172:	4813      	ldr	r0, [pc, #76]	; (80031c0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8003174:	4913      	ldr	r1, [pc, #76]	; (80031c4 <LoopForever+0x1a>)
    STR R1, [R0]
 8003176:	6001      	str	r1, [r0, #0]

08003178 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003178:	4813      	ldr	r0, [pc, #76]	; (80031c8 <LoopForever+0x1e>)
  ldr r1, =_edata
 800317a:	4914      	ldr	r1, [pc, #80]	; (80031cc <LoopForever+0x22>)
  ldr r2, =_sidata
 800317c:	4a14      	ldr	r2, [pc, #80]	; (80031d0 <LoopForever+0x26>)
  movs r3, #0
 800317e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003180:	e002      	b.n	8003188 <LoopCopyDataInit>

08003182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003186:	3304      	adds	r3, #4

08003188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800318a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800318c:	d3f9      	bcc.n	8003182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800318e:	4a11      	ldr	r2, [pc, #68]	; (80031d4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8003190:	4c11      	ldr	r4, [pc, #68]	; (80031d8 <LoopForever+0x2e>)
  movs r3, #0
 8003192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003194:	e001      	b.n	800319a <LoopFillZerobss>

08003196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003198:	3204      	adds	r2, #4

0800319a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800319a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800319c:	d3fb      	bcc.n	8003196 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800319e:	f7ff fd89 	bl	8002cb4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80031a2:	f003 fa0b 	bl	80065bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031a6:	f7ff fc51 	bl	8002a4c <main>

080031aa <LoopForever>:

LoopForever:
    b LoopForever
 80031aa:	e7fe      	b.n	80031aa <LoopForever>
  ldr   r0, =_estack
 80031ac:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80031b0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80031b4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80031b8:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80031bc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80031c0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80031c4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80031c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031cc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80031d0:	080067c0 	.word	0x080067c0
  ldr r2, =_sbss
 80031d4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80031d8:	200008d8 	.word	0x200008d8

080031dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031dc:	e7fe      	b.n	80031dc <ADC1_IRQHandler>
	...

080031e0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031e4:	4b07      	ldr	r3, [pc, #28]	; (8003204 <HAL_Init+0x24>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4b06      	ldr	r3, [pc, #24]	; (8003204 <HAL_Init+0x24>)
 80031ea:	2110      	movs	r1, #16
 80031ec:	430a      	orrs	r2, r1
 80031ee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80031f0:	2000      	movs	r0, #0
 80031f2:	f7ff fcd5 	bl	8002ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031f6:	f7ff fca9 	bl	8002b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	0018      	movs	r0, r3
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	40022000 	.word	0x40022000

08003208 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800320c:	4b05      	ldr	r3, [pc, #20]	; (8003224 <HAL_IncTick+0x1c>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	001a      	movs	r2, r3
 8003212:	4b05      	ldr	r3, [pc, #20]	; (8003228 <HAL_IncTick+0x20>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	18d2      	adds	r2, r2, r3
 8003218:	4b03      	ldr	r3, [pc, #12]	; (8003228 <HAL_IncTick+0x20>)
 800321a:	601a      	str	r2, [r3, #0]
}
 800321c:	46c0      	nop			; (mov r8, r8)
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	20000010 	.word	0x20000010
 8003228:	200008d4 	.word	0x200008d4

0800322c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  return uwTick;
 8003230:	4b02      	ldr	r3, [pc, #8]	; (800323c <HAL_GetTick+0x10>)
 8003232:	681b      	ldr	r3, [r3, #0]
}
 8003234:	0018      	movs	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	200008d4 	.word	0x200008d4

08003240 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003248:	230f      	movs	r3, #15
 800324a:	18fb      	adds	r3, r7, r3
 800324c:	2200      	movs	r2, #0
 800324e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e125      	b.n	80034aa <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10a      	bne.n	800327c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2234      	movs	r2, #52	; 0x34
 8003270:	2100      	movs	r1, #0
 8003272:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	0018      	movs	r0, r3
 8003278:	f7fe ff92 	bl	80021a0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003280:	2210      	movs	r2, #16
 8003282:	4013      	ands	r3, r2
 8003284:	d000      	beq.n	8003288 <HAL_ADC_Init+0x48>
 8003286:	e103      	b.n	8003490 <HAL_ADC_Init+0x250>
 8003288:	230f      	movs	r3, #15
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d000      	beq.n	8003294 <HAL_ADC_Init+0x54>
 8003292:	e0fd      	b.n	8003490 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2204      	movs	r2, #4
 800329c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800329e:	d000      	beq.n	80032a2 <HAL_ADC_Init+0x62>
 80032a0:	e0f6      	b.n	8003490 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a6:	4a83      	ldr	r2, [pc, #524]	; (80034b4 <HAL_ADC_Init+0x274>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	2202      	movs	r2, #2
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	2203      	movs	r2, #3
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d112      	bne.n	80032e6 <HAL_ADC_Init+0xa6>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2201      	movs	r2, #1
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d009      	beq.n	80032e2 <HAL_ADC_Init+0xa2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	2380      	movs	r3, #128	; 0x80
 80032d6:	021b      	lsls	r3, r3, #8
 80032d8:	401a      	ands	r2, r3
 80032da:	2380      	movs	r3, #128	; 0x80
 80032dc:	021b      	lsls	r3, r3, #8
 80032de:	429a      	cmp	r2, r3
 80032e0:	d101      	bne.n	80032e6 <HAL_ADC_Init+0xa6>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <HAL_ADC_Init+0xa8>
 80032e6:	2300      	movs	r3, #0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d116      	bne.n	800331a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	2218      	movs	r2, #24
 80032f4:	4393      	bics	r3, r2
 80032f6:	0019      	movs	r1, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	0899      	lsrs	r1, r3, #2
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4964      	ldr	r1, [pc, #400]	; (80034b8 <HAL_ADC_Init+0x278>)
 8003326:	400a      	ands	r2, r1
 8003328:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	7e1b      	ldrb	r3, [r3, #24]
 800332e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	7e5b      	ldrb	r3, [r3, #25]
 8003334:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003336:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	7e9b      	ldrb	r3, [r3, #26]
 800333c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800333e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	2b01      	cmp	r3, #1
 8003346:	d002      	beq.n	800334e <HAL_ADC_Init+0x10e>
 8003348:	2380      	movs	r3, #128	; 0x80
 800334a:	015b      	lsls	r3, r3, #5
 800334c:	e000      	b.n	8003350 <HAL_ADC_Init+0x110>
 800334e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003350:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003356:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	2b02      	cmp	r3, #2
 800335e:	d101      	bne.n	8003364 <HAL_ADC_Init+0x124>
 8003360:	2304      	movs	r3, #4
 8003362:	e000      	b.n	8003366 <HAL_ADC_Init+0x126>
 8003364:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8003366:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2124      	movs	r1, #36	; 0x24
 800336c:	5c5b      	ldrb	r3, [r3, r1]
 800336e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003370:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	4313      	orrs	r3, r2
 8003376:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	7edb      	ldrb	r3, [r3, #27]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d115      	bne.n	80033ac <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	7e9b      	ldrb	r3, [r3, #26]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d105      	bne.n	8003394 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2280      	movs	r2, #128	; 0x80
 800338c:	0252      	lsls	r2, r2, #9
 800338e:	4313      	orrs	r3, r2
 8003390:	60bb      	str	r3, [r7, #8]
 8003392:	e00b      	b.n	80033ac <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003398:	2220      	movs	r2, #32
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a4:	2201      	movs	r2, #1
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	69da      	ldr	r2, [r3, #28]
 80033b0:	23c2      	movs	r3, #194	; 0xc2
 80033b2:	33ff      	adds	r3, #255	; 0xff
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d007      	beq.n	80033c8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80033c0:	4313      	orrs	r3, r2
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68d9      	ldr	r1, [r3, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033dc:	2380      	movs	r3, #128	; 0x80
 80033de:	055b      	lsls	r3, r3, #21
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d01b      	beq.n	800341c <HAL_ADC_Init+0x1dc>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d017      	beq.n	800341c <HAL_ADC_Init+0x1dc>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d013      	beq.n	800341c <HAL_ADC_Init+0x1dc>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	d00f      	beq.n	800341c <HAL_ADC_Init+0x1dc>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	2b04      	cmp	r3, #4
 8003402:	d00b      	beq.n	800341c <HAL_ADC_Init+0x1dc>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	2b05      	cmp	r3, #5
 800340a:	d007      	beq.n	800341c <HAL_ADC_Init+0x1dc>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	2b06      	cmp	r3, #6
 8003412:	d003      	beq.n	800341c <HAL_ADC_Init+0x1dc>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	2b07      	cmp	r3, #7
 800341a:	d112      	bne.n	8003442 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	695a      	ldr	r2, [r3, #20]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2107      	movs	r1, #7
 8003428:	438a      	bics	r2, r1
 800342a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6959      	ldr	r1, [r3, #20]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	2207      	movs	r2, #7
 8003438:	401a      	ands	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	4a1c      	ldr	r2, [pc, #112]	; (80034bc <HAL_ADC_Init+0x27c>)
 800344a:	4013      	ands	r3, r2
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	429a      	cmp	r2, r3
 8003450:	d10b      	bne.n	800346a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345c:	2203      	movs	r2, #3
 800345e:	4393      	bics	r3, r2
 8003460:	2201      	movs	r2, #1
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003468:	e01c      	b.n	80034a4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346e:	2212      	movs	r2, #18
 8003470:	4393      	bics	r3, r2
 8003472:	2210      	movs	r2, #16
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347e:	2201      	movs	r2, #1
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003486:	230f      	movs	r3, #15
 8003488:	18fb      	adds	r3, r7, r3
 800348a:	2201      	movs	r2, #1
 800348c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800348e:	e009      	b.n	80034a4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	2210      	movs	r2, #16
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800349c:	230f      	movs	r3, #15
 800349e:	18fb      	adds	r3, r7, r3
 80034a0:	2201      	movs	r2, #1
 80034a2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80034a4:	230f      	movs	r3, #15
 80034a6:	18fb      	adds	r3, r7, r3
 80034a8:	781b      	ldrb	r3, [r3, #0]
}
 80034aa:	0018      	movs	r0, r3
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b004      	add	sp, #16
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	fffffefd 	.word	0xfffffefd
 80034b8:	fffe0219 	.word	0xfffe0219
 80034bc:	833fffe7 	.word	0x833fffe7

080034c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034ca:	230f      	movs	r3, #15
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	2200      	movs	r2, #0
 80034d0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034da:	2380      	movs	r3, #128	; 0x80
 80034dc:	055b      	lsls	r3, r3, #21
 80034de:	429a      	cmp	r2, r3
 80034e0:	d011      	beq.n	8003506 <HAL_ADC_ConfigChannel+0x46>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d00d      	beq.n	8003506 <HAL_ADC_ConfigChannel+0x46>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d009      	beq.n	8003506 <HAL_ADC_ConfigChannel+0x46>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f6:	2b03      	cmp	r3, #3
 80034f8:	d005      	beq.n	8003506 <HAL_ADC_ConfigChannel+0x46>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d001      	beq.n	8003506 <HAL_ADC_ConfigChannel+0x46>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2234      	movs	r2, #52	; 0x34
 800350a:	5c9b      	ldrb	r3, [r3, r2]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <HAL_ADC_ConfigChannel+0x54>
 8003510:	2302      	movs	r3, #2
 8003512:	e0d0      	b.n	80036b6 <HAL_ADC_ConfigChannel+0x1f6>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2234      	movs	r2, #52	; 0x34
 8003518:	2101      	movs	r1, #1
 800351a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2204      	movs	r2, #4
 8003524:	4013      	ands	r3, r2
 8003526:	d000      	beq.n	800352a <HAL_ADC_ConfigChannel+0x6a>
 8003528:	e0b4      	b.n	8003694 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	4a64      	ldr	r2, [pc, #400]	; (80036c0 <HAL_ADC_ConfigChannel+0x200>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d100      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x76>
 8003534:	e082      	b.n	800363c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2201      	movs	r2, #1
 8003542:	409a      	lsls	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003550:	2380      	movs	r3, #128	; 0x80
 8003552:	055b      	lsls	r3, r3, #21
 8003554:	429a      	cmp	r2, r3
 8003556:	d037      	beq.n	80035c8 <HAL_ADC_ConfigChannel+0x108>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	2b01      	cmp	r3, #1
 800355e:	d033      	beq.n	80035c8 <HAL_ADC_ConfigChannel+0x108>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003564:	2b02      	cmp	r3, #2
 8003566:	d02f      	beq.n	80035c8 <HAL_ADC_ConfigChannel+0x108>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	2b03      	cmp	r3, #3
 800356e:	d02b      	beq.n	80035c8 <HAL_ADC_ConfigChannel+0x108>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	2b04      	cmp	r3, #4
 8003576:	d027      	beq.n	80035c8 <HAL_ADC_ConfigChannel+0x108>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357c:	2b05      	cmp	r3, #5
 800357e:	d023      	beq.n	80035c8 <HAL_ADC_ConfigChannel+0x108>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	2b06      	cmp	r3, #6
 8003586:	d01f      	beq.n	80035c8 <HAL_ADC_ConfigChannel+0x108>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	2b07      	cmp	r3, #7
 800358e:	d01b      	beq.n	80035c8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	2107      	movs	r1, #7
 800359c:	400b      	ands	r3, r1
 800359e:	429a      	cmp	r2, r3
 80035a0:	d012      	beq.n	80035c8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695a      	ldr	r2, [r3, #20]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2107      	movs	r1, #7
 80035ae:	438a      	bics	r2, r1
 80035b0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6959      	ldr	r1, [r3, #20]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2207      	movs	r2, #7
 80035be:	401a      	ands	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b10      	cmp	r3, #16
 80035ce:	d007      	beq.n	80035e0 <HAL_ADC_ConfigChannel+0x120>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b11      	cmp	r3, #17
 80035d6:	d003      	beq.n	80035e0 <HAL_ADC_ConfigChannel+0x120>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b12      	cmp	r3, #18
 80035de:	d163      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80035e0:	4b38      	ldr	r3, [pc, #224]	; (80036c4 <HAL_ADC_ConfigChannel+0x204>)
 80035e2:	6819      	ldr	r1, [r3, #0]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b10      	cmp	r3, #16
 80035ea:	d009      	beq.n	8003600 <HAL_ADC_ConfigChannel+0x140>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b11      	cmp	r3, #17
 80035f2:	d102      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x13a>
 80035f4:	2380      	movs	r3, #128	; 0x80
 80035f6:	03db      	lsls	r3, r3, #15
 80035f8:	e004      	b.n	8003604 <HAL_ADC_ConfigChannel+0x144>
 80035fa:	2380      	movs	r3, #128	; 0x80
 80035fc:	045b      	lsls	r3, r3, #17
 80035fe:	e001      	b.n	8003604 <HAL_ADC_ConfigChannel+0x144>
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	041b      	lsls	r3, r3, #16
 8003604:	4a2f      	ldr	r2, [pc, #188]	; (80036c4 <HAL_ADC_ConfigChannel+0x204>)
 8003606:	430b      	orrs	r3, r1
 8003608:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2b10      	cmp	r3, #16
 8003610:	d14a      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003612:	4b2d      	ldr	r3, [pc, #180]	; (80036c8 <HAL_ADC_ConfigChannel+0x208>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	492d      	ldr	r1, [pc, #180]	; (80036cc <HAL_ADC_ConfigChannel+0x20c>)
 8003618:	0018      	movs	r0, r3
 800361a:	f7fc fd75 	bl	8000108 <__udivsi3>
 800361e:	0003      	movs	r3, r0
 8003620:	001a      	movs	r2, r3
 8003622:	0013      	movs	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	189b      	adds	r3, r3, r2
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800362c:	e002      	b.n	8003634 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	3b01      	subs	r3, #1
 8003632:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f9      	bne.n	800362e <HAL_ADC_ConfigChannel+0x16e>
 800363a:	e035      	b.n	80036a8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2101      	movs	r1, #1
 8003648:	4099      	lsls	r1, r3
 800364a:	000b      	movs	r3, r1
 800364c:	43d9      	mvns	r1, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	400a      	ands	r2, r1
 8003654:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b10      	cmp	r3, #16
 800365c:	d007      	beq.n	800366e <HAL_ADC_ConfigChannel+0x1ae>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b11      	cmp	r3, #17
 8003664:	d003      	beq.n	800366e <HAL_ADC_ConfigChannel+0x1ae>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b12      	cmp	r3, #18
 800366c:	d11c      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800366e:	4b15      	ldr	r3, [pc, #84]	; (80036c4 <HAL_ADC_ConfigChannel+0x204>)
 8003670:	6819      	ldr	r1, [r3, #0]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b10      	cmp	r3, #16
 8003678:	d007      	beq.n	800368a <HAL_ADC_ConfigChannel+0x1ca>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b11      	cmp	r3, #17
 8003680:	d101      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x1c6>
 8003682:	4b13      	ldr	r3, [pc, #76]	; (80036d0 <HAL_ADC_ConfigChannel+0x210>)
 8003684:	e002      	b.n	800368c <HAL_ADC_ConfigChannel+0x1cc>
 8003686:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <HAL_ADC_ConfigChannel+0x214>)
 8003688:	e000      	b.n	800368c <HAL_ADC_ConfigChannel+0x1cc>
 800368a:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <HAL_ADC_ConfigChannel+0x218>)
 800368c:	4a0d      	ldr	r2, [pc, #52]	; (80036c4 <HAL_ADC_ConfigChannel+0x204>)
 800368e:	400b      	ands	r3, r1
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	e009      	b.n	80036a8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003698:	2220      	movs	r2, #32
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80036a0:	230f      	movs	r3, #15
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	2201      	movs	r2, #1
 80036a6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2234      	movs	r2, #52	; 0x34
 80036ac:	2100      	movs	r1, #0
 80036ae:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80036b0:	230f      	movs	r3, #15
 80036b2:	18fb      	adds	r3, r7, r3
 80036b4:	781b      	ldrb	r3, [r3, #0]
}
 80036b6:	0018      	movs	r0, r3
 80036b8:	46bd      	mov	sp, r7
 80036ba:	b004      	add	sp, #16
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	46c0      	nop			; (mov r8, r8)
 80036c0:	00001001 	.word	0x00001001
 80036c4:	40012708 	.word	0x40012708
 80036c8:	2000000c 	.word	0x2000000c
 80036cc:	000f4240 	.word	0x000f4240
 80036d0:	ffbfffff 	.word	0xffbfffff
 80036d4:	feffffff 	.word	0xfeffffff
 80036d8:	ff7fffff 	.word	0xff7fffff

080036dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e0f0      	b.n	80038d0 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2220      	movs	r2, #32
 80036f2:	5c9b      	ldrb	r3, [r3, r2]
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d103      	bne.n	8003702 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	0018      	movs	r0, r3
 80036fe:	f7fe fdf9 	bl	80022f4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2102      	movs	r1, #2
 800370e:	438a      	bics	r2, r1
 8003710:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003712:	f7ff fd8b 	bl	800322c <HAL_GetTick>
 8003716:	0003      	movs	r3, r0
 8003718:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800371a:	e013      	b.n	8003744 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800371c:	f7ff fd86 	bl	800322c <HAL_GetTick>
 8003720:	0002      	movs	r2, r0
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b0a      	cmp	r3, #10
 8003728:	d90c      	bls.n	8003744 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	2280      	movs	r2, #128	; 0x80
 8003730:	0292      	lsls	r2, r2, #10
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2220      	movs	r2, #32
 800373c:	2105      	movs	r1, #5
 800373e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e0c5      	b.n	80038d0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	4013      	ands	r3, r2
 800374e:	d1e5      	bne.n	800371c <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2101      	movs	r1, #1
 800375c:	430a      	orrs	r2, r1
 800375e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003760:	f7ff fd64 	bl	800322c <HAL_GetTick>
 8003764:	0003      	movs	r3, r0
 8003766:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003768:	e013      	b.n	8003792 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800376a:	f7ff fd5f 	bl	800322c <HAL_GetTick>
 800376e:	0002      	movs	r2, r0
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b0a      	cmp	r3, #10
 8003776:	d90c      	bls.n	8003792 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	2280      	movs	r2, #128	; 0x80
 800377e:	0292      	lsls	r2, r2, #10
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2220      	movs	r2, #32
 800378a:	2105      	movs	r1, #5
 800378c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e09e      	b.n	80038d0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	4013      	ands	r3, r2
 800379c:	d0e5      	beq.n	800376a <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	7e1b      	ldrb	r3, [r3, #24]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d108      	bne.n	80037b8 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2180      	movs	r1, #128	; 0x80
 80037b2:	430a      	orrs	r2, r1
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	e007      	b.n	80037c8 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2180      	movs	r1, #128	; 0x80
 80037c4:	438a      	bics	r2, r1
 80037c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	7e5b      	ldrb	r3, [r3, #25]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d108      	bne.n	80037e2 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2140      	movs	r1, #64	; 0x40
 80037dc:	430a      	orrs	r2, r1
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	e007      	b.n	80037f2 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2140      	movs	r1, #64	; 0x40
 80037ee:	438a      	bics	r2, r1
 80037f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	7e9b      	ldrb	r3, [r3, #26]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d108      	bne.n	800380c <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2120      	movs	r1, #32
 8003806:	430a      	orrs	r2, r1
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e007      	b.n	800381c <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2120      	movs	r1, #32
 8003818:	438a      	bics	r2, r1
 800381a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	7edb      	ldrb	r3, [r3, #27]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d108      	bne.n	8003836 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2110      	movs	r1, #16
 8003830:	438a      	bics	r2, r1
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	e007      	b.n	8003846 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2110      	movs	r1, #16
 8003842:	430a      	orrs	r2, r1
 8003844:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	7f1b      	ldrb	r3, [r3, #28]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d108      	bne.n	8003860 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2108      	movs	r1, #8
 800385a:	430a      	orrs	r2, r1
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	e007      	b.n	8003870 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2108      	movs	r1, #8
 800386c:	438a      	bics	r2, r1
 800386e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	7f5b      	ldrb	r3, [r3, #29]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d108      	bne.n	800388a <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2104      	movs	r1, #4
 8003884:	430a      	orrs	r2, r1
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	e007      	b.n	800389a <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2104      	movs	r1, #4
 8003896:	438a      	bics	r2, r1
 8003898:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689a      	ldr	r2, [r3, #8]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	431a      	orrs	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	0011      	movs	r1, r2
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	1e5a      	subs	r2, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	2101      	movs	r1, #1
 80038cc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	0018      	movs	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	b004      	add	sp, #16
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	0002      	movs	r2, r0
 80038e0:	1dfb      	adds	r3, r7, #7
 80038e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038e4:	1dfb      	adds	r3, r7, #7
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b7f      	cmp	r3, #127	; 0x7f
 80038ea:	d809      	bhi.n	8003900 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ec:	1dfb      	adds	r3, r7, #7
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	001a      	movs	r2, r3
 80038f2:	231f      	movs	r3, #31
 80038f4:	401a      	ands	r2, r3
 80038f6:	4b04      	ldr	r3, [pc, #16]	; (8003908 <__NVIC_EnableIRQ+0x30>)
 80038f8:	2101      	movs	r1, #1
 80038fa:	4091      	lsls	r1, r2
 80038fc:	000a      	movs	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]
  }
}
 8003900:	46c0      	nop			; (mov r8, r8)
 8003902:	46bd      	mov	sp, r7
 8003904:	b002      	add	sp, #8
 8003906:	bd80      	pop	{r7, pc}
 8003908:	e000e100 	.word	0xe000e100

0800390c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800390c:	b590      	push	{r4, r7, lr}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	0002      	movs	r2, r0
 8003914:	6039      	str	r1, [r7, #0]
 8003916:	1dfb      	adds	r3, r7, #7
 8003918:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800391a:	1dfb      	adds	r3, r7, #7
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	2b7f      	cmp	r3, #127	; 0x7f
 8003920:	d828      	bhi.n	8003974 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003922:	4a2f      	ldr	r2, [pc, #188]	; (80039e0 <__NVIC_SetPriority+0xd4>)
 8003924:	1dfb      	adds	r3, r7, #7
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	b25b      	sxtb	r3, r3
 800392a:	089b      	lsrs	r3, r3, #2
 800392c:	33c0      	adds	r3, #192	; 0xc0
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	589b      	ldr	r3, [r3, r2]
 8003932:	1dfa      	adds	r2, r7, #7
 8003934:	7812      	ldrb	r2, [r2, #0]
 8003936:	0011      	movs	r1, r2
 8003938:	2203      	movs	r2, #3
 800393a:	400a      	ands	r2, r1
 800393c:	00d2      	lsls	r2, r2, #3
 800393e:	21ff      	movs	r1, #255	; 0xff
 8003940:	4091      	lsls	r1, r2
 8003942:	000a      	movs	r2, r1
 8003944:	43d2      	mvns	r2, r2
 8003946:	401a      	ands	r2, r3
 8003948:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	019b      	lsls	r3, r3, #6
 800394e:	22ff      	movs	r2, #255	; 0xff
 8003950:	401a      	ands	r2, r3
 8003952:	1dfb      	adds	r3, r7, #7
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	0018      	movs	r0, r3
 8003958:	2303      	movs	r3, #3
 800395a:	4003      	ands	r3, r0
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003960:	481f      	ldr	r0, [pc, #124]	; (80039e0 <__NVIC_SetPriority+0xd4>)
 8003962:	1dfb      	adds	r3, r7, #7
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	b25b      	sxtb	r3, r3
 8003968:	089b      	lsrs	r3, r3, #2
 800396a:	430a      	orrs	r2, r1
 800396c:	33c0      	adds	r3, #192	; 0xc0
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003972:	e031      	b.n	80039d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003974:	4a1b      	ldr	r2, [pc, #108]	; (80039e4 <__NVIC_SetPriority+0xd8>)
 8003976:	1dfb      	adds	r3, r7, #7
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	0019      	movs	r1, r3
 800397c:	230f      	movs	r3, #15
 800397e:	400b      	ands	r3, r1
 8003980:	3b08      	subs	r3, #8
 8003982:	089b      	lsrs	r3, r3, #2
 8003984:	3306      	adds	r3, #6
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	18d3      	adds	r3, r2, r3
 800398a:	3304      	adds	r3, #4
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	1dfa      	adds	r2, r7, #7
 8003990:	7812      	ldrb	r2, [r2, #0]
 8003992:	0011      	movs	r1, r2
 8003994:	2203      	movs	r2, #3
 8003996:	400a      	ands	r2, r1
 8003998:	00d2      	lsls	r2, r2, #3
 800399a:	21ff      	movs	r1, #255	; 0xff
 800399c:	4091      	lsls	r1, r2
 800399e:	000a      	movs	r2, r1
 80039a0:	43d2      	mvns	r2, r2
 80039a2:	401a      	ands	r2, r3
 80039a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	019b      	lsls	r3, r3, #6
 80039aa:	22ff      	movs	r2, #255	; 0xff
 80039ac:	401a      	ands	r2, r3
 80039ae:	1dfb      	adds	r3, r7, #7
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	0018      	movs	r0, r3
 80039b4:	2303      	movs	r3, #3
 80039b6:	4003      	ands	r3, r0
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039bc:	4809      	ldr	r0, [pc, #36]	; (80039e4 <__NVIC_SetPriority+0xd8>)
 80039be:	1dfb      	adds	r3, r7, #7
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	001c      	movs	r4, r3
 80039c4:	230f      	movs	r3, #15
 80039c6:	4023      	ands	r3, r4
 80039c8:	3b08      	subs	r3, #8
 80039ca:	089b      	lsrs	r3, r3, #2
 80039cc:	430a      	orrs	r2, r1
 80039ce:	3306      	adds	r3, #6
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	18c3      	adds	r3, r0, r3
 80039d4:	3304      	adds	r3, #4
 80039d6:	601a      	str	r2, [r3, #0]
}
 80039d8:	46c0      	nop			; (mov r8, r8)
 80039da:	46bd      	mov	sp, r7
 80039dc:	b003      	add	sp, #12
 80039de:	bd90      	pop	{r4, r7, pc}
 80039e0:	e000e100 	.word	0xe000e100
 80039e4:	e000ed00 	.word	0xe000ed00

080039e8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	210f      	movs	r1, #15
 80039f4:	187b      	adds	r3, r7, r1
 80039f6:	1c02      	adds	r2, r0, #0
 80039f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	187b      	adds	r3, r7, r1
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	b25b      	sxtb	r3, r3
 8003a02:	0011      	movs	r1, r2
 8003a04:	0018      	movs	r0, r3
 8003a06:	f7ff ff81 	bl	800390c <__NVIC_SetPriority>
}
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	b004      	add	sp, #16
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	0002      	movs	r2, r0
 8003a1a:	1dfb      	adds	r3, r7, #7
 8003a1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a1e:	1dfb      	adds	r3, r7, #7
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	b25b      	sxtb	r3, r3
 8003a24:	0018      	movs	r0, r3
 8003a26:	f7ff ff57 	bl	80038d8 <__NVIC_EnableIRQ>
}
 8003a2a:	46c0      	nop			; (mov r8, r8)
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	b002      	add	sp, #8
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e036      	b.n	8003ab8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2221      	movs	r2, #33	; 0x21
 8003a4e:	2102      	movs	r1, #2
 8003a50:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4a18      	ldr	r2, [pc, #96]	; (8003ac0 <HAL_DMA_Init+0x8c>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003a6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f000 f8b4 	bl	8003c08 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2221      	movs	r2, #33	; 0x21
 8003aaa:	2101      	movs	r1, #1
 8003aac:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}  
 8003ab8:	0018      	movs	r0, r3
 8003aba:	46bd      	mov	sp, r7
 8003abc:	b004      	add	sp, #16
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	ffffc00f 	.word	0xffffc00f

08003ac4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	409a      	lsls	r2, r3
 8003ae4:	0013      	movs	r3, r2
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d024      	beq.n	8003b36 <HAL_DMA_IRQHandler+0x72>
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2204      	movs	r2, #4
 8003af0:	4013      	ands	r3, r2
 8003af2:	d020      	beq.n	8003b36 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2220      	movs	r2, #32
 8003afc:	4013      	ands	r3, r2
 8003afe:	d107      	bne.n	8003b10 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2104      	movs	r1, #4
 8003b0c:	438a      	bics	r2, r1
 8003b0e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b18:	2104      	movs	r1, #4
 8003b1a:	4091      	lsls	r1, r2
 8003b1c:	000a      	movs	r2, r1
 8003b1e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d100      	bne.n	8003b2a <HAL_DMA_IRQHandler+0x66>
 8003b28:	e06a      	b.n	8003c00 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	0010      	movs	r0, r2
 8003b32:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003b34:	e064      	b.n	8003c00 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	409a      	lsls	r2, r3
 8003b3e:	0013      	movs	r3, r2
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4013      	ands	r3, r2
 8003b44:	d02b      	beq.n	8003b9e <HAL_DMA_IRQHandler+0xda>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2202      	movs	r2, #2
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d027      	beq.n	8003b9e <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2220      	movs	r2, #32
 8003b56:	4013      	ands	r3, r2
 8003b58:	d10b      	bne.n	8003b72 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	210a      	movs	r1, #10
 8003b66:	438a      	bics	r2, r1
 8003b68:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2221      	movs	r2, #33	; 0x21
 8003b6e:	2101      	movs	r1, #1
 8003b70:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7a:	2102      	movs	r1, #2
 8003b7c:	4091      	lsls	r1, r2
 8003b7e:	000a      	movs	r2, r1
 8003b80:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2220      	movs	r2, #32
 8003b86:	2100      	movs	r1, #0
 8003b88:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d036      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	0010      	movs	r0, r2
 8003b9a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003b9c:	e030      	b.n	8003c00 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	2208      	movs	r2, #8
 8003ba4:	409a      	lsls	r2, r3
 8003ba6:	0013      	movs	r3, r2
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4013      	ands	r3, r2
 8003bac:	d028      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x13c>
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2208      	movs	r2, #8
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	d024      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	210e      	movs	r1, #14
 8003bc2:	438a      	bics	r2, r1
 8003bc4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bce:	2101      	movs	r1, #1
 8003bd0:	4091      	lsls	r1, r2
 8003bd2:	000a      	movs	r2, r1
 8003bd4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2221      	movs	r2, #33	; 0x21
 8003be0:	2101      	movs	r1, #1
 8003be2:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	2100      	movs	r1, #0
 8003bea:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	0010      	movs	r0, r2
 8003bfc:	4798      	blx	r3
    }
   }
}  
 8003bfe:	e7ff      	b.n	8003c00 <HAL_DMA_IRQHandler+0x13c>
 8003c00:	46c0      	nop			; (mov r8, r8)
 8003c02:	46bd      	mov	sp, r7
 8003c04:	b004      	add	sp, #16
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a08      	ldr	r2, [pc, #32]	; (8003c38 <DMA_CalcBaseAndBitshift+0x30>)
 8003c16:	4694      	mov	ip, r2
 8003c18:	4463      	add	r3, ip
 8003c1a:	2114      	movs	r1, #20
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	f7fc fa73 	bl	8000108 <__udivsi3>
 8003c22:	0003      	movs	r3, r0
 8003c24:	009a      	lsls	r2, r3, #2
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a03      	ldr	r2, [pc, #12]	; (8003c3c <DMA_CalcBaseAndBitshift+0x34>)
 8003c2e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003c30:	46c0      	nop			; (mov r8, r8)
 8003c32:	46bd      	mov	sp, r7
 8003c34:	b002      	add	sp, #8
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	bffdfff8 	.word	0xbffdfff8
 8003c3c:	40020000 	.word	0x40020000

08003c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c4e:	e149      	b.n	8003ee4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2101      	movs	r1, #1
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	4091      	lsls	r1, r2
 8003c5a:	000a      	movs	r2, r1
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d100      	bne.n	8003c68 <HAL_GPIO_Init+0x28>
 8003c66:	e13a      	b.n	8003ede <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d003      	beq.n	8003c78 <HAL_GPIO_Init+0x38>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b12      	cmp	r3, #18
 8003c76:	d123      	bne.n	8003cc0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	08da      	lsrs	r2, r3, #3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3208      	adds	r2, #8
 8003c80:	0092      	lsls	r2, r2, #2
 8003c82:	58d3      	ldr	r3, [r2, r3]
 8003c84:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2207      	movs	r2, #7
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	220f      	movs	r2, #15
 8003c90:	409a      	lsls	r2, r3
 8003c92:	0013      	movs	r3, r2
 8003c94:	43da      	mvns	r2, r3
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2107      	movs	r1, #7
 8003ca4:	400b      	ands	r3, r1
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	0013      	movs	r3, r2
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	08da      	lsrs	r2, r3, #3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	3208      	adds	r2, #8
 8003cba:	0092      	lsls	r2, r2, #2
 8003cbc:	6939      	ldr	r1, [r7, #16]
 8003cbe:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	2203      	movs	r2, #3
 8003ccc:	409a      	lsls	r2, r3
 8003cce:	0013      	movs	r3, r2
 8003cd0:	43da      	mvns	r2, r3
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2203      	movs	r2, #3
 8003cde:	401a      	ands	r2, r3
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	409a      	lsls	r2, r3
 8003ce6:	0013      	movs	r3, r2
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d00b      	beq.n	8003d14 <HAL_GPIO_Init+0xd4>
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d007      	beq.n	8003d14 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d08:	2b11      	cmp	r3, #17
 8003d0a:	d003      	beq.n	8003d14 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b12      	cmp	r3, #18
 8003d12:	d130      	bne.n	8003d76 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	2203      	movs	r2, #3
 8003d20:	409a      	lsls	r2, r3
 8003d22:	0013      	movs	r3, r2
 8003d24:	43da      	mvns	r2, r3
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	68da      	ldr	r2, [r3, #12]
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	409a      	lsls	r2, r3
 8003d36:	0013      	movs	r3, r2
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	0013      	movs	r3, r2
 8003d52:	43da      	mvns	r2, r3
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4013      	ands	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	091b      	lsrs	r3, r3, #4
 8003d60:	2201      	movs	r2, #1
 8003d62:	401a      	ands	r2, r3
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	409a      	lsls	r2, r3
 8003d68:	0013      	movs	r3, r2
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	2203      	movs	r2, #3
 8003d82:	409a      	lsls	r2, r3
 8003d84:	0013      	movs	r3, r2
 8003d86:	43da      	mvns	r2, r3
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	409a      	lsls	r2, r3
 8003d98:	0013      	movs	r3, r2
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	2380      	movs	r3, #128	; 0x80
 8003dac:	055b      	lsls	r3, r3, #21
 8003dae:	4013      	ands	r3, r2
 8003db0:	d100      	bne.n	8003db4 <HAL_GPIO_Init+0x174>
 8003db2:	e094      	b.n	8003ede <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003db4:	4b51      	ldr	r3, [pc, #324]	; (8003efc <HAL_GPIO_Init+0x2bc>)
 8003db6:	699a      	ldr	r2, [r3, #24]
 8003db8:	4b50      	ldr	r3, [pc, #320]	; (8003efc <HAL_GPIO_Init+0x2bc>)
 8003dba:	2101      	movs	r1, #1
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	619a      	str	r2, [r3, #24]
 8003dc0:	4b4e      	ldr	r3, [pc, #312]	; (8003efc <HAL_GPIO_Init+0x2bc>)
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003dcc:	4a4c      	ldr	r2, [pc, #304]	; (8003f00 <HAL_GPIO_Init+0x2c0>)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	089b      	lsrs	r3, r3, #2
 8003dd2:	3302      	adds	r3, #2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	589b      	ldr	r3, [r3, r2]
 8003dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2203      	movs	r2, #3
 8003dde:	4013      	ands	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	220f      	movs	r2, #15
 8003de4:	409a      	lsls	r2, r3
 8003de6:	0013      	movs	r3, r2
 8003de8:	43da      	mvns	r2, r3
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	4013      	ands	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	2390      	movs	r3, #144	; 0x90
 8003df4:	05db      	lsls	r3, r3, #23
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d00d      	beq.n	8003e16 <HAL_GPIO_Init+0x1d6>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a41      	ldr	r2, [pc, #260]	; (8003f04 <HAL_GPIO_Init+0x2c4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d007      	beq.n	8003e12 <HAL_GPIO_Init+0x1d2>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a40      	ldr	r2, [pc, #256]	; (8003f08 <HAL_GPIO_Init+0x2c8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d101      	bne.n	8003e0e <HAL_GPIO_Init+0x1ce>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e004      	b.n	8003e18 <HAL_GPIO_Init+0x1d8>
 8003e0e:	2305      	movs	r3, #5
 8003e10:	e002      	b.n	8003e18 <HAL_GPIO_Init+0x1d8>
 8003e12:	2301      	movs	r3, #1
 8003e14:	e000      	b.n	8003e18 <HAL_GPIO_Init+0x1d8>
 8003e16:	2300      	movs	r3, #0
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	2103      	movs	r1, #3
 8003e1c:	400a      	ands	r2, r1
 8003e1e:	0092      	lsls	r2, r2, #2
 8003e20:	4093      	lsls	r3, r2
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e28:	4935      	ldr	r1, [pc, #212]	; (8003f00 <HAL_GPIO_Init+0x2c0>)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	089b      	lsrs	r3, r3, #2
 8003e2e:	3302      	adds	r3, #2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e36:	4b35      	ldr	r3, [pc, #212]	; (8003f0c <HAL_GPIO_Init+0x2cc>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	43da      	mvns	r2, r3
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	4013      	ands	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	2380      	movs	r3, #128	; 0x80
 8003e4c:	025b      	lsls	r3, r3, #9
 8003e4e:	4013      	ands	r3, r2
 8003e50:	d003      	beq.n	8003e5a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e5a:	4b2c      	ldr	r3, [pc, #176]	; (8003f0c <HAL_GPIO_Init+0x2cc>)
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003e60:	4b2a      	ldr	r3, [pc, #168]	; (8003f0c <HAL_GPIO_Init+0x2cc>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	43da      	mvns	r2, r3
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	2380      	movs	r3, #128	; 0x80
 8003e76:	029b      	lsls	r3, r3, #10
 8003e78:	4013      	ands	r3, r2
 8003e7a:	d003      	beq.n	8003e84 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e84:	4b21      	ldr	r3, [pc, #132]	; (8003f0c <HAL_GPIO_Init+0x2cc>)
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e8a:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <HAL_GPIO_Init+0x2cc>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	43da      	mvns	r2, r3
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	4013      	ands	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	2380      	movs	r3, #128	; 0x80
 8003ea0:	035b      	lsls	r3, r3, #13
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	d003      	beq.n	8003eae <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003eae:	4b17      	ldr	r3, [pc, #92]	; (8003f0c <HAL_GPIO_Init+0x2cc>)
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003eb4:	4b15      	ldr	r3, [pc, #84]	; (8003f0c <HAL_GPIO_Init+0x2cc>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	43da      	mvns	r2, r3
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	2380      	movs	r3, #128	; 0x80
 8003eca:	039b      	lsls	r3, r3, #14
 8003ecc:	4013      	ands	r3, r2
 8003ece:	d003      	beq.n	8003ed8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003ed8:	4b0c      	ldr	r3, [pc, #48]	; (8003f0c <HAL_GPIO_Init+0x2cc>)
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	40da      	lsrs	r2, r3
 8003eec:	1e13      	subs	r3, r2, #0
 8003eee:	d000      	beq.n	8003ef2 <HAL_GPIO_Init+0x2b2>
 8003ef0:	e6ae      	b.n	8003c50 <HAL_GPIO_Init+0x10>
  } 
}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b006      	add	sp, #24
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	40021000 	.word	0x40021000
 8003f00:	40010000 	.word	0x40010000
 8003f04:	48000400 	.word	0x48000400
 8003f08:	48000800 	.word	0x48000800
 8003f0c:	40010400 	.word	0x40010400

08003f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	0008      	movs	r0, r1
 8003f1a:	0011      	movs	r1, r2
 8003f1c:	1cbb      	adds	r3, r7, #2
 8003f1e:	1c02      	adds	r2, r0, #0
 8003f20:	801a      	strh	r2, [r3, #0]
 8003f22:	1c7b      	adds	r3, r7, #1
 8003f24:	1c0a      	adds	r2, r1, #0
 8003f26:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f28:	1c7b      	adds	r3, r7, #1
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d004      	beq.n	8003f3a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f30:	1cbb      	adds	r3, r7, #2
 8003f32:	881a      	ldrh	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f38:	e003      	b.n	8003f42 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f3a:	1cbb      	adds	r3, r7, #2
 8003f3c:	881a      	ldrh	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	46bd      	mov	sp, r7
 8003f46:	b002      	add	sp, #8
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d102      	bne.n	8003f60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	f000 fb76 	bl	800464c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2201      	movs	r2, #1
 8003f66:	4013      	ands	r3, r2
 8003f68:	d100      	bne.n	8003f6c <HAL_RCC_OscConfig+0x20>
 8003f6a:	e08e      	b.n	800408a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003f6c:	4bc5      	ldr	r3, [pc, #788]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	220c      	movs	r2, #12
 8003f72:	4013      	ands	r3, r2
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d00e      	beq.n	8003f96 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f78:	4bc2      	ldr	r3, [pc, #776]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	220c      	movs	r2, #12
 8003f7e:	4013      	ands	r3, r2
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d117      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x68>
 8003f84:	4bbf      	ldr	r3, [pc, #764]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	23c0      	movs	r3, #192	; 0xc0
 8003f8a:	025b      	lsls	r3, r3, #9
 8003f8c:	401a      	ands	r2, r3
 8003f8e:	2380      	movs	r3, #128	; 0x80
 8003f90:	025b      	lsls	r3, r3, #9
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d10e      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f96:	4bbb      	ldr	r3, [pc, #748]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	2380      	movs	r3, #128	; 0x80
 8003f9c:	029b      	lsls	r3, r3, #10
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	d100      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x58>
 8003fa2:	e071      	b.n	8004088 <HAL_RCC_OscConfig+0x13c>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d000      	beq.n	8003fae <HAL_RCC_OscConfig+0x62>
 8003fac:	e06c      	b.n	8004088 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f000 fb4c 	bl	800464c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d107      	bne.n	8003fcc <HAL_RCC_OscConfig+0x80>
 8003fbc:	4bb1      	ldr	r3, [pc, #708]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	4bb0      	ldr	r3, [pc, #704]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 8003fc2:	2180      	movs	r1, #128	; 0x80
 8003fc4:	0249      	lsls	r1, r1, #9
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	e02f      	b.n	800402c <HAL_RCC_OscConfig+0xe0>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10c      	bne.n	8003fee <HAL_RCC_OscConfig+0xa2>
 8003fd4:	4bab      	ldr	r3, [pc, #684]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	4baa      	ldr	r3, [pc, #680]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 8003fda:	49ab      	ldr	r1, [pc, #684]	; (8004288 <HAL_RCC_OscConfig+0x33c>)
 8003fdc:	400a      	ands	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	4ba8      	ldr	r3, [pc, #672]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	4ba7      	ldr	r3, [pc, #668]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 8003fe6:	49a9      	ldr	r1, [pc, #676]	; (800428c <HAL_RCC_OscConfig+0x340>)
 8003fe8:	400a      	ands	r2, r1
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	e01e      	b.n	800402c <HAL_RCC_OscConfig+0xe0>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b05      	cmp	r3, #5
 8003ff4:	d10e      	bne.n	8004014 <HAL_RCC_OscConfig+0xc8>
 8003ff6:	4ba3      	ldr	r3, [pc, #652]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	4ba2      	ldr	r3, [pc, #648]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 8003ffc:	2180      	movs	r1, #128	; 0x80
 8003ffe:	02c9      	lsls	r1, r1, #11
 8004000:	430a      	orrs	r2, r1
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	4b9f      	ldr	r3, [pc, #636]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	4b9e      	ldr	r3, [pc, #632]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 800400a:	2180      	movs	r1, #128	; 0x80
 800400c:	0249      	lsls	r1, r1, #9
 800400e:	430a      	orrs	r2, r1
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	e00b      	b.n	800402c <HAL_RCC_OscConfig+0xe0>
 8004014:	4b9b      	ldr	r3, [pc, #620]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	4b9a      	ldr	r3, [pc, #616]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 800401a:	499b      	ldr	r1, [pc, #620]	; (8004288 <HAL_RCC_OscConfig+0x33c>)
 800401c:	400a      	ands	r2, r1
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	4b98      	ldr	r3, [pc, #608]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	4b97      	ldr	r3, [pc, #604]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 8004026:	4999      	ldr	r1, [pc, #612]	; (800428c <HAL_RCC_OscConfig+0x340>)
 8004028:	400a      	ands	r2, r1
 800402a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d014      	beq.n	800405e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004034:	f7ff f8fa 	bl	800322c <HAL_GetTick>
 8004038:	0003      	movs	r3, r0
 800403a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800403e:	f7ff f8f5 	bl	800322c <HAL_GetTick>
 8004042:	0002      	movs	r2, r0
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b64      	cmp	r3, #100	; 0x64
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e2fd      	b.n	800464c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004050:	4b8c      	ldr	r3, [pc, #560]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	2380      	movs	r3, #128	; 0x80
 8004056:	029b      	lsls	r3, r3, #10
 8004058:	4013      	ands	r3, r2
 800405a:	d0f0      	beq.n	800403e <HAL_RCC_OscConfig+0xf2>
 800405c:	e015      	b.n	800408a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405e:	f7ff f8e5 	bl	800322c <HAL_GetTick>
 8004062:	0003      	movs	r3, r0
 8004064:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004068:	f7ff f8e0 	bl	800322c <HAL_GetTick>
 800406c:	0002      	movs	r2, r0
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b64      	cmp	r3, #100	; 0x64
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e2e8      	b.n	800464c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800407a:	4b82      	ldr	r3, [pc, #520]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	2380      	movs	r3, #128	; 0x80
 8004080:	029b      	lsls	r3, r3, #10
 8004082:	4013      	ands	r3, r2
 8004084:	d1f0      	bne.n	8004068 <HAL_RCC_OscConfig+0x11c>
 8004086:	e000      	b.n	800408a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004088:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2202      	movs	r2, #2
 8004090:	4013      	ands	r3, r2
 8004092:	d100      	bne.n	8004096 <HAL_RCC_OscConfig+0x14a>
 8004094:	e06c      	b.n	8004170 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004096:	4b7b      	ldr	r3, [pc, #492]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	220c      	movs	r2, #12
 800409c:	4013      	ands	r3, r2
 800409e:	d00e      	beq.n	80040be <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80040a0:	4b78      	ldr	r3, [pc, #480]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	220c      	movs	r2, #12
 80040a6:	4013      	ands	r3, r2
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d11f      	bne.n	80040ec <HAL_RCC_OscConfig+0x1a0>
 80040ac:	4b75      	ldr	r3, [pc, #468]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	23c0      	movs	r3, #192	; 0xc0
 80040b2:	025b      	lsls	r3, r3, #9
 80040b4:	401a      	ands	r2, r3
 80040b6:	2380      	movs	r3, #128	; 0x80
 80040b8:	021b      	lsls	r3, r3, #8
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d116      	bne.n	80040ec <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040be:	4b71      	ldr	r3, [pc, #452]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2202      	movs	r2, #2
 80040c4:	4013      	ands	r3, r2
 80040c6:	d005      	beq.n	80040d4 <HAL_RCC_OscConfig+0x188>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d001      	beq.n	80040d4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e2bb      	b.n	800464c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d4:	4b6b      	ldr	r3, [pc, #428]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	22f8      	movs	r2, #248	; 0xf8
 80040da:	4393      	bics	r3, r2
 80040dc:	0019      	movs	r1, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	00da      	lsls	r2, r3, #3
 80040e4:	4b67      	ldr	r3, [pc, #412]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 80040e6:	430a      	orrs	r2, r1
 80040e8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ea:	e041      	b.n	8004170 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d024      	beq.n	800413e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040f4:	4b63      	ldr	r3, [pc, #396]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	4b62      	ldr	r3, [pc, #392]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 80040fa:	2101      	movs	r1, #1
 80040fc:	430a      	orrs	r2, r1
 80040fe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004100:	f7ff f894 	bl	800322c <HAL_GetTick>
 8004104:	0003      	movs	r3, r0
 8004106:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800410a:	f7ff f88f 	bl	800322c <HAL_GetTick>
 800410e:	0002      	movs	r2, r0
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e297      	b.n	800464c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411c:	4b59      	ldr	r3, [pc, #356]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2202      	movs	r2, #2
 8004122:	4013      	ands	r3, r2
 8004124:	d0f1      	beq.n	800410a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004126:	4b57      	ldr	r3, [pc, #348]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	22f8      	movs	r2, #248	; 0xf8
 800412c:	4393      	bics	r3, r2
 800412e:	0019      	movs	r1, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	00da      	lsls	r2, r3, #3
 8004136:	4b53      	ldr	r3, [pc, #332]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 8004138:	430a      	orrs	r2, r1
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	e018      	b.n	8004170 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800413e:	4b51      	ldr	r3, [pc, #324]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	4b50      	ldr	r3, [pc, #320]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 8004144:	2101      	movs	r1, #1
 8004146:	438a      	bics	r2, r1
 8004148:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414a:	f7ff f86f 	bl	800322c <HAL_GetTick>
 800414e:	0003      	movs	r3, r0
 8004150:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004154:	f7ff f86a 	bl	800322c <HAL_GetTick>
 8004158:	0002      	movs	r2, r0
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e272      	b.n	800464c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004166:	4b47      	ldr	r3, [pc, #284]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2202      	movs	r2, #2
 800416c:	4013      	ands	r3, r2
 800416e:	d1f1      	bne.n	8004154 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2208      	movs	r2, #8
 8004176:	4013      	ands	r3, r2
 8004178:	d036      	beq.n	80041e8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d019      	beq.n	80041b6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004182:	4b40      	ldr	r3, [pc, #256]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 8004184:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004186:	4b3f      	ldr	r3, [pc, #252]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 8004188:	2101      	movs	r1, #1
 800418a:	430a      	orrs	r2, r1
 800418c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800418e:	f7ff f84d 	bl	800322c <HAL_GetTick>
 8004192:	0003      	movs	r3, r0
 8004194:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004198:	f7ff f848 	bl	800322c <HAL_GetTick>
 800419c:	0002      	movs	r2, r0
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e250      	b.n	800464c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041aa:	4b36      	ldr	r3, [pc, #216]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	2202      	movs	r2, #2
 80041b0:	4013      	ands	r3, r2
 80041b2:	d0f1      	beq.n	8004198 <HAL_RCC_OscConfig+0x24c>
 80041b4:	e018      	b.n	80041e8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b6:	4b33      	ldr	r3, [pc, #204]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 80041b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041ba:	4b32      	ldr	r3, [pc, #200]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 80041bc:	2101      	movs	r1, #1
 80041be:	438a      	bics	r2, r1
 80041c0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041c2:	f7ff f833 	bl	800322c <HAL_GetTick>
 80041c6:	0003      	movs	r3, r0
 80041c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041cc:	f7ff f82e 	bl	800322c <HAL_GetTick>
 80041d0:	0002      	movs	r2, r0
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e236      	b.n	800464c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041de:	4b29      	ldr	r3, [pc, #164]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	2202      	movs	r2, #2
 80041e4:	4013      	ands	r3, r2
 80041e6:	d1f1      	bne.n	80041cc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2204      	movs	r2, #4
 80041ee:	4013      	ands	r3, r2
 80041f0:	d100      	bne.n	80041f4 <HAL_RCC_OscConfig+0x2a8>
 80041f2:	e0b5      	b.n	8004360 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f4:	231f      	movs	r3, #31
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	2200      	movs	r2, #0
 80041fa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041fc:	4b21      	ldr	r3, [pc, #132]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 80041fe:	69da      	ldr	r2, [r3, #28]
 8004200:	2380      	movs	r3, #128	; 0x80
 8004202:	055b      	lsls	r3, r3, #21
 8004204:	4013      	ands	r3, r2
 8004206:	d111      	bne.n	800422c <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004208:	4b1e      	ldr	r3, [pc, #120]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 800420a:	69da      	ldr	r2, [r3, #28]
 800420c:	4b1d      	ldr	r3, [pc, #116]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 800420e:	2180      	movs	r1, #128	; 0x80
 8004210:	0549      	lsls	r1, r1, #21
 8004212:	430a      	orrs	r2, r1
 8004214:	61da      	str	r2, [r3, #28]
 8004216:	4b1b      	ldr	r3, [pc, #108]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 8004218:	69da      	ldr	r2, [r3, #28]
 800421a:	2380      	movs	r3, #128	; 0x80
 800421c:	055b      	lsls	r3, r3, #21
 800421e:	4013      	ands	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004224:	231f      	movs	r3, #31
 8004226:	18fb      	adds	r3, r7, r3
 8004228:	2201      	movs	r2, #1
 800422a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422c:	4b18      	ldr	r3, [pc, #96]	; (8004290 <HAL_RCC_OscConfig+0x344>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	2380      	movs	r3, #128	; 0x80
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	4013      	ands	r3, r2
 8004236:	d11a      	bne.n	800426e <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004238:	4b15      	ldr	r3, [pc, #84]	; (8004290 <HAL_RCC_OscConfig+0x344>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	4b14      	ldr	r3, [pc, #80]	; (8004290 <HAL_RCC_OscConfig+0x344>)
 800423e:	2180      	movs	r1, #128	; 0x80
 8004240:	0049      	lsls	r1, r1, #1
 8004242:	430a      	orrs	r2, r1
 8004244:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004246:	f7fe fff1 	bl	800322c <HAL_GetTick>
 800424a:	0003      	movs	r3, r0
 800424c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004250:	f7fe ffec 	bl	800322c <HAL_GetTick>
 8004254:	0002      	movs	r2, r0
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b64      	cmp	r3, #100	; 0x64
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e1f4      	b.n	800464c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004262:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <HAL_RCC_OscConfig+0x344>)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	2380      	movs	r3, #128	; 0x80
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	4013      	ands	r3, r2
 800426c:	d0f0      	beq.n	8004250 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d10e      	bne.n	8004294 <HAL_RCC_OscConfig+0x348>
 8004276:	4b03      	ldr	r3, [pc, #12]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 8004278:	6a1a      	ldr	r2, [r3, #32]
 800427a:	4b02      	ldr	r3, [pc, #8]	; (8004284 <HAL_RCC_OscConfig+0x338>)
 800427c:	2101      	movs	r1, #1
 800427e:	430a      	orrs	r2, r1
 8004280:	621a      	str	r2, [r3, #32]
 8004282:	e035      	b.n	80042f0 <HAL_RCC_OscConfig+0x3a4>
 8004284:	40021000 	.word	0x40021000
 8004288:	fffeffff 	.word	0xfffeffff
 800428c:	fffbffff 	.word	0xfffbffff
 8004290:	40007000 	.word	0x40007000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10c      	bne.n	80042b6 <HAL_RCC_OscConfig+0x36a>
 800429c:	4bca      	ldr	r3, [pc, #808]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 800429e:	6a1a      	ldr	r2, [r3, #32]
 80042a0:	4bc9      	ldr	r3, [pc, #804]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 80042a2:	2101      	movs	r1, #1
 80042a4:	438a      	bics	r2, r1
 80042a6:	621a      	str	r2, [r3, #32]
 80042a8:	4bc7      	ldr	r3, [pc, #796]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 80042aa:	6a1a      	ldr	r2, [r3, #32]
 80042ac:	4bc6      	ldr	r3, [pc, #792]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 80042ae:	2104      	movs	r1, #4
 80042b0:	438a      	bics	r2, r1
 80042b2:	621a      	str	r2, [r3, #32]
 80042b4:	e01c      	b.n	80042f0 <HAL_RCC_OscConfig+0x3a4>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	2b05      	cmp	r3, #5
 80042bc:	d10c      	bne.n	80042d8 <HAL_RCC_OscConfig+0x38c>
 80042be:	4bc2      	ldr	r3, [pc, #776]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 80042c0:	6a1a      	ldr	r2, [r3, #32]
 80042c2:	4bc1      	ldr	r3, [pc, #772]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 80042c4:	2104      	movs	r1, #4
 80042c6:	430a      	orrs	r2, r1
 80042c8:	621a      	str	r2, [r3, #32]
 80042ca:	4bbf      	ldr	r3, [pc, #764]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 80042cc:	6a1a      	ldr	r2, [r3, #32]
 80042ce:	4bbe      	ldr	r3, [pc, #760]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 80042d0:	2101      	movs	r1, #1
 80042d2:	430a      	orrs	r2, r1
 80042d4:	621a      	str	r2, [r3, #32]
 80042d6:	e00b      	b.n	80042f0 <HAL_RCC_OscConfig+0x3a4>
 80042d8:	4bbb      	ldr	r3, [pc, #748]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 80042da:	6a1a      	ldr	r2, [r3, #32]
 80042dc:	4bba      	ldr	r3, [pc, #744]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 80042de:	2101      	movs	r1, #1
 80042e0:	438a      	bics	r2, r1
 80042e2:	621a      	str	r2, [r3, #32]
 80042e4:	4bb8      	ldr	r3, [pc, #736]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 80042e6:	6a1a      	ldr	r2, [r3, #32]
 80042e8:	4bb7      	ldr	r3, [pc, #732]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 80042ea:	2104      	movs	r1, #4
 80042ec:	438a      	bics	r2, r1
 80042ee:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d014      	beq.n	8004322 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f8:	f7fe ff98 	bl	800322c <HAL_GetTick>
 80042fc:	0003      	movs	r3, r0
 80042fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004300:	e009      	b.n	8004316 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004302:	f7fe ff93 	bl	800322c <HAL_GetTick>
 8004306:	0002      	movs	r2, r0
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	4aaf      	ldr	r2, [pc, #700]	; (80045cc <HAL_RCC_OscConfig+0x680>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e19a      	b.n	800464c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004316:	4bac      	ldr	r3, [pc, #688]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	2202      	movs	r2, #2
 800431c:	4013      	ands	r3, r2
 800431e:	d0f0      	beq.n	8004302 <HAL_RCC_OscConfig+0x3b6>
 8004320:	e013      	b.n	800434a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004322:	f7fe ff83 	bl	800322c <HAL_GetTick>
 8004326:	0003      	movs	r3, r0
 8004328:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800432a:	e009      	b.n	8004340 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800432c:	f7fe ff7e 	bl	800322c <HAL_GetTick>
 8004330:	0002      	movs	r2, r0
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	4aa5      	ldr	r2, [pc, #660]	; (80045cc <HAL_RCC_OscConfig+0x680>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e185      	b.n	800464c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004340:	4ba1      	ldr	r3, [pc, #644]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	2202      	movs	r2, #2
 8004346:	4013      	ands	r3, r2
 8004348:	d1f0      	bne.n	800432c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800434a:	231f      	movs	r3, #31
 800434c:	18fb      	adds	r3, r7, r3
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d105      	bne.n	8004360 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004354:	4b9c      	ldr	r3, [pc, #624]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 8004356:	69da      	ldr	r2, [r3, #28]
 8004358:	4b9b      	ldr	r3, [pc, #620]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 800435a:	499d      	ldr	r1, [pc, #628]	; (80045d0 <HAL_RCC_OscConfig+0x684>)
 800435c:	400a      	ands	r2, r1
 800435e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2210      	movs	r2, #16
 8004366:	4013      	ands	r3, r2
 8004368:	d063      	beq.n	8004432 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d12a      	bne.n	80043c8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004372:	4b95      	ldr	r3, [pc, #596]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 8004374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004376:	4b94      	ldr	r3, [pc, #592]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 8004378:	2104      	movs	r1, #4
 800437a:	430a      	orrs	r2, r1
 800437c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800437e:	4b92      	ldr	r3, [pc, #584]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 8004380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004382:	4b91      	ldr	r3, [pc, #580]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 8004384:	2101      	movs	r1, #1
 8004386:	430a      	orrs	r2, r1
 8004388:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800438a:	f7fe ff4f 	bl	800322c <HAL_GetTick>
 800438e:	0003      	movs	r3, r0
 8004390:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004394:	f7fe ff4a 	bl	800322c <HAL_GetTick>
 8004398:	0002      	movs	r2, r0
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e152      	b.n	800464c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80043a6:	4b88      	ldr	r3, [pc, #544]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 80043a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043aa:	2202      	movs	r2, #2
 80043ac:	4013      	ands	r3, r2
 80043ae:	d0f1      	beq.n	8004394 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80043b0:	4b85      	ldr	r3, [pc, #532]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 80043b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b4:	22f8      	movs	r2, #248	; 0xf8
 80043b6:	4393      	bics	r3, r2
 80043b8:	0019      	movs	r1, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	00da      	lsls	r2, r3, #3
 80043c0:	4b81      	ldr	r3, [pc, #516]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 80043c2:	430a      	orrs	r2, r1
 80043c4:	635a      	str	r2, [r3, #52]	; 0x34
 80043c6:	e034      	b.n	8004432 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	3305      	adds	r3, #5
 80043ce:	d111      	bne.n	80043f4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80043d0:	4b7d      	ldr	r3, [pc, #500]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 80043d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043d4:	4b7c      	ldr	r3, [pc, #496]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 80043d6:	2104      	movs	r1, #4
 80043d8:	438a      	bics	r2, r1
 80043da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80043dc:	4b7a      	ldr	r3, [pc, #488]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 80043de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e0:	22f8      	movs	r2, #248	; 0xf8
 80043e2:	4393      	bics	r3, r2
 80043e4:	0019      	movs	r1, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	00da      	lsls	r2, r3, #3
 80043ec:	4b76      	ldr	r3, [pc, #472]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 80043ee:	430a      	orrs	r2, r1
 80043f0:	635a      	str	r2, [r3, #52]	; 0x34
 80043f2:	e01e      	b.n	8004432 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80043f4:	4b74      	ldr	r3, [pc, #464]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 80043f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043f8:	4b73      	ldr	r3, [pc, #460]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 80043fa:	2104      	movs	r1, #4
 80043fc:	430a      	orrs	r2, r1
 80043fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004400:	4b71      	ldr	r3, [pc, #452]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 8004402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004404:	4b70      	ldr	r3, [pc, #448]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 8004406:	2101      	movs	r1, #1
 8004408:	438a      	bics	r2, r1
 800440a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800440c:	f7fe ff0e 	bl	800322c <HAL_GetTick>
 8004410:	0003      	movs	r3, r0
 8004412:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004416:	f7fe ff09 	bl	800322c <HAL_GetTick>
 800441a:	0002      	movs	r2, r0
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e111      	b.n	800464c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004428:	4b67      	ldr	r3, [pc, #412]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 800442a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442c:	2202      	movs	r2, #2
 800442e:	4013      	ands	r3, r2
 8004430:	d1f1      	bne.n	8004416 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2220      	movs	r2, #32
 8004438:	4013      	ands	r3, r2
 800443a:	d05c      	beq.n	80044f6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800443c:	4b62      	ldr	r3, [pc, #392]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	220c      	movs	r2, #12
 8004442:	4013      	ands	r3, r2
 8004444:	2b0c      	cmp	r3, #12
 8004446:	d00e      	beq.n	8004466 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004448:	4b5f      	ldr	r3, [pc, #380]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	220c      	movs	r2, #12
 800444e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004450:	2b08      	cmp	r3, #8
 8004452:	d114      	bne.n	800447e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004454:	4b5c      	ldr	r3, [pc, #368]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	23c0      	movs	r3, #192	; 0xc0
 800445a:	025b      	lsls	r3, r3, #9
 800445c:	401a      	ands	r2, r3
 800445e:	23c0      	movs	r3, #192	; 0xc0
 8004460:	025b      	lsls	r3, r3, #9
 8004462:	429a      	cmp	r2, r3
 8004464:	d10b      	bne.n	800447e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004466:	4b58      	ldr	r3, [pc, #352]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 8004468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800446a:	2380      	movs	r3, #128	; 0x80
 800446c:	025b      	lsls	r3, r3, #9
 800446e:	4013      	ands	r3, r2
 8004470:	d040      	beq.n	80044f4 <HAL_RCC_OscConfig+0x5a8>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d03c      	beq.n	80044f4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e0e6      	b.n	800464c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d01b      	beq.n	80044be <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004486:	4b50      	ldr	r3, [pc, #320]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 8004488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800448a:	4b4f      	ldr	r3, [pc, #316]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 800448c:	2180      	movs	r1, #128	; 0x80
 800448e:	0249      	lsls	r1, r1, #9
 8004490:	430a      	orrs	r2, r1
 8004492:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004494:	f7fe feca 	bl	800322c <HAL_GetTick>
 8004498:	0003      	movs	r3, r0
 800449a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800449e:	f7fe fec5 	bl	800322c <HAL_GetTick>
 80044a2:	0002      	movs	r2, r0
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e0cd      	b.n	800464c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80044b0:	4b45      	ldr	r3, [pc, #276]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 80044b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044b4:	2380      	movs	r3, #128	; 0x80
 80044b6:	025b      	lsls	r3, r3, #9
 80044b8:	4013      	ands	r3, r2
 80044ba:	d0f0      	beq.n	800449e <HAL_RCC_OscConfig+0x552>
 80044bc:	e01b      	b.n	80044f6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80044be:	4b42      	ldr	r3, [pc, #264]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 80044c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044c2:	4b41      	ldr	r3, [pc, #260]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 80044c4:	4943      	ldr	r1, [pc, #268]	; (80045d4 <HAL_RCC_OscConfig+0x688>)
 80044c6:	400a      	ands	r2, r1
 80044c8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ca:	f7fe feaf 	bl	800322c <HAL_GetTick>
 80044ce:	0003      	movs	r3, r0
 80044d0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044d4:	f7fe feaa 	bl	800322c <HAL_GetTick>
 80044d8:	0002      	movs	r2, r0
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e0b2      	b.n	800464c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80044e6:	4b38      	ldr	r3, [pc, #224]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 80044e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044ea:	2380      	movs	r3, #128	; 0x80
 80044ec:	025b      	lsls	r3, r3, #9
 80044ee:	4013      	ands	r3, r2
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0x588>
 80044f2:	e000      	b.n	80044f6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80044f4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d100      	bne.n	8004500 <HAL_RCC_OscConfig+0x5b4>
 80044fe:	e0a4      	b.n	800464a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004500:	4b31      	ldr	r3, [pc, #196]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	220c      	movs	r2, #12
 8004506:	4013      	ands	r3, r2
 8004508:	2b08      	cmp	r3, #8
 800450a:	d100      	bne.n	800450e <HAL_RCC_OscConfig+0x5c2>
 800450c:	e078      	b.n	8004600 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	2b02      	cmp	r3, #2
 8004514:	d14c      	bne.n	80045b0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004516:	4b2c      	ldr	r3, [pc, #176]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4b2b      	ldr	r3, [pc, #172]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 800451c:	492e      	ldr	r1, [pc, #184]	; (80045d8 <HAL_RCC_OscConfig+0x68c>)
 800451e:	400a      	ands	r2, r1
 8004520:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004522:	f7fe fe83 	bl	800322c <HAL_GetTick>
 8004526:	0003      	movs	r3, r0
 8004528:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800452c:	f7fe fe7e 	bl	800322c <HAL_GetTick>
 8004530:	0002      	movs	r2, r0
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e086      	b.n	800464c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800453e:	4b22      	ldr	r3, [pc, #136]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	2380      	movs	r3, #128	; 0x80
 8004544:	049b      	lsls	r3, r3, #18
 8004546:	4013      	ands	r3, r2
 8004548:	d1f0      	bne.n	800452c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800454a:	4b1f      	ldr	r3, [pc, #124]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 800454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454e:	220f      	movs	r2, #15
 8004550:	4393      	bics	r3, r2
 8004552:	0019      	movs	r1, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004558:	4b1b      	ldr	r3, [pc, #108]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 800455a:	430a      	orrs	r2, r1
 800455c:	62da      	str	r2, [r3, #44]	; 0x2c
 800455e:	4b1a      	ldr	r3, [pc, #104]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	4a1e      	ldr	r2, [pc, #120]	; (80045dc <HAL_RCC_OscConfig+0x690>)
 8004564:	4013      	ands	r3, r2
 8004566:	0019      	movs	r1, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004570:	431a      	orrs	r2, r3
 8004572:	4b15      	ldr	r3, [pc, #84]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 8004574:	430a      	orrs	r2, r1
 8004576:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004578:	4b13      	ldr	r3, [pc, #76]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	4b12      	ldr	r3, [pc, #72]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 800457e:	2180      	movs	r1, #128	; 0x80
 8004580:	0449      	lsls	r1, r1, #17
 8004582:	430a      	orrs	r2, r1
 8004584:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004586:	f7fe fe51 	bl	800322c <HAL_GetTick>
 800458a:	0003      	movs	r3, r0
 800458c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004590:	f7fe fe4c 	bl	800322c <HAL_GetTick>
 8004594:	0002      	movs	r2, r0
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e054      	b.n	800464c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045a2:	4b09      	ldr	r3, [pc, #36]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	2380      	movs	r3, #128	; 0x80
 80045a8:	049b      	lsls	r3, r3, #18
 80045aa:	4013      	ands	r3, r2
 80045ac:	d0f0      	beq.n	8004590 <HAL_RCC_OscConfig+0x644>
 80045ae:	e04c      	b.n	800464a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045b0:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	4b04      	ldr	r3, [pc, #16]	; (80045c8 <HAL_RCC_OscConfig+0x67c>)
 80045b6:	4908      	ldr	r1, [pc, #32]	; (80045d8 <HAL_RCC_OscConfig+0x68c>)
 80045b8:	400a      	ands	r2, r1
 80045ba:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045bc:	f7fe fe36 	bl	800322c <HAL_GetTick>
 80045c0:	0003      	movs	r3, r0
 80045c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045c4:	e015      	b.n	80045f2 <HAL_RCC_OscConfig+0x6a6>
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	40021000 	.word	0x40021000
 80045cc:	00001388 	.word	0x00001388
 80045d0:	efffffff 	.word	0xefffffff
 80045d4:	fffeffff 	.word	0xfffeffff
 80045d8:	feffffff 	.word	0xfeffffff
 80045dc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045e0:	f7fe fe24 	bl	800322c <HAL_GetTick>
 80045e4:	0002      	movs	r2, r0
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e02c      	b.n	800464c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045f2:	4b18      	ldr	r3, [pc, #96]	; (8004654 <HAL_RCC_OscConfig+0x708>)
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	2380      	movs	r3, #128	; 0x80
 80045f8:	049b      	lsls	r3, r3, #18
 80045fa:	4013      	ands	r3, r2
 80045fc:	d1f0      	bne.n	80045e0 <HAL_RCC_OscConfig+0x694>
 80045fe:	e024      	b.n	800464a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e01f      	b.n	800464c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800460c:	4b11      	ldr	r3, [pc, #68]	; (8004654 <HAL_RCC_OscConfig+0x708>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004612:	4b10      	ldr	r3, [pc, #64]	; (8004654 <HAL_RCC_OscConfig+0x708>)
 8004614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004616:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	23c0      	movs	r3, #192	; 0xc0
 800461c:	025b      	lsls	r3, r3, #9
 800461e:	401a      	ands	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004624:	429a      	cmp	r2, r3
 8004626:	d10e      	bne.n	8004646 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	220f      	movs	r2, #15
 800462c:	401a      	ands	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004632:	429a      	cmp	r2, r3
 8004634:	d107      	bne.n	8004646 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	23f0      	movs	r3, #240	; 0xf0
 800463a:	039b      	lsls	r3, r3, #14
 800463c:	401a      	ands	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004642:	429a      	cmp	r2, r3
 8004644:	d001      	beq.n	800464a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	0018      	movs	r0, r3
 800464e:	46bd      	mov	sp, r7
 8004650:	b008      	add	sp, #32
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40021000 	.word	0x40021000

08004658 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e0bf      	b.n	80047ec <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800466c:	4b61      	ldr	r3, [pc, #388]	; (80047f4 <HAL_RCC_ClockConfig+0x19c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2201      	movs	r2, #1
 8004672:	4013      	ands	r3, r2
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	429a      	cmp	r2, r3
 8004678:	d911      	bls.n	800469e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467a:	4b5e      	ldr	r3, [pc, #376]	; (80047f4 <HAL_RCC_ClockConfig+0x19c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2201      	movs	r2, #1
 8004680:	4393      	bics	r3, r2
 8004682:	0019      	movs	r1, r3
 8004684:	4b5b      	ldr	r3, [pc, #364]	; (80047f4 <HAL_RCC_ClockConfig+0x19c>)
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800468c:	4b59      	ldr	r3, [pc, #356]	; (80047f4 <HAL_RCC_ClockConfig+0x19c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2201      	movs	r2, #1
 8004692:	4013      	ands	r3, r2
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d001      	beq.n	800469e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e0a6      	b.n	80047ec <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2202      	movs	r2, #2
 80046a4:	4013      	ands	r3, r2
 80046a6:	d015      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2204      	movs	r2, #4
 80046ae:	4013      	ands	r3, r2
 80046b0:	d006      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80046b2:	4b51      	ldr	r3, [pc, #324]	; (80047f8 <HAL_RCC_ClockConfig+0x1a0>)
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	4b50      	ldr	r3, [pc, #320]	; (80047f8 <HAL_RCC_ClockConfig+0x1a0>)
 80046b8:	21e0      	movs	r1, #224	; 0xe0
 80046ba:	00c9      	lsls	r1, r1, #3
 80046bc:	430a      	orrs	r2, r1
 80046be:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c0:	4b4d      	ldr	r3, [pc, #308]	; (80047f8 <HAL_RCC_ClockConfig+0x1a0>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	22f0      	movs	r2, #240	; 0xf0
 80046c6:	4393      	bics	r3, r2
 80046c8:	0019      	movs	r1, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689a      	ldr	r2, [r3, #8]
 80046ce:	4b4a      	ldr	r3, [pc, #296]	; (80047f8 <HAL_RCC_ClockConfig+0x1a0>)
 80046d0:	430a      	orrs	r2, r1
 80046d2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2201      	movs	r2, #1
 80046da:	4013      	ands	r3, r2
 80046dc:	d04c      	beq.n	8004778 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d107      	bne.n	80046f6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e6:	4b44      	ldr	r3, [pc, #272]	; (80047f8 <HAL_RCC_ClockConfig+0x1a0>)
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	2380      	movs	r3, #128	; 0x80
 80046ec:	029b      	lsls	r3, r3, #10
 80046ee:	4013      	ands	r3, r2
 80046f0:	d120      	bne.n	8004734 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e07a      	b.n	80047ec <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d107      	bne.n	800470e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046fe:	4b3e      	ldr	r3, [pc, #248]	; (80047f8 <HAL_RCC_ClockConfig+0x1a0>)
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	2380      	movs	r3, #128	; 0x80
 8004704:	049b      	lsls	r3, r3, #18
 8004706:	4013      	ands	r3, r2
 8004708:	d114      	bne.n	8004734 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e06e      	b.n	80047ec <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2b03      	cmp	r3, #3
 8004714:	d107      	bne.n	8004726 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004716:	4b38      	ldr	r3, [pc, #224]	; (80047f8 <HAL_RCC_ClockConfig+0x1a0>)
 8004718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800471a:	2380      	movs	r3, #128	; 0x80
 800471c:	025b      	lsls	r3, r3, #9
 800471e:	4013      	ands	r3, r2
 8004720:	d108      	bne.n	8004734 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e062      	b.n	80047ec <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004726:	4b34      	ldr	r3, [pc, #208]	; (80047f8 <HAL_RCC_ClockConfig+0x1a0>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2202      	movs	r2, #2
 800472c:	4013      	ands	r3, r2
 800472e:	d101      	bne.n	8004734 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e05b      	b.n	80047ec <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004734:	4b30      	ldr	r3, [pc, #192]	; (80047f8 <HAL_RCC_ClockConfig+0x1a0>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2203      	movs	r2, #3
 800473a:	4393      	bics	r3, r2
 800473c:	0019      	movs	r1, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	4b2d      	ldr	r3, [pc, #180]	; (80047f8 <HAL_RCC_ClockConfig+0x1a0>)
 8004744:	430a      	orrs	r2, r1
 8004746:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004748:	f7fe fd70 	bl	800322c <HAL_GetTick>
 800474c:	0003      	movs	r3, r0
 800474e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004750:	e009      	b.n	8004766 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004752:	f7fe fd6b 	bl	800322c <HAL_GetTick>
 8004756:	0002      	movs	r2, r0
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	4a27      	ldr	r2, [pc, #156]	; (80047fc <HAL_RCC_ClockConfig+0x1a4>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e042      	b.n	80047ec <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004766:	4b24      	ldr	r3, [pc, #144]	; (80047f8 <HAL_RCC_ClockConfig+0x1a0>)
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	220c      	movs	r2, #12
 800476c:	401a      	ands	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	429a      	cmp	r2, r3
 8004776:	d1ec      	bne.n	8004752 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004778:	4b1e      	ldr	r3, [pc, #120]	; (80047f4 <HAL_RCC_ClockConfig+0x19c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2201      	movs	r2, #1
 800477e:	4013      	ands	r3, r2
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d211      	bcs.n	80047aa <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004786:	4b1b      	ldr	r3, [pc, #108]	; (80047f4 <HAL_RCC_ClockConfig+0x19c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2201      	movs	r2, #1
 800478c:	4393      	bics	r3, r2
 800478e:	0019      	movs	r1, r3
 8004790:	4b18      	ldr	r3, [pc, #96]	; (80047f4 <HAL_RCC_ClockConfig+0x19c>)
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004798:	4b16      	ldr	r3, [pc, #88]	; (80047f4 <HAL_RCC_ClockConfig+0x19c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2201      	movs	r2, #1
 800479e:	4013      	ands	r3, r2
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d001      	beq.n	80047aa <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e020      	b.n	80047ec <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2204      	movs	r2, #4
 80047b0:	4013      	ands	r3, r2
 80047b2:	d009      	beq.n	80047c8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80047b4:	4b10      	ldr	r3, [pc, #64]	; (80047f8 <HAL_RCC_ClockConfig+0x1a0>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	4a11      	ldr	r2, [pc, #68]	; (8004800 <HAL_RCC_ClockConfig+0x1a8>)
 80047ba:	4013      	ands	r3, r2
 80047bc:	0019      	movs	r1, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	4b0d      	ldr	r3, [pc, #52]	; (80047f8 <HAL_RCC_ClockConfig+0x1a0>)
 80047c4:	430a      	orrs	r2, r1
 80047c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80047c8:	f000 f820 	bl	800480c <HAL_RCC_GetSysClockFreq>
 80047cc:	0001      	movs	r1, r0
 80047ce:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <HAL_RCC_ClockConfig+0x1a0>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	091b      	lsrs	r3, r3, #4
 80047d4:	220f      	movs	r2, #15
 80047d6:	4013      	ands	r3, r2
 80047d8:	4a0a      	ldr	r2, [pc, #40]	; (8004804 <HAL_RCC_ClockConfig+0x1ac>)
 80047da:	5cd3      	ldrb	r3, [r2, r3]
 80047dc:	000a      	movs	r2, r1
 80047de:	40da      	lsrs	r2, r3
 80047e0:	4b09      	ldr	r3, [pc, #36]	; (8004808 <HAL_RCC_ClockConfig+0x1b0>)
 80047e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80047e4:	2000      	movs	r0, #0
 80047e6:	f7fe f9db 	bl	8002ba0 <HAL_InitTick>
  
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	0018      	movs	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	b004      	add	sp, #16
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	40022000 	.word	0x40022000
 80047f8:	40021000 	.word	0x40021000
 80047fc:	00001388 	.word	0x00001388
 8004800:	fffff8ff 	.word	0xfffff8ff
 8004804:	080067a0 	.word	0x080067a0
 8004808:	2000000c 	.word	0x2000000c

0800480c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800480c:	b590      	push	{r4, r7, lr}
 800480e:	b08f      	sub	sp, #60	; 0x3c
 8004810:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004812:	2314      	movs	r3, #20
 8004814:	18fb      	adds	r3, r7, r3
 8004816:	4a37      	ldr	r2, [pc, #220]	; (80048f4 <HAL_RCC_GetSysClockFreq+0xe8>)
 8004818:	ca13      	ldmia	r2!, {r0, r1, r4}
 800481a:	c313      	stmia	r3!, {r0, r1, r4}
 800481c:	6812      	ldr	r2, [r2, #0]
 800481e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004820:	1d3b      	adds	r3, r7, #4
 8004822:	4a35      	ldr	r2, [pc, #212]	; (80048f8 <HAL_RCC_GetSysClockFreq+0xec>)
 8004824:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004826:	c313      	stmia	r3!, {r0, r1, r4}
 8004828:	6812      	ldr	r2, [r2, #0]
 800482a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800482c:	2300      	movs	r3, #0
 800482e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004830:	2300      	movs	r3, #0
 8004832:	62bb      	str	r3, [r7, #40]	; 0x28
 8004834:	2300      	movs	r3, #0
 8004836:	637b      	str	r3, [r7, #52]	; 0x34
 8004838:	2300      	movs	r3, #0
 800483a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004840:	4b2e      	ldr	r3, [pc, #184]	; (80048fc <HAL_RCC_GetSysClockFreq+0xf0>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004848:	220c      	movs	r2, #12
 800484a:	4013      	ands	r3, r2
 800484c:	2b08      	cmp	r3, #8
 800484e:	d006      	beq.n	800485e <HAL_RCC_GetSysClockFreq+0x52>
 8004850:	2b0c      	cmp	r3, #12
 8004852:	d043      	beq.n	80048dc <HAL_RCC_GetSysClockFreq+0xd0>
 8004854:	2b04      	cmp	r3, #4
 8004856:	d144      	bne.n	80048e2 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004858:	4b29      	ldr	r3, [pc, #164]	; (8004900 <HAL_RCC_GetSysClockFreq+0xf4>)
 800485a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800485c:	e044      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800485e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004860:	0c9b      	lsrs	r3, r3, #18
 8004862:	220f      	movs	r2, #15
 8004864:	4013      	ands	r3, r2
 8004866:	2214      	movs	r2, #20
 8004868:	18ba      	adds	r2, r7, r2
 800486a:	5cd3      	ldrb	r3, [r2, r3]
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800486e:	4b23      	ldr	r3, [pc, #140]	; (80048fc <HAL_RCC_GetSysClockFreq+0xf0>)
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	220f      	movs	r2, #15
 8004874:	4013      	ands	r3, r2
 8004876:	1d3a      	adds	r2, r7, #4
 8004878:	5cd3      	ldrb	r3, [r2, r3]
 800487a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800487c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800487e:	23c0      	movs	r3, #192	; 0xc0
 8004880:	025b      	lsls	r3, r3, #9
 8004882:	401a      	ands	r2, r3
 8004884:	2380      	movs	r3, #128	; 0x80
 8004886:	025b      	lsls	r3, r3, #9
 8004888:	429a      	cmp	r2, r3
 800488a:	d109      	bne.n	80048a0 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800488c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800488e:	481c      	ldr	r0, [pc, #112]	; (8004900 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004890:	f7fb fc3a 	bl	8000108 <__udivsi3>
 8004894:	0003      	movs	r3, r0
 8004896:	001a      	movs	r2, r3
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	4353      	muls	r3, r2
 800489c:	637b      	str	r3, [r7, #52]	; 0x34
 800489e:	e01a      	b.n	80048d6 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80048a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048a2:	23c0      	movs	r3, #192	; 0xc0
 80048a4:	025b      	lsls	r3, r3, #9
 80048a6:	401a      	ands	r2, r3
 80048a8:	23c0      	movs	r3, #192	; 0xc0
 80048aa:	025b      	lsls	r3, r3, #9
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d109      	bne.n	80048c4 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80048b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048b2:	4814      	ldr	r0, [pc, #80]	; (8004904 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048b4:	f7fb fc28 	bl	8000108 <__udivsi3>
 80048b8:	0003      	movs	r3, r0
 80048ba:	001a      	movs	r2, r3
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	4353      	muls	r3, r2
 80048c0:	637b      	str	r3, [r7, #52]	; 0x34
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80048c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048c6:	480e      	ldr	r0, [pc, #56]	; (8004900 <HAL_RCC_GetSysClockFreq+0xf4>)
 80048c8:	f7fb fc1e 	bl	8000108 <__udivsi3>
 80048cc:	0003      	movs	r3, r0
 80048ce:	001a      	movs	r2, r3
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	4353      	muls	r3, r2
 80048d4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80048d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80048da:	e005      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80048dc:	4b09      	ldr	r3, [pc, #36]	; (8004904 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80048e0:	e002      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048e2:	4b07      	ldr	r3, [pc, #28]	; (8004900 <HAL_RCC_GetSysClockFreq+0xf4>)
 80048e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80048e6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80048e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80048ea:	0018      	movs	r0, r3
 80048ec:	46bd      	mov	sp, r7
 80048ee:	b00f      	add	sp, #60	; 0x3c
 80048f0:	bd90      	pop	{r4, r7, pc}
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	08006678 	.word	0x08006678
 80048f8:	08006688 	.word	0x08006688
 80048fc:	40021000 	.word	0x40021000
 8004900:	007a1200 	.word	0x007a1200
 8004904:	02dc6c00 	.word	0x02dc6c00

08004908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800490c:	4b02      	ldr	r3, [pc, #8]	; (8004918 <HAL_RCC_GetHCLKFreq+0x10>)
 800490e:	681b      	ldr	r3, [r3, #0]
}
 8004910:	0018      	movs	r0, r3
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	46c0      	nop			; (mov r8, r8)
 8004918:	2000000c 	.word	0x2000000c

0800491c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004920:	f7ff fff2 	bl	8004908 <HAL_RCC_GetHCLKFreq>
 8004924:	0001      	movs	r1, r0
 8004926:	4b06      	ldr	r3, [pc, #24]	; (8004940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	0a1b      	lsrs	r3, r3, #8
 800492c:	2207      	movs	r2, #7
 800492e:	4013      	ands	r3, r2
 8004930:	4a04      	ldr	r2, [pc, #16]	; (8004944 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004932:	5cd3      	ldrb	r3, [r2, r3]
 8004934:	40d9      	lsrs	r1, r3
 8004936:	000b      	movs	r3, r1
}    
 8004938:	0018      	movs	r0, r3
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	46c0      	nop			; (mov r8, r8)
 8004940:	40021000 	.word	0x40021000
 8004944:	080067b0 	.word	0x080067b0

08004948 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2207      	movs	r2, #7
 8004956:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004958:	4b0e      	ldr	r3, [pc, #56]	; (8004994 <HAL_RCC_GetClockConfig+0x4c>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2203      	movs	r2, #3
 800495e:	401a      	ands	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004964:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <HAL_RCC_GetClockConfig+0x4c>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	22f0      	movs	r2, #240	; 0xf0
 800496a:	401a      	ands	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8004970:	4b08      	ldr	r3, [pc, #32]	; (8004994 <HAL_RCC_GetClockConfig+0x4c>)
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	23e0      	movs	r3, #224	; 0xe0
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	401a      	ands	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800497e:	4b06      	ldr	r3, [pc, #24]	; (8004998 <HAL_RCC_GetClockConfig+0x50>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2201      	movs	r2, #1
 8004984:	401a      	ands	r2, r3
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	601a      	str	r2, [r3, #0]
}
 800498a:	46c0      	nop			; (mov r8, r8)
 800498c:	46bd      	mov	sp, r7
 800498e:	b002      	add	sp, #8
 8004990:	bd80      	pop	{r7, pc}
 8004992:	46c0      	nop			; (mov r8, r8)
 8004994:	40021000 	.word	0x40021000
 8004998:	40022000 	.word	0x40022000

0800499c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e01e      	b.n	80049ec <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	223d      	movs	r2, #61	; 0x3d
 80049b2:	5c9b      	ldrb	r3, [r3, r2]
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d107      	bne.n	80049ca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	223c      	movs	r2, #60	; 0x3c
 80049be:	2100      	movs	r1, #0
 80049c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	0018      	movs	r0, r3
 80049c6:	f7fe faa3 	bl	8002f10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	223d      	movs	r2, #61	; 0x3d
 80049ce:	2102      	movs	r1, #2
 80049d0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	3304      	adds	r3, #4
 80049da:	0019      	movs	r1, r3
 80049dc:	0010      	movs	r0, r2
 80049de:	f000 fc1d 	bl	800521c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	223d      	movs	r2, #61	; 0x3d
 80049e6:	2101      	movs	r1, #1
 80049e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	0018      	movs	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	b002      	add	sp, #8
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68da      	ldr	r2, [r3, #12]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2101      	movs	r1, #1
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	2207      	movs	r2, #7
 8004a14:	4013      	ands	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b06      	cmp	r3, #6
 8004a1c:	d007      	beq.n	8004a2e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2101      	movs	r1, #1
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	0018      	movs	r0, r3
 8004a32:	46bd      	mov	sp, r7
 8004a34:	b004      	add	sp, #16
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e01e      	b.n	8004a88 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	223d      	movs	r2, #61	; 0x3d
 8004a4e:	5c9b      	ldrb	r3, [r3, r2]
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d107      	bne.n	8004a66 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	223c      	movs	r2, #60	; 0x3c
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	0018      	movs	r0, r3
 8004a62:	f000 f815 	bl	8004a90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	223d      	movs	r2, #61	; 0x3d
 8004a6a:	2102      	movs	r1, #2
 8004a6c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3304      	adds	r3, #4
 8004a76:	0019      	movs	r1, r3
 8004a78:	0010      	movs	r0, r2
 8004a7a:	f000 fbcf 	bl	800521c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	223d      	movs	r2, #61	; 0x3d
 8004a82:	2101      	movs	r1, #1
 8004a84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	0018      	movs	r0, r3
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	b002      	add	sp, #8
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a98:	46c0      	nop			; (mov r8, r8)
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	b002      	add	sp, #8
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6839      	ldr	r1, [r7, #0]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	f000 fea2 	bl	80057fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a18      	ldr	r2, [pc, #96]	; (8004b20 <HAL_TIM_PWM_Start+0x80>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d009      	beq.n	8004ad6 <HAL_TIM_PWM_Start+0x36>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a17      	ldr	r2, [pc, #92]	; (8004b24 <HAL_TIM_PWM_Start+0x84>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d004      	beq.n	8004ad6 <HAL_TIM_PWM_Start+0x36>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a15      	ldr	r2, [pc, #84]	; (8004b28 <HAL_TIM_PWM_Start+0x88>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d101      	bne.n	8004ada <HAL_TIM_PWM_Start+0x3a>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e000      	b.n	8004adc <HAL_TIM_PWM_Start+0x3c>
 8004ada:	2300      	movs	r3, #0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d008      	beq.n	8004af2 <HAL_TIM_PWM_Start+0x52>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2180      	movs	r1, #128	; 0x80
 8004aec:	0209      	lsls	r1, r1, #8
 8004aee:	430a      	orrs	r2, r1
 8004af0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	2207      	movs	r2, #7
 8004afa:	4013      	ands	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b06      	cmp	r3, #6
 8004b02:	d007      	beq.n	8004b14 <HAL_TIM_PWM_Start+0x74>
  {
    __HAL_TIM_ENABLE(htim);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2101      	movs	r1, #1
 8004b10:	430a      	orrs	r2, r1
 8004b12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	0018      	movs	r0, r3
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	b004      	add	sp, #16
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	46c0      	nop			; (mov r8, r8)
 8004b20:	40012c00 	.word	0x40012c00
 8004b24:	40014400 	.word	0x40014400
 8004b28:	40014800 	.word	0x40014800

08004b2c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e07c      	b.n	8004c3a <HAL_TIM_Encoder_Init+0x10e>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	223d      	movs	r2, #61	; 0x3d
 8004b44:	5c9b      	ldrb	r3, [r3, r2]
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d107      	bne.n	8004b5c <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	223c      	movs	r2, #60	; 0x3c
 8004b50:	2100      	movs	r1, #0
 8004b52:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	0018      	movs	r0, r3
 8004b58:	f7fe f990 	bl	8002e7c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	223d      	movs	r2, #61	; 0x3d
 8004b60:	2102      	movs	r1, #2
 8004b62:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4935      	ldr	r1, [pc, #212]	; (8004c44 <HAL_TIM_Encoder_Init+0x118>)
 8004b70:	400a      	ands	r2, r1
 8004b72:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	0019      	movs	r1, r3
 8004b7e:	0010      	movs	r0, r2
 8004b80:	f000 fb4c 	bl	800521c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	4a27      	ldr	r2, [pc, #156]	; (8004c48 <HAL_TIM_Encoder_Init+0x11c>)
 8004baa:	4013      	ands	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	021b      	lsls	r3, r3, #8
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	4a22      	ldr	r2, [pc, #136]	; (8004c4c <HAL_TIM_Encoder_Init+0x120>)
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	4a21      	ldr	r2, [pc, #132]	; (8004c50 <HAL_TIM_Encoder_Init+0x124>)
 8004bcc:	4013      	ands	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	68da      	ldr	r2, [r3, #12]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	021b      	lsls	r3, r3, #8
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	011a      	lsls	r2, r3, #4
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	031b      	lsls	r3, r3, #12
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2222      	movs	r2, #34	; 0x22
 8004bfa:	4393      	bics	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2288      	movs	r2, #136	; 0x88
 8004c02:	4393      	bics	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	011b      	lsls	r3, r3, #4
 8004c10:	4313      	orrs	r3, r2
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	223d      	movs	r2, #61	; 0x3d
 8004c34:	2101      	movs	r1, #1
 8004c36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	b006      	add	sp, #24
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	ffffbff8 	.word	0xffffbff8
 8004c48:	fffffcfc 	.word	0xfffffcfc
 8004c4c:	fffff3f3 	.word	0xfffff3f3
 8004c50:	ffff0f0f 	.word	0xffff0f0f

08004c54 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <HAL_TIM_Encoder_Start+0x16>
 8004c64:	2b04      	cmp	r3, #4
 8004c66:	d008      	beq.n	8004c7a <HAL_TIM_Encoder_Start+0x26>
 8004c68:	e00f      	b.n	8004c8a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	2100      	movs	r1, #0
 8004c72:	0018      	movs	r0, r3
 8004c74:	f000 fdc2 	bl	80057fc <TIM_CCxChannelCmd>
      break;
 8004c78:	e016      	b.n	8004ca8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	2104      	movs	r1, #4
 8004c82:	0018      	movs	r0, r3
 8004c84:	f000 fdba 	bl	80057fc <TIM_CCxChannelCmd>
      break;
 8004c88:	e00e      	b.n	8004ca8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	2100      	movs	r1, #0
 8004c92:	0018      	movs	r0, r3
 8004c94:	f000 fdb2 	bl	80057fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	2104      	movs	r1, #4
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	f000 fdab 	bl	80057fc <TIM_CCxChannelCmd>
      break;
 8004ca6:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	0018      	movs	r0, r3
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b002      	add	sp, #8
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b082      	sub	sp, #8
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	2202      	movs	r2, #2
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d124      	bne.n	8004d22 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d11d      	bne.n	8004d22 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2203      	movs	r2, #3
 8004cec:	4252      	negs	r2, r2
 8004cee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	4013      	ands	r3, r2
 8004d00:	d004      	beq.n	8004d0c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	0018      	movs	r0, r3
 8004d06:	f000 fa71 	bl	80051ec <HAL_TIM_IC_CaptureCallback>
 8004d0a:	e007      	b.n	8004d1c <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	0018      	movs	r0, r3
 8004d10:	f000 fa64 	bl	80051dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	0018      	movs	r0, r3
 8004d18:	f000 fa70 	bl	80051fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	2204      	movs	r2, #4
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	2b04      	cmp	r3, #4
 8004d2e:	d125      	bne.n	8004d7c <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	2204      	movs	r2, #4
 8004d38:	4013      	ands	r3, r2
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d11e      	bne.n	8004d7c <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2205      	movs	r2, #5
 8004d44:	4252      	negs	r2, r2
 8004d46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699a      	ldr	r2, [r3, #24]
 8004d54:	23c0      	movs	r3, #192	; 0xc0
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4013      	ands	r3, r2
 8004d5a:	d004      	beq.n	8004d66 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	0018      	movs	r0, r3
 8004d60:	f000 fa44 	bl	80051ec <HAL_TIM_IC_CaptureCallback>
 8004d64:	e007      	b.n	8004d76 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	0018      	movs	r0, r3
 8004d6a:	f000 fa37 	bl	80051dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	0018      	movs	r0, r3
 8004d72:	f000 fa43 	bl	80051fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	2208      	movs	r2, #8
 8004d84:	4013      	ands	r3, r2
 8004d86:	2b08      	cmp	r3, #8
 8004d88:	d124      	bne.n	8004dd4 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	2208      	movs	r2, #8
 8004d92:	4013      	ands	r3, r2
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d11d      	bne.n	8004dd4 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2209      	movs	r2, #9
 8004d9e:	4252      	negs	r2, r2
 8004da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2204      	movs	r2, #4
 8004da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	2203      	movs	r2, #3
 8004db0:	4013      	ands	r3, r2
 8004db2:	d004      	beq.n	8004dbe <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	0018      	movs	r0, r3
 8004db8:	f000 fa18 	bl	80051ec <HAL_TIM_IC_CaptureCallback>
 8004dbc:	e007      	b.n	8004dce <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	f000 fa0b 	bl	80051dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	0018      	movs	r0, r3
 8004dca:	f000 fa17 	bl	80051fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	2210      	movs	r2, #16
 8004ddc:	4013      	ands	r3, r2
 8004dde:	2b10      	cmp	r3, #16
 8004de0:	d125      	bne.n	8004e2e <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	2210      	movs	r2, #16
 8004dea:	4013      	ands	r3, r2
 8004dec:	2b10      	cmp	r3, #16
 8004dee:	d11e      	bne.n	8004e2e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2211      	movs	r2, #17
 8004df6:	4252      	negs	r2, r2
 8004df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2208      	movs	r2, #8
 8004dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	69da      	ldr	r2, [r3, #28]
 8004e06:	23c0      	movs	r3, #192	; 0xc0
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	d004      	beq.n	8004e18 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	0018      	movs	r0, r3
 8004e12:	f000 f9eb 	bl	80051ec <HAL_TIM_IC_CaptureCallback>
 8004e16:	e007      	b.n	8004e28 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	f000 f9de 	bl	80051dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	0018      	movs	r0, r3
 8004e24:	f000 f9ea 	bl	80051fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	2201      	movs	r2, #1
 8004e36:	4013      	ands	r3, r2
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d10f      	bne.n	8004e5c <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	2201      	movs	r2, #1
 8004e44:	4013      	ands	r3, r2
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d108      	bne.n	8004e5c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	4252      	negs	r2, r2
 8004e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	0018      	movs	r0, r3
 8004e58:	f7fd fe60 	bl	8002b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	2280      	movs	r2, #128	; 0x80
 8004e64:	4013      	ands	r3, r2
 8004e66:	2b80      	cmp	r3, #128	; 0x80
 8004e68:	d10f      	bne.n	8004e8a <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	2280      	movs	r2, #128	; 0x80
 8004e72:	4013      	ands	r3, r2
 8004e74:	2b80      	cmp	r3, #128	; 0x80
 8004e76:	d108      	bne.n	8004e8a <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2281      	movs	r2, #129	; 0x81
 8004e7e:	4252      	negs	r2, r2
 8004e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	0018      	movs	r0, r3
 8004e86:	f000 fd3d 	bl	8005904 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	2240      	movs	r2, #64	; 0x40
 8004e92:	4013      	ands	r3, r2
 8004e94:	2b40      	cmp	r3, #64	; 0x40
 8004e96:	d10f      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	2240      	movs	r2, #64	; 0x40
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	2b40      	cmp	r3, #64	; 0x40
 8004ea4:	d108      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2241      	movs	r2, #65	; 0x41
 8004eac:	4252      	negs	r2, r2
 8004eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	f000 f9aa 	bl	800520c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	2b20      	cmp	r3, #32
 8004ec4:	d10f      	bne.n	8004ee6 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	4013      	ands	r3, r2
 8004ed0:	2b20      	cmp	r3, #32
 8004ed2:	d108      	bne.n	8004ee6 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2221      	movs	r2, #33	; 0x21
 8004eda:	4252      	negs	r2, r2
 8004edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f000 fd07 	bl	80058f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ee6:	46c0      	nop			; (mov r8, r8)
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	b002      	add	sp, #8
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	223c      	movs	r2, #60	; 0x3c
 8004f00:	5c9b      	ldrb	r3, [r3, r2]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d101      	bne.n	8004f0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004f06:	2302      	movs	r3, #2
 8004f08:	e0a4      	b.n	8005054 <HAL_TIM_PWM_ConfigChannel+0x164>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	223c      	movs	r2, #60	; 0x3c
 8004f0e:	2101      	movs	r1, #1
 8004f10:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	223d      	movs	r2, #61	; 0x3d
 8004f16:	2102      	movs	r1, #2
 8004f18:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d029      	beq.n	8004f74 <HAL_TIM_PWM_ConfigChannel+0x84>
 8004f20:	d802      	bhi.n	8004f28 <HAL_TIM_PWM_ConfigChannel+0x38>
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d005      	beq.n	8004f32 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8004f26:	e08c      	b.n	8005042 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d046      	beq.n	8004fba <HAL_TIM_PWM_ConfigChannel+0xca>
 8004f2c:	2b0c      	cmp	r3, #12
 8004f2e:	d065      	beq.n	8004ffc <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8004f30:	e087      	b.n	8005042 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	0011      	movs	r1, r2
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	f000 f9e4 	bl	8005308 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2108      	movs	r1, #8
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2104      	movs	r1, #4
 8004f5c:	438a      	bics	r2, r1
 8004f5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6999      	ldr	r1, [r3, #24]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	619a      	str	r2, [r3, #24]
      break;
 8004f72:	e066      	b.n	8005042 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	0011      	movs	r1, r2
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	f000 fa41 	bl	8005404 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	699a      	ldr	r2, [r3, #24]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2180      	movs	r1, #128	; 0x80
 8004f8e:	0109      	lsls	r1, r1, #4
 8004f90:	430a      	orrs	r2, r1
 8004f92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699a      	ldr	r2, [r3, #24]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	492f      	ldr	r1, [pc, #188]	; (800505c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8004fa0:	400a      	ands	r2, r1
 8004fa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6999      	ldr	r1, [r3, #24]
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	021a      	lsls	r2, r3, #8
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	619a      	str	r2, [r3, #24]
      break;
 8004fb8:	e043      	b.n	8005042 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	0011      	movs	r1, r2
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	f000 fa9c 	bl	8005500 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	69da      	ldr	r2, [r3, #28]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2108      	movs	r1, #8
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	69da      	ldr	r2, [r3, #28]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2104      	movs	r1, #4
 8004fe4:	438a      	bics	r2, r1
 8004fe6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	69d9      	ldr	r1, [r3, #28]
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	691a      	ldr	r2, [r3, #16]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	61da      	str	r2, [r3, #28]
      break;
 8004ffa:	e022      	b.n	8005042 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	0011      	movs	r1, r2
 8005004:	0018      	movs	r0, r3
 8005006:	f000 fafb 	bl	8005600 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69da      	ldr	r2, [r3, #28]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2180      	movs	r1, #128	; 0x80
 8005016:	0109      	lsls	r1, r1, #4
 8005018:	430a      	orrs	r2, r1
 800501a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	69da      	ldr	r2, [r3, #28]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	490d      	ldr	r1, [pc, #52]	; (800505c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8005028:	400a      	ands	r2, r1
 800502a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	69d9      	ldr	r1, [r3, #28]
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	021a      	lsls	r2, r3, #8
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	61da      	str	r2, [r3, #28]
      break;
 8005040:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	223d      	movs	r2, #61	; 0x3d
 8005046:	2101      	movs	r1, #1
 8005048:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	223c      	movs	r2, #60	; 0x3c
 800504e:	2100      	movs	r1, #0
 8005050:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	0018      	movs	r0, r3
 8005056:	46bd      	mov	sp, r7
 8005058:	b004      	add	sp, #16
 800505a:	bd80      	pop	{r7, pc}
 800505c:	fffffbff 	.word	0xfffffbff

08005060 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	223c      	movs	r2, #60	; 0x3c
 800506e:	5c9b      	ldrb	r3, [r3, r2]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d101      	bne.n	8005078 <HAL_TIM_ConfigClockSource+0x18>
 8005074:	2302      	movs	r3, #2
 8005076:	e0ab      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x170>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	223c      	movs	r2, #60	; 0x3c
 800507c:	2101      	movs	r1, #1
 800507e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	223d      	movs	r2, #61	; 0x3d
 8005084:	2102      	movs	r1, #2
 8005086:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2277      	movs	r2, #119	; 0x77
 8005094:	4393      	bics	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4a4f      	ldr	r2, [pc, #316]	; (80051d8 <HAL_TIM_ConfigClockSource+0x178>)
 800509c:	4013      	ands	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b40      	cmp	r3, #64	; 0x40
 80050ae:	d100      	bne.n	80050b2 <HAL_TIM_ConfigClockSource+0x52>
 80050b0:	e06b      	b.n	800518a <HAL_TIM_ConfigClockSource+0x12a>
 80050b2:	d80e      	bhi.n	80050d2 <HAL_TIM_ConfigClockSource+0x72>
 80050b4:	2b10      	cmp	r3, #16
 80050b6:	d100      	bne.n	80050ba <HAL_TIM_ConfigClockSource+0x5a>
 80050b8:	e077      	b.n	80051aa <HAL_TIM_ConfigClockSource+0x14a>
 80050ba:	d803      	bhi.n	80050c4 <HAL_TIM_ConfigClockSource+0x64>
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d100      	bne.n	80050c2 <HAL_TIM_ConfigClockSource+0x62>
 80050c0:	e073      	b.n	80051aa <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80050c2:	e07c      	b.n	80051be <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d100      	bne.n	80050ca <HAL_TIM_ConfigClockSource+0x6a>
 80050c8:	e06f      	b.n	80051aa <HAL_TIM_ConfigClockSource+0x14a>
 80050ca:	2b30      	cmp	r3, #48	; 0x30
 80050cc:	d100      	bne.n	80050d0 <HAL_TIM_ConfigClockSource+0x70>
 80050ce:	e06c      	b.n	80051aa <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80050d0:	e075      	b.n	80051be <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80050d2:	2b70      	cmp	r3, #112	; 0x70
 80050d4:	d00e      	beq.n	80050f4 <HAL_TIM_ConfigClockSource+0x94>
 80050d6:	d804      	bhi.n	80050e2 <HAL_TIM_ConfigClockSource+0x82>
 80050d8:	2b50      	cmp	r3, #80	; 0x50
 80050da:	d036      	beq.n	800514a <HAL_TIM_ConfigClockSource+0xea>
 80050dc:	2b60      	cmp	r3, #96	; 0x60
 80050de:	d044      	beq.n	800516a <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80050e0:	e06d      	b.n	80051be <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80050e2:	2280      	movs	r2, #128	; 0x80
 80050e4:	0152      	lsls	r2, r2, #5
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d068      	beq.n	80051bc <HAL_TIM_ConfigClockSource+0x15c>
 80050ea:	2280      	movs	r2, #128	; 0x80
 80050ec:	0192      	lsls	r2, r2, #6
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d017      	beq.n	8005122 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80050f2:	e064      	b.n	80051be <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6818      	ldr	r0, [r3, #0]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	6899      	ldr	r1, [r3, #8]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f000 fb5a 	bl	80057bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2277      	movs	r2, #119	; 0x77
 8005114:	4313      	orrs	r3, r2
 8005116:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	609a      	str	r2, [r3, #8]
      break;
 8005120:	e04d      	b.n	80051be <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	6899      	ldr	r1, [r3, #8]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f000 fb43 	bl	80057bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2180      	movs	r1, #128	; 0x80
 8005142:	01c9      	lsls	r1, r1, #7
 8005144:	430a      	orrs	r2, r1
 8005146:	609a      	str	r2, [r3, #8]
      break;
 8005148:	e039      	b.n	80051be <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6818      	ldr	r0, [r3, #0]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	6859      	ldr	r1, [r3, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	001a      	movs	r2, r3
 8005158:	f000 fab6 	bl	80056c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2150      	movs	r1, #80	; 0x50
 8005162:	0018      	movs	r0, r3
 8005164:	f000 fb10 	bl	8005788 <TIM_ITRx_SetConfig>
      break;
 8005168:	e029      	b.n	80051be <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6818      	ldr	r0, [r3, #0]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	6859      	ldr	r1, [r3, #4]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	001a      	movs	r2, r3
 8005178:	f000 fad4 	bl	8005724 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2160      	movs	r1, #96	; 0x60
 8005182:	0018      	movs	r0, r3
 8005184:	f000 fb00 	bl	8005788 <TIM_ITRx_SetConfig>
      break;
 8005188:	e019      	b.n	80051be <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6859      	ldr	r1, [r3, #4]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	001a      	movs	r2, r3
 8005198:	f000 fa96 	bl	80056c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2140      	movs	r1, #64	; 0x40
 80051a2:	0018      	movs	r0, r3
 80051a4:	f000 faf0 	bl	8005788 <TIM_ITRx_SetConfig>
      break;
 80051a8:	e009      	b.n	80051be <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	0019      	movs	r1, r3
 80051b4:	0010      	movs	r0, r2
 80051b6:	f000 fae7 	bl	8005788 <TIM_ITRx_SetConfig>
      break;
 80051ba:	e000      	b.n	80051be <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80051bc:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	223d      	movs	r2, #61	; 0x3d
 80051c2:	2101      	movs	r1, #1
 80051c4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	223c      	movs	r2, #60	; 0x3c
 80051ca:	2100      	movs	r1, #0
 80051cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	0018      	movs	r0, r3
 80051d2:	46bd      	mov	sp, r7
 80051d4:	b004      	add	sp, #16
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	ffff00ff 	.word	0xffff00ff

080051dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051e4:	46c0      	nop			; (mov r8, r8)
 80051e6:	46bd      	mov	sp, r7
 80051e8:	b002      	add	sp, #8
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051f4:	46c0      	nop			; (mov r8, r8)
 80051f6:	46bd      	mov	sp, r7
 80051f8:	b002      	add	sp, #8
 80051fa:	bd80      	pop	{r7, pc}

080051fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005204:	46c0      	nop			; (mov r8, r8)
 8005206:	46bd      	mov	sp, r7
 8005208:	b002      	add	sp, #8
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005214:	46c0      	nop			; (mov r8, r8)
 8005216:	46bd      	mov	sp, r7
 8005218:	b002      	add	sp, #8
 800521a:	bd80      	pop	{r7, pc}

0800521c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a30      	ldr	r2, [pc, #192]	; (80052f0 <TIM_Base_SetConfig+0xd4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d008      	beq.n	8005246 <TIM_Base_SetConfig+0x2a>
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	2380      	movs	r3, #128	; 0x80
 8005238:	05db      	lsls	r3, r3, #23
 800523a:	429a      	cmp	r2, r3
 800523c:	d003      	beq.n	8005246 <TIM_Base_SetConfig+0x2a>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a2c      	ldr	r2, [pc, #176]	; (80052f4 <TIM_Base_SetConfig+0xd8>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d108      	bne.n	8005258 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2270      	movs	r2, #112	; 0x70
 800524a:	4393      	bics	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	4313      	orrs	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a25      	ldr	r2, [pc, #148]	; (80052f0 <TIM_Base_SetConfig+0xd4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d014      	beq.n	800528a <TIM_Base_SetConfig+0x6e>
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	2380      	movs	r3, #128	; 0x80
 8005264:	05db      	lsls	r3, r3, #23
 8005266:	429a      	cmp	r2, r3
 8005268:	d00f      	beq.n	800528a <TIM_Base_SetConfig+0x6e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a21      	ldr	r2, [pc, #132]	; (80052f4 <TIM_Base_SetConfig+0xd8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00b      	beq.n	800528a <TIM_Base_SetConfig+0x6e>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a20      	ldr	r2, [pc, #128]	; (80052f8 <TIM_Base_SetConfig+0xdc>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d007      	beq.n	800528a <TIM_Base_SetConfig+0x6e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a1f      	ldr	r2, [pc, #124]	; (80052fc <TIM_Base_SetConfig+0xe0>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d003      	beq.n	800528a <TIM_Base_SetConfig+0x6e>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a1e      	ldr	r2, [pc, #120]	; (8005300 <TIM_Base_SetConfig+0xe4>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d108      	bne.n	800529c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4a1d      	ldr	r2, [pc, #116]	; (8005304 <TIM_Base_SetConfig+0xe8>)
 800528e:	4013      	ands	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4313      	orrs	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2280      	movs	r2, #128	; 0x80
 80052a0:	4393      	bics	r3, r2
 80052a2:	001a      	movs	r2, r3
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	689a      	ldr	r2, [r3, #8]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a0a      	ldr	r2, [pc, #40]	; (80052f0 <TIM_Base_SetConfig+0xd4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d007      	beq.n	80052da <TIM_Base_SetConfig+0xbe>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a0b      	ldr	r2, [pc, #44]	; (80052fc <TIM_Base_SetConfig+0xe0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d003      	beq.n	80052da <TIM_Base_SetConfig+0xbe>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a0a      	ldr	r2, [pc, #40]	; (8005300 <TIM_Base_SetConfig+0xe4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d103      	bne.n	80052e2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	691a      	ldr	r2, [r3, #16]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	615a      	str	r2, [r3, #20]
}
 80052e8:	46c0      	nop			; (mov r8, r8)
 80052ea:	46bd      	mov	sp, r7
 80052ec:	b004      	add	sp, #16
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40012c00 	.word	0x40012c00
 80052f4:	40000400 	.word	0x40000400
 80052f8:	40002000 	.word	0x40002000
 80052fc:	40014400 	.word	0x40014400
 8005300:	40014800 	.word	0x40014800
 8005304:	fffffcff 	.word	0xfffffcff

08005308 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	2201      	movs	r2, #1
 8005318:	4393      	bics	r3, r2
 800531a:	001a      	movs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2270      	movs	r2, #112	; 0x70
 8005336:	4393      	bics	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2203      	movs	r2, #3
 800533e:	4393      	bics	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4313      	orrs	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	2202      	movs	r2, #2
 8005350:	4393      	bics	r3, r2
 8005352:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	4313      	orrs	r3, r2
 800535c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a23      	ldr	r2, [pc, #140]	; (80053f0 <TIM_OC1_SetConfig+0xe8>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d007      	beq.n	8005376 <TIM_OC1_SetConfig+0x6e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a22      	ldr	r2, [pc, #136]	; (80053f4 <TIM_OC1_SetConfig+0xec>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d003      	beq.n	8005376 <TIM_OC1_SetConfig+0x6e>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a21      	ldr	r2, [pc, #132]	; (80053f8 <TIM_OC1_SetConfig+0xf0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d10c      	bne.n	8005390 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	2208      	movs	r2, #8
 800537a:	4393      	bics	r3, r2
 800537c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	4313      	orrs	r3, r2
 8005386:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	2204      	movs	r2, #4
 800538c:	4393      	bics	r3, r2
 800538e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a17      	ldr	r2, [pc, #92]	; (80053f0 <TIM_OC1_SetConfig+0xe8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d007      	beq.n	80053a8 <TIM_OC1_SetConfig+0xa0>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a16      	ldr	r2, [pc, #88]	; (80053f4 <TIM_OC1_SetConfig+0xec>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d003      	beq.n	80053a8 <TIM_OC1_SetConfig+0xa0>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a15      	ldr	r2, [pc, #84]	; (80053f8 <TIM_OC1_SetConfig+0xf0>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d111      	bne.n	80053cc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	4a14      	ldr	r2, [pc, #80]	; (80053fc <TIM_OC1_SetConfig+0xf4>)
 80053ac:	4013      	ands	r3, r2
 80053ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	4a13      	ldr	r2, [pc, #76]	; (8005400 <TIM_OC1_SetConfig+0xf8>)
 80053b4:	4013      	ands	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4313      	orrs	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	621a      	str	r2, [r3, #32]
}
 80053e6:	46c0      	nop			; (mov r8, r8)
 80053e8:	46bd      	mov	sp, r7
 80053ea:	b006      	add	sp, #24
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	46c0      	nop			; (mov r8, r8)
 80053f0:	40012c00 	.word	0x40012c00
 80053f4:	40014400 	.word	0x40014400
 80053f8:	40014800 	.word	0x40014800
 80053fc:	fffffeff 	.word	0xfffffeff
 8005400:	fffffdff 	.word	0xfffffdff

08005404 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	2210      	movs	r2, #16
 8005414:	4393      	bics	r3, r2
 8005416:	001a      	movs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4a2c      	ldr	r2, [pc, #176]	; (80054e4 <TIM_OC2_SetConfig+0xe0>)
 8005432:	4013      	ands	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4a2b      	ldr	r2, [pc, #172]	; (80054e8 <TIM_OC2_SetConfig+0xe4>)
 800543a:	4013      	ands	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	021b      	lsls	r3, r3, #8
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	4313      	orrs	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2220      	movs	r2, #32
 800544e:	4393      	bics	r3, r2
 8005450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a22      	ldr	r2, [pc, #136]	; (80054ec <TIM_OC2_SetConfig+0xe8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d10d      	bne.n	8005482 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2280      	movs	r2, #128	; 0x80
 800546a:	4393      	bics	r3, r2
 800546c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	011b      	lsls	r3, r3, #4
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	4313      	orrs	r3, r2
 8005478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2240      	movs	r2, #64	; 0x40
 800547e:	4393      	bics	r3, r2
 8005480:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a19      	ldr	r2, [pc, #100]	; (80054ec <TIM_OC2_SetConfig+0xe8>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d007      	beq.n	800549a <TIM_OC2_SetConfig+0x96>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a18      	ldr	r2, [pc, #96]	; (80054f0 <TIM_OC2_SetConfig+0xec>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d003      	beq.n	800549a <TIM_OC2_SetConfig+0x96>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a17      	ldr	r2, [pc, #92]	; (80054f4 <TIM_OC2_SetConfig+0xf0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d113      	bne.n	80054c2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	4a16      	ldr	r2, [pc, #88]	; (80054f8 <TIM_OC2_SetConfig+0xf4>)
 800549e:	4013      	ands	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	4a15      	ldr	r2, [pc, #84]	; (80054fc <TIM_OC2_SetConfig+0xf8>)
 80054a6:	4013      	ands	r3, r2
 80054a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	621a      	str	r2, [r3, #32]
}
 80054dc:	46c0      	nop			; (mov r8, r8)
 80054de:	46bd      	mov	sp, r7
 80054e0:	b006      	add	sp, #24
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	ffff8fff 	.word	0xffff8fff
 80054e8:	fffffcff 	.word	0xfffffcff
 80054ec:	40012c00 	.word	0x40012c00
 80054f0:	40014400 	.word	0x40014400
 80054f4:	40014800 	.word	0x40014800
 80054f8:	fffffbff 	.word	0xfffffbff
 80054fc:	fffff7ff 	.word	0xfffff7ff

08005500 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	4a33      	ldr	r2, [pc, #204]	; (80055dc <TIM_OC3_SetConfig+0xdc>)
 8005510:	401a      	ands	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2270      	movs	r2, #112	; 0x70
 800552c:	4393      	bics	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2203      	movs	r2, #3
 8005534:	4393      	bics	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	4a26      	ldr	r2, [pc, #152]	; (80055e0 <TIM_OC3_SetConfig+0xe0>)
 8005546:	4013      	ands	r3, r2
 8005548:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	021b      	lsls	r3, r3, #8
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	4313      	orrs	r3, r2
 8005554:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a22      	ldr	r2, [pc, #136]	; (80055e4 <TIM_OC3_SetConfig+0xe4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d10d      	bne.n	800557a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	4a21      	ldr	r2, [pc, #132]	; (80055e8 <TIM_OC3_SetConfig+0xe8>)
 8005562:	4013      	ands	r3, r2
 8005564:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	021b      	lsls	r3, r3, #8
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	4313      	orrs	r3, r2
 8005570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	4a1d      	ldr	r2, [pc, #116]	; (80055ec <TIM_OC3_SetConfig+0xec>)
 8005576:	4013      	ands	r3, r2
 8005578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a19      	ldr	r2, [pc, #100]	; (80055e4 <TIM_OC3_SetConfig+0xe4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d007      	beq.n	8005592 <TIM_OC3_SetConfig+0x92>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a1a      	ldr	r2, [pc, #104]	; (80055f0 <TIM_OC3_SetConfig+0xf0>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d003      	beq.n	8005592 <TIM_OC3_SetConfig+0x92>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a19      	ldr	r2, [pc, #100]	; (80055f4 <TIM_OC3_SetConfig+0xf4>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d113      	bne.n	80055ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	4a18      	ldr	r2, [pc, #96]	; (80055f8 <TIM_OC3_SetConfig+0xf8>)
 8005596:	4013      	ands	r3, r2
 8005598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	4a17      	ldr	r2, [pc, #92]	; (80055fc <TIM_OC3_SetConfig+0xfc>)
 800559e:	4013      	ands	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	621a      	str	r2, [r3, #32]
}
 80055d4:	46c0      	nop			; (mov r8, r8)
 80055d6:	46bd      	mov	sp, r7
 80055d8:	b006      	add	sp, #24
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	fffffeff 	.word	0xfffffeff
 80055e0:	fffffdff 	.word	0xfffffdff
 80055e4:	40012c00 	.word	0x40012c00
 80055e8:	fffff7ff 	.word	0xfffff7ff
 80055ec:	fffffbff 	.word	0xfffffbff
 80055f0:	40014400 	.word	0x40014400
 80055f4:	40014800 	.word	0x40014800
 80055f8:	ffffefff 	.word	0xffffefff
 80055fc:	ffffdfff 	.word	0xffffdfff

08005600 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	4a26      	ldr	r2, [pc, #152]	; (80056a8 <TIM_OC4_SetConfig+0xa8>)
 8005610:	401a      	ands	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4a20      	ldr	r2, [pc, #128]	; (80056ac <TIM_OC4_SetConfig+0xac>)
 800562c:	4013      	ands	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4a1f      	ldr	r2, [pc, #124]	; (80056b0 <TIM_OC4_SetConfig+0xb0>)
 8005634:	4013      	ands	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	021b      	lsls	r3, r3, #8
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	4313      	orrs	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	4a1b      	ldr	r2, [pc, #108]	; (80056b4 <TIM_OC4_SetConfig+0xb4>)
 8005648:	4013      	ands	r3, r2
 800564a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	031b      	lsls	r3, r3, #12
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	4313      	orrs	r3, r2
 8005656:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a17      	ldr	r2, [pc, #92]	; (80056b8 <TIM_OC4_SetConfig+0xb8>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d007      	beq.n	8005670 <TIM_OC4_SetConfig+0x70>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a16      	ldr	r2, [pc, #88]	; (80056bc <TIM_OC4_SetConfig+0xbc>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d003      	beq.n	8005670 <TIM_OC4_SetConfig+0x70>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a15      	ldr	r2, [pc, #84]	; (80056c0 <TIM_OC4_SetConfig+0xc0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d109      	bne.n	8005684 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	4a14      	ldr	r2, [pc, #80]	; (80056c4 <TIM_OC4_SetConfig+0xc4>)
 8005674:	4013      	ands	r3, r2
 8005676:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	019b      	lsls	r3, r3, #6
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	4313      	orrs	r3, r2
 8005682:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	621a      	str	r2, [r3, #32]
}
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	46bd      	mov	sp, r7
 80056a2:	b006      	add	sp, #24
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	46c0      	nop			; (mov r8, r8)
 80056a8:	ffffefff 	.word	0xffffefff
 80056ac:	ffff8fff 	.word	0xffff8fff
 80056b0:	fffffcff 	.word	0xfffffcff
 80056b4:	ffffdfff 	.word	0xffffdfff
 80056b8:	40012c00 	.word	0x40012c00
 80056bc:	40014400 	.word	0x40014400
 80056c0:	40014800 	.word	0x40014800
 80056c4:	ffffbfff 	.word	0xffffbfff

080056c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	2201      	movs	r2, #1
 80056e0:	4393      	bics	r3, r2
 80056e2:	001a      	movs	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	22f0      	movs	r2, #240	; 0xf0
 80056f2:	4393      	bics	r3, r2
 80056f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	220a      	movs	r2, #10
 8005704:	4393      	bics	r3, r2
 8005706:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	4313      	orrs	r3, r2
 800570e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	621a      	str	r2, [r3, #32]
}
 800571c:	46c0      	nop			; (mov r8, r8)
 800571e:	46bd      	mov	sp, r7
 8005720:	b006      	add	sp, #24
 8005722:	bd80      	pop	{r7, pc}

08005724 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	2210      	movs	r2, #16
 8005736:	4393      	bics	r3, r2
 8005738:	001a      	movs	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6a1b      	ldr	r3, [r3, #32]
 8005748:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	4a0d      	ldr	r2, [pc, #52]	; (8005784 <TIM_TI2_ConfigInputStage+0x60>)
 800574e:	4013      	ands	r3, r2
 8005750:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	031b      	lsls	r3, r3, #12
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	22a0      	movs	r2, #160	; 0xa0
 8005760:	4393      	bics	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	011b      	lsls	r3, r3, #4
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	4313      	orrs	r3, r2
 800576c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	621a      	str	r2, [r3, #32]
}
 800577a:	46c0      	nop			; (mov r8, r8)
 800577c:	46bd      	mov	sp, r7
 800577e:	b006      	add	sp, #24
 8005780:	bd80      	pop	{r7, pc}
 8005782:	46c0      	nop			; (mov r8, r8)
 8005784:	ffff0fff 	.word	0xffff0fff

08005788 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2270      	movs	r2, #112	; 0x70
 800579c:	4393      	bics	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	2207      	movs	r2, #7
 80057a8:	4313      	orrs	r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	609a      	str	r2, [r3, #8]
}
 80057b2:	46c0      	nop			; (mov r8, r8)
 80057b4:	46bd      	mov	sp, r7
 80057b6:	b004      	add	sp, #16
 80057b8:	bd80      	pop	{r7, pc}
	...

080057bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	4a09      	ldr	r2, [pc, #36]	; (80057f8 <TIM_ETR_SetConfig+0x3c>)
 80057d4:	4013      	ands	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	021a      	lsls	r2, r3, #8
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	431a      	orrs	r2, r3
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	609a      	str	r2, [r3, #8]
}
 80057f0:	46c0      	nop			; (mov r8, r8)
 80057f2:	46bd      	mov	sp, r7
 80057f4:	b006      	add	sp, #24
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	ffff00ff 	.word	0xffff00ff

080057fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	221f      	movs	r2, #31
 800580c:	4013      	ands	r3, r2
 800580e:	2201      	movs	r2, #1
 8005810:	409a      	lsls	r2, r3
 8005812:	0013      	movs	r3, r2
 8005814:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	43d2      	mvns	r2, r2
 800581e:	401a      	ands	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6a1a      	ldr	r2, [r3, #32]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	211f      	movs	r1, #31
 800582c:	400b      	ands	r3, r1
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	4099      	lsls	r1, r3
 8005832:	000b      	movs	r3, r1
 8005834:	431a      	orrs	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	621a      	str	r2, [r3, #32]
}
 800583a:	46c0      	nop			; (mov r8, r8)
 800583c:	46bd      	mov	sp, r7
 800583e:	b006      	add	sp, #24
 8005840:	bd80      	pop	{r7, pc}
	...

08005844 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	223c      	movs	r2, #60	; 0x3c
 8005852:	5c9b      	ldrb	r3, [r3, r2]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d101      	bne.n	800585c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005858:	2302      	movs	r3, #2
 800585a:	e042      	b.n	80058e2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	223c      	movs	r2, #60	; 0x3c
 8005860:	2101      	movs	r1, #1
 8005862:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	223d      	movs	r2, #61	; 0x3d
 8005868:	2102      	movs	r1, #2
 800586a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2270      	movs	r2, #112	; 0x70
 8005880:	4393      	bics	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	4313      	orrs	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a14      	ldr	r2, [pc, #80]	; (80058ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d00a      	beq.n	80058b6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	2380      	movs	r3, #128	; 0x80
 80058a6:	05db      	lsls	r3, r3, #23
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d004      	beq.n	80058b6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a0f      	ldr	r2, [pc, #60]	; (80058f0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d10c      	bne.n	80058d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2280      	movs	r2, #128	; 0x80
 80058ba:	4393      	bics	r3, r2
 80058bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	223d      	movs	r2, #61	; 0x3d
 80058d4:	2101      	movs	r1, #1
 80058d6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	223c      	movs	r2, #60	; 0x3c
 80058dc:	2100      	movs	r1, #0
 80058de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	0018      	movs	r0, r3
 80058e4:	46bd      	mov	sp, r7
 80058e6:	b004      	add	sp, #16
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	46c0      	nop			; (mov r8, r8)
 80058ec:	40012c00 	.word	0x40012c00
 80058f0:	40000400 	.word	0x40000400

080058f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058fc:	46c0      	nop			; (mov r8, r8)
 80058fe:	46bd      	mov	sp, r7
 8005900:	b002      	add	sp, #8
 8005902:	bd80      	pop	{r7, pc}

08005904 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800590c:	46c0      	nop			; (mov r8, r8)
 800590e:	46bd      	mov	sp, r7
 8005910:	b002      	add	sp, #8
 8005912:	bd80      	pop	{r7, pc}

08005914 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	0002      	movs	r2, r0
 800591c:	1dbb      	adds	r3, r7, #6
 800591e:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005920:	2300      	movs	r3, #0
 8005922:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005924:	1dbb      	adds	r3, r7, #6
 8005926:	2200      	movs	r2, #0
 8005928:	5e9b      	ldrsh	r3, [r3, r2]
 800592a:	2b84      	cmp	r3, #132	; 0x84
 800592c:	d006      	beq.n	800593c <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 800592e:	1dbb      	adds	r3, r7, #6
 8005930:	2200      	movs	r2, #0
 8005932:	5e9a      	ldrsh	r2, [r3, r2]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	18d3      	adds	r3, r2, r3
 8005938:	3303      	adds	r3, #3
 800593a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800593c:	68fb      	ldr	r3, [r7, #12]
}
 800593e:	0018      	movs	r0, r3
 8005940:	46bd      	mov	sp, r7
 8005942:	b004      	add	sp, #16
 8005944:	bd80      	pop	{r7, pc}

08005946 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800594a:	f000 fa4d 	bl	8005de8 <vTaskStartScheduler>
  
  return osOK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	0018      	movs	r0, r3
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005956:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005958:	b089      	sub	sp, #36	; 0x24
 800595a:	af04      	add	r7, sp, #16
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685c      	ldr	r4, [r3, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681d      	ldr	r5, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691e      	ldr	r6, [r3, #16]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2208      	movs	r2, #8
 8005970:	5e9b      	ldrsh	r3, [r3, r2]
 8005972:	0018      	movs	r0, r3
 8005974:	f7ff ffce 	bl	8005914 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	695a      	ldr	r2, [r3, #20]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005980:	6839      	ldr	r1, [r7, #0]
 8005982:	9302      	str	r3, [sp, #8]
 8005984:	9201      	str	r2, [sp, #4]
 8005986:	9000      	str	r0, [sp, #0]
 8005988:	000b      	movs	r3, r1
 800598a:	0032      	movs	r2, r6
 800598c:	0029      	movs	r1, r5
 800598e:	0020      	movs	r0, r4
 8005990:	f000 f8b0 	bl	8005af4 <xTaskCreateStatic>
 8005994:	0003      	movs	r3, r0
 8005996:	60fb      	str	r3, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005998:	68fb      	ldr	r3, [r7, #12]
}
 800599a:	0018      	movs	r0, r3
 800599c:	46bd      	mov	sp, r7
 800599e:	b005      	add	sp, #20
 80059a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059a2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b082      	sub	sp, #8
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3308      	adds	r3, #8
 80059ae:	001a      	movs	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	4252      	negs	r2, r2
 80059ba:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3308      	adds	r3, #8
 80059c0:	001a      	movs	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	3308      	adds	r3, #8
 80059ca:	001a      	movs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059d6:	46c0      	nop			; (mov r8, r8)
 80059d8:	46bd      	mov	sp, r7
 80059da:	b002      	add	sp, #8
 80059dc:	bd80      	pop	{r7, pc}

080059de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b082      	sub	sp, #8
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059ec:	46c0      	nop			; (mov r8, r8)
 80059ee:	46bd      	mov	sp, r7
 80059f0:	b002      	add	sp, #8
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	601a      	str	r2, [r3, #0]
}
 8005a30:	46c0      	nop			; (mov r8, r8)
 8005a32:	46bd      	mov	sp, r7
 8005a34:	b004      	add	sp, #16
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	d103      	bne.n	8005a56 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	e00c      	b.n	8005a70 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	3308      	adds	r3, #8
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	e002      	b.n	8005a64 <vListInsert+0x2c>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	60fb      	str	r3, [r7, #12]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d2f6      	bcs.n	8005a5e <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	601a      	str	r2, [r3, #0]
}
 8005a9c:	46c0      	nop			; (mov r8, r8)
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	b004      	add	sp, #16
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	6892      	ldr	r2, [r2, #8]
 8005aba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	6852      	ldr	r2, [r2, #4]
 8005ac4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d103      	bne.n	8005ad8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	1e5a      	subs	r2, r3, #1
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
}
 8005aec:	0018      	movs	r0, r3
 8005aee:	46bd      	mov	sp, r7
 8005af0:	b004      	add	sp, #16
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005af4:	b590      	push	{r4, r7, lr}
 8005af6:	b08d      	sub	sp, #52	; 0x34
 8005af8:	af04      	add	r7, sp, #16
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
 8005b00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <xTaskCreateStatic+0x18>
 8005b08:	b672      	cpsid	i
 8005b0a:	e7fe      	b.n	8005b0a <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <xTaskCreateStatic+0x22>
 8005b12:	b672      	cpsid	i
 8005b14:	e7fe      	b.n	8005b14 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b16:	2350      	movs	r3, #80	; 0x50
 8005b18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2b50      	cmp	r3, #80	; 0x50
 8005b1e:	d001      	beq.n	8005b24 <xTaskCreateStatic+0x30>
 8005b20:	b672      	cpsid	i
 8005b22:	e7fe      	b.n	8005b22 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d01c      	beq.n	8005b64 <xTaskCreateStatic+0x70>
 8005b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d019      	beq.n	8005b64 <xTaskCreateStatic+0x70>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b32:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b38:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b3a:	683c      	ldr	r4, [r7, #0]
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	68b9      	ldr	r1, [r7, #8]
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	2300      	movs	r3, #0
 8005b44:	9303      	str	r3, [sp, #12]
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	9302      	str	r3, [sp, #8]
 8005b4a:	2318      	movs	r3, #24
 8005b4c:	18fb      	adds	r3, r7, r3
 8005b4e:	9301      	str	r3, [sp, #4]
 8005b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	0023      	movs	r3, r4
 8005b56:	f000 f80d 	bl	8005b74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	f000 f883 	bl	8005c68 <prvAddNewTaskToReadyList>
 8005b62:	e001      	b.n	8005b68 <xTaskCreateStatic+0x74>
		}
		else
		{
			xReturn = NULL;
 8005b64:	2300      	movs	r3, #0
 8005b66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b68:	69bb      	ldr	r3, [r7, #24]
	}
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	b009      	add	sp, #36	; 0x24
 8005b70:	bd90      	pop	{r4, r7, pc}
	...

08005b74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
 8005b80:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4936      	ldr	r1, [pc, #216]	; (8005c64 <prvInitialiseNewTask+0xf0>)
 8005b8a:	468c      	mov	ip, r1
 8005b8c:	4463      	add	r3, ip
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	18d3      	adds	r3, r2, r3
 8005b92:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	2207      	movs	r2, #7
 8005b98:	4393      	bics	r3, r2
 8005b9a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	2207      	movs	r2, #7
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	d001      	beq.n	8005ba8 <prvInitialiseNewTask+0x34>
 8005ba4:	b672      	cpsid	i
 8005ba6:	e7fe      	b.n	8005ba6 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ba8:	2300      	movs	r3, #0
 8005baa:	617b      	str	r3, [r7, #20]
 8005bac:	e013      	b.n	8005bd6 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	18d3      	adds	r3, r2, r3
 8005bb4:	7818      	ldrb	r0, [r3, #0]
 8005bb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bb8:	2134      	movs	r1, #52	; 0x34
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	18d3      	adds	r3, r2, r3
 8005bbe:	185b      	adds	r3, r3, r1
 8005bc0:	1c02      	adds	r2, r0, #0
 8005bc2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	18d3      	adds	r3, r2, r3
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d006      	beq.n	8005bde <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	617b      	str	r3, [r7, #20]
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2b0b      	cmp	r3, #11
 8005bda:	d9e8      	bls.n	8005bae <prvInitialiseNewTask+0x3a>
 8005bdc:	e000      	b.n	8005be0 <prvInitialiseNewTask+0x6c>
		{
			break;
 8005bde:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be2:	223f      	movs	r2, #63	; 0x3f
 8005be4:	2100      	movs	r1, #0
 8005be6:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	2b06      	cmp	r3, #6
 8005bec:	d901      	bls.n	8005bf2 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005bee:	2306      	movs	r3, #6
 8005bf0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf4:	6a3a      	ldr	r2, [r7, #32]
 8005bf6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfa:	6a3a      	ldr	r2, [r7, #32]
 8005bfc:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8005bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c00:	2200      	movs	r2, #0
 8005c02:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c06:	3304      	adds	r3, #4
 8005c08:	0018      	movs	r0, r3
 8005c0a:	f7ff fee8 	bl	80059de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c10:	3318      	adds	r3, #24
 8005c12:	0018      	movs	r0, r3
 8005c14:	f7ff fee3 	bl	80059de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c1c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	2207      	movs	r2, #7
 8005c22:	1ad2      	subs	r2, r2, r3
 8005c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c26:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c2c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c30:	2200      	movs	r2, #0
 8005c32:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c36:	224c      	movs	r2, #76	; 0x4c
 8005c38:	2100      	movs	r1, #0
 8005c3a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	68f9      	ldr	r1, [r7, #12]
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	0018      	movs	r0, r3
 8005c44:	f000 fb80 	bl	8006348 <pxPortInitialiseStack>
 8005c48:	0002      	movs	r2, r0
 8005c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c5a:	46c0      	nop			; (mov r8, r8)
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	b006      	add	sp, #24
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	46c0      	nop			; (mov r8, r8)
 8005c64:	3fffffff 	.word	0x3fffffff

08005c68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c70:	f000 fc06 	bl	8006480 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c74:	4b28      	ldr	r3, [pc, #160]	; (8005d18 <prvAddNewTaskToReadyList+0xb0>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	4b27      	ldr	r3, [pc, #156]	; (8005d18 <prvAddNewTaskToReadyList+0xb0>)
 8005c7c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005c7e:	4b27      	ldr	r3, [pc, #156]	; (8005d1c <prvAddNewTaskToReadyList+0xb4>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d109      	bne.n	8005c9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c86:	4b25      	ldr	r3, [pc, #148]	; (8005d1c <prvAddNewTaskToReadyList+0xb4>)
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c8c:	4b22      	ldr	r3, [pc, #136]	; (8005d18 <prvAddNewTaskToReadyList+0xb0>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d110      	bne.n	8005cb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c94:	f000 fab2 	bl	80061fc <prvInitialiseTaskLists>
 8005c98:	e00d      	b.n	8005cb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c9a:	4b21      	ldr	r3, [pc, #132]	; (8005d20 <prvAddNewTaskToReadyList+0xb8>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d109      	bne.n	8005cb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ca2:	4b1e      	ldr	r3, [pc, #120]	; (8005d1c <prvAddNewTaskToReadyList+0xb4>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d802      	bhi.n	8005cb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005cb0:	4b1a      	ldr	r3, [pc, #104]	; (8005d1c <prvAddNewTaskToReadyList+0xb4>)
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005cb6:	4b1b      	ldr	r3, [pc, #108]	; (8005d24 <prvAddNewTaskToReadyList+0xbc>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	4b19      	ldr	r3, [pc, #100]	; (8005d24 <prvAddNewTaskToReadyList+0xbc>)
 8005cbe:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc4:	4b18      	ldr	r3, [pc, #96]	; (8005d28 <prvAddNewTaskToReadyList+0xc0>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d903      	bls.n	8005cd4 <prvAddNewTaskToReadyList+0x6c>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd0:	4b15      	ldr	r3, [pc, #84]	; (8005d28 <prvAddNewTaskToReadyList+0xc0>)
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd8:	0013      	movs	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	189b      	adds	r3, r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4a12      	ldr	r2, [pc, #72]	; (8005d2c <prvAddNewTaskToReadyList+0xc4>)
 8005ce2:	189a      	adds	r2, r3, r2
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	0019      	movs	r1, r3
 8005cea:	0010      	movs	r0, r2
 8005cec:	f7ff fe82 	bl	80059f4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005cf0:	f000 fbd8 	bl	80064a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005cf4:	4b0a      	ldr	r3, [pc, #40]	; (8005d20 <prvAddNewTaskToReadyList+0xb8>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d008      	beq.n	8005d0e <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005cfc:	4b07      	ldr	r3, [pc, #28]	; (8005d1c <prvAddNewTaskToReadyList+0xb4>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d201      	bcs.n	8005d0e <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d0a:	f000 fba9 	bl	8006460 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d0e:	46c0      	nop			; (mov r8, r8)
 8005d10:	46bd      	mov	sp, r7
 8005d12:	b002      	add	sp, #8
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	46c0      	nop			; (mov r8, r8)
 8005d18:	20000374 	.word	0x20000374
 8005d1c:	200002a0 	.word	0x200002a0
 8005d20:	20000380 	.word	0x20000380
 8005d24:	20000390 	.word	0x20000390
 8005d28:	2000037c 	.word	0x2000037c
 8005d2c:	200002a4 	.word	0x200002a4

08005d30 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <vTaskDelayUntil+0x18>
 8005d44:	b672      	cpsid	i
 8005d46:	e7fe      	b.n	8005d46 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <vTaskDelayUntil+0x22>
 8005d4e:	b672      	cpsid	i
 8005d50:	e7fe      	b.n	8005d50 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
 8005d52:	4b23      	ldr	r3, [pc, #140]	; (8005de0 <vTaskDelayUntil+0xb0>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <vTaskDelayUntil+0x2e>
 8005d5a:	b672      	cpsid	i
 8005d5c:	e7fe      	b.n	8005d5c <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
 8005d5e:	f000 f891 	bl	8005e84 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005d62:	4b20      	ldr	r3, [pc, #128]	; (8005de4 <vTaskDelayUntil+0xb4>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	18d3      	adds	r3, r2, r3
 8005d70:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d20b      	bcs.n	8005d94 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d211      	bcs.n	8005daa <vTaskDelayUntil+0x7a>
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d90d      	bls.n	8005daa <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	617b      	str	r3, [r7, #20]
 8005d92:	e00a      	b.n	8005daa <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d303      	bcc.n	8005da6 <vTaskDelayUntil+0x76>
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d901      	bls.n	8005daa <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
 8005da6:	2301      	movs	r3, #1
 8005da8:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d006      	beq.n	8005dc4 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	0018      	movs	r0, r3
 8005dc0:	f000 fa7e 	bl	80062c0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005dc4:	f000 f86a 	bl	8005e9c <xTaskResumeAll>
 8005dc8:	0003      	movs	r3, r0
 8005dca:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
 8005dd2:	f000 fb45 	bl	8006460 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005dd6:	46c0      	nop			; (mov r8, r8)
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	b006      	add	sp, #24
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	46c0      	nop			; (mov r8, r8)
 8005de0:	2000039c 	.word	0x2000039c
 8005de4:	20000378 	.word	0x20000378

08005de8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005de8:	b590      	push	{r4, r7, lr}
 8005dea:	b089      	sub	sp, #36	; 0x24
 8005dec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005dee:	2300      	movs	r3, #0
 8005df0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005df2:	2300      	movs	r3, #0
 8005df4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005df6:	003a      	movs	r2, r7
 8005df8:	1d39      	adds	r1, r7, #4
 8005dfa:	2308      	movs	r3, #8
 8005dfc:	18fb      	adds	r3, r7, r3
 8005dfe:	0018      	movs	r0, r3
 8005e00:	f7fc fc96 	bl	8002730 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e04:	683c      	ldr	r4, [r7, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	4918      	ldr	r1, [pc, #96]	; (8005e6c <vTaskStartScheduler+0x84>)
 8005e0c:	4818      	ldr	r0, [pc, #96]	; (8005e70 <vTaskStartScheduler+0x88>)
 8005e0e:	9202      	str	r2, [sp, #8]
 8005e10:	9301      	str	r3, [sp, #4]
 8005e12:	2300      	movs	r3, #0
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	2300      	movs	r3, #0
 8005e18:	0022      	movs	r2, r4
 8005e1a:	f7ff fe6b 	bl	8005af4 <xTaskCreateStatic>
 8005e1e:	0002      	movs	r2, r0
 8005e20:	4b14      	ldr	r3, [pc, #80]	; (8005e74 <vTaskStartScheduler+0x8c>)
 8005e22:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e24:	4b13      	ldr	r3, [pc, #76]	; (8005e74 <vTaskStartScheduler+0x8c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d002      	beq.n	8005e32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	e001      	b.n	8005e36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e32:	2300      	movs	r3, #0
 8005e34:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d10d      	bne.n	8005e58 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8005e3c:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e3e:	4b0e      	ldr	r3, [pc, #56]	; (8005e78 <vTaskStartScheduler+0x90>)
 8005e40:	2201      	movs	r2, #1
 8005e42:	4252      	negs	r2, r2
 8005e44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005e46:	4b0d      	ldr	r3, [pc, #52]	; (8005e7c <vTaskStartScheduler+0x94>)
 8005e48:	2201      	movs	r2, #1
 8005e4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005e4c:	4b0c      	ldr	r3, [pc, #48]	; (8005e80 <vTaskStartScheduler+0x98>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e52:	f000 fae1 	bl	8006418 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e56:	e004      	b.n	8005e62 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	d101      	bne.n	8005e62 <vTaskStartScheduler+0x7a>
 8005e5e:	b672      	cpsid	i
 8005e60:	e7fe      	b.n	8005e60 <vTaskStartScheduler+0x78>
}
 8005e62:	46c0      	nop			; (mov r8, r8)
 8005e64:	46bd      	mov	sp, r7
 8005e66:	b005      	add	sp, #20
 8005e68:	bd90      	pop	{r4, r7, pc}
 8005e6a:	46c0      	nop			; (mov r8, r8)
 8005e6c:	08006698 	.word	0x08006698
 8005e70:	080061dd 	.word	0x080061dd
 8005e74:	20000398 	.word	0x20000398
 8005e78:	20000394 	.word	0x20000394
 8005e7c:	20000380 	.word	0x20000380
 8005e80:	20000378 	.word	0x20000378

08005e84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005e88:	4b03      	ldr	r3, [pc, #12]	; (8005e98 <vTaskSuspendAll+0x14>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	1c5a      	adds	r2, r3, #1
 8005e8e:	4b02      	ldr	r3, [pc, #8]	; (8005e98 <vTaskSuspendAll+0x14>)
 8005e90:	601a      	str	r2, [r3, #0]
}
 8005e92:	46c0      	nop			; (mov r8, r8)
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	2000039c 	.word	0x2000039c

08005e9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005eaa:	4b3a      	ldr	r3, [pc, #232]	; (8005f94 <xTaskResumeAll+0xf8>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <xTaskResumeAll+0x1a>
 8005eb2:	b672      	cpsid	i
 8005eb4:	e7fe      	b.n	8005eb4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005eb6:	f000 fae3 	bl	8006480 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005eba:	4b36      	ldr	r3, [pc, #216]	; (8005f94 <xTaskResumeAll+0xf8>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	1e5a      	subs	r2, r3, #1
 8005ec0:	4b34      	ldr	r3, [pc, #208]	; (8005f94 <xTaskResumeAll+0xf8>)
 8005ec2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ec4:	4b33      	ldr	r3, [pc, #204]	; (8005f94 <xTaskResumeAll+0xf8>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d15b      	bne.n	8005f84 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ecc:	4b32      	ldr	r3, [pc, #200]	; (8005f98 <xTaskResumeAll+0xfc>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d057      	beq.n	8005f84 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ed4:	e02f      	b.n	8005f36 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005ed6:	4b31      	ldr	r3, [pc, #196]	; (8005f9c <xTaskResumeAll+0x100>)
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3318      	adds	r3, #24
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	f7ff fdde 	bl	8005aa4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	3304      	adds	r3, #4
 8005eec:	0018      	movs	r0, r3
 8005eee:	f7ff fdd9 	bl	8005aa4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef6:	4b2a      	ldr	r3, [pc, #168]	; (8005fa0 <xTaskResumeAll+0x104>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d903      	bls.n	8005f06 <xTaskResumeAll+0x6a>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f02:	4b27      	ldr	r3, [pc, #156]	; (8005fa0 <xTaskResumeAll+0x104>)
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f0a:	0013      	movs	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	189b      	adds	r3, r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4a24      	ldr	r2, [pc, #144]	; (8005fa4 <xTaskResumeAll+0x108>)
 8005f14:	189a      	adds	r2, r3, r2
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	3304      	adds	r3, #4
 8005f1a:	0019      	movs	r1, r3
 8005f1c:	0010      	movs	r0, r2
 8005f1e:	f7ff fd69 	bl	80059f4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f26:	4b20      	ldr	r3, [pc, #128]	; (8005fa8 <xTaskResumeAll+0x10c>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d302      	bcc.n	8005f36 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8005f30:	4b1e      	ldr	r3, [pc, #120]	; (8005fac <xTaskResumeAll+0x110>)
 8005f32:	2201      	movs	r2, #1
 8005f34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f36:	4b19      	ldr	r3, [pc, #100]	; (8005f9c <xTaskResumeAll+0x100>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1cb      	bne.n	8005ed6 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f44:	f000 f998 	bl	8006278 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005f48:	4b19      	ldr	r3, [pc, #100]	; (8005fb0 <xTaskResumeAll+0x114>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00f      	beq.n	8005f74 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f54:	f000 f83c 	bl	8005fd0 <xTaskIncrementTick>
 8005f58:	1e03      	subs	r3, r0, #0
 8005f5a:	d002      	beq.n	8005f62 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8005f5c:	4b13      	ldr	r3, [pc, #76]	; (8005fac <xTaskResumeAll+0x110>)
 8005f5e:	2201      	movs	r2, #1
 8005f60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3b01      	subs	r3, #1
 8005f66:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1f2      	bne.n	8005f54 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8005f6e:	4b10      	ldr	r3, [pc, #64]	; (8005fb0 <xTaskResumeAll+0x114>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f74:	4b0d      	ldr	r3, [pc, #52]	; (8005fac <xTaskResumeAll+0x110>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f80:	f000 fa6e 	bl	8006460 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f84:	f000 fa8e 	bl	80064a4 <vPortExitCritical>

	return xAlreadyYielded;
 8005f88:	68bb      	ldr	r3, [r7, #8]
}
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	b004      	add	sp, #16
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	46c0      	nop			; (mov r8, r8)
 8005f94:	2000039c 	.word	0x2000039c
 8005f98:	20000374 	.word	0x20000374
 8005f9c:	20000360 	.word	0x20000360
 8005fa0:	2000037c 	.word	0x2000037c
 8005fa4:	200002a4 	.word	0x200002a4
 8005fa8:	200002a0 	.word	0x200002a0
 8005fac:	20000388 	.word	0x20000388
 8005fb0:	20000384 	.word	0x20000384

08005fb4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005fba:	4b04      	ldr	r3, [pc, #16]	; (8005fcc <xTaskGetTickCount+0x18>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005fc0:	687b      	ldr	r3, [r7, #4]
}
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	b002      	add	sp, #8
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	46c0      	nop			; (mov r8, r8)
 8005fcc:	20000378 	.word	0x20000378

08005fd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fda:	4b4c      	ldr	r3, [pc, #304]	; (800610c <xTaskIncrementTick+0x13c>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d000      	beq.n	8005fe4 <xTaskIncrementTick+0x14>
 8005fe2:	e083      	b.n	80060ec <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005fe4:	4b4a      	ldr	r3, [pc, #296]	; (8006110 <xTaskIncrementTick+0x140>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005fec:	4b48      	ldr	r3, [pc, #288]	; (8006110 <xTaskIncrementTick+0x140>)
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d117      	bne.n	8006028 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ff8:	4b46      	ldr	r3, [pc, #280]	; (8006114 <xTaskIncrementTick+0x144>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d001      	beq.n	8006006 <xTaskIncrementTick+0x36>
 8006002:	b672      	cpsid	i
 8006004:	e7fe      	b.n	8006004 <xTaskIncrementTick+0x34>
 8006006:	4b43      	ldr	r3, [pc, #268]	; (8006114 <xTaskIncrementTick+0x144>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	60fb      	str	r3, [r7, #12]
 800600c:	4b42      	ldr	r3, [pc, #264]	; (8006118 <xTaskIncrementTick+0x148>)
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	4b40      	ldr	r3, [pc, #256]	; (8006114 <xTaskIncrementTick+0x144>)
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	4b40      	ldr	r3, [pc, #256]	; (8006118 <xTaskIncrementTick+0x148>)
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	4b40      	ldr	r3, [pc, #256]	; (800611c <xTaskIncrementTick+0x14c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	1c5a      	adds	r2, r3, #1
 8006020:	4b3e      	ldr	r3, [pc, #248]	; (800611c <xTaskIncrementTick+0x14c>)
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	f000 f928 	bl	8006278 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006028:	4b3d      	ldr	r3, [pc, #244]	; (8006120 <xTaskIncrementTick+0x150>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	429a      	cmp	r2, r3
 8006030:	d34e      	bcc.n	80060d0 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006032:	4b38      	ldr	r3, [pc, #224]	; (8006114 <xTaskIncrementTick+0x144>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <xTaskIncrementTick+0x70>
 800603c:	2301      	movs	r3, #1
 800603e:	e000      	b.n	8006042 <xTaskIncrementTick+0x72>
 8006040:	2300      	movs	r3, #0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d004      	beq.n	8006050 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006046:	4b36      	ldr	r3, [pc, #216]	; (8006120 <xTaskIncrementTick+0x150>)
 8006048:	2201      	movs	r2, #1
 800604a:	4252      	negs	r2, r2
 800604c:	601a      	str	r2, [r3, #0]
					break;
 800604e:	e03f      	b.n	80060d0 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006050:	4b30      	ldr	r3, [pc, #192]	; (8006114 <xTaskIncrementTick+0x144>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	429a      	cmp	r2, r3
 8006066:	d203      	bcs.n	8006070 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006068:	4b2d      	ldr	r3, [pc, #180]	; (8006120 <xTaskIncrementTick+0x150>)
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	601a      	str	r2, [r3, #0]
						break;
 800606e:	e02f      	b.n	80060d0 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	3304      	adds	r3, #4
 8006074:	0018      	movs	r0, r3
 8006076:	f7ff fd15 	bl	8005aa4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607e:	2b00      	cmp	r3, #0
 8006080:	d004      	beq.n	800608c <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	3318      	adds	r3, #24
 8006086:	0018      	movs	r0, r3
 8006088:	f7ff fd0c 	bl	8005aa4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006090:	4b24      	ldr	r3, [pc, #144]	; (8006124 <xTaskIncrementTick+0x154>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	429a      	cmp	r2, r3
 8006096:	d903      	bls.n	80060a0 <xTaskIncrementTick+0xd0>
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609c:	4b21      	ldr	r3, [pc, #132]	; (8006124 <xTaskIncrementTick+0x154>)
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a4:	0013      	movs	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	189b      	adds	r3, r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4a1e      	ldr	r2, [pc, #120]	; (8006128 <xTaskIncrementTick+0x158>)
 80060ae:	189a      	adds	r2, r3, r2
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	3304      	adds	r3, #4
 80060b4:	0019      	movs	r1, r3
 80060b6:	0010      	movs	r0, r2
 80060b8:	f7ff fc9c 	bl	80059f4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c0:	4b1a      	ldr	r3, [pc, #104]	; (800612c <xTaskIncrementTick+0x15c>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d3b3      	bcc.n	8006032 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80060ca:	2301      	movs	r3, #1
 80060cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060ce:	e7b0      	b.n	8006032 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060d0:	4b16      	ldr	r3, [pc, #88]	; (800612c <xTaskIncrementTick+0x15c>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d6:	4914      	ldr	r1, [pc, #80]	; (8006128 <xTaskIncrementTick+0x158>)
 80060d8:	0013      	movs	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	189b      	adds	r3, r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	585b      	ldr	r3, [r3, r1]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d907      	bls.n	80060f6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80060e6:	2301      	movs	r3, #1
 80060e8:	617b      	str	r3, [r7, #20]
 80060ea:	e004      	b.n	80060f6 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80060ec:	4b10      	ldr	r3, [pc, #64]	; (8006130 <xTaskIncrementTick+0x160>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	4b0f      	ldr	r3, [pc, #60]	; (8006130 <xTaskIncrementTick+0x160>)
 80060f4:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80060f6:	4b0f      	ldr	r3, [pc, #60]	; (8006134 <xTaskIncrementTick+0x164>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 80060fe:	2301      	movs	r3, #1
 8006100:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006102:	697b      	ldr	r3, [r7, #20]
}
 8006104:	0018      	movs	r0, r3
 8006106:	46bd      	mov	sp, r7
 8006108:	b006      	add	sp, #24
 800610a:	bd80      	pop	{r7, pc}
 800610c:	2000039c 	.word	0x2000039c
 8006110:	20000378 	.word	0x20000378
 8006114:	20000358 	.word	0x20000358
 8006118:	2000035c 	.word	0x2000035c
 800611c:	2000038c 	.word	0x2000038c
 8006120:	20000394 	.word	0x20000394
 8006124:	2000037c 	.word	0x2000037c
 8006128:	200002a4 	.word	0x200002a4
 800612c:	200002a0 	.word	0x200002a0
 8006130:	20000384 	.word	0x20000384
 8006134:	20000388 	.word	0x20000388

08006138 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800613e:	4b22      	ldr	r3, [pc, #136]	; (80061c8 <vTaskSwitchContext+0x90>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006146:	4b21      	ldr	r3, [pc, #132]	; (80061cc <vTaskSwitchContext+0x94>)
 8006148:	2201      	movs	r2, #1
 800614a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800614c:	e037      	b.n	80061be <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800614e:	4b1f      	ldr	r3, [pc, #124]	; (80061cc <vTaskSwitchContext+0x94>)
 8006150:	2200      	movs	r2, #0
 8006152:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006154:	4b1e      	ldr	r3, [pc, #120]	; (80061d0 <vTaskSwitchContext+0x98>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	607b      	str	r3, [r7, #4]
 800615a:	e007      	b.n	800616c <vTaskSwitchContext+0x34>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <vTaskSwitchContext+0x2e>
 8006162:	b672      	cpsid	i
 8006164:	e7fe      	b.n	8006164 <vTaskSwitchContext+0x2c>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3b01      	subs	r3, #1
 800616a:	607b      	str	r3, [r7, #4]
 800616c:	4919      	ldr	r1, [pc, #100]	; (80061d4 <vTaskSwitchContext+0x9c>)
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	0013      	movs	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	189b      	adds	r3, r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	585b      	ldr	r3, [r3, r1]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d0ee      	beq.n	800615c <vTaskSwitchContext+0x24>
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	0013      	movs	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	189b      	adds	r3, r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4a12      	ldr	r2, [pc, #72]	; (80061d4 <vTaskSwitchContext+0x9c>)
 800618a:	189b      	adds	r3, r3, r2
 800618c:	603b      	str	r3, [r7, #0]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	605a      	str	r2, [r3, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	3308      	adds	r3, #8
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d104      	bne.n	80061ae <vTaskSwitchContext+0x76>
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	605a      	str	r2, [r3, #4]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	68da      	ldr	r2, [r3, #12]
 80061b4:	4b08      	ldr	r3, [pc, #32]	; (80061d8 <vTaskSwitchContext+0xa0>)
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	4b05      	ldr	r3, [pc, #20]	; (80061d0 <vTaskSwitchContext+0x98>)
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	601a      	str	r2, [r3, #0]
}
 80061be:	46c0      	nop			; (mov r8, r8)
 80061c0:	46bd      	mov	sp, r7
 80061c2:	b002      	add	sp, #8
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	46c0      	nop			; (mov r8, r8)
 80061c8:	2000039c 	.word	0x2000039c
 80061cc:	20000388 	.word	0x20000388
 80061d0:	2000037c 	.word	0x2000037c
 80061d4:	200002a4 	.word	0x200002a4
 80061d8:	200002a0 	.word	0x200002a0

080061dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80061e4:	f000 f842 	bl	800626c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80061e8:	4b03      	ldr	r3, [pc, #12]	; (80061f8 <prvIdleTask+0x1c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d9f9      	bls.n	80061e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80061f0:	f000 f936 	bl	8006460 <vPortYield>
		prvCheckTasksWaitingTermination();
 80061f4:	e7f6      	b.n	80061e4 <prvIdleTask+0x8>
 80061f6:	46c0      	nop			; (mov r8, r8)
 80061f8:	200002a4 	.word	0x200002a4

080061fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006202:	2300      	movs	r3, #0
 8006204:	607b      	str	r3, [r7, #4]
 8006206:	e00c      	b.n	8006222 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	0013      	movs	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	189b      	adds	r3, r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4a10      	ldr	r2, [pc, #64]	; (8006254 <prvInitialiseTaskLists+0x58>)
 8006214:	189b      	adds	r3, r3, r2
 8006216:	0018      	movs	r0, r3
 8006218:	f7ff fbc3 	bl	80059a2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	3301      	adds	r3, #1
 8006220:	607b      	str	r3, [r7, #4]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b06      	cmp	r3, #6
 8006226:	d9ef      	bls.n	8006208 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006228:	4b0b      	ldr	r3, [pc, #44]	; (8006258 <prvInitialiseTaskLists+0x5c>)
 800622a:	0018      	movs	r0, r3
 800622c:	f7ff fbb9 	bl	80059a2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006230:	4b0a      	ldr	r3, [pc, #40]	; (800625c <prvInitialiseTaskLists+0x60>)
 8006232:	0018      	movs	r0, r3
 8006234:	f7ff fbb5 	bl	80059a2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006238:	4b09      	ldr	r3, [pc, #36]	; (8006260 <prvInitialiseTaskLists+0x64>)
 800623a:	0018      	movs	r0, r3
 800623c:	f7ff fbb1 	bl	80059a2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006240:	4b08      	ldr	r3, [pc, #32]	; (8006264 <prvInitialiseTaskLists+0x68>)
 8006242:	4a05      	ldr	r2, [pc, #20]	; (8006258 <prvInitialiseTaskLists+0x5c>)
 8006244:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006246:	4b08      	ldr	r3, [pc, #32]	; (8006268 <prvInitialiseTaskLists+0x6c>)
 8006248:	4a04      	ldr	r2, [pc, #16]	; (800625c <prvInitialiseTaskLists+0x60>)
 800624a:	601a      	str	r2, [r3, #0]
}
 800624c:	46c0      	nop			; (mov r8, r8)
 800624e:	46bd      	mov	sp, r7
 8006250:	b002      	add	sp, #8
 8006252:	bd80      	pop	{r7, pc}
 8006254:	200002a4 	.word	0x200002a4
 8006258:	20000330 	.word	0x20000330
 800625c:	20000344 	.word	0x20000344
 8006260:	20000360 	.word	0x20000360
 8006264:	20000358 	.word	0x20000358
 8006268:	2000035c 	.word	0x2000035c

0800626c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006270:	46c0      	nop			; (mov r8, r8)
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800627e:	4b0e      	ldr	r3, [pc, #56]	; (80062b8 <prvResetNextTaskUnblockTime+0x40>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <prvResetNextTaskUnblockTime+0x14>
 8006288:	2301      	movs	r3, #1
 800628a:	e000      	b.n	800628e <prvResetNextTaskUnblockTime+0x16>
 800628c:	2300      	movs	r3, #0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d004      	beq.n	800629c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006292:	4b0a      	ldr	r3, [pc, #40]	; (80062bc <prvResetNextTaskUnblockTime+0x44>)
 8006294:	2201      	movs	r2, #1
 8006296:	4252      	negs	r2, r2
 8006298:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800629a:	e008      	b.n	80062ae <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800629c:	4b06      	ldr	r3, [pc, #24]	; (80062b8 <prvResetNextTaskUnblockTime+0x40>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	4b04      	ldr	r3, [pc, #16]	; (80062bc <prvResetNextTaskUnblockTime+0x44>)
 80062ac:	601a      	str	r2, [r3, #0]
}
 80062ae:	46c0      	nop			; (mov r8, r8)
 80062b0:	46bd      	mov	sp, r7
 80062b2:	b002      	add	sp, #8
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	46c0      	nop			; (mov r8, r8)
 80062b8:	20000358 	.word	0x20000358
 80062bc:	20000394 	.word	0x20000394

080062c0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80062ca:	4b1a      	ldr	r3, [pc, #104]	; (8006334 <prvAddCurrentTaskToDelayedList+0x74>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062d0:	4b19      	ldr	r3, [pc, #100]	; (8006338 <prvAddCurrentTaskToDelayedList+0x78>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3304      	adds	r3, #4
 80062d6:	0018      	movs	r0, r3
 80062d8:	f7ff fbe4 	bl	8005aa4 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	18d3      	adds	r3, r2, r3
 80062e2:	60bb      	str	r3, [r7, #8]

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062e4:	4b14      	ldr	r3, [pc, #80]	; (8006338 <prvAddCurrentTaskToDelayedList+0x78>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	605a      	str	r2, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d209      	bcs.n	8006308 <prvAddCurrentTaskToDelayedList+0x48>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062f4:	4b11      	ldr	r3, [pc, #68]	; (800633c <prvAddCurrentTaskToDelayedList+0x7c>)
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	4b0f      	ldr	r3, [pc, #60]	; (8006338 <prvAddCurrentTaskToDelayedList+0x78>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3304      	adds	r3, #4
 80062fe:	0019      	movs	r1, r3
 8006300:	0010      	movs	r0, r2
 8006302:	f7ff fb99 	bl	8005a38 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006306:	e010      	b.n	800632a <prvAddCurrentTaskToDelayedList+0x6a>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006308:	4b0d      	ldr	r3, [pc, #52]	; (8006340 <prvAddCurrentTaskToDelayedList+0x80>)
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	4b0a      	ldr	r3, [pc, #40]	; (8006338 <prvAddCurrentTaskToDelayedList+0x78>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3304      	adds	r3, #4
 8006312:	0019      	movs	r1, r3
 8006314:	0010      	movs	r0, r2
 8006316:	f7ff fb8f 	bl	8005a38 <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 800631a:	4b0a      	ldr	r3, [pc, #40]	; (8006344 <prvAddCurrentTaskToDelayedList+0x84>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	429a      	cmp	r2, r3
 8006322:	d202      	bcs.n	800632a <prvAddCurrentTaskToDelayedList+0x6a>
				xNextTaskUnblockTime = xTimeToWake;
 8006324:	4b07      	ldr	r3, [pc, #28]	; (8006344 <prvAddCurrentTaskToDelayedList+0x84>)
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	601a      	str	r2, [r3, #0]
}
 800632a:	46c0      	nop			; (mov r8, r8)
 800632c:	46bd      	mov	sp, r7
 800632e:	b004      	add	sp, #16
 8006330:	bd80      	pop	{r7, pc}
 8006332:	46c0      	nop			; (mov r8, r8)
 8006334:	20000378 	.word	0x20000378
 8006338:	200002a0 	.word	0x200002a0
 800633c:	2000035c 	.word	0x2000035c
 8006340:	20000358 	.word	0x20000358
 8006344:	20000394 	.word	0x20000394

08006348 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	3b04      	subs	r3, #4
 8006358:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2280      	movs	r2, #128	; 0x80
 800635e:	0452      	lsls	r2, r2, #17
 8006360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3b04      	subs	r3, #4
 8006366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	3b04      	subs	r3, #4
 8006372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006374:	4a08      	ldr	r2, [pc, #32]	; (8006398 <pxPortInitialiseStack+0x50>)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	3b14      	subs	r3, #20
 800637e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	3b20      	subs	r3, #32
 800638a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800638c:	68fb      	ldr	r3, [r7, #12]
}
 800638e:	0018      	movs	r0, r3
 8006390:	46bd      	mov	sp, r7
 8006392:	b004      	add	sp, #16
 8006394:	bd80      	pop	{r7, pc}
 8006396:	46c0      	nop			; (mov r8, r8)
 8006398:	0800639d 	.word	0x0800639d

0800639c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80063a2:	2300      	movs	r3, #0
 80063a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063a6:	4b07      	ldr	r3, [pc, #28]	; (80063c4 <prvTaskExitError+0x28>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3301      	adds	r3, #1
 80063ac:	d001      	beq.n	80063b2 <prvTaskExitError+0x16>
 80063ae:	b672      	cpsid	i
 80063b0:	e7fe      	b.n	80063b0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80063b2:	b672      	cpsid	i
	while( ulDummy == 0 )
 80063b4:	46c0      	nop			; (mov r8, r8)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d0fc      	beq.n	80063b6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80063bc:	46c0      	nop			; (mov r8, r8)
 80063be:	46bd      	mov	sp, r7
 80063c0:	b002      	add	sp, #8
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	20000014 	.word	0x20000014

080063c8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80063cc:	46c0      	nop			; (mov r8, r8)
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
	...

080063e0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80063e0:	4a0b      	ldr	r2, [pc, #44]	; (8006410 <pxCurrentTCBConst2>)
 80063e2:	6813      	ldr	r3, [r2, #0]
 80063e4:	6818      	ldr	r0, [r3, #0]
 80063e6:	3020      	adds	r0, #32
 80063e8:	f380 8809 	msr	PSP, r0
 80063ec:	2002      	movs	r0, #2
 80063ee:	f380 8814 	msr	CONTROL, r0
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80063f8:	46ae      	mov	lr, r5
 80063fa:	bc08      	pop	{r3}
 80063fc:	bc04      	pop	{r2}
 80063fe:	b662      	cpsie	i
 8006400:	4718      	bx	r3
 8006402:	46c0      	nop			; (mov r8, r8)
 8006404:	46c0      	nop			; (mov r8, r8)
 8006406:	46c0      	nop			; (mov r8, r8)
 8006408:	46c0      	nop			; (mov r8, r8)
 800640a:	46c0      	nop			; (mov r8, r8)
 800640c:	46c0      	nop			; (mov r8, r8)
 800640e:	46c0      	nop			; (mov r8, r8)

08006410 <pxCurrentTCBConst2>:
 8006410:	200002a0 	.word	0x200002a0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8006414:	46c0      	nop			; (mov r8, r8)
 8006416:	46c0      	nop			; (mov r8, r8)

08006418 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800641c:	4b0e      	ldr	r3, [pc, #56]	; (8006458 <xPortStartScheduler+0x40>)
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	4b0d      	ldr	r3, [pc, #52]	; (8006458 <xPortStartScheduler+0x40>)
 8006422:	21ff      	movs	r1, #255	; 0xff
 8006424:	0409      	lsls	r1, r1, #16
 8006426:	430a      	orrs	r2, r1
 8006428:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800642a:	4b0b      	ldr	r3, [pc, #44]	; (8006458 <xPortStartScheduler+0x40>)
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	4b0a      	ldr	r3, [pc, #40]	; (8006458 <xPortStartScheduler+0x40>)
 8006430:	21ff      	movs	r1, #255	; 0xff
 8006432:	0609      	lsls	r1, r1, #24
 8006434:	430a      	orrs	r2, r1
 8006436:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8006438:	f000 f898 	bl	800656c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800643c:	4b07      	ldr	r3, [pc, #28]	; (800645c <xPortStartScheduler+0x44>)
 800643e:	2200      	movs	r2, #0
 8006440:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8006442:	f7ff ffcd 	bl	80063e0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006446:	f7ff fe77 	bl	8006138 <vTaskSwitchContext>
	prvTaskExitError();
 800644a:	f7ff ffa7 	bl	800639c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800644e:	2300      	movs	r3, #0
}
 8006450:	0018      	movs	r0, r3
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	46c0      	nop			; (mov r8, r8)
 8006458:	e000ed20 	.word	0xe000ed20
 800645c:	20000014 	.word	0x20000014

08006460 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8006464:	4b05      	ldr	r3, [pc, #20]	; (800647c <vPortYield+0x1c>)
 8006466:	2280      	movs	r2, #128	; 0x80
 8006468:	0552      	lsls	r2, r2, #21
 800646a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800646c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006470:	f3bf 8f6f 	isb	sy
}
 8006474:	46c0      	nop			; (mov r8, r8)
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	46c0      	nop			; (mov r8, r8)
 800647c:	e000ed04 	.word	0xe000ed04

08006480 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8006484:	b672      	cpsid	i
    uxCriticalNesting++;
 8006486:	4b06      	ldr	r3, [pc, #24]	; (80064a0 <vPortEnterCritical+0x20>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	1c5a      	adds	r2, r3, #1
 800648c:	4b04      	ldr	r3, [pc, #16]	; (80064a0 <vPortEnterCritical+0x20>)
 800648e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8006490:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006494:	f3bf 8f6f 	isb	sy
}
 8006498:	46c0      	nop			; (mov r8, r8)
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	46c0      	nop			; (mov r8, r8)
 80064a0:	20000014 	.word	0x20000014

080064a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064a8:	4b09      	ldr	r3, [pc, #36]	; (80064d0 <vPortExitCritical+0x2c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d101      	bne.n	80064b4 <vPortExitCritical+0x10>
 80064b0:	b672      	cpsid	i
 80064b2:	e7fe      	b.n	80064b2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80064b4:	4b06      	ldr	r3, [pc, #24]	; (80064d0 <vPortExitCritical+0x2c>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	1e5a      	subs	r2, r3, #1
 80064ba:	4b05      	ldr	r3, [pc, #20]	; (80064d0 <vPortExitCritical+0x2c>)
 80064bc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80064be:	4b04      	ldr	r3, [pc, #16]	; (80064d0 <vPortExitCritical+0x2c>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d100      	bne.n	80064c8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80064c6:	b662      	cpsie	i
    }
}
 80064c8:	46c0      	nop			; (mov r8, r8)
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	46c0      	nop			; (mov r8, r8)
 80064d0:	20000014 	.word	0x20000014

080064d4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80064d4:	f3ef 8010 	mrs	r0, PRIMASK
 80064d8:	b672      	cpsid	i
 80064da:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80064dc:	46c0      	nop			; (mov r8, r8)
 80064de:	0018      	movs	r0, r3

080064e0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80064e0:	f380 8810 	msr	PRIMASK, r0
 80064e4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80064e6:	46c0      	nop			; (mov r8, r8)
	...

080064f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064f0:	f3ef 8009 	mrs	r0, PSP
 80064f4:	4b0e      	ldr	r3, [pc, #56]	; (8006530 <pxCurrentTCBConst>)
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	3820      	subs	r0, #32
 80064fa:	6010      	str	r0, [r2, #0]
 80064fc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80064fe:	4644      	mov	r4, r8
 8006500:	464d      	mov	r5, r9
 8006502:	4656      	mov	r6, sl
 8006504:	465f      	mov	r7, fp
 8006506:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006508:	b508      	push	{r3, lr}
 800650a:	b672      	cpsid	i
 800650c:	f7ff fe14 	bl	8006138 <vTaskSwitchContext>
 8006510:	b662      	cpsie	i
 8006512:	bc0c      	pop	{r2, r3}
 8006514:	6811      	ldr	r1, [r2, #0]
 8006516:	6808      	ldr	r0, [r1, #0]
 8006518:	3010      	adds	r0, #16
 800651a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800651c:	46a0      	mov	r8, r4
 800651e:	46a9      	mov	r9, r5
 8006520:	46b2      	mov	sl, r6
 8006522:	46bb      	mov	fp, r7
 8006524:	f380 8809 	msr	PSP, r0
 8006528:	3820      	subs	r0, #32
 800652a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800652c:	4718      	bx	r3
 800652e:	46c0      	nop			; (mov r8, r8)

08006530 <pxCurrentTCBConst>:
 8006530:	200002a0 	.word	0x200002a0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8006534:	46c0      	nop			; (mov r8, r8)
 8006536:	46c0      	nop			; (mov r8, r8)

08006538 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800653e:	f7ff ffc9 	bl	80064d4 <ulSetInterruptMaskFromISR>
 8006542:	0003      	movs	r3, r0
 8006544:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006546:	f7ff fd43 	bl	8005fd0 <xTaskIncrementTick>
 800654a:	1e03      	subs	r3, r0, #0
 800654c:	d003      	beq.n	8006556 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800654e:	4b06      	ldr	r3, [pc, #24]	; (8006568 <SysTick_Handler+0x30>)
 8006550:	2280      	movs	r2, #128	; 0x80
 8006552:	0552      	lsls	r2, r2, #21
 8006554:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	0018      	movs	r0, r3
 800655a:	f7ff ffc1 	bl	80064e0 <vClearInterruptMaskFromISR>
}
 800655e:	46c0      	nop			; (mov r8, r8)
 8006560:	46bd      	mov	sp, r7
 8006562:	b002      	add	sp, #8
 8006564:	bd80      	pop	{r7, pc}
 8006566:	46c0      	nop			; (mov r8, r8)
 8006568:	e000ed04 	.word	0xe000ed04

0800656c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800656c:	b580      	push	{r7, lr}
 800656e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8006570:	4b0b      	ldr	r3, [pc, #44]	; (80065a0 <prvSetupTimerInterrupt+0x34>)
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8006576:	4b0b      	ldr	r3, [pc, #44]	; (80065a4 <prvSetupTimerInterrupt+0x38>)
 8006578:	2200      	movs	r2, #0
 800657a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800657c:	4b0a      	ldr	r3, [pc, #40]	; (80065a8 <prvSetupTimerInterrupt+0x3c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	490a      	ldr	r1, [pc, #40]	; (80065ac <prvSetupTimerInterrupt+0x40>)
 8006582:	0018      	movs	r0, r3
 8006584:	f7f9 fdc0 	bl	8000108 <__udivsi3>
 8006588:	0003      	movs	r3, r0
 800658a:	001a      	movs	r2, r3
 800658c:	4b08      	ldr	r3, [pc, #32]	; (80065b0 <prvSetupTimerInterrupt+0x44>)
 800658e:	3a01      	subs	r2, #1
 8006590:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8006592:	4b03      	ldr	r3, [pc, #12]	; (80065a0 <prvSetupTimerInterrupt+0x34>)
 8006594:	2207      	movs	r2, #7
 8006596:	601a      	str	r2, [r3, #0]
}
 8006598:	46c0      	nop			; (mov r8, r8)
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	46c0      	nop			; (mov r8, r8)
 80065a0:	e000e010 	.word	0xe000e010
 80065a4:	e000e018 	.word	0xe000e018
 80065a8:	2000000c 	.word	0x2000000c
 80065ac:	00002710 	.word	0x00002710
 80065b0:	e000e014 	.word	0xe000e014

080065b4 <abs>:
 80065b4:	17c3      	asrs	r3, r0, #31
 80065b6:	18c0      	adds	r0, r0, r3
 80065b8:	4058      	eors	r0, r3
 80065ba:	4770      	bx	lr

080065bc <__libc_init_array>:
 80065bc:	b570      	push	{r4, r5, r6, lr}
 80065be:	2600      	movs	r6, #0
 80065c0:	4d0c      	ldr	r5, [pc, #48]	; (80065f4 <__libc_init_array+0x38>)
 80065c2:	4c0d      	ldr	r4, [pc, #52]	; (80065f8 <__libc_init_array+0x3c>)
 80065c4:	1b64      	subs	r4, r4, r5
 80065c6:	10a4      	asrs	r4, r4, #2
 80065c8:	42a6      	cmp	r6, r4
 80065ca:	d109      	bne.n	80065e0 <__libc_init_array+0x24>
 80065cc:	2600      	movs	r6, #0
 80065ce:	f000 f821 	bl	8006614 <_init>
 80065d2:	4d0a      	ldr	r5, [pc, #40]	; (80065fc <__libc_init_array+0x40>)
 80065d4:	4c0a      	ldr	r4, [pc, #40]	; (8006600 <__libc_init_array+0x44>)
 80065d6:	1b64      	subs	r4, r4, r5
 80065d8:	10a4      	asrs	r4, r4, #2
 80065da:	42a6      	cmp	r6, r4
 80065dc:	d105      	bne.n	80065ea <__libc_init_array+0x2e>
 80065de:	bd70      	pop	{r4, r5, r6, pc}
 80065e0:	00b3      	lsls	r3, r6, #2
 80065e2:	58eb      	ldr	r3, [r5, r3]
 80065e4:	4798      	blx	r3
 80065e6:	3601      	adds	r6, #1
 80065e8:	e7ee      	b.n	80065c8 <__libc_init_array+0xc>
 80065ea:	00b3      	lsls	r3, r6, #2
 80065ec:	58eb      	ldr	r3, [r5, r3]
 80065ee:	4798      	blx	r3
 80065f0:	3601      	adds	r6, #1
 80065f2:	e7f2      	b.n	80065da <__libc_init_array+0x1e>
 80065f4:	080067b8 	.word	0x080067b8
 80065f8:	080067b8 	.word	0x080067b8
 80065fc:	080067b8 	.word	0x080067b8
 8006600:	080067bc 	.word	0x080067bc

08006604 <memset>:
 8006604:	0003      	movs	r3, r0
 8006606:	1812      	adds	r2, r2, r0
 8006608:	4293      	cmp	r3, r2
 800660a:	d100      	bne.n	800660e <memset+0xa>
 800660c:	4770      	bx	lr
 800660e:	7019      	strb	r1, [r3, #0]
 8006610:	3301      	adds	r3, #1
 8006612:	e7f9      	b.n	8006608 <memset+0x4>

08006614 <_init>:
 8006614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006616:	46c0      	nop			; (mov r8, r8)
 8006618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800661a:	bc08      	pop	{r3}
 800661c:	469e      	mov	lr, r3
 800661e:	4770      	bx	lr

08006620 <_fini>:
 8006620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006622:	46c0      	nop			; (mov r8, r8)
 8006624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006626:	bc08      	pop	{r3}
 8006628:	469e      	mov	lr, r3
 800662a:	4770      	bx	lr
